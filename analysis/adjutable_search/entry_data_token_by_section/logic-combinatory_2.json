{
    "main_text": "Sch\u00f6nfinkel\u2019s elimination of bound variables || Alternative approaches: basic logic and predicate functors\n1.3 Alternative approaches: basic logic and predicate functors\n\nIn this section we briefly outline two ideas that are related to\nSch\u00f6nfinkel\u2019s work or are motivated by his use of combinators in\nthe elimination of bound variables.\n\nFitch\u2019s metalogic\n\nFrom the late 1930s, Frederic Fitch worked on a logic that he called\nbasic logic. The label is motivated by his aim to provide a\nframework in which any logic could be formalized. Fitch\u2019s approach is\nutterly syntactic (much like Sch\u00f6nfinkel\u2019s), and\n\u201cformalization\u201d is to be understood as encoding a\nformally described system in another\u2014not unlike the\narithmetization of the syntax in G\u00f6del\u2019s incompleteness\ntheorem.\n\nIn 1942, Fitch introduced a logic that he labeled \\(K\\). The\nexpressions in \\(K\\) are formed like combinatory terms by a binary\napplication operation, which is not assumed to be associative. (See\nthe definition of combinatory terms in the next section.) However, the\nconstants of \\(K\\) do not coincide with the constants of pure CL.\nFitch uses 10 constants: \\(\\varepsilon\\), \\(o\\), \\(\\acute{\\varepsilon}\\), \n\\(\\acute{o}\\), \\(W\\), \\(=\\), \\(\\land\\), \\(\\lor\\), \\(E\\) \nand \\(*\\). The first five constants are combinators, though the notation may\nsuggest a different (informal) meaning. \u2018\\(=\\)\u2019 is the syntactical\nidentity of expressions. \u2018\\(\\land\\)\u2019 and \u2018\\(\\lor\\)\u2019\nare intended to stand for \u201cand\u201d and \u201cor.\u201d\n\u2018\\(E\\)\u2019 is the analogue of Sch\u00f6nfinkel\u2019s \n\\(U\\), but it corresponds to a non-vacuous existential\nquantifier. Finally, \u2018\\(*\\)\u2019 is similar to the transitive closure\noperator for binary relations or the Kleene star. Notably, there is no\nnegation or universal quantifier in the system. The uses of the constants are\ncharacterized as follows\u2014somewhat like axioms characterize\ncombinators.\n\n\\(=ab\\) \u00a0 if and only if \u00a0 \\(a\\) and \n\\(b\\) are (syntactically) the same expression\n\\(\\varepsilon ab\\) \u00a0 if and only if \u00a0 \\(ba\\)\n\\(oabc\\)\u00a0 if and only if \u00a0 \\(a(bc)\\)\n\\(\\acute{\\varepsilon} abc\\) \u00a0 if and only if \u00a0\n\\(bac\\)\n\\(\\acute{o} abcd\\) \u00a0 if and only if \u00a0\n\\(a(bc)d\\)\n\\(Wab\\) \u00a0 if and only if \u00a0 \\(abb\\)\n\\(\\land ab\\) \u00a0 if and only if \u00a0 \\(a\\) and\n\\(b\\)\n\\(\\lor ab\\) \u00a0 if and only if \u00a0 \\(a\\) or\n\\(b\\)\n\\(Eb\\) \u00a0 if and only if \u00a0\n\\(\\exists a.\\,ba\\)\n\\(*abc\\) \u00a0 if and only if \u00a0 \\(abc\\) and\n\\(\\exists d.\\,abd\\&adc\\)\n\n\nIn CL, the axioms are followed up with notions such as one-step and\nweak reduction, the latter of which can be viewed as a computation or\ninference step. (See the next section for some of these notions.)\nSimilarly, an axiomatic calculus for FOL, for instance, would contain\nrules of inference in addition to the axioms. One of the obstacles to\npenetrate the various presentations of basic logic is the lack of a\nsimilar formulation.\n\nDuring the next two decades or so after his first paper on basic\nlogic, Fitch published a series of papers on basic logic devoted to\n(1) the representation of recursive functions (i.e., a\ndemonstration of the possibility of the arithmetization of syntax),\n(2) \\(K^\\prime\\), an extension of \\(K\\) with negation,\nuniversal quantifier and # (the dual of the \\(*\\) operator), (3)\nthe consistency of \\(K\\) and \\(K^\\prime\\),\n(4) \\(L\\), an extension of \\(K^\\prime\\)\nwith implication and necessity operators, (5)\nthe definability of some of the constants such as \\(*\\) and #, as well\nas \\(E\\).\n\nThe combinators that are included in \\(K\\) (hence, in all its\nextensions) are \\(\\textsf{T}\\), \\(\\textsf{B}\\) and \\(\\textsf{W}\\). \\(\\acute\n\\varepsilon\\) and \\(\\acute o\\) are the ternary version of \\(\\textsf{T}\\)\nand the quaternary version of \\(\\textsf{B}\\), respectively. Russell\u2019s paradox\ninvolves negation, but (either variant of) Curry\u2019s paradox is positive, in the\nsense that it relies on one or two theorems of the positive implicational\nlogic of David Hilbert. This means that if the various systems of basic logic,\nespecially \\(K^\\prime\\) and \\(L\\) are consistent, then they\neither cannot contain full abstraction, or the notions of implication,\nentailment and identity should differ from their usual counterparts. Indeed,\n\\(K\\), \\(K^\\prime\\) and \\(L\\) are not\nextensional systems. That is, even if two expressions applied to the same\nexpression are always equal, the equality of the applied expressions\ndoes not follow. Turning basic logic into an extensional system proved\nless than straightforward. Fitch\u2019s system \\(JE^\\prime\\) was shown\nto be inconsistent by Myhill, which led to a more complicated\nformulation of the conditions for extensional identity.\n\nBasic logic has not (yet) become a widely used general framework for\nthe description of formal systems; however, renewed interest in this\napproach is signaled by Updike (2010), which attempts to situate basic\nlogic in the broader context of foundational work at the middle of the\n20th\u00a0century.\n\nQuine\u2019s elimination strategy\n\nFrom the late 1930s, W.\u00a0V.\u00a0O.\u00a0Quine worked on an\nalternative way to eliminate bound variables from first-order logic.\nIt is plausible to assume that Sch\u00f6nfinkel\u2019s goal was to find a\nsingle operator in classical logic and then to eliminate the bound\nvariables\u2014as he claims in Sch\u00f6nfinkel (1924)\u2014rather\nthan defining an overarching symbolic system to describe all\nmathematics. Nonetheless, CL was soon fused with classical logic in a\nmore free-wheeling fashion, which resulted in an inconsistent\nsystem.\n\nQuine saw the way out of a situation where inconsistency may arise via\nimplicit typing of constants that are to some extent similar to\ncombinators. He called such constants predicate functors, and\nintroduced several groups of them, the last one in Quine (1981).\n\nThe most common presentations of FOL stipulate that an \\(n\\)-place\npredicate followed by a sequence of \\(n\\) terms (possibly,\npunctuated by commas and surrounded by parentheses) is a formula.\n(This is in contrast with Sch\u00f6nfinkel\u2019s view of formulas and in\naccordance with the informal and formal interpretations of predicates\nas \\(n\\)-ary relations. In other words, FOL does not permit\n\u201ccurrying\u201d of predicates or of their interpretations.)\nQuine subscribes to the view that sequences of terms follow\npredicates.\n\nPredicate functors are not applicable to each other\u2014unlike the\ncombinators are. This is a point that Quine repeatedly emphasizes.\nAtomic predicates are the predicates of a first-order language,\nwhereas complex predicates are obtained by applying a predicate\nfunctor (of appropriate arity) to predicates (which may be atomic or\ncomplex).\n\nThe prohibition of self-application together with the use of\n\u201cflat\u201d sequences of arguments means that infinitely\nmany predicate functors are needed to ensure the elimination of\nbound variables from all formulas of FOL. To explain the problem\nquickly: a permutation of a pair of elements that are arbitrarily far\napart cannot be ensured otherwise. Just as combinators may be divided\ninto groups based on their effect, Quine was able to select predicate\nfunctors that can be grouped together naturally based on their\neffects. Indeed, the groups of predicate functors are similar to\nclasses of combinators, though Quine\u2019s labels are often sublime. In\norder to give a concrete example of this alternative approach, we\noutline a slightly modified version of a set of predicate functors\nfrom Quine (1981).\n\nA first-order language with \\(\\mid^-\\) as the only operator is\nassumed. (\\(F\\) and \\(G\\) are metavariables for predicates\nin the predicate functor language.) \\(\\wr^n\\)\n\\(\\textit{Inv}^n\\), \\(\\textit{inv}^n\\), \\(\\textit{Pad}^{n+1}\\) \nand \\(\\textit{Ref}^n\\) are predicate functors, for every \n\\(n\\in\\omega\\). A formula of FOL is rewritten into a formula in\na predicate functor language by applications of the following\nclauses.\n\nA variable \\(x\\) and a predicate \\(P\\) of FOL is \\(x\\)\nand \\(P\\), respectively, in the predicate functor language.\n\\(Fx_1x_2\\ldots x_n\\mid^{x_1}Gx_1x_2\\ldots x_n\n\\mathbin{{:}{=}{:}} (F\\wr G)x_2\\ldots x_n\\), where \\(x_2,\\ldots,\nx_n\\) are distinct from \\(x_1\\), and \\(F\\) and \n\\(G\\) are followed by the same sequence of variables.\n\\(Fx_1x_2\\ldots x_n \\mathbin{{:}{=}{:}} (\\textit{Inv }F)x_2\\ldots x_nx_1\\)\n\\(Fx_1x_2\\ldots x_n \\mathbin{{:}{=}{:}} (\\textit{inv }F)x_2x_1\\ldots x_n\\)\n\\(Fx_2\\ldots x_n \\mathbin{{:}{=}{:}} (\\textit{Pad }\nF)x_1x_2\\ldots x_n\\)\n\\(Fx_1x_1x_2\\ldots x_n \\mathbin{{:}{=}{:}} (\\textit{Ref }F\n)x_1x_2\\ldots x_n\\)\n\n\nThere is an obvious similarity between \\(\\textit{Ref}\\) and \n\\(\\textsf{W}\\), \\(\\textit{Pad}\\) and \\(\\textsf{K}\\), as\nwell as \\(\\textit{Inv}\\) and \\(\\textit{inv}\\) and various\ncombinators with permutative effects (e.g., \\(\\textsf{C}\\) and\n\\(\\textsf{T}\\)). If \\(\\mid^-\\) is the only operator in the first-order\nlanguage, then all formulas, which are not atomic, are almost of the form of\nthe left-hand side expression in 2. What has to be assured is that the side\ncondition is satisfied, and that is where clauses 3\u20136 enter. Although\nthe various \\(n\\)-ary versions of \\(\\wr\\), \\(\\textit{inv}\\), \\(\\textit{Pad}\\)\nand \\(\\textit{Ref}\\) could be conflated (by ignoring unaffected arguments),\n\\(\\textit{Inv}\\) clearly stands for infinitely many predicate functors,\nbecause \\(x_1,\\ldots,x_n\\) cannot be ignored or omitted.\n\nIt may be interesting to note that there is a difference between \\(\\wr\\)\nand Sch\u00f6nfinkel\u2019s \\(U\\). Not only the place of the bound\nvariable is different, but \\(\\wr\\) builds in contraction for \\(n-1\\) \nvariables (which are separated by \\(\\mid^-\\) and other symbols\nin the left-hand expression).\n\nQuine intended the predicate functor language to lead to a novel\nalgebraization of first-order logic. While bound variables can be\neliminated using predicate functors, Quine never defined an algebra in\nthe usual sense\u2014something similar, for instance, to cylindric\nalgebras. Predicate functors, by design, have a very limited\napplicability, which has the unfortunate side effect that they seem to\nbe of little interest and not much of use outside their intended\ncontext.\n",
    "section_title": "1.3 Alternative approaches: basic logic and predicate functors",
    "entry_title": "Combinatory Logic",
    "hierarchy_title": "Combinatory Logic || Sch\u00f6nfinkel\u2019s elimination of bound variables || Alternative approaches: basic logic and predicate functors",
    "tokenized_text": [
        "sch\u00f6nfinkel",
        "elimination",
        "bound",
        "variable",
        "alternative",
        "approach",
        "basic",
        "logic",
        "predicate",
        "functors",
        "alternative",
        "approach",
        "basic",
        "logic",
        "predicate",
        "functors",
        "section",
        "briefly",
        "outline",
        "two",
        "idea",
        "related",
        "sch\u00f6nfinkel",
        "work",
        "motivated",
        "use",
        "combinators",
        "elimination",
        "bound",
        "variable",
        "fitch",
        "metalogic",
        "late",
        "s",
        "frederic",
        "fitch",
        "worked",
        "logic",
        "called",
        "basic",
        "logic",
        "label",
        "motivated",
        "aim",
        "provide",
        "framework",
        "logic",
        "could",
        "formalized",
        "fitch",
        "approach",
        "utterly",
        "syntactic",
        "much",
        "like",
        "sch\u00f6nfinkel",
        "formalization",
        "understood",
        "encoding",
        "formally",
        "described",
        "system",
        "anothernot",
        "unlike",
        "arithmetization",
        "syntax",
        "g\u00f6del",
        "incompleteness",
        "theorem",
        "fitch",
        "introduced",
        "logic",
        "labeled",
        "k",
        "expression",
        "k",
        "formed",
        "like",
        "combinatory",
        "term",
        "binary",
        "application",
        "operation",
        "assumed",
        "associative",
        "see",
        "definition",
        "combinatory",
        "term",
        "next",
        "section",
        "however",
        "constant",
        "k",
        "coincide",
        "constant",
        "pure",
        "cl",
        "fitch",
        "us",
        "constant",
        "varepsilon",
        "o",
        "acute",
        "varepsilon",
        "acute",
        "w",
        "land",
        "lor",
        "e",
        "first",
        "five",
        "constant",
        "combinators",
        "though",
        "notation",
        "may",
        "suggest",
        "different",
        "informal",
        "meaning",
        "syntactical",
        "identity",
        "expression",
        "land",
        "lor",
        "intended",
        "stand",
        "or",
        "e",
        "analogue",
        "sch\u00f6nfinkel",
        "u",
        "corresponds",
        "nonvacuous",
        "existential",
        "quantifier",
        "finally",
        "similar",
        "transitive",
        "closure",
        "operator",
        "binary",
        "relation",
        "kleene",
        "star",
        "notably",
        "negation",
        "universal",
        "quantifier",
        "system",
        "us",
        "constant",
        "characterized",
        "followssomewhat",
        "like",
        "axiom",
        "characterize",
        "combinators",
        "ab",
        "a",
        "b",
        "syntactically",
        "expression",
        "varepsilon",
        "ab",
        "ba",
        "oabc",
        "bc",
        "acute",
        "varepsilon",
        "abc",
        "bac",
        "acute",
        "abcd",
        "bc",
        "d",
        "wab",
        "abb",
        "land",
        "ab",
        "a",
        "b",
        "lor",
        "ab",
        "a",
        "b",
        "eb",
        "exists",
        "a",
        "ba",
        "abc",
        "abc",
        "exists",
        "d",
        "abd",
        "adc",
        "cl",
        "axiom",
        "followed",
        "notion",
        "onestep",
        "weak",
        "reduction",
        "latter",
        "viewed",
        "computation",
        "inference",
        "step",
        "see",
        "next",
        "section",
        "notion",
        "similarly",
        "axiomatic",
        "calculus",
        "fol",
        "instance",
        "would",
        "contain",
        "rule",
        "inference",
        "addition",
        "axiom",
        "one",
        "obstacle",
        "penetrate",
        "various",
        "presentation",
        "basic",
        "logic",
        "lack",
        "similar",
        "formulation",
        "next",
        "two",
        "decade",
        "first",
        "paper",
        "basic",
        "logic",
        "fitch",
        "published",
        "series",
        "paper",
        "basic",
        "logic",
        "devoted",
        "representation",
        "recursive",
        "function",
        "ie",
        "demonstration",
        "possibility",
        "arithmetization",
        "syntax",
        "kprime",
        "extension",
        "k",
        "negation",
        "universal",
        "quantifier",
        "dual",
        "operator",
        "consistency",
        "k",
        "kprime",
        "l",
        "extension",
        "kprime",
        "implication",
        "necessity",
        "operator",
        "definability",
        "constant",
        "well",
        "e",
        "combinators",
        "included",
        "k",
        "hence",
        "extension",
        "textsf",
        "textsf",
        "b",
        "textsf",
        "w",
        "acute",
        "varepsilon",
        "acute",
        "o",
        "ternary",
        "version",
        "textsf",
        "quaternary",
        "version",
        "textsf",
        "b",
        "respectively",
        "russell",
        "paradox",
        "involves",
        "negation",
        "either",
        "variant",
        "curry",
        "paradox",
        "positive",
        "sense",
        "relies",
        "one",
        "two",
        "theorem",
        "positive",
        "implicational",
        "logic",
        "david",
        "hilbert",
        "mean",
        "various",
        "system",
        "basic",
        "logic",
        "especially",
        "kprime",
        "l",
        "consistent",
        "either",
        "contain",
        "full",
        "abstraction",
        "notion",
        "implication",
        "entailment",
        "identity",
        "differ",
        "usual",
        "counterpart",
        "indeed",
        "k",
        "kprime",
        "l",
        "extensional",
        "system",
        "even",
        "two",
        "expression",
        "applied",
        "expression",
        "always",
        "equal",
        "equality",
        "applied",
        "expression",
        "follow",
        "turning",
        "basic",
        "logic",
        "extensional",
        "system",
        "proved",
        "le",
        "straightforward",
        "fitch",
        "system",
        "jeprime",
        "shown",
        "inconsistent",
        "myhill",
        "led",
        "complicated",
        "formulation",
        "condition",
        "extensional",
        "identity",
        "basic",
        "logic",
        "yet",
        "become",
        "widely",
        "used",
        "general",
        "framework",
        "description",
        "formal",
        "system",
        "however",
        "renewed",
        "interest",
        "approach",
        "signaled",
        "updike",
        "attempt",
        "situate",
        "basic",
        "logic",
        "broader",
        "context",
        "foundational",
        "work",
        "middle",
        "th",
        "century",
        "quine",
        "elimination",
        "strategy",
        "late",
        "s",
        "w",
        "v",
        "o",
        "quine",
        "worked",
        "alternative",
        "way",
        "eliminate",
        "bound",
        "variable",
        "firstorder",
        "logic",
        "plausible",
        "assume",
        "sch\u00f6nfinkel",
        "goal",
        "find",
        "single",
        "operator",
        "classical",
        "logic",
        "eliminate",
        "bound",
        "variablesas",
        "claim",
        "sch\u00f6nfinkel",
        "rather",
        "defining",
        "overarching",
        "symbolic",
        "system",
        "describe",
        "mathematics",
        "nonetheless",
        "cl",
        "soon",
        "fused",
        "classical",
        "logic",
        "freewheeling",
        "fashion",
        "resulted",
        "inconsistent",
        "system",
        "quine",
        "saw",
        "way",
        "situation",
        "inconsistency",
        "may",
        "arise",
        "via",
        "implicit",
        "typing",
        "constant",
        "extent",
        "similar",
        "combinators",
        "called",
        "constant",
        "predicate",
        "functors",
        "introduced",
        "several",
        "group",
        "last",
        "one",
        "quine",
        "common",
        "presentation",
        "fol",
        "stipulate",
        "n",
        "place",
        "predicate",
        "followed",
        "sequence",
        "n",
        "term",
        "possibly",
        "punctuated",
        "comma",
        "surrounded",
        "parenthesis",
        "formula",
        "contrast",
        "sch\u00f6nfinkel",
        "view",
        "formula",
        "accordance",
        "informal",
        "formal",
        "interpretation",
        "predicate",
        "n",
        "ary",
        "relation",
        "word",
        "fol",
        "permit",
        "currying",
        "predicate",
        "interpretation",
        "quine",
        "subscribes",
        "view",
        "sequence",
        "term",
        "follow",
        "predicate",
        "predicate",
        "functors",
        "applicable",
        "otherunlike",
        "combinators",
        "point",
        "quine",
        "repeatedly",
        "emphasizes",
        "atomic",
        "predicate",
        "predicate",
        "firstorder",
        "language",
        "whereas",
        "complex",
        "predicate",
        "obtained",
        "applying",
        "predicate",
        "functor",
        "appropriate",
        "arity",
        "predicate",
        "may",
        "atomic",
        "complex",
        "prohibition",
        "selfapplication",
        "together",
        "use",
        "flat",
        "sequence",
        "argument",
        "mean",
        "infinitely",
        "many",
        "predicate",
        "functors",
        "needed",
        "ensure",
        "elimination",
        "bound",
        "variable",
        "formula",
        "fol",
        "explain",
        "problem",
        "quickly",
        "permutation",
        "pair",
        "element",
        "arbitrarily",
        "far",
        "apart",
        "ensured",
        "otherwise",
        "combinators",
        "may",
        "divided",
        "group",
        "based",
        "effect",
        "quine",
        "able",
        "select",
        "predicate",
        "functors",
        "grouped",
        "together",
        "naturally",
        "based",
        "effect",
        "indeed",
        "group",
        "predicate",
        "functors",
        "similar",
        "class",
        "combinators",
        "though",
        "quine",
        "label",
        "often",
        "sublime",
        "order",
        "give",
        "concrete",
        "example",
        "alternative",
        "approach",
        "outline",
        "slightly",
        "modified",
        "version",
        "set",
        "predicate",
        "functors",
        "quine",
        "firstorder",
        "language",
        "mid",
        "operator",
        "assumed",
        "f",
        "g",
        "metavariables",
        "predicate",
        "predicate",
        "functor",
        "language",
        "wrn",
        "textit",
        "inv",
        "n",
        "textit",
        "inv",
        "n",
        "textit",
        "pad",
        "n",
        "textit",
        "ref",
        "n",
        "predicate",
        "functors",
        "every",
        "ninomega",
        "formula",
        "fol",
        "rewritten",
        "formula",
        "predicate",
        "functor",
        "language",
        "application",
        "following",
        "clause",
        "variable",
        "x",
        "predicate",
        "p",
        "fol",
        "x",
        "p",
        "respectively",
        "predicate",
        "functor",
        "language",
        "fx_x_ldots",
        "x_nmid",
        "x_",
        "gx_x_ldots",
        "x_n",
        "mathbin",
        "fwr",
        "g",
        "x_ldots",
        "x_n",
        "x_",
        "ldots",
        "x_n",
        "distinct",
        "x_",
        "f",
        "g",
        "followed",
        "sequence",
        "variable",
        "fx_x_ldots",
        "x_n",
        "mathbin",
        "textit",
        "inv",
        "f",
        "x_ldots",
        "x_nx_",
        "fx_x_ldots",
        "x_n",
        "mathbin",
        "textit",
        "inv",
        "f",
        "x_x_ldots",
        "x_n",
        "fx_ldots",
        "x_n",
        "mathbin",
        "textit",
        "pad",
        "f",
        "x_x_ldots",
        "x_n",
        "fx_x_x_ldots",
        "x_n",
        "mathbin",
        "textit",
        "ref",
        "f",
        "x_x_ldots",
        "x_n",
        "obvious",
        "similarity",
        "textit",
        "ref",
        "textsf",
        "w",
        "textit",
        "pad",
        "textsf",
        "k",
        "well",
        "textit",
        "inv",
        "textit",
        "inv",
        "various",
        "combinators",
        "permutative",
        "effect",
        "eg",
        "textsf",
        "c",
        "textsf",
        "mid",
        "operator",
        "firstorder",
        "language",
        "formula",
        "atomic",
        "almost",
        "form",
        "lefthand",
        "side",
        "expression",
        "assured",
        "side",
        "condition",
        "satisfied",
        "clause",
        "enter",
        "although",
        "various",
        "n",
        "ary",
        "version",
        "wr",
        "textit",
        "inv",
        "textit",
        "pad",
        "textit",
        "ref",
        "could",
        "conflated",
        "ignoring",
        "unaffected",
        "argument",
        "textit",
        "inv",
        "clearly",
        "stand",
        "infinitely",
        "many",
        "predicate",
        "functors",
        "x_",
        "ldots",
        "x_n",
        "ignored",
        "omitted",
        "may",
        "interesting",
        "note",
        "difference",
        "wr",
        "sch\u00f6nfinkel",
        "u",
        "place",
        "bound",
        "variable",
        "different",
        "wr",
        "build",
        "contraction",
        "n",
        "variable",
        "separated",
        "mid",
        "symbol",
        "lefthand",
        "expression",
        "quine",
        "intended",
        "predicate",
        "functor",
        "language",
        "lead",
        "novel",
        "algebraization",
        "firstorder",
        "logic",
        "bound",
        "variable",
        "eliminated",
        "using",
        "predicate",
        "functors",
        "quine",
        "never",
        "defined",
        "algebra",
        "usual",
        "sensesomething",
        "similar",
        "instance",
        "cylindric",
        "algebra",
        "predicate",
        "functors",
        "design",
        "limited",
        "applicability",
        "unfortunate",
        "side",
        "effect",
        "seem",
        "little",
        "interest",
        "much",
        "use",
        "outside",
        "intended",
        "context"
    ]
}