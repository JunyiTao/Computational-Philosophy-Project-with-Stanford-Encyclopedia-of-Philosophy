{
    "main_text": "Syntax and Semantics || Fundamental Ideas\n1.2 Fundamental Ideas\n\nTo specify the syntax of a many-sorted language and associated\nstructures we need first to say what our (countable) set of sorts is.\nWe take \\(\\Sort=\\{ s_{1},\\dots ,s_{n}\\}\\) as the sorts\nof an n-sorted\n language.[1]\n\n\n\nStructures: A many-sorted structure has several\nnon-empty domains, one for each sort, and variables of a given sort\ntake values over the corresponding domain. An n-ary relation\ncould be freely established between elements of different domains or\nonly between certain ones. These two options are called\nliberal and strict. A liberal relation may relate\nobjects of arbitrary domains and only the arity (a natural number) has\nto be stated. For a strict relation,  the sorts\ninvolved have to be specified as well as the arity. \n\n\nAlphabet: The alphabet of a many-sorted language\n\\(L\\) includes all the relation, function, and constant symbols in a\nset called \\(\\OperSym\\), as well as an infinite number of variables\nfor each sort \\(s_{i}\\in \\Sort\\), and the corresponding sets of\nvariables are disjoint. An n-ary relation symbol \\(R\\) could\nbe strict or liberal and, in the first case, we must provide\ninformation about what are the involved sorts. To achieve this\nrequirement, we define a function \\(\\Rank\\) having as domain the set\n\\(\\OperSym\\) and whose values are either natural numbers other than\nzero (liberal option) or finite strings of \\(\\Sort\\cup \\{ 0\\}\\)\n(strict option). For any strict \\(f\\in \\OperSym\\), its value\n\\(\\Rank(f)\\) always has the form \\(\\langle\ni_{1},\\ldots,i_{m},i_{0}\\rangle\\), with \\(i_{0},i_{1},\\ldots,i_{m}\\in\n\\Sort\\cup \\{ 0\\}\\). When \\(f\\) is an m-ary predicate,\n\\(i_{0}=0\\), and \\(i_{0}\\not=0\\) for m-ary function symbols;\nindividual constants are considered as zero-ary function symbols with\n\\(\\Rank(f)=\\langle i_{0}\\rangle\\), simplified as \\(i_{0}\\). \n\n\nSignature: By a signature \\(\\Sigma\\) we mean\nthe ordered triple \n\\[\\ \\Sigma =\\langle \\Sort,\\OperSym,\\Rank\\rangle\\]\n\n\nEquality is a binary symbol that could be strict or liberal. In our\nlanguage, the equality symbol \\(\\approx\\) with \\(\\Rank(\\approx )=2\\)\nis liberal (having arity 2 and being allowed to work between terms of\nany\n sort).[2]\n The quantifier \\(\\exists x^{i}\\) is used for variables \\(x^{i}\\) of\nany sort \\(i\\). \n\n\nIn Euclid\u2019s example we have two sorts, \\(l\\) (lines) and \\(p\\)\n(points) and a 3-place predicate \\(\\Join\\) with \\(\\Rank(\\Join)=\\langle\nl,p,p,0\\rangle\\). In the example of binary relations we have two\nsorts, \\(i\\) (individuals) and \\(r\\) (binary relations) and a 3-place\npredicate symbol \\(\\epsilon _{2}\\) with \\(\\Rank(\\epsilon_{2})=\\langle\ni,i,r,0\\rangle\\). For the comprehension example we have two sorts,\n\\(i\\) (individuals) and \\(\\pi\\) (properties) and a 2-place predicate\nsymbol \\(\\epsilon_{1}\\) with \\(\\Rank(\\epsilon_{1})=\\langle i,\\pi\n,0\\rangle\\).\n",
    "section_title": "1.2 Fundamental Ideas",
    "entry_title": "Many-Sorted Logic",
    "hierarchy_title": "Many-Sorted Logic || Syntax and Semantics || Fundamental Ideas",
    "tokenized_text": [
        "syntax",
        "semantics",
        "fundamental",
        "idea",
        "fundamental",
        "idea",
        "specify",
        "syntax",
        "manysorted",
        "language",
        "associated",
        "structure",
        "need",
        "first",
        "say",
        "countable",
        "set",
        "sort",
        "take",
        "sort",
        "s_",
        "dots",
        "s_",
        "n",
        "sort",
        "nsorted",
        "language",
        "structure",
        "manysorted",
        "structure",
        "several",
        "nonempty",
        "domain",
        "one",
        "sort",
        "variable",
        "given",
        "sort",
        "take",
        "value",
        "corresponding",
        "domain",
        "nary",
        "relation",
        "could",
        "freely",
        "established",
        "element",
        "different",
        "domain",
        "certain",
        "one",
        "two",
        "option",
        "called",
        "liberal",
        "strict",
        "liberal",
        "relation",
        "may",
        "relate",
        "object",
        "arbitrary",
        "domain",
        "arity",
        "natural",
        "number",
        "stated",
        "strict",
        "relation",
        "sort",
        "involved",
        "specified",
        "well",
        "arity",
        "alphabet",
        "alphabet",
        "manysorted",
        "language",
        "l",
        "includes",
        "relation",
        "function",
        "constant",
        "symbol",
        "set",
        "called",
        "opersym",
        "well",
        "infinite",
        "number",
        "variable",
        "sort",
        "s_",
        "in",
        "sort",
        "corresponding",
        "set",
        "variable",
        "disjoint",
        "nary",
        "relation",
        "symbol",
        "r",
        "could",
        "strict",
        "liberal",
        "first",
        "case",
        "must",
        "provide",
        "information",
        "involved",
        "sort",
        "achieve",
        "requirement",
        "define",
        "function",
        "rank",
        "domain",
        "set",
        "opersym",
        "whose",
        "value",
        "either",
        "natural",
        "number",
        "zero",
        "liberal",
        "option",
        "finite",
        "string",
        "sortcup",
        "strict",
        "option",
        "strict",
        "fin",
        "opersym",
        "value",
        "rank",
        "f",
        "always",
        "form",
        "langle",
        "i_",
        "ldots",
        "i_",
        "i_",
        "rangle",
        "i_",
        "i_",
        "ldots",
        "i_",
        "in",
        "sortcup",
        "f",
        "mary",
        "predicate",
        "i_",
        "i_",
        "not",
        "mary",
        "function",
        "symbol",
        "individual",
        "constant",
        "considered",
        "zeroary",
        "function",
        "symbol",
        "rank",
        "f",
        "langle",
        "i_",
        "rangle",
        "simplified",
        "i_",
        "signature",
        "signature",
        "sigma",
        "mean",
        "ordered",
        "triple",
        "sigma",
        "langle",
        "sort",
        "opersym",
        "rankrangle",
        "equality",
        "binary",
        "symbol",
        "could",
        "strict",
        "liberal",
        "language",
        "equality",
        "symbol",
        "approx",
        "rank",
        "approx",
        "liberal",
        "arity",
        "allowed",
        "work",
        "term",
        "sort",
        "quantifier",
        "exists",
        "x",
        "used",
        "variable",
        "x",
        "sort",
        "i",
        "euclid",
        "example",
        "two",
        "sort",
        "l",
        "line",
        "p",
        "point",
        "place",
        "predicate",
        "join",
        "rank",
        "join",
        "langle",
        "l",
        "p",
        "prangle",
        "example",
        "binary",
        "relation",
        "two",
        "sort",
        "i",
        "individual",
        "r",
        "binary",
        "relation",
        "place",
        "predicate",
        "symbol",
        "epsilon",
        "_",
        "rank",
        "epsilon_",
        "langle",
        "rrangle",
        "comprehension",
        "example",
        "two",
        "sort",
        "i",
        "individual",
        "pi",
        "property",
        "place",
        "predicate",
        "symbol",
        "epsilon_",
        "rank",
        "epsilon_",
        "langle",
        "pi",
        "rangle"
    ]
}