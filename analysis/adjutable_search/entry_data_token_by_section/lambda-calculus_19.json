{
    "main_text": "Applications || Logic \u00e0 la \\(\\lambda\\)\n9.1 Logic \u00e0 la \\(\\lambda\\)\n\nHere are two senses in which \\(\\lambda\\)-calculus is connected with\nlogic.\n9.1.1 Terms as logical constants\n\nIn the\n table of combinators\n above, we defined combinators \\(\\bT\\) and \\(\\bF\\) and said that they\nserve as representations in the \\(\\lambda\\)-calculus of the truth\nvalues true and false, respectively. How do these terms function as\ntruth values?\n\nIt turns out that when one is treating \\(\\lambda\\)-calculus as a kind\nof programming language, one can write conditional statements\n\u201cIf \\(P\\) then \\(A\\) else \\(B\\)\u201d simply as \\(PAB\\), where\nof course \\(P, A\\), and \\(B\\) are understood as \\(\\lambda\\)-terms. If\n\\(P \\rhd \\bT\\), that is, P is \u2018true\u2019, then we have\n\n\\[\n\\text{if-}P\\text{-then-}A\\text{-else-}B := PAB \\rhd \\bT AB \\rhd A,\n\\]\n\n\n(recall that, by definition, \\(\\bT \\equiv \\bK\\)) and if \\(P \\rhd\n\\bF\\), that is, \\(P\\) is \u2018false\u2019, then \n\\[\n\\text{if-}P\\text{-then-}A\\text{-else-}B := PAB \\rhd \\bF AB \\rhd B,\n\\]\n\n\n(recall that, by definition, \\(\\mathbf{F} \\equiv \\mathbf{KI})\\) which\nis just what we expect from a notion of if-then-else. If \\(P\\) reduces\nneither to \\(\\mathbf{T}\\) nor \\(\\mathbf{F}\\), then we cannot in\ngeneral say what \\(\\text{if-}P\\text{-then-}A\\text{-else-}B\\) is. \n\nThe encoding we\u2019ve just sketched of some of the familiar truth\nvalues and logical connectives of classical truth-table logic does not\nshow that \\(\\lambda\\)-calculus and classical logic are intimately\nrelated. The encoding shows little more than embeddibility of the\nrules of computation of classical truth-table logic in\n\\(\\lambda\\)-calculus. Logics other than classical truth-table logic\ncan likewise be represented in the \\(\\lambda\\)-calculus, if one has\nsufficient computable ingredients for the logic in question (e.g., if\nthe logical consequence relation is computable, or if a derivability\nrelation is computable, etc.). For more on computing with\n\\(\\lambda\\)-calculus, see section\n 9.2\n below. A more intrinsic relationship between logic and\n\\(\\lambda\\)-calculus is discussed in the next section.\n9.1.2 Typed \\(\\lambda\\)-calculus and the Curry-Howard-de Bruijn correspondence\n\nThe correspondence to be descried here between logic and the\n\\(\\lambda\\)-calculus is seen with the help of an apparatus known as\ntypes. This section sketches the beginnings of the\ndevelopment of the subject known as type\ntheory. We are interested in developing type theory only\nso far as to make the so-called Curry-Howard-de Bruijn correspondence\nvisible. A more detailed treatment can be found in the entry on\n type theory;\n see also (Hindley, 1997) and (Barendregt, Dekkers, Statman,\n2013).\n\nType theory enriches the untyped \\(\\lambda\\)-calculus by requiring\nthat terms be given types. In the untyped\n\\(\\lambda\\)-calculus, the application \\(MN\\) is a legal term\nregardless of what \\(M\\) and \\(N\\) are. Such freedom permits one to\nform such suspicious terms as \\(xx\\), and thence terms such as the\nparadoxical combinator \\(\\mathbf{Y}\\). One might wish to exclude terms\nlike \\(xx\\) on the grounds that \\(x\\) is serving both as a function\n(on the left-hand side of the application) and as an argument (on the\nright-hand side of the application). Type theory gives us the\nresources for making this intuitive argument more precise.\n\n\nAssigning types to terms The language of type theory\nbegins with an (infinite) set of type\nvariables (which is assumed to be disjoint from the set\nof variables of the \\(\\lambda\\)-calculus and from the symbol\n\u2018\\(\\lambda\\)\u2019 itself). The set of types is made up of type\nvariables and the operation \\(\\sigma \\rightarrow \\tau\\). Variables in\ntype theory now come with a type annotation\n(unlike the unadorned term variables of untyped \\(\\lambda\\)-calculus).\nTyped variables are rendered \u2018\\(x : \\sigma\\)\u2019; the\nintuitive reading is \u2018the variable \\(x\\) has the type\n\\(\\sigma\\)\u2019. The intuitive reading of the judgment \u2018\\(t :\n\\sigma \\rightarrow \\tau\\)\u2019 is that the term \\(t\\) is a function\nthat transforms arguments of type \\(\\sigma\\) into arguments of type\n\\(\\tau\\). Given an assignment of types to term variables, one has the\ntyping rules: \n\\[\n(M : \\sigma \\rightarrow \\tau)(N : \\sigma) : \\tau\n\\]\n\n\nand \n\\[\n(\\lambda x : \\sigma[M : \\tau]) : \\sigma \\rightarrow \\tau\n\\]\n\n\nThe above two rules define the assignment of types to applications and\nto abstraction terms. The set of terms of type theory is the set of\nterms built up according to these formation rules.\n\n\nThe above definition of the set of terms of type theory is sufficient\nto rule out terms such as \\(xx\\). Of course, \u2018\\(xx\\)\u2019 is\nnot a typed term at all for the simple reason that no types have been\nassigned to it. What is meant is that there is no type \\(\\sigma\\) that\ncould be assigned to \\(x\\) such that \u2018\\(xx\\)\u2019 could be\nannotated in a legal way to make a typed term. We cannot assign to\n\\(x\\) a type variable, because then the type of the left-hand \\(x\\)\nwould fail to be a function type (i.e., a type of the shape\n\u2018\\(\\sigma \\rightarrow \\tau\\)\u2019). Moreover, we cannot assign\nto \\(x\\) a function type \\(\\sigma \\rightarrow \\tau\\), because then\nthen \\(\\sigma\\) would be equal to \\(\\sigma \\rightarrow \\tau\\), which\nis impossible.\n\nAs a leading example, consider the types that are assigned to the\ncombinators \\(\\bI\\), \\(\\bK\\), and \\(\\bS\\):\n\n\nCombinator\u00a0\u00a0\nType[5]\n\n\n\\(\\bI\\)\n\\(a \\rightarrow a\\) \n\n\\(\\bK\\)\n\\(a \\rightarrow(b \\rightarrow a)\\) \n\n\\(\\bS\\)\n\\( (a \\rightarrow(b \\rightarrow c)) \\rightarrow ((a \\rightarrow\nb) \\rightarrow(a \\rightarrow c))\\) \n\n\n(See Hindley (1997) Table of principal types for a more\nextensive listing.) If we read \u2018\\(\\rightarrow\\)\u2019 as\nimplication and type variables as propositional variables, then we\nrecognize three familiar tautologies in the right-hand column of the\ntable. The language used is meager: there are only propositional\nvariables and implication; there are no other connectives.\n\nThe table suggests an interesting correspondence between the typed\n\\(\\lambda\\)-calculus and formal logic. Could it really be that the\ntypes assigned to formulas, when understood as logical formulas, are\nvalid? Yes, though \u2018validity\u2019 needs to understood not as\nclassical validity:\n\nTheorem If \\(\\tau\\) is the type of some\n\\(\\lambda\\)-term, then \\(\\tau\\) is intuitionistically valid.\n\nThe converse of this theorem holds as well:\n\nTheorem If \\(\\phi\\) is an intuitionistically valid\nlogical formula whose only connective is implication\n\\((\\rightarrow)\\), then \\(\\phi\\) is the type of some\n\\(\\lambda\\)-term.\n\nThe correspondence can be seen when one identifies intuitionistic\nvalidity with derivability in a certain natural deduction formalism.\nFor a proof of these two theorems, see (Hindley, 1997, chapter 6).\n\nThe correspondence expressed by the previous two theorems between\nintuitionistic validity and typability is known as the\nCurry-Howard-de Bruijn correspondence, after three logicians\nwho noticed it independently. The correspondence, as stated, is\nbetween only propositional intuitionistic logic, restricted to the\nfragment containing only the implication connective \\(\\rightarrow\\).\nOne can extend the correspondence to other connectives and to\nquantifiers, too, but the most crisp correspondence is at the level of\nthe implication-only fragment. For details, see (Howard, 1980).\n",
    "section_title": "9.1 Logic \u00e0 la \\(\\lambda\\)",
    "entry_title": "The Lambda Calculus",
    "hierarchy_title": "The Lambda Calculus || Applications || Logic \u00e0 la \\(\\lambda\\)",
    "tokenized_text": [
        "application",
        "logic",
        "\u00e0",
        "la",
        "lambda",
        "logic",
        "\u00e0",
        "la",
        "lambda",
        "two",
        "sens",
        "lambda",
        "calculus",
        "connected",
        "logic",
        "term",
        "logical",
        "constant",
        "table",
        "combinators",
        "defined",
        "combinators",
        "bt",
        "bf",
        "said",
        "serve",
        "representation",
        "lambda",
        "calculus",
        "truth",
        "value",
        "true",
        "false",
        "respectively",
        "term",
        "function",
        "truth",
        "value",
        "turn",
        "one",
        "treating",
        "lambda",
        "calculus",
        "kind",
        "programming",
        "language",
        "one",
        "write",
        "conditional",
        "statement",
        "p",
        "a",
        "else",
        "b",
        "simply",
        "pab",
        "course",
        "p",
        "a",
        "b",
        "understood",
        "lambda",
        "terms",
        "p",
        "rhd",
        "bt",
        "p",
        "true",
        "text",
        "if",
        "ptext",
        "then",
        "atext",
        "else",
        "b",
        "pab",
        "rhd",
        "bt",
        "ab",
        "rhd",
        "recall",
        "definition",
        "bt",
        "equiv",
        "bk",
        "p",
        "rhd",
        "bf",
        "p",
        "false",
        "text",
        "if",
        "ptext",
        "then",
        "atext",
        "else",
        "b",
        "pab",
        "rhd",
        "bf",
        "ab",
        "rhd",
        "b",
        "recall",
        "definition",
        "mathbf",
        "f",
        "equiv",
        "mathbf",
        "ki",
        "expect",
        "notion",
        "ifthenelse",
        "p",
        "reduces",
        "neither",
        "mathbf",
        "mathbf",
        "f",
        "general",
        "say",
        "text",
        "if",
        "ptext",
        "then",
        "atext",
        "else",
        "b",
        "encoding",
        "sketched",
        "familiar",
        "truth",
        "value",
        "logical",
        "connective",
        "classical",
        "truthtable",
        "logic",
        "show",
        "lambda",
        "calculus",
        "classical",
        "logic",
        "intimately",
        "related",
        "encoding",
        "show",
        "little",
        "embeddibility",
        "rule",
        "computation",
        "classical",
        "truthtable",
        "logic",
        "lambda",
        "calculus",
        "logic",
        "classical",
        "truthtable",
        "logic",
        "likewise",
        "represented",
        "lambda",
        "calculus",
        "one",
        "sufficient",
        "computable",
        "ingredient",
        "logic",
        "question",
        "eg",
        "logical",
        "consequence",
        "relation",
        "computable",
        "derivability",
        "relation",
        "computable",
        "etc",
        "computing",
        "lambda",
        "calculus",
        "see",
        "section",
        "intrinsic",
        "relationship",
        "logic",
        "lambda",
        "calculus",
        "discussed",
        "next",
        "section",
        "typed",
        "lambda",
        "calculus",
        "curryhowardde",
        "bruijn",
        "correspondence",
        "correspondence",
        "descried",
        "logic",
        "lambda",
        "calculus",
        "seen",
        "help",
        "apparatus",
        "known",
        "type",
        "section",
        "sketch",
        "beginning",
        "development",
        "subject",
        "known",
        "type",
        "theory",
        "interested",
        "developing",
        "type",
        "theory",
        "far",
        "make",
        "socalled",
        "curryhowardde",
        "bruijn",
        "correspondence",
        "visible",
        "detailed",
        "treatment",
        "found",
        "entry",
        "type",
        "theory",
        "see",
        "also",
        "hindley",
        "barendregt",
        "dekker",
        "statman",
        "type",
        "theory",
        "enriches",
        "untyped",
        "lambda",
        "calculus",
        "requiring",
        "term",
        "given",
        "type",
        "untyped",
        "lambda",
        "calculus",
        "application",
        "mn",
        "legal",
        "term",
        "regardless",
        "m",
        "n",
        "freedom",
        "permit",
        "one",
        "form",
        "suspicious",
        "term",
        "xx",
        "thence",
        "term",
        "paradoxical",
        "combinator",
        "mathbf",
        "one",
        "might",
        "wish",
        "exclude",
        "term",
        "like",
        "xx",
        "ground",
        "x",
        "serving",
        "function",
        "lefthand",
        "side",
        "application",
        "argument",
        "righthand",
        "side",
        "application",
        "type",
        "theory",
        "give",
        "u",
        "resource",
        "making",
        "intuitive",
        "argument",
        "precise",
        "assigning",
        "type",
        "term",
        "language",
        "type",
        "theory",
        "begin",
        "infinite",
        "set",
        "type",
        "variable",
        "assumed",
        "disjoint",
        "set",
        "variable",
        "lambda",
        "calculus",
        "symbol",
        "lambda",
        "set",
        "type",
        "made",
        "type",
        "variable",
        "operation",
        "sigma",
        "rightarrow",
        "tau",
        "variable",
        "type",
        "theory",
        "come",
        "type",
        "annotation",
        "unlike",
        "unadorned",
        "term",
        "variable",
        "untyped",
        "lambda",
        "calculus",
        "typed",
        "variable",
        "rendered",
        "x",
        "sigma",
        "intuitive",
        "reading",
        "variable",
        "x",
        "type",
        "sigma",
        "intuitive",
        "reading",
        "judgment",
        "sigma",
        "rightarrow",
        "tau",
        "term",
        "t",
        "function",
        "transforms",
        "argument",
        "type",
        "sigma",
        "argument",
        "type",
        "tau",
        "given",
        "assignment",
        "type",
        "term",
        "variable",
        "one",
        "typing",
        "rule",
        "sigma",
        "rightarrow",
        "tau",
        "n",
        "sigma",
        "tau",
        "lambda",
        "x",
        "sigma",
        "tau",
        "sigma",
        "rightarrow",
        "tau",
        "two",
        "rule",
        "define",
        "assignment",
        "type",
        "application",
        "abstraction",
        "term",
        "set",
        "term",
        "type",
        "theory",
        "set",
        "term",
        "built",
        "according",
        "formation",
        "rule",
        "definition",
        "set",
        "term",
        "type",
        "theory",
        "sufficient",
        "rule",
        "term",
        "xx",
        "course",
        "xx",
        "typed",
        "term",
        "simple",
        "reason",
        "type",
        "assigned",
        "meant",
        "type",
        "sigma",
        "could",
        "assigned",
        "x",
        "xx",
        "could",
        "annotated",
        "legal",
        "way",
        "make",
        "typed",
        "term",
        "assign",
        "x",
        "type",
        "variable",
        "type",
        "lefthand",
        "x",
        "would",
        "fail",
        "function",
        "type",
        "ie",
        "type",
        "shape",
        "sigma",
        "rightarrow",
        "tau",
        "moreover",
        "assign",
        "x",
        "function",
        "type",
        "sigma",
        "rightarrow",
        "tau",
        "sigma",
        "would",
        "equal",
        "sigma",
        "rightarrow",
        "tau",
        "impossible",
        "leading",
        "example",
        "consider",
        "type",
        "assigned",
        "combinators",
        "bi",
        "bk",
        "bs",
        "combinator",
        "type",
        "bi",
        "rightarrow",
        "a",
        "bk",
        "rightarrow",
        "b",
        "rightarrow",
        "bs",
        "rightarrow",
        "b",
        "rightarrow",
        "c",
        "rightarrow",
        "rightarrow",
        "b",
        "rightarrow",
        "rightarrow",
        "c",
        "see",
        "hindley",
        "table",
        "principal",
        "type",
        "extensive",
        "listing",
        "read",
        "rightarrow",
        "implication",
        "type",
        "variable",
        "propositional",
        "variable",
        "recognize",
        "three",
        "familiar",
        "tautology",
        "righthand",
        "column",
        "table",
        "language",
        "used",
        "meager",
        "propositional",
        "variable",
        "implication",
        "connective",
        "table",
        "suggests",
        "interesting",
        "correspondence",
        "typed",
        "lambda",
        "calculus",
        "formal",
        "logic",
        "could",
        "really",
        "type",
        "assigned",
        "formula",
        "understood",
        "logical",
        "formula",
        "valid",
        "yes",
        "though",
        "validity",
        "need",
        "understood",
        "classical",
        "validity",
        "theorem",
        "tau",
        "type",
        "lambda",
        "term",
        "tau",
        "intuitionistically",
        "valid",
        "converse",
        "theorem",
        "hold",
        "well",
        "theorem",
        "phi",
        "intuitionistically",
        "valid",
        "logical",
        "formula",
        "whose",
        "connective",
        "implication",
        "rightarrow",
        "phi",
        "type",
        "lambda",
        "term",
        "correspondence",
        "seen",
        "one",
        "identifies",
        "intuitionistic",
        "validity",
        "derivability",
        "certain",
        "natural",
        "deduction",
        "formalism",
        "proof",
        "two",
        "theorem",
        "see",
        "hindley",
        "chapter",
        "correspondence",
        "expressed",
        "previous",
        "two",
        "theorem",
        "intuitionistic",
        "validity",
        "typability",
        "known",
        "curryhowardde",
        "bruijn",
        "correspondence",
        "three",
        "logician",
        "noticed",
        "independently",
        "correspondence",
        "stated",
        "propositional",
        "intuitionistic",
        "logic",
        "restricted",
        "fragment",
        "containing",
        "implication",
        "connective",
        "rightarrow",
        "one",
        "extend",
        "correspondence",
        "connective",
        "quantifier",
        "crisp",
        "correspondence",
        "level",
        "implicationonly",
        "fragment",
        "detail",
        "see",
        "howard"
    ]
}