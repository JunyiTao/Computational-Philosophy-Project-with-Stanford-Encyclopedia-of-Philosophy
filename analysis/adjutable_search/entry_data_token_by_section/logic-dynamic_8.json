{
    "main_text": "Structured programming and correctness of programs || Total correctness\n3.3 Total correctness\n\nBy Hoare\u2019s own admission in Hoare [1979], his original calculus\nwas merely a starting point and suffered quite a few limitations.\nParticularly, it only allows one to reason about partial\ncorrectness. That is, the truth of a statement \\(\\{A\\}\\alpha\\{B\\}\\)\nonly makes sure that all executions of \\(\\alpha\\) starting in a state\nsatisfying \\(A\\) will end in a state satisfying \\(B\\), or will not\nhalt. That is, a partially correct program may have\nnon-terminating executions. (In fact, a program that has no\nterminating execution will always be partially correct. This is the\ncase for example of the program \\(\\mathsf{while}~ 1 ~\\mathsf{do}~\n\\mathsf{skip}\\). The formula \\(A \\rightarrow [\\mathsf{while}~1\n~\\mathsf{do} ~\\mathsf{skip}] B\\) is deducible for all formulas \\(A\\)\nand \\(B\\).) The calculus offers no basis for a proof that a program\nterminates. It can be modified so as to account for total\ncorrectness of programs: partial correctness plus termination. It is\nachieved by amending the rule of iteration. We do not present it here\nand refer the interested reader to Apt [1981].\n\nLet us first observe that for deterministic programs, one can\nalready capture total correctness via formulas of the kind\n\n\\(A \\rightarrow \\langle\\alpha\\rangle B\\). \n\nThe expression \\(\\langle\\alpha\\rangle B\\) means that there is an\nexecution of \\(\\alpha\\) that terminates in a state that satisfies\n\\(B\\). Moreover, if \\(\\alpha\\) is deterministic, this possible\nterminating execution is the unique execution of \\(\\alpha\\). Thus, if\none first manages to prove that a program is deterministic, this trick\nworks well enough to prove its total correctness.\n\nA general solution to the problem of total correctness exists in the\nrealm of PDL. But we need to extend it a little. Pratt had already\nalluded in Pratt [1980b] that PDL is not expressive enough to capture\nthe infinite looping of programs. In reaction, PDL with repeating\n(RPDL) was introduced by Streett [1982]. It contains, for all programs\n\\(\\alpha\\), the expression \\(\\Delta\\alpha\\) standing for a new\nproposition with semantics:\n\n\n\\(V(\\Delta\\alpha) = \\{x: \\) there exists an infinite sequence\n\\(z_0, z_1, \\ldots\\) of states such that \\(z_0 = x\\) and for all \\(n\n\\geq 0, z_n R(\\alpha) z_{n+1}\\}\\).\n\n\n\nStreett [1982] conjectured that RPDL can be axiomatized by adding to\nthe proof system of PDL precisely the following axiom schemas.\n\n(A6)\n\\(\\Delta\\alpha \\rightarrow \\langle\\alpha\\rangle\n\\Delta\\alpha\\)\n(A7)\n\\([\\alpha^*](A \\rightarrow \\langle\\alpha\\rangle A) \\rightarrow (A\n\\rightarrow \\Delta\\alpha)\\)\n\n\nThe proof of the conjecture was provided in Sakalauskaite and Valiev\n[1990]. (A version of the conjecture in the variant of combinatory PDL\nwas also proved in Gargov and Passy [1988].)\n\nIt is easy to see that in the Hoare calculus presented above, non\ntermination can only come from the rule of iteration. Analogously, non\ntermination of a PDL program can only come from the use of the\nunbounded iteration. The expression \\(\\Delta\\alpha\\) indicates that\n\\(\\alpha^*\\) can diverge, and this is just the kind of notion we need.\nWe can now inductively define a predicate \\(\\infty\\) such that for a\nprogram \\(\\alpha\\), the formula \\(\\infty(\\alpha)\\) will be true\nexactly when \\(\\alpha\\) can enter a non-terminating computation.\n\n\\(\\infty(\\pi) := 0\\) where \\(\\pi\\in\\Pi_0\\)\n\n\\(\\infty(A?) := 0\\)\n\n\\(\\infty(\\alpha \\cup \\beta) := \\infty(\\alpha)\\ \\lor \\infty(\\beta)\\)\n\n\\(\\infty(\\alpha ; \\beta) := \\infty(\\alpha) \\lor \\langle\\alpha\\rangle\n\\infty(\\beta)\\)\n\n\\(\\infty(\\alpha^*) := \\Delta\\alpha \\lor \\langle\\alpha^*\\rangle\n\\infty(\\alpha)\\) \n\nFinally, the total correctness of a program can be expressed via\nformulas of the kind\n\n\\(A \\rightarrow (\\lnot \\infty(\\alpha) \\land [\\alpha]B)\\), \n\nwhich means literally that if \\(A\\) is the case, then the program\n\\(\\alpha\\) cannot run forever, and every successful execution of\n\\(\\alpha\\) will end in a state satisfying \\(B\\).\n",
    "section_title": "3.3 Total correctness",
    "entry_title": "Propositional Dynamic Logic",
    "hierarchy_title": "Propositional Dynamic Logic || Structured programming and correctness of programs || Total correctness",
    "tokenized_text": [
        "structured",
        "programming",
        "correctness",
        "program",
        "total",
        "correctness",
        "total",
        "correctness",
        "hoare",
        "admission",
        "hoare",
        "original",
        "calculus",
        "merely",
        "starting",
        "point",
        "suffered",
        "quite",
        "limitation",
        "particularly",
        "allows",
        "one",
        "reason",
        "partial",
        "correctness",
        "truth",
        "statement",
        "a",
        "alpha",
        "b",
        "make",
        "sure",
        "execution",
        "alpha",
        "starting",
        "state",
        "satisfying",
        "a",
        "end",
        "state",
        "satisfying",
        "b",
        "halt",
        "partially",
        "correct",
        "program",
        "may",
        "nonterminating",
        "execution",
        "fact",
        "program",
        "terminating",
        "execution",
        "always",
        "partially",
        "correct",
        "case",
        "example",
        "program",
        "mathsf",
        "mathsf",
        "mathsf",
        "skip",
        "formula",
        "rightarrow",
        "mathsf",
        "mathsf",
        "mathsf",
        "skip",
        "b",
        "deducible",
        "formula",
        "a",
        "b",
        "calculus",
        "offer",
        "basis",
        "proof",
        "program",
        "terminates",
        "modified",
        "account",
        "total",
        "correctness",
        "program",
        "partial",
        "correctness",
        "plus",
        "termination",
        "achieved",
        "amending",
        "rule",
        "iteration",
        "present",
        "refer",
        "interested",
        "reader",
        "apt",
        "let",
        "u",
        "first",
        "observe",
        "deterministic",
        "program",
        "one",
        "already",
        "capture",
        "total",
        "correctness",
        "via",
        "formula",
        "kind",
        "rightarrow",
        "langlealpharangle",
        "b",
        "expression",
        "langlealpharangle",
        "b",
        "mean",
        "execution",
        "alpha",
        "terminates",
        "state",
        "satisfies",
        "b",
        "moreover",
        "alpha",
        "deterministic",
        "possible",
        "terminating",
        "execution",
        "unique",
        "execution",
        "alpha",
        "thus",
        "one",
        "first",
        "manages",
        "prove",
        "program",
        "deterministic",
        "trick",
        "work",
        "well",
        "enough",
        "prove",
        "total",
        "correctness",
        "general",
        "solution",
        "problem",
        "total",
        "correctness",
        "exists",
        "realm",
        "pdl",
        "need",
        "extend",
        "little",
        "pratt",
        "already",
        "alluded",
        "pratt",
        "b",
        "pdl",
        "expressive",
        "enough",
        "capture",
        "infinite",
        "looping",
        "program",
        "reaction",
        "pdl",
        "repeating",
        "rpdl",
        "introduced",
        "streett",
        "contains",
        "program",
        "alpha",
        "expression",
        "deltaalpha",
        "standing",
        "new",
        "proposition",
        "semantics",
        "v",
        "deltaalpha",
        "x",
        "exists",
        "infinite",
        "sequence",
        "z_",
        "z_",
        "ldots",
        "state",
        "z_",
        "x",
        "n",
        "geq",
        "z_n",
        "r",
        "alpha",
        "z_",
        "n",
        "streett",
        "conjectured",
        "rpdl",
        "axiomatized",
        "adding",
        "proof",
        "system",
        "pdl",
        "precisely",
        "following",
        "axiom",
        "schema",
        "a",
        "deltaalpha",
        "rightarrow",
        "langlealpharangle",
        "deltaalpha",
        "a",
        "alpha",
        "rightarrow",
        "langlealpharangle",
        "rightarrow",
        "rightarrow",
        "deltaalpha",
        "proof",
        "conjecture",
        "provided",
        "sakalauskaite",
        "valiev",
        "version",
        "conjecture",
        "variant",
        "combinatory",
        "pdl",
        "also",
        "proved",
        "gargov",
        "passy",
        "easy",
        "see",
        "hoare",
        "calculus",
        "presented",
        "non",
        "termination",
        "come",
        "rule",
        "iteration",
        "analogously",
        "non",
        "termination",
        "pdl",
        "program",
        "come",
        "use",
        "unbounded",
        "iteration",
        "expression",
        "deltaalpha",
        "indicates",
        "alpha",
        "diverge",
        "kind",
        "notion",
        "need",
        "inductively",
        "define",
        "predicate",
        "infty",
        "program",
        "alpha",
        "formula",
        "infty",
        "alpha",
        "true",
        "exactly",
        "alpha",
        "enter",
        "nonterminating",
        "computation",
        "infty",
        "pi",
        "piinpi_",
        "infty",
        "infty",
        "alpha",
        "cup",
        "beta",
        "infty",
        "alpha",
        "lor",
        "infty",
        "beta",
        "infty",
        "alpha",
        "beta",
        "infty",
        "alpha",
        "lor",
        "langlealpharangle",
        "infty",
        "beta",
        "infty",
        "alpha",
        "deltaalpha",
        "lor",
        "langlealpha",
        "rangle",
        "infty",
        "alpha",
        "finally",
        "total",
        "correctness",
        "program",
        "expressed",
        "via",
        "formula",
        "kind",
        "rightarrow",
        "lnot",
        "infty",
        "alpha",
        "land",
        "alpha",
        "b",
        "mean",
        "literally",
        "a",
        "case",
        "program",
        "alpha",
        "run",
        "forever",
        "every",
        "successful",
        "execution",
        "alpha",
        "end",
        "state",
        "satisfying",
        "b"
    ]
}