{
    "main_text": "Computable functions and arithmetic\n5. Computable functions and arithmetic\n\nA remarkable feature of CL is that despite its seeming simplicity it is\na powerful formalism. Of course, the strength of CL cannot be\nappreciated without discovering certain relationships between combinatory\nterms or without an illustration that computable functions are definable.\n\nAn important beginning step in the formalization of mathematics is the\n formalization of arithmetic,\nthat was first achieved by the Dedekind\u2013Peano\naxiomatization. There are various ways to formalize arithmetic in CL; two\nrepresentations of numbers are described in this section together with some\nfunctions on them.\n\nNumbers may be thought to be objects (or abstract objects) of some\nsort. (Here by numbers we mean natural numbers, that is, \\(0\\) and the\npositive integers.) Numbers could be characterized, for example, by\nthe structure they possess as a set. This structure supports properties\nsuch as \\(0\\ne1\\), and that the sum of \\(n\\) and \\(m\\) is the same number as\nthe sum of \\(m\\) and \\(n\\).  Another well-known property of the natural\nnumbers is, for example, the existence of infinitely many prime numbers.\n\nNumbers can be represented in CL by terms, and one way is to choose the terms\n\\(\\textsf{KI}\\), \\(\\textsf{I}\\), \\(\\textsf{SBI}\\), \\(\\textsf{SB}\n(\\textsf{SBI}),\\ldots\\) for \\(0\\), \\(1\\), \\(2\\), \\(3\\), etc. The terms that\nrepresent the arithmetic operations vary, depending on which terms stand for\nthe numbers. Note that unlike the Dedekind\u2013Peano formalization of\narithmetic, CL makes no syntactic distinction that would parallel the\ndifference between individual constants and function symbols\u2014in CL the\nonly objects are terms. The above list of terms already shows the successor\nfunction, which is \\(\\textsf{SB}\\). (\\(\\textsf{SB}(\\textsf{KI})\\) strongly\nequals to \\(\\textsf{I}\\), that is, \\(1\\) is the successor of \\(0\\).)\n\nAddition is the term \\(\\textsf{BS}(\\textsf{BB})\\),\nand multiplication is the term \\(\\textsf{B}\\). The usual recursive\ndefinition of multiplication based on addition may suggest that addition\nshould be a simpler operation than multiplication. However, in CL the numbers \nthemselves are functions, and so they have properties that allows \n\\(\\textsf{B}\\)\u2014a simpler looking term\u2014to be chosen for the\nfunction that is often perceived to be more complex than addition. (The\naddition operation could be defined using primitive recursion, which would\nproduce a more complex term.) As a classical example, we may consider the term\n\\(\\textsf{BII}\\), that is strongly equal to \\(\\textsf{I}\\), that is, \n\\(1\\times1=1\\)\u2014as expected. We do not pursue here this numerical\nrepresentation further. We only note that the shape of these numbers is\nclosely related to Church\u2019s numerals in the \\(\\lambda\\)-calculus, each of\nwhich is a binary function (whereas here, each number is a unary\nfunction).\n\nAnother way to represent numbers in CL is to start with a different choice of\nterms for the numbers. Previously, \\(\\textsf{I}\\) stood for \\(1\\), now we take\n\\(\\textsf{I}\\) to be \\(0\\). The successor of a number \\(n\\) is \\(\\textsf{V}\n(\\textsf{KI})n\\), where the second occurrence of \\(n\\) indicates a numeral,\nthat is, the combinator that represents \\(n\\). (The numeral for \\(n\\) is often\ndenoted\u2014more precisely\u2014by an overlined or otherwise decorated\n\\(n\\). However, the double usage of \\(n\\) in a limited context should not\ncause any confusion.) In other words, the successor function is \n\\(\\textsf{V}(\\textsf{KI})\\). Notice that the numbers in the present\nrepresentation are terms over a more restricted combinatory base than in the\nformer case. For example, no combinator with duplicative effect is definable\nfrom \\(\\{\\textsf{I},\\textsf{K},\\textsf{V}\\}\\).\n\nSome simple recursive functions may be defined as follows. The \npredecessor function \\(P\\) on numbers is \u201c\\(-1\\)\u201d (i.e.,\nsubtracting one) for all numbers greater than or equal to \\(1\\), and the\npredecessor of \\(0\\) is set to be \\(0\\). The next term defines the predecessor\nfunction which is abbreviated by \\(P\\).\n\n\\[\nP=\\textsf{C}(\\textsf{W}(\\textsf{BB}(\\textsf{C}(\\textsf{TK})\\textsf{I})))(\\textsf{KI})\n\\]\n\n\nIf \\(n\\) is a numeral, then \\(Pn\\) reduces to \\(n\\textsf{KI}(n(\n\\textsf{KI}))\\), which suggests that for positive numbers, \\(P\\) could have\nbeen defined to be the term \\(\\textsf{T}(\\textsf{KI})\\), because \n\\(\\textsf{T}(\\textsf{KI})n\\) reduces to \\(n-1\\) whenever \\(n\\) is a term of\nthe form \\(\\textsf{V}(\\textsf{KI})(n-1)\\).\n\nSome models of computation (such as register machines) and certain programming\nlanguages include a test for zero as a primitive construct. It is\nuseful to find a CL-term for a function \\(Z\\) such that \\(Znxy\\) reduces to \\(x\\)\nif \\(n\\) is zero, whereas \\(Znxy\\) reduces to \\(y\\) when \\(n\\) is positive. \n\\(Znxy\\) may be thought of as the conditional instruction \u201cIf \\(n=0\\) \nthen \\(x\\) else \\(y\\),\u201d where \\(x\\) and \\(y\\) are themselves functions. \n(Of course, in the pseudo-code one should have assumed that \\(n\\) is of\ninteger type and cannot take a negative value, that could be guaranteed by a\ndeclaration of variables and an additional conditional statement.) The\nfollowing definition works for branching on zero.\n\n\\[\nZ=\\textsf{TK}\n\\]\n\n\n\\(\\textsf{TK}nxy=n\\textsf{K}xy\\), and if \\(n\\) is zero, that is, \\(n= \n\\textsf{I}\\), then by another step \\(\\textsf{K}xy\\) and then \\(x\\) results;\nwhereas if \\(n\\) is positive, then after a few more reductions, one gets\n\\(\\textsf{KI}xy\\), that is, \\(y\\). The two terms, \\(\\textsf{K}xy\\) and\n\\(\\textsf{KI}xy\\), hint toward an interpretation of \\(\\textsf{K}\\) and\n\\(\\textsf{KI}\\) as truth and falsity, or they can be viewed as\nterms that can select, respectively, the first or the second argument. These\nideas may be further developed into definitions of truth functions and a\nrepresentation of tuples.\n\nAddition may be defined by the recursive equation \\(+mn=Zmn\n(\\textsf{V}(\\textsf{KI})(+(Pm)n))\\), where \\(m\\) and \\(n\\) are numerals, and\n\\(P\\) and \\(Z\\) are the already defined functions. (The abbreviations are used\nto enhance the readability of the terms\u2014they can be replaced everywhere\nby the defining combinators.) To put into words, if \\(m\\) is \\(0\\) then the\nsum is \\(n\\), otherwise \\(m+n\\) is the successor of \\((m-1)+n\\). Of course,\nthis definition closely simulates the definition of addition from recursion\ntheory, where addition is often defined by the two equations \\(+(0,n)=n\\) and\n\\(+(s(m),n)=s(+(m,n))\\) (with \\(s\\) denoting the successor function). The fact\nthat CL can express addition in this form shows\u2014once again\u2014the\nversatility of CL.\n\nCombinatorial completeness guarantees that the term on the right hand side of\nthe defining equation for \\(+\\) (i.e., the term \\(Zmn(\\textsf{V}(\\textsf{KI})\n(+(Pm)n)))\\) can be transformed into a term in which \\(+\\) is the first, \\(m\\)\nand \\(n\\) are the second and third arguments, respectively. Then \\(+\\) can be\ndefined explicitly as the fixed point of the combinator\n\n\\[\n\\textsf{B}(\\textsf{BW})(\\textsf{BW}(\\textsf{B}(\\textsf{B}(\\textsf{C}\n(\\textsf{BB}(\\textsf{BC}(\\textsf{TK})))))(\\textsf{B}(\\textsf{B}(\\textsf{B}\n(\\textsf{V}(\\textsf{KI}))))(\\textsf{CB}(\\textsf{T}(\\textsf{KI})))))).\n\\]\n\n\nOf course, we can abbreviate the so obtained term as \\(+\\) for the sake of\ntransparency, just as we used earlier \\(P\\) and \\(Z\\) as shorthands for longer\ncombinatory terms.\n\nMultiplication is often denoted by \\(\\,\\cdot\\,\\). The recursive\nequation \\(\\,\\cdot\\, mn = Zm\\textsf{I}(+n(\\,\\cdot\\,(Pm)n))\\) defines\nmultiplication and it can be deciphered as \u201cif \\(m\\) is \\(0\\)\nthen the result is \\(0\\), else \\(n\\) is added to the result of\n\\((m-1)\\cdot n\\).\u201d The next step in the definition brings the\nright-hand side term to the form \\(\\textsf{X}\\cdot mn\\), where\n\\(\\textsf{X}\\) does not contain occurrences of \\(\\,\\cdot\\,\\), \\(m\\)\nor \\(n\\). Then taking the fixed point of \\(\\textsf{X}\\), and setting\n\\(\\,\\cdot\\,\\) to be \\(\\textsf{YX}\\) concludes the definition of the\nmultiplication function. For instance, the abstraction can yield the\ncombinator\n\n\\[\n\\textsf{BW}(\\textsf{B}(\\textsf{B}(\\textsf{C}(\\textsf{BB}(\\textsf{C}(\n\\textsf{TK})\\textsf{I}))))(\\textsf{B}(\\textsf{BW})(\\textsf{B}(\\textsf{B}\n(\\textsf{B}(\\textsf{C}+)))(\\textsf{CB}(\\textsf{T}(\\textsf{KI})))))).\n\\]\n\n\nThe factorial function is definable from the predecessor\nfunction plus from multiplication, and it is useful e.g., in\ncombinatorics. The factorial function (denoted by \\(\\,!\\,\\)) is\nrecursively definable by the equation \\(\\,!\\,\nm=Zm(\\textsf{V}(\\textsf{KI})\\textsf{I})(\\cdot m(\\,!  \\,(Pm)))\\), that\nmay be read as \u201cif \\(m\\) is \\(0\\), then \\(\\,!\\, m=1\\), otherwise\n\\(\\,!\\, m\\) equals to \\(m\\) multiplied by the factorial of\n\\(m-1\\).\u201d\n\nOf course, it is not necessary to define various numerical functions by\nsimulating their recursive definitions. As we saw above in the case of the\nfirst representation of numbers, we might just happen to have the right terms\nsuch as \\(\\textsf{BS}(\\textsf{BB})\\) and \\(\\textsf{B}\\), that behave as the\ntarget functions do on numbers. That is, an equally good way to define\narithmetic functions is to simply list some terms and then show that they\nbehave as expected. However, once it has been shown that the basic\nprimitive recursive functions together with recursion\nand minimization can be emulated in CL, we have got not only a nice\ncollection of arithmetic functions in the form of combinators to work with,\nbut also a proof that combinatory logic is sufficiently expressive to\nformalize all partial recursive functions. Indeed, the remaining steps\nof such a proof can be carried out in CL, though the details are beyond the\nscope of this entry.\n",
    "section_title": "5. Computable functions and arithmetic",
    "entry_title": "Combinatory Logic",
    "hierarchy_title": "Combinatory Logic || Computable functions and arithmetic",
    "tokenized_text": [
        "computable",
        "function",
        "arithmetic",
        "computable",
        "function",
        "arithmetic",
        "remarkable",
        "feature",
        "cl",
        "despite",
        "seeming",
        "simplicity",
        "powerful",
        "formalism",
        "course",
        "strength",
        "cl",
        "appreciated",
        "without",
        "discovering",
        "certain",
        "relationship",
        "combinatory",
        "term",
        "without",
        "illustration",
        "computable",
        "function",
        "definable",
        "important",
        "beginning",
        "step",
        "formalization",
        "mathematics",
        "formalization",
        "arithmetic",
        "first",
        "achieved",
        "dedekindpeano",
        "axiomatization",
        "various",
        "way",
        "formalize",
        "arithmetic",
        "cl",
        "two",
        "representation",
        "number",
        "described",
        "section",
        "together",
        "function",
        "number",
        "may",
        "thought",
        "object",
        "abstract",
        "object",
        "sort",
        "number",
        "mean",
        "natural",
        "number",
        "positive",
        "integer",
        "number",
        "could",
        "characterized",
        "example",
        "structure",
        "posse",
        "set",
        "structure",
        "support",
        "property",
        "ne",
        "sum",
        "n",
        "m",
        "number",
        "sum",
        "m",
        "n",
        "another",
        "wellknown",
        "property",
        "natural",
        "number",
        "example",
        "existence",
        "infinitely",
        "many",
        "prime",
        "number",
        "number",
        "represented",
        "cl",
        "term",
        "one",
        "way",
        "choose",
        "term",
        "textsf",
        "ki",
        "textsf",
        "textsf",
        "sbi",
        "textsf",
        "sb",
        "textsf",
        "sbi",
        "ldots",
        "etc",
        "term",
        "represent",
        "arithmetic",
        "operation",
        "vary",
        "depending",
        "term",
        "stand",
        "number",
        "note",
        "unlike",
        "dedekindpeano",
        "formalization",
        "arithmetic",
        "cl",
        "make",
        "syntactic",
        "distinction",
        "would",
        "parallel",
        "difference",
        "individual",
        "constant",
        "function",
        "symbolsin",
        "cl",
        "object",
        "term",
        "list",
        "term",
        "already",
        "show",
        "successor",
        "function",
        "textsf",
        "sb",
        "textsf",
        "sb",
        "textsf",
        "ki",
        "strongly",
        "equal",
        "textsf",
        "successor",
        "addition",
        "term",
        "textsf",
        "b",
        "textsf",
        "bb",
        "multiplication",
        "term",
        "textsf",
        "b",
        "usual",
        "recursive",
        "definition",
        "multiplication",
        "based",
        "addition",
        "may",
        "suggest",
        "addition",
        "simpler",
        "operation",
        "multiplication",
        "however",
        "cl",
        "number",
        "function",
        "property",
        "allows",
        "textsf",
        "b",
        "a",
        "simpler",
        "looking",
        "termto",
        "chosen",
        "function",
        "often",
        "perceived",
        "complex",
        "addition",
        "addition",
        "operation",
        "could",
        "defined",
        "using",
        "primitive",
        "recursion",
        "would",
        "produce",
        "complex",
        "term",
        "classical",
        "example",
        "may",
        "consider",
        "term",
        "textsf",
        "bii",
        "strongly",
        "equal",
        "textsf",
        "times",
        "as",
        "expected",
        "pursue",
        "numerical",
        "representation",
        "note",
        "shape",
        "number",
        "closely",
        "related",
        "church",
        "numeral",
        "lambda",
        "calculus",
        "binary",
        "function",
        "whereas",
        "number",
        "unary",
        "function",
        "another",
        "way",
        "represent",
        "number",
        "cl",
        "start",
        "different",
        "choice",
        "term",
        "number",
        "previously",
        "textsf",
        "stood",
        "take",
        "textsf",
        "successor",
        "number",
        "n",
        "textsf",
        "v",
        "textsf",
        "ki",
        "n",
        "second",
        "occurrence",
        "n",
        "indicates",
        "numeral",
        "combinator",
        "represents",
        "n",
        "numeral",
        "n",
        "often",
        "denotedmore",
        "preciselyby",
        "overlined",
        "otherwise",
        "decorated",
        "n",
        "however",
        "double",
        "usage",
        "n",
        "limited",
        "context",
        "cause",
        "confusion",
        "word",
        "successor",
        "function",
        "textsf",
        "v",
        "textsf",
        "ki",
        "notice",
        "number",
        "present",
        "representation",
        "term",
        "restricted",
        "combinatory",
        "base",
        "former",
        "case",
        "example",
        "combinator",
        "duplicative",
        "effect",
        "definable",
        "textsf",
        "textsf",
        "k",
        "textsf",
        "v",
        "simple",
        "recursive",
        "function",
        "may",
        "defined",
        "follows",
        "predecessor",
        "function",
        "p",
        "number",
        "ie",
        "subtracting",
        "one",
        "number",
        "greater",
        "equal",
        "predecessor",
        "set",
        "next",
        "term",
        "defines",
        "predecessor",
        "function",
        "abbreviated",
        "p",
        "ptextsf",
        "c",
        "textsf",
        "w",
        "textsf",
        "bb",
        "textsf",
        "c",
        "textsf",
        "tk",
        "textsf",
        "textsf",
        "ki",
        "n",
        "numeral",
        "pn",
        "reduces",
        "ntextsf",
        "ki",
        "n",
        "textsf",
        "ki",
        "suggests",
        "positive",
        "number",
        "p",
        "could",
        "defined",
        "term",
        "textsf",
        "textsf",
        "ki",
        "textsf",
        "textsf",
        "ki",
        "n",
        "reduces",
        "n",
        "whenever",
        "n",
        "term",
        "form",
        "textsf",
        "v",
        "textsf",
        "ki",
        "n",
        "model",
        "computation",
        "register",
        "machine",
        "certain",
        "programming",
        "language",
        "include",
        "test",
        "zero",
        "primitive",
        "construct",
        "useful",
        "find",
        "clterm",
        "function",
        "z",
        "znxy",
        "reduces",
        "x",
        "n",
        "zero",
        "whereas",
        "znxy",
        "reduces",
        "y",
        "n",
        "positive",
        "znxy",
        "may",
        "thought",
        "conditional",
        "instruction",
        "n",
        "x",
        "else",
        "y",
        "x",
        "y",
        "function",
        "course",
        "pseudocode",
        "one",
        "assumed",
        "n",
        "integer",
        "type",
        "take",
        "negative",
        "value",
        "could",
        "guaranteed",
        "declaration",
        "variable",
        "additional",
        "conditional",
        "statement",
        "following",
        "definition",
        "work",
        "branching",
        "zero",
        "ztextsf",
        "tk",
        "textsf",
        "tk",
        "nxyntextsf",
        "k",
        "xy",
        "n",
        "zero",
        "n",
        "textsf",
        "another",
        "step",
        "textsf",
        "k",
        "xy",
        "x",
        "result",
        "whereas",
        "n",
        "positive",
        "reduction",
        "one",
        "get",
        "textsf",
        "ki",
        "xy",
        "y",
        "two",
        "term",
        "textsf",
        "k",
        "xy",
        "textsf",
        "ki",
        "xy",
        "hint",
        "toward",
        "interpretation",
        "textsf",
        "k",
        "textsf",
        "ki",
        "truth",
        "falsity",
        "viewed",
        "term",
        "select",
        "respectively",
        "first",
        "second",
        "argument",
        "idea",
        "may",
        "developed",
        "definition",
        "truth",
        "function",
        "representation",
        "tuples",
        "addition",
        "may",
        "defined",
        "recursive",
        "equation",
        "mnzmn",
        "textsf",
        "v",
        "textsf",
        "ki",
        "pm",
        "n",
        "m",
        "n",
        "numeral",
        "p",
        "z",
        "already",
        "defined",
        "function",
        "abbreviation",
        "used",
        "enhance",
        "readability",
        "termsthey",
        "replaced",
        "everywhere",
        "defining",
        "combinators",
        "put",
        "word",
        "m",
        "sum",
        "n",
        "otherwise",
        "mn",
        "successor",
        "m",
        "n",
        "course",
        "definition",
        "closely",
        "simulates",
        "definition",
        "addition",
        "recursion",
        "theory",
        "addition",
        "often",
        "defined",
        "two",
        "equation",
        "n",
        "n",
        "n",
        "s",
        "n",
        "s",
        "denoting",
        "successor",
        "function",
        "fact",
        "cl",
        "express",
        "addition",
        "form",
        "showsonce",
        "againthe",
        "versatility",
        "cl",
        "combinatorial",
        "completeness",
        "guarantee",
        "term",
        "right",
        "hand",
        "side",
        "defining",
        "equation",
        "ie",
        "term",
        "zmn",
        "textsf",
        "v",
        "textsf",
        "ki",
        "pm",
        "n",
        "transformed",
        "term",
        "first",
        "m",
        "n",
        "second",
        "third",
        "argument",
        "respectively",
        "defined",
        "explicitly",
        "fixed",
        "point",
        "combinator",
        "textsf",
        "b",
        "textsf",
        "bw",
        "textsf",
        "bw",
        "textsf",
        "b",
        "textsf",
        "b",
        "textsf",
        "c",
        "textsf",
        "bb",
        "textsf",
        "bc",
        "textsf",
        "tk",
        "textsf",
        "b",
        "textsf",
        "b",
        "textsf",
        "b",
        "textsf",
        "v",
        "textsf",
        "ki",
        "textsf",
        "cb",
        "textsf",
        "textsf",
        "ki",
        "course",
        "abbreviate",
        "obtained",
        "term",
        "sake",
        "transparency",
        "used",
        "earlier",
        "p",
        "z",
        "shorthand",
        "longer",
        "combinatory",
        "term",
        "multiplication",
        "often",
        "denoted",
        "cdot",
        "recursive",
        "equation",
        "cdot",
        "mn",
        "zmtextsf",
        "n",
        "cdot",
        "pm",
        "n",
        "defines",
        "multiplication",
        "deciphered",
        "m",
        "result",
        "else",
        "n",
        "added",
        "result",
        "m",
        "cdot",
        "n",
        "next",
        "step",
        "definition",
        "brings",
        "righthand",
        "side",
        "term",
        "form",
        "textsf",
        "x",
        "cdot",
        "mn",
        "textsf",
        "x",
        "contain",
        "occurrence",
        "cdot",
        "m",
        "n",
        "taking",
        "fixed",
        "point",
        "textsf",
        "x",
        "setting",
        "cdot",
        "textsf",
        "yx",
        "concludes",
        "definition",
        "multiplication",
        "function",
        "instance",
        "abstraction",
        "yield",
        "combinator",
        "textsf",
        "bw",
        "textsf",
        "b",
        "textsf",
        "b",
        "textsf",
        "c",
        "textsf",
        "bb",
        "textsf",
        "c",
        "textsf",
        "tk",
        "textsf",
        "textsf",
        "b",
        "textsf",
        "bw",
        "textsf",
        "b",
        "textsf",
        "b",
        "textsf",
        "b",
        "textsf",
        "c",
        "textsf",
        "cb",
        "textsf",
        "textsf",
        "ki",
        "factorial",
        "function",
        "definable",
        "predecessor",
        "function",
        "plus",
        "multiplication",
        "useful",
        "eg",
        "combinatorics",
        "factorial",
        "function",
        "denoted",
        "recursively",
        "definable",
        "equation",
        "mzm",
        "textsf",
        "v",
        "textsf",
        "ki",
        "textsf",
        "cdot",
        "pm",
        "may",
        "read",
        "m",
        "m",
        "otherwise",
        "m",
        "equal",
        "m",
        "multiplied",
        "factorial",
        "m",
        "course",
        "necessary",
        "define",
        "various",
        "numerical",
        "function",
        "simulating",
        "recursive",
        "definition",
        "saw",
        "case",
        "first",
        "representation",
        "number",
        "might",
        "happen",
        "right",
        "term",
        "textsf",
        "b",
        "textsf",
        "bb",
        "textsf",
        "b",
        "behave",
        "target",
        "function",
        "number",
        "equally",
        "good",
        "way",
        "define",
        "arithmetic",
        "function",
        "simply",
        "list",
        "term",
        "show",
        "behave",
        "expected",
        "however",
        "shown",
        "basic",
        "primitive",
        "recursive",
        "function",
        "together",
        "recursion",
        "minimization",
        "emulated",
        "cl",
        "got",
        "nice",
        "collection",
        "arithmetic",
        "function",
        "form",
        "combinators",
        "work",
        "also",
        "proof",
        "combinatory",
        "logic",
        "sufficiently",
        "expressive",
        "formalize",
        "partial",
        "recursive",
        "function",
        "indeed",
        "remaining",
        "step",
        "proof",
        "carried",
        "cl",
        "though",
        "detail",
        "beyond",
        "scope",
        "entry"
    ]
}