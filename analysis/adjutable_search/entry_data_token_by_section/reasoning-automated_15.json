{
    "main_text": "Applications || Formal Verification of Software\n4.5 Formal Verification of Software\n\nSociety is becoming increasingly dependent on software systems for\ncritical services such as safety and security. Serious adverse effects\nof malfunctioning software include loss of human life, threats to\nsecurity, unauthorized access to sensitive information, large\nfinancial losses, denial of critical services, and risk to safety. One\nway to increase the quality of critical software is to supplement\ntraditional methods of testing and validation with techniques of\nformal verification. The basic approach to formal verification is to\ngenerate a number of conditions that the software must meet and to\nverify\u2014establish\u2014them by mathematical proof. As with\nhardware, automated formal verification (simply formal verification,\nhereafter) is concerned with discharging these proof obligations using\nan automated theorem prover.\n\nThe formal verification of security protocols is an\nalmost ideal application of automated theorem proving in industry.\nSecurity protocols are small distributed programs aimed at ensuring\nthat transactions take place securely over public networks. The\nspecification of a security protocol is relatively small and well\ndefined but its verification is certainly non-trivial. We have already\nmentioned in a previous section the use of SAT-based theorem provers\nin the verification of the U.S Data Encryption Standard (DES). As\nanother example, the Mondex \u201celectronic purse\u201d is a smart\ncard electronic cash system that was originally developed by National\nWestminster Bank and subsequently sold to MasterCard International.\nSchmitt & Tonin 2007 describe a Java Card implementation of the\nMondex protocol for which the security properties were reformulated in\nthe Java Modeling Language (JML) following closely the original Z\nspecification. Proof of correctness was conducted using the KeY tool\n(Beckert, Hanle & Schmitt 2007), an interactive theorem proving\nenvironment for first-order dynamic logic that allows the user to\nprove properties of imperative and object-oriented sequential\nprograms. This application of automated reasoning demonstrates, in the\nwords of the authors, that \u201cit is possible to bridge the gap\nbetween specification and implementation ensuring a fully verified\nresult\u201d.\n\nDenney, Fischer & Schumann 2004 describe a system to automate the\ncertification of safety properties of data-analysis aerospace\nsoftware at NASA. Using Hoare-style program verification\ntechniques, their system generates proof obligations that are then\nhandled by an automated theorem prover. The process is not fully\nautomated, however, since many of the obligations must be simplified\nfirst in order to improve the ability of the theorem prover to solve\nthe proof tasks. For example, one such class of obligations makes a\nstatement about a matrix, r, that needs to remain symmetric\nafter updates along its diagonal have been made, and has the form:\n\nOriginal form:\n\nsymm(r) \u2192\nsymm(diag-updates(r))\n\nSimplified form (when r is 2x2):\n\n\n\n(\u2200i)(\u2200j)(0 \u2264 i,\nj \u2264 1 \u2192 sel(r, i,\nj) = sel(r, j, i))\n\u2192 \n\n(\u2200k)(\u2200l)(0 \u2264 k,\nl \u2264 1 \u2192 \n\nsel(upd(upd(r,\n1, 1,\nr11), 0, 0, r00), k,\nl) = sel(upd(upd(r, 1, 1,\nr11), 0, 0, r00), l,\nk))) \n\n\n\nEven after the simplification, current theorem provers find the proof\ntask challenging. The task becomes intractable for larger matrices and\nnumber of updates (e.g. a 6\u00d76 matrix with 36 updates) and\nfurther preprocessing and simplification on the obligation is required\nbefore the task eventually falls within the reach of state-of-art\ntheorem provers. But it is worth remarking that proofs are found\nwithout using any specific features or configuration parameters of the\ntheorem provers which would improve their chances at completing the\nproofs.  This is important since the everyday application of theorem\nprovers in industry cannot presuppose such deep knowledge of the\nprover from their users. The formal verification of software remains a\ndemanding task but it is difficult to see how the certification of\nproperties could happen without the assistance of automated deduction\nwhen one faces the humanly impossible task of establishing thousands\nof such obligations.\n\nIn the field of nuclear engineering, techniques of\nautomated reasoning are deemed mature enough to assist in the formal\nverification of the safety-critical software responsible for\ncontrolling a nuclear power plant\u2019s reactor prevention systems (RPS).\nThe RPS component of the digital control system of the APR-1400\nnuclear reactor is specified using NuSCR, a formal specification\nlanguage customized for nuclear applications (Yoo, Jee & Cha 2009).\nModel checking in computation tree logic is used to check the\nspecifications for completeness and consistency. After this, nuclear\nengineers generate function block designs via a process of automatic\nsynthesis and formally verify the designs also using techniques of\nmodel checking in linear temporal logic; the techniques are also used\nto verify the equivalence of the multiple revisions and releases of\nthe design. These model-checking tools were implemented to make their\nuse as easy and intuitive as possible, in a way that did not require a\ndeep knowledge of the techniques, and used notations familiar to\nnuclear engineers. The use of automated reasoning tools not only helps\nthe design engineers to establish the desired results but it also\nraises the confidence of the government\u2019s regulatory personnel that\nneed to approve the RPS software before the reactor can be certified\nfor operation.\n",
    "section_title": "4.5 Formal Verification of Software",
    "entry_title": "Automated Reasoning",
    "hierarchy_title": "Automated Reasoning || Applications || Formal Verification of Software",
    "tokenized_text": [
        "application",
        "formal",
        "verification",
        "software",
        "formal",
        "verification",
        "software",
        "society",
        "becoming",
        "increasingly",
        "dependent",
        "software",
        "system",
        "critical",
        "service",
        "safety",
        "security",
        "serious",
        "adverse",
        "effect",
        "malfunctioning",
        "software",
        "include",
        "loss",
        "human",
        "life",
        "threat",
        "security",
        "unauthorized",
        "access",
        "sensitive",
        "information",
        "large",
        "financial",
        "loss",
        "denial",
        "critical",
        "service",
        "risk",
        "safety",
        "one",
        "way",
        "increase",
        "quality",
        "critical",
        "software",
        "supplement",
        "traditional",
        "method",
        "testing",
        "validation",
        "technique",
        "formal",
        "verification",
        "basic",
        "approach",
        "formal",
        "verification",
        "generate",
        "number",
        "condition",
        "software",
        "must",
        "meet",
        "verifyestablishthem",
        "mathematical",
        "proof",
        "hardware",
        "automated",
        "formal",
        "verification",
        "simply",
        "formal",
        "verification",
        "hereafter",
        "concerned",
        "discharging",
        "proof",
        "obligation",
        "using",
        "automated",
        "theorem",
        "prover",
        "formal",
        "verification",
        "security",
        "protocol",
        "almost",
        "ideal",
        "application",
        "automated",
        "theorem",
        "proving",
        "industry",
        "security",
        "protocol",
        "small",
        "distributed",
        "program",
        "aimed",
        "ensuring",
        "transaction",
        "take",
        "place",
        "securely",
        "public",
        "network",
        "specification",
        "security",
        "protocol",
        "relatively",
        "small",
        "well",
        "defined",
        "verification",
        "certainly",
        "nontrivial",
        "already",
        "mentioned",
        "previous",
        "section",
        "use",
        "satbased",
        "theorem",
        "provers",
        "verification",
        "us",
        "data",
        "encryption",
        "standard",
        "de",
        "another",
        "example",
        "mondex",
        "electronic",
        "purse",
        "smart",
        "card",
        "electronic",
        "cash",
        "system",
        "originally",
        "developed",
        "national",
        "westminster",
        "bank",
        "subsequently",
        "sold",
        "mastercard",
        "international",
        "schmitt",
        "tonin",
        "describe",
        "java",
        "card",
        "implementation",
        "mondex",
        "protocol",
        "security",
        "property",
        "reformulated",
        "java",
        "modeling",
        "language",
        "jml",
        "following",
        "closely",
        "original",
        "z",
        "specification",
        "proof",
        "correctness",
        "conducted",
        "using",
        "key",
        "tool",
        "beckert",
        "hanle",
        "schmitt",
        "interactive",
        "theorem",
        "proving",
        "environment",
        "firstorder",
        "dynamic",
        "logic",
        "allows",
        "user",
        "prove",
        "property",
        "imperative",
        "objectoriented",
        "sequential",
        "program",
        "application",
        "automated",
        "reasoning",
        "demonstrates",
        "word",
        "author",
        "possible",
        "bridge",
        "gap",
        "specification",
        "implementation",
        "ensuring",
        "fully",
        "verified",
        "result",
        "denney",
        "fischer",
        "schumann",
        "describe",
        "system",
        "automate",
        "certification",
        "safety",
        "property",
        "dataanalysis",
        "aerospace",
        "software",
        "nasa",
        "using",
        "hoarestyle",
        "program",
        "verification",
        "technique",
        "system",
        "generates",
        "proof",
        "obligation",
        "handled",
        "automated",
        "theorem",
        "prover",
        "process",
        "fully",
        "automated",
        "however",
        "since",
        "many",
        "obligation",
        "must",
        "simplified",
        "first",
        "order",
        "improve",
        "ability",
        "theorem",
        "prover",
        "solve",
        "proof",
        "task",
        "example",
        "one",
        "class",
        "obligation",
        "make",
        "statement",
        "matrix",
        "r",
        "need",
        "remain",
        "symmetric",
        "update",
        "along",
        "diagonal",
        "made",
        "form",
        "original",
        "form",
        "symm",
        "r",
        "symm",
        "diagupdates",
        "r",
        "simplified",
        "form",
        "r",
        "x",
        "i",
        "j",
        "j",
        "sel",
        "r",
        "j",
        "sel",
        "r",
        "j",
        "k",
        "l",
        "k",
        "l",
        "sel",
        "upd",
        "upd",
        "r",
        "r",
        "r",
        "k",
        "l",
        "sel",
        "upd",
        "upd",
        "r",
        "r",
        "r",
        "l",
        "k",
        "even",
        "simplification",
        "current",
        "theorem",
        "provers",
        "find",
        "proof",
        "task",
        "challenging",
        "task",
        "becomes",
        "intractable",
        "larger",
        "matrix",
        "number",
        "update",
        "eg",
        "matrix",
        "update",
        "preprocessing",
        "simplification",
        "obligation",
        "required",
        "task",
        "eventually",
        "fall",
        "within",
        "reach",
        "stateofart",
        "theorem",
        "provers",
        "worth",
        "remarking",
        "proof",
        "found",
        "without",
        "using",
        "specific",
        "feature",
        "configuration",
        "parameter",
        "theorem",
        "provers",
        "would",
        "improve",
        "chance",
        "completing",
        "proof",
        "important",
        "since",
        "everyday",
        "application",
        "theorem",
        "provers",
        "industry",
        "presuppose",
        "deep",
        "knowledge",
        "prover",
        "user",
        "formal",
        "verification",
        "software",
        "remains",
        "demanding",
        "task",
        "difficult",
        "see",
        "certification",
        "property",
        "could",
        "happen",
        "without",
        "assistance",
        "automated",
        "deduction",
        "one",
        "face",
        "humanly",
        "impossible",
        "task",
        "establishing",
        "thousand",
        "obligation",
        "field",
        "nuclear",
        "engineering",
        "technique",
        "automated",
        "reasoning",
        "deemed",
        "mature",
        "enough",
        "assist",
        "formal",
        "verification",
        "safetycritical",
        "software",
        "responsible",
        "controlling",
        "nuclear",
        "power",
        "plant",
        "reactor",
        "prevention",
        "system",
        "rps",
        "rps",
        "component",
        "digital",
        "control",
        "system",
        "apr",
        "nuclear",
        "reactor",
        "specified",
        "using",
        "nuscr",
        "formal",
        "specification",
        "language",
        "customized",
        "nuclear",
        "application",
        "yoo",
        "jee",
        "cha",
        "model",
        "checking",
        "computation",
        "tree",
        "logic",
        "used",
        "check",
        "specification",
        "completeness",
        "consistency",
        "nuclear",
        "engineer",
        "generate",
        "function",
        "block",
        "design",
        "via",
        "process",
        "automatic",
        "synthesis",
        "formally",
        "verify",
        "design",
        "also",
        "using",
        "technique",
        "model",
        "checking",
        "linear",
        "temporal",
        "logic",
        "technique",
        "also",
        "used",
        "verify",
        "equivalence",
        "multiple",
        "revision",
        "release",
        "design",
        "modelchecking",
        "tool",
        "implemented",
        "make",
        "use",
        "easy",
        "intuitive",
        "possible",
        "way",
        "require",
        "deep",
        "knowledge",
        "technique",
        "used",
        "notation",
        "familiar",
        "nuclear",
        "engineer",
        "use",
        "automated",
        "reasoning",
        "tool",
        "help",
        "design",
        "engineer",
        "establish",
        "desired",
        "result",
        "also",
        "raise",
        "confidence",
        "government",
        "regulatory",
        "personnel",
        "need",
        "approve",
        "rps",
        "software",
        "reactor",
        "certified",
        "operation"
    ]
}