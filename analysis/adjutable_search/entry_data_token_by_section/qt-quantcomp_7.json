{
    "main_text": "Basics || Quantum-Circuit-Based Algorithms\n3.1 Quantum-Circuit-Based Algorithms\n3.1.1 Oracles\n\nThe first quantum algorithms were designed to solve problems which\nessentially involve the use of an \u201coracle\u201d, so let us\nbegin by explaining this term. Oracles are used by computer scientists\nas conceptual aids in the complexity-theoretic analysis of algorithms.\nWe can think of an oracle as a kind of imaginary magic black box\n(Arora and Barak (2009, 72\u201373); Aaronson (2013a, 29ff.)) to\nwhich, like the famous oracle at Delphi, one poses (yes or no)\nquestions. Unlike that ancient oracle, the oracles considered in\ncomputer science always return an answer in a single time\nstep. For example, we can imagine an oracle to determine whether a\ngiven Boolean formula is satisfiable or not: Given as input the\ndescription of a particular propositional formula, the oracle\noutputs\u2014in a single time step\u2014a single bit indicating\nwhether or not there is a truth-value assignment satisfying that\nformula. Obviously such a machine does not really\nexist\u2014SAT is an NP-complete problem\u2014but\nthat is not the point. The point of using such imaginary devices is to\nabstract away from certain \u201cimplementational details\u201d\nwhich are for whatever reason deemed unimportant for the\ncomplexity-theoretic analysis of a given problem. For example,\nSimon\u2019s problem (Simon 1994, see below) is that of determining\nthe period of a given function \\(f\\) that is periodic under bit-wise\nmodulo-2 addition. Relative to Simon\u2019s problem, we judge the\ninternal complexity of \\(f\\) to be unimportant, and so abstract away\nfrom it by imagining that we have an oracle to evaluate it in a single\nstep. As useful as these conceptual devices are, however, their\nusefulness has limitations. To take one example, there are oracles\nrelative to which P = NP, as well as\noracles relative to which P \\(\\not =\\)\nNP. This (and many other) questions are not clarified\nby oracles (see Fortnow 1994).\n3.1.2 Deutsch\u2019s Algorithm\n\nDeutsch (1989) asks the following question: Suppose we have a function\n\\(f\\) which can be either constant\u2014i.e. such that it produces\nthe same output value for each of its possible inputs, or\nbalanced\u2014i.e. such that the output of one half of its possible\ninputs is the opposite of the output of the other half. The particular\nexample considered is the function \\(f : \\{0,1\\} \\rightarrow\n\\{0,1\\}\\), which is constant if \\(f\\)(0) \\(= f\\)(1) and balanced if\n\\(f\\)(0) \\(\\ne f\\)(1). Classically it would take two\nevaluations of the function to tell whether it is one or the other.\nQuantumly, we can answer this question in one evaluation. For\nDeutsch, the explanation for this complexity reduction involves an\nappeal to \u201cmany computational worlds\u201d (see section 5.1.1).\n Arguably, however, a fully satisfactory answer appeals only to the\nsuperposition principle and entanglement (Bub 2010).\n\nAfter initially preparing the first and second qubits of the computer\nin the state \\(\\lvert 0\\rangle\\lvert 0\\rangle\\), one then\n\u201cflips\u201d the second qubit using a \u201cNOT\u201d gate\n(i.e. a Pauli X operation) to \\(\\lvert 1 \\rangle\\),\nand then subjects each qubit to a Hadamard gate. We now send the two\nqubits through an oracle or \u2018black box\u2019 which we imagine\nas a unitary gate, \\(\\mathbf{U}_f\\), representative of the function\nwhose character (of being either constant or balanced) we wish to\ndetermine. We define \\(\\mathbf{U}_f\\) so that it takes inputs like\n\\(\\lvert x,y\\rangle\\) to \\(\\lvert x, y\\oplus f (x)\\rangle\\), where\n\\(\\oplus\\) is addition modulo two (i.e. exclusive-or). The first qubit\nis then fed into a further Hadamard gate, and the final output of the\nalgorithm (prior to measurement) is the state: \\[\\pm\\lvert f(0)\\oplus\nf(1)\\rangle~\\lvert - \\rangle,\\] where \\(\\lvert - \\rangle =_{df}\n\\frac{| 0 \\rangle - | 1 \\rangle}{\\sqrt 2}\\). Since \\(f\\)(0)\\(\\oplus\nf\\)(1) is 0 if the function is constant and 1 if the function is\nbalanced, a single measurement of the first qubit suffices to retrieve\nthe answer to our original question regarding the function\u2019s\nnature. And since there are two possible constant functions and two\npossible balanced functions from \\(f : \\{0,1\\} \\rightarrow \\{0,1\\}\\),\nwe can characterise the algorithm as distinguishing, using only one\noracle call, between two quantum disjunctions without finding out the\ntruth values of the disjuncts themselves, i.e. without\ndetermining which balanced or which constant\nfunction \\(f\\) is (Bub 2010).\n\nA generalisation of Deutsch\u2019s problem, called the Deutsch-Jozsa\nproblem (Deutsch and Jozsa 1992), enlarges the class of functions\nunder consideration so as to include all of the functions\n\\(f:\\{0,1\\}^n\\to\\{0,1\\}\\), i.e. rather than only considering \\(n =\n1\\). The best deterministic classical algorithm for determining\nwhether a given such function is constant or balanced requires\n\\(\\frac{2^{n}}{2}+1\\) queries to an oracle in order to solve this\nproblem. In a quantum computer, however, we can answer the question\nusing one oracle call. Generalising our conclusion regarding\nthe Deutsch algorithm, we may say that the Deutsch-Jozsa algorithm\nallows one to evaluate a global property of the function in one\nmeasurement because the output state is a superposition of balanced\nand constant states such that the balanced states all lie in a\nsubspace orthogonal to the constant states and can therefore be\ndistinguished from the latter in a single measurement (Bub 2006a)\n3.1.3 Simon\u2019s Algorithm\n\nSuppose we have a Boolean function \\(f\\) on \\(n\\) bits that is 2-to-1,\ni.e. that takes \\(n\\) bits to \\(n-1\\) bits in such a way that for\nevery \\(n\\)-bit integer \\(x_1\\) there is an \\(n\\)-bit integer \\(x_2\\)\nfor which \\(f (x_{1}) = f (x_{2})\\). The function is moreover periodic\nin the sense that \\(f(x_1)\\) = \\(f(x_2)\\) if and only if \\(x_1 = x_2\n\\oplus a\\), where \\(\\oplus\\) designates bit-wise modulo 2 addition and\n\\(a\\) is an \\(n\\)-bit nonzero number called the period of\n\\(f\\). Simon\u2019s problem is the problem to find \\(a\\) given \\(f\\).\nRelative to an oracle \\(U_f\\) which evaluates \\(f\\) in a single step,\nSimon\u2019s quantum algorithm (Simon 1994) finds the period of \\(f\\)\nin a number of oracle calls that grows only linearly with the length\nof \\(n\\), while the best known classical algorithm requires an\nexponentially greater number of oracle calls. Simon\u2019s algorithm\nreduces to Deutsch\u2019s algorithm when \\(n=2\\), and can be regarded\nas an extension of the latter, in the sense that in both cases a\nglobal property of a function is evaluated in no more than a\n(sub-)polynomial number of oracle invocations, owing to the fact that\nthe output state of the computer just before the final measurement is\ndecomposed into orthogonal subspaces, only one of which contains the\nproblem\u2019s solution. Note that one important difference between\nDeutsch\u2019s and Simon\u2019s algorithms is that the former yields\na solution with certainty, whereas the latter only yields a solution\nwith probability very close to 1. For more on the logical analysis of\nthese first quantum-circuit-based algorithms see Bub (2006a) and Bub\n(2010).\n3.1.4 Shor\u2019s Algorithm\n\nThe algorithms just described, although demonstrating the potential\nsuperiority of quantum computers over their classical counterparts,\nnevertheless deal with apparently unimportant computational problems.\nMoreover the speed-ups in each of them are only relative to their\nrespective oracles. It is doubtful whether research into quantum\ncomputing would have attracted so much attention and evolved to its\ncurrent status if its merit could be demonstrated only with these\nproblems. But in 1994, Peter Shor realised that Simon\u2019s\nalgorithm could be harnessed to solve a much more interesting and\ncrucial problem, namely factoring, which lies at the heart of\ncurrent cryptographic protocols such as RSA (Rivest, Shamir, and\nAdleman 1978). Shor\u2019s algorithm has turned quantum computing\ninto one of the most exciting research domains in quantum\nmechanics.\n\nShor\u2019s algorithm exploits the ingenious number theoretic\nargument that two prime factors \\(p,q\\) of a positive integer \\(N=pq\\)\ncan be found by determining the period of a function \\(f(x) = y^x\n\\textrm{mod} N,\\) for any \\(y < N\\) which has no common factors\nwith \\(N\\) other than 1 (Nielsen and Chuang 2000 App. 4). The period\n\\(r\\) of \\(f(x)\\) depends on \\(y\\) and \\(N\\). Once one knows it, one\ncan factor \\(N\\) if \\(r\\) is even and \\(y^{\\,\\frac{r}{2}} \\neq -1\\)\nmod \\(N\\), which will be jointly the case with probability greater\nthan \\(\\frac{1}{2}\\) for any \\(y\\) chosen randomly (if not, one\nchooses another value of \\(y\\) and tries again). The factors of \\(N\\)\nare the greatest common divisors of \\(y^{\\,\\frac{r}{2}} \\pm 1\\) and\n\\(N\\), which can be found in polynomial time using the well known\nEuclidean algorithm. In other words, Shor\u2019s remarkable result\nrests on the discovery that the problem of factoring reduces\nto the problem of finding the period of a certain periodic function\n\\(f: Z_{n} \\rightarrow Z_{N}\\), where \\(Z_{n}\\) is the additive group\nof integers mod \\(n\\) (Note that \\(f(x) = y^{x}\\ \\textrm{mod}\\ N\\) so\nthat \\(f(x+r) = f(x)\\) if \\(x+r \\le n\\). The function is periodic if\n\\(r\\) divides \\(n\\) exactly, otherwise it is almost periodic). That\nthis problem can be solved efficiently by a quantum computer is hinted\nat by Simon\u2019s algorithm, which considers the more restricted\ncase of functions periodic under bit-wise modulo-2 addition as opposed\nto the periodic functions under ordinary addition considered here.\n\nShor\u2019s result is the most dramatic example so far of quantum\n\u201cspeed-up\u201d of computation, notwithstanding the fact that\nfactoring is believed to be only in NP and\nnot in NP-complete (see Aaronson 2013a, 64\u201366).\nTo verify whether \\(n\\) is prime takes a number of steps which is a\npolynomial in \\(\\log_{2}n\\) (the binary encoding of a natural number\n\\(n\\) requires \\(\\log_{2}n\\) resources). But nobody knows how to\nfactor numbers into primes in polynomial time, and the best classical\nalgorithms we have for this problem are sub-exponential. This is yet\nanother open problem in the theory of computational complexity. Modern\ncryptography and Internet security protocols are based on these facts\n(Giblin 1993): It is easy to find large prime numbers fast, and it is\nhard to factor large composite numbers in any reasonable amount of\ntime. The discovery that quantum computers can solve\nfactoring in polynomial time has had, therefore, a dramatic\neffect. The implementation of the algorithm on a physical machine\nwould have economic, as well as scientific consequences (All\u00e9aume\net al. 2014).\n3.1.5 Grover\u2019s Algorithm\n\nIn a brilliant undercover operation, Agent 13 has managed to secure\ntwo crucial bits of information concerning the whereabouts of the\narch-villain Siegfried: the phone number of the secret hideout from\nwhich he intends to begin carrying out KAOS\u2019s plans for world\ndomination, and the fact that the number is a listed one (apparently\nan oversight on Siegfried\u2019s part). Unfortunately you and your\ncolleagues at CONTROL have no other information besides this. Can you\nfind Siegfried\u2019s hideout using only this number and a phone\ndirectory? In theoretical computer science this task is known as an\nunstructured search. In the worst case, if there are \\(n\\) entries in\nthe directory, the computational resources required to find the entry\nwill be linear in \\(n\\). Grover (1996) showed how this task could be\ndone with a quantum algorithm using computational resources on the\norder of only \\(\\sqrt{n}\\). Agreed, this \u201cspeed-up\u201d is\nmore modest than Shor\u2019s since unstructured search belongs to the\nclass \\(\\mathbf{P}\\), but contrary to Shor\u2019s case, where the\nclassical complexity of factoring is still unknown, here the\nsuperiority of the quantum algorithm, however modest, is definitely\nprovable. That this quadratic \u201cspeed-up\u201d is also\nthe optimal quantum \u201cspeed-up\u201d possible for this\nproblem was proved by Bennett, Bernstein, Brassard, & Vazirani\n(1997).\n\nAlthough the purpose of Grover\u2019s algorithm is usually described\nas \u201csearching a database\u201d, it may be more accurate to\ndescribe it as \u201cinverting a function\u201d. Roughly speaking,\nif we have a function \\(y=f(x)\\) that can be evaluated on a quantum\ncomputer, Grover\u2019s algorithm allows us to calculate \\(x\\) given\n\\(y\\). Inverting a function is related to searching a database because\nwe could come up with a function that produces a particular value of\n\\(y\\) if \\(x\\) matches a desired entry in a database, and another\nvalue of \\(y\\) for other values of \\(x\\). The applications of this\nalgorithm are far-reaching (even more so than foiling\nSiegfried\u2019s plans for world domination). For example, it can be\nused to determine efficiently the number of solutions to an \\(N\\)-item\nsearch problem, hence to perform exhaustive searches on a class of\nsolutions to an NP-complete problem and substantially\nreduce the computational resources required for solving it.\n",
    "section_title": "3.1 Quantum-Circuit-Based Algorithms",
    "entry_title": "Quantum Computing",
    "hierarchy_title": "Quantum Computing || Basics || Quantum-Circuit-Based Algorithms",
    "tokenized_text": [
        "basic",
        "quantumcircuitbased",
        "algorithm",
        "quantumcircuitbased",
        "algorithm",
        "oracle",
        "first",
        "quantum",
        "algorithm",
        "designed",
        "solve",
        "problem",
        "essentially",
        "involve",
        "use",
        "oracle",
        "let",
        "u",
        "begin",
        "explaining",
        "term",
        "oracle",
        "used",
        "computer",
        "scientist",
        "conceptual",
        "aid",
        "complexitytheoretic",
        "analysis",
        "algorithm",
        "think",
        "oracle",
        "kind",
        "imaginary",
        "magic",
        "black",
        "box",
        "arora",
        "barak",
        "aaronson",
        "a",
        "ff",
        "like",
        "famous",
        "oracle",
        "delphi",
        "one",
        "pose",
        "yes",
        "question",
        "unlike",
        "ancient",
        "oracle",
        "oracle",
        "considered",
        "computer",
        "science",
        "always",
        "return",
        "answer",
        "single",
        "time",
        "step",
        "example",
        "imagine",
        "oracle",
        "determine",
        "whether",
        "given",
        "boolean",
        "formula",
        "satisfiable",
        "given",
        "input",
        "description",
        "particular",
        "propositional",
        "formula",
        "oracle",
        "outputsin",
        "single",
        "time",
        "stepa",
        "single",
        "bit",
        "indicating",
        "whether",
        "truthvalue",
        "assignment",
        "satisfying",
        "formula",
        "obviously",
        "machine",
        "really",
        "existsat",
        "npcomplete",
        "problembut",
        "point",
        "point",
        "using",
        "imaginary",
        "device",
        "abstract",
        "away",
        "certain",
        "implementational",
        "detail",
        "whatever",
        "reason",
        "deemed",
        "unimportant",
        "complexitytheoretic",
        "analysis",
        "given",
        "problem",
        "example",
        "simon",
        "problem",
        "simon",
        "see",
        "determining",
        "period",
        "given",
        "function",
        "f",
        "periodic",
        "bitwise",
        "modulo",
        "addition",
        "relative",
        "simon",
        "problem",
        "judge",
        "internal",
        "complexity",
        "f",
        "unimportant",
        "abstract",
        "away",
        "imagining",
        "oracle",
        "evaluate",
        "single",
        "step",
        "useful",
        "conceptual",
        "device",
        "however",
        "usefulness",
        "limitation",
        "take",
        "one",
        "example",
        "oracle",
        "relative",
        "p",
        "np",
        "well",
        "oracle",
        "relative",
        "p",
        "not",
        "np",
        "many",
        "question",
        "clarified",
        "oracle",
        "see",
        "fortnow",
        "deutsch",
        "algorithm",
        "deutsch",
        "asks",
        "following",
        "question",
        "suppose",
        "function",
        "f",
        "either",
        "constantie",
        "produce",
        "output",
        "value",
        "possible",
        "input",
        "balancedie",
        "output",
        "one",
        "half",
        "possible",
        "input",
        "opposite",
        "output",
        "half",
        "particular",
        "example",
        "considered",
        "function",
        "f",
        "rightarrow",
        "constant",
        "f",
        "f",
        "balanced",
        "f",
        "ne",
        "f",
        "classically",
        "would",
        "take",
        "two",
        "evaluation",
        "function",
        "tell",
        "whether",
        "one",
        "quantumly",
        "answer",
        "question",
        "one",
        "evaluation",
        "deutsch",
        "explanation",
        "complexity",
        "reduction",
        "involves",
        "appeal",
        "many",
        "computational",
        "world",
        "see",
        "section",
        "arguably",
        "however",
        "fully",
        "satisfactory",
        "answer",
        "appeal",
        "superposition",
        "principle",
        "entanglement",
        "bub",
        "initially",
        "preparing",
        "first",
        "second",
        "qubits",
        "computer",
        "state",
        "lvert",
        "ranglelvert",
        "rangle",
        "one",
        "flip",
        "second",
        "qubit",
        "using",
        "gate",
        "ie",
        "pauli",
        "x",
        "operation",
        "lvert",
        "rangle",
        "subject",
        "qubit",
        "hadamard",
        "gate",
        "send",
        "two",
        "qubits",
        "oracle",
        "black",
        "box",
        "imagine",
        "unitary",
        "gate",
        "mathbf",
        "u",
        "_f",
        "representative",
        "function",
        "whose",
        "character",
        "either",
        "constant",
        "balanced",
        "wish",
        "determine",
        "define",
        "mathbf",
        "u",
        "_f",
        "take",
        "input",
        "like",
        "lvert",
        "x",
        "yrangle",
        "lvert",
        "x",
        "yoplus",
        "f",
        "x",
        "rangle",
        "oplus",
        "addition",
        "modulo",
        "two",
        "ie",
        "exclusiveor",
        "first",
        "qubit",
        "fed",
        "hadamard",
        "gate",
        "final",
        "output",
        "algorithm",
        "prior",
        "measurement",
        "state",
        "pmlvert",
        "f",
        "oplus",
        "f",
        "ranglelvert",
        "rangle",
        "lvert",
        "rangle",
        "_",
        "df",
        "frac",
        "rangle",
        "rangle",
        "sqrt",
        "since",
        "f",
        "oplus",
        "f",
        "function",
        "constant",
        "function",
        "balanced",
        "single",
        "measurement",
        "first",
        "qubit",
        "suffices",
        "retrieve",
        "answer",
        "original",
        "question",
        "regarding",
        "function",
        "nature",
        "since",
        "two",
        "possible",
        "constant",
        "function",
        "two",
        "possible",
        "balanced",
        "function",
        "f",
        "rightarrow",
        "characterise",
        "algorithm",
        "distinguishing",
        "using",
        "one",
        "oracle",
        "call",
        "two",
        "quantum",
        "disjunction",
        "without",
        "finding",
        "truth",
        "value",
        "disjuncts",
        "ie",
        "without",
        "determining",
        "balanced",
        "constant",
        "function",
        "f",
        "bub",
        "generalisation",
        "deutsch",
        "problem",
        "called",
        "deutschjozsa",
        "problem",
        "deutsch",
        "jozsa",
        "enlarges",
        "class",
        "function",
        "consideration",
        "include",
        "function",
        "f",
        "nto",
        "ie",
        "rather",
        "considering",
        "n",
        "best",
        "deterministic",
        "classical",
        "algorithm",
        "determining",
        "whether",
        "given",
        "function",
        "constant",
        "balanced",
        "requires",
        "frac",
        "n",
        "query",
        "oracle",
        "order",
        "solve",
        "problem",
        "quantum",
        "computer",
        "however",
        "answer",
        "question",
        "using",
        "one",
        "oracle",
        "call",
        "generalising",
        "conclusion",
        "regarding",
        "deutsch",
        "algorithm",
        "may",
        "say",
        "deutschjozsa",
        "algorithm",
        "allows",
        "one",
        "evaluate",
        "global",
        "property",
        "function",
        "one",
        "measurement",
        "output",
        "state",
        "superposition",
        "balanced",
        "constant",
        "state",
        "balanced",
        "state",
        "lie",
        "subspace",
        "orthogonal",
        "constant",
        "state",
        "therefore",
        "distinguished",
        "latter",
        "single",
        "measurement",
        "bub",
        "a",
        "simon",
        "algorithm",
        "suppose",
        "boolean",
        "function",
        "f",
        "n",
        "bit",
        "to",
        "ie",
        "take",
        "n",
        "bit",
        "n",
        "bit",
        "way",
        "every",
        "n",
        "bit",
        "integer",
        "x_",
        "n",
        "bit",
        "integer",
        "x_",
        "f",
        "x_",
        "f",
        "x_",
        "function",
        "moreover",
        "periodic",
        "sense",
        "f",
        "x_",
        "f",
        "x_",
        "x_",
        "x_",
        "oplus",
        "a",
        "oplus",
        "designates",
        "bitwise",
        "modulo",
        "addition",
        "a",
        "n",
        "bit",
        "nonzero",
        "number",
        "called",
        "period",
        "f",
        "simon",
        "problem",
        "problem",
        "find",
        "a",
        "given",
        "f",
        "relative",
        "oracle",
        "u_f",
        "evaluates",
        "f",
        "single",
        "step",
        "simon",
        "quantum",
        "algorithm",
        "simon",
        "find",
        "period",
        "f",
        "number",
        "oracle",
        "call",
        "grows",
        "linearly",
        "length",
        "n",
        "best",
        "known",
        "classical",
        "algorithm",
        "requires",
        "exponentially",
        "greater",
        "number",
        "oracle",
        "call",
        "simon",
        "algorithm",
        "reduces",
        "deutsch",
        "algorithm",
        "n",
        "regarded",
        "extension",
        "latter",
        "sense",
        "case",
        "global",
        "property",
        "function",
        "evaluated",
        "sub",
        "polynomial",
        "number",
        "oracle",
        "invocation",
        "owing",
        "fact",
        "output",
        "state",
        "computer",
        "final",
        "measurement",
        "decomposed",
        "orthogonal",
        "subspace",
        "one",
        "contains",
        "problem",
        "solution",
        "note",
        "one",
        "important",
        "difference",
        "deutsch",
        "simon",
        "algorithm",
        "former",
        "yield",
        "solution",
        "certainty",
        "whereas",
        "latter",
        "yield",
        "solution",
        "probability",
        "close",
        "logical",
        "analysis",
        "first",
        "quantumcircuitbased",
        "algorithm",
        "see",
        "bub",
        "a",
        "bub",
        "shor",
        "algorithm",
        "algorithm",
        "described",
        "although",
        "demonstrating",
        "potential",
        "superiority",
        "quantum",
        "computer",
        "classical",
        "counterpart",
        "nevertheless",
        "deal",
        "apparently",
        "unimportant",
        "computational",
        "problem",
        "moreover",
        "speedups",
        "relative",
        "respective",
        "oracle",
        "doubtful",
        "whether",
        "research",
        "quantum",
        "computing",
        "would",
        "attracted",
        "much",
        "attention",
        "evolved",
        "current",
        "status",
        "merit",
        "could",
        "demonstrated",
        "problem",
        "peter",
        "shor",
        "realised",
        "simon",
        "algorithm",
        "could",
        "harnessed",
        "solve",
        "much",
        "interesting",
        "crucial",
        "problem",
        "namely",
        "factoring",
        "lie",
        "heart",
        "current",
        "cryptographic",
        "protocol",
        "rsa",
        "rivest",
        "shamir",
        "adleman",
        "shor",
        "algorithm",
        "turned",
        "quantum",
        "computing",
        "one",
        "exciting",
        "research",
        "domain",
        "quantum",
        "mechanic",
        "shor",
        "algorithm",
        "exploit",
        "ingenious",
        "number",
        "theoretic",
        "argument",
        "two",
        "prime",
        "factor",
        "p",
        "q",
        "positive",
        "integer",
        "npq",
        "found",
        "determining",
        "period",
        "function",
        "f",
        "x",
        "yx",
        "textrm",
        "mod",
        "n",
        "n",
        "common",
        "factor",
        "n",
        "nielsen",
        "chuang",
        "app",
        "period",
        "r",
        "f",
        "x",
        "depends",
        "y",
        "n",
        "one",
        "know",
        "one",
        "factor",
        "n",
        "r",
        "even",
        "y",
        "frac",
        "r",
        "neq",
        "mod",
        "n",
        "jointly",
        "case",
        "probability",
        "greater",
        "frac",
        "y",
        "chosen",
        "randomly",
        "one",
        "chooses",
        "another",
        "value",
        "y",
        "try",
        "factor",
        "n",
        "greatest",
        "common",
        "divisor",
        "y",
        "frac",
        "r",
        "pm",
        "n",
        "found",
        "polynomial",
        "time",
        "using",
        "well",
        "known",
        "euclidean",
        "algorithm",
        "word",
        "shor",
        "remarkable",
        "result",
        "rest",
        "discovery",
        "problem",
        "factoring",
        "reduces",
        "problem",
        "finding",
        "period",
        "certain",
        "periodic",
        "function",
        "f",
        "z_",
        "n",
        "rightarrow",
        "z_",
        "n",
        "z_",
        "n",
        "additive",
        "group",
        "integer",
        "mod",
        "n",
        "note",
        "f",
        "x",
        "y",
        "x",
        "textrm",
        "mod",
        "n",
        "f",
        "xr",
        "f",
        "x",
        "xr",
        "le",
        "n",
        "function",
        "periodic",
        "r",
        "divide",
        "n",
        "exactly",
        "otherwise",
        "almost",
        "periodic",
        "problem",
        "solved",
        "efficiently",
        "quantum",
        "computer",
        "hinted",
        "simon",
        "algorithm",
        "considers",
        "restricted",
        "case",
        "function",
        "periodic",
        "bitwise",
        "modulo",
        "addition",
        "opposed",
        "periodic",
        "function",
        "ordinary",
        "addition",
        "considered",
        "shor",
        "result",
        "dramatic",
        "example",
        "far",
        "quantum",
        "speedup",
        "computation",
        "notwithstanding",
        "fact",
        "factoring",
        "believed",
        "np",
        "npcomplete",
        "see",
        "aaronson",
        "a",
        "verify",
        "whether",
        "n",
        "prime",
        "take",
        "number",
        "step",
        "polynomial",
        "log_",
        "n",
        "binary",
        "encoding",
        "natural",
        "number",
        "n",
        "requires",
        "log_",
        "n",
        "resource",
        "nobody",
        "know",
        "factor",
        "number",
        "prime",
        "polynomial",
        "time",
        "best",
        "classical",
        "algorithm",
        "problem",
        "subexponential",
        "yet",
        "another",
        "open",
        "problem",
        "theory",
        "computational",
        "complexity",
        "modern",
        "cryptography",
        "internet",
        "security",
        "protocol",
        "based",
        "fact",
        "giblin",
        "easy",
        "find",
        "large",
        "prime",
        "number",
        "fast",
        "hard",
        "factor",
        "large",
        "composite",
        "number",
        "reasonable",
        "amount",
        "time",
        "discovery",
        "quantum",
        "computer",
        "solve",
        "factoring",
        "polynomial",
        "time",
        "therefore",
        "dramatic",
        "effect",
        "implementation",
        "algorithm",
        "physical",
        "machine",
        "would",
        "economic",
        "well",
        "scientific",
        "consequence",
        "all\u00e9aume",
        "et",
        "al",
        "grover",
        "algorithm",
        "brilliant",
        "undercover",
        "operation",
        "agent",
        "managed",
        "secure",
        "two",
        "crucial",
        "bit",
        "information",
        "concerning",
        "whereabouts",
        "archvillain",
        "siegfried",
        "phone",
        "number",
        "secret",
        "hideout",
        "intends",
        "begin",
        "carrying",
        "kaos",
        "plan",
        "world",
        "domination",
        "fact",
        "number",
        "listed",
        "one",
        "apparently",
        "oversight",
        "siegfried",
        "part",
        "unfortunately",
        "colleague",
        "control",
        "information",
        "besides",
        "find",
        "siegfried",
        "hideout",
        "using",
        "number",
        "phone",
        "directory",
        "theoretical",
        "computer",
        "science",
        "task",
        "known",
        "unstructured",
        "search",
        "worst",
        "case",
        "n",
        "entry",
        "directory",
        "computational",
        "resource",
        "required",
        "find",
        "entry",
        "linear",
        "n",
        "grover",
        "showed",
        "task",
        "could",
        "done",
        "quantum",
        "algorithm",
        "using",
        "computational",
        "resource",
        "order",
        "sqrt",
        "n",
        "agreed",
        "speedup",
        "modest",
        "shor",
        "since",
        "unstructured",
        "search",
        "belongs",
        "class",
        "mathbf",
        "p",
        "contrary",
        "shor",
        "case",
        "classical",
        "complexity",
        "factoring",
        "still",
        "unknown",
        "superiority",
        "quantum",
        "algorithm",
        "however",
        "modest",
        "definitely",
        "provable",
        "quadratic",
        "speedup",
        "also",
        "optimal",
        "quantum",
        "speedup",
        "possible",
        "problem",
        "proved",
        "bennett",
        "bernstein",
        "brassard",
        "vazirani",
        "although",
        "purpose",
        "grover",
        "algorithm",
        "usually",
        "described",
        "searching",
        "database",
        "may",
        "accurate",
        "describe",
        "inverting",
        "function",
        "roughly",
        "speaking",
        "function",
        "yf",
        "x",
        "evaluated",
        "quantum",
        "computer",
        "grover",
        "algorithm",
        "allows",
        "u",
        "calculate",
        "x",
        "given",
        "y",
        "inverting",
        "function",
        "related",
        "searching",
        "database",
        "could",
        "come",
        "function",
        "produce",
        "particular",
        "value",
        "y",
        "x",
        "match",
        "desired",
        "entry",
        "database",
        "another",
        "value",
        "y",
        "value",
        "x",
        "application",
        "algorithm",
        "farreaching",
        "even",
        "foiling",
        "siegfried",
        "plan",
        "world",
        "domination",
        "example",
        "used",
        "determine",
        "efficiently",
        "number",
        "solution",
        "n",
        "item",
        "search",
        "problem",
        "hence",
        "perform",
        "exhaustive",
        "search",
        "class",
        "solution",
        "npcomplete",
        "problem",
        "substantially",
        "reduce",
        "computational",
        "resource",
        "required",
        "solving"
    ]
}