{
    "main_text": "Calculus || Automated Theorem Provers\n2.4 Automated Theorem Provers\n\nMany-sorted logic provides a semantical concept of consequence as well\nas a deductive calculus to be used in the mathematical process of\nobtaining conclusions from hypotheses. Now the issue is to automate\nthis reasoning process by building a computer program to conduct\ndeductive inferences.\n\nAs we have already mentioned, soundness is the essential requirement\nof a calculus while completeness guarantees that all the semantical\nconsequences can be established within the calculus and so the set of\nvalidities is recursively enumerable. The most relevant\nproperties for automated deduction are decidability and\ncomplexity. A logic is decidable when there is an algorithm\nthat answer YES or NO in a finite time to the\nquestion: is the formula \\(\\varphi\\) valid? As validity and\nsatisfiability are interdefinible (\\(\\models \\varphi\\) iff \\(\\lnot\n\\varphi\\) is not satisfiable) this problem is often called the\nsatisfiability problem. Among the basic tasks a computer is\nasked for are satisfiability and model checking.\n\nPropositional logic is decidable but first-order logic, many-sorted\nversion included, is undecidable. However, in between propositional\nand first-order logic there are decidable logics, like monadic\npredicate logic (first-order logic whose predicates are all unary\npredicates), as well as decidable\n fragments[10]\n of the undecidable logic. Moreover, among the decidable problems\nthere are degrees of time-space complexity measuring time and memory\nregister used by the computer.\n\nTherefore, in a theorem prover for many-sorted calculus there is no\nguarantee of getting an answer to the question: Does \\(\\Gamma\n\\models \\varphi\\)? However, there are efficient theorem provers\nable to solve the problem in many cases; for instance, when there are\ndecidable fragments to implement. See the entries on\n automated reasoning\n and\n Church\u2019s type theory.\n Section 4 of the entry on Church\u2019s type theory\nis devoted to automation and provides information about\nmachine-oriented proof calculi as well as early proof assistants. An\nexcellent selection of theorem provers for Church\u2019s type theory\nare presented. Among them are LEO-II and LEO-III, the latter is said\nto \u201ccooperate with first-order reasoning tools using\ntranslations to many-sorted logic\u201d.\n\nChurch\u2019s simple type theory usually starts with base types\n\u201ci\u201d (individuals/entities) and \u201co\u201d (Booleans)\nonly and then iteratively defines all function types (such as \u201c\\(\\text{i}\n= > \\text{o}\\)\u201d,  \u201c\\(\\text{i}=>\\text{i}\\)\u201d,\n\u201c\\(\\text{o}=>\\text{o}\\)\u201d,\n\u201c\\(\\text{i}=>(\\text{i}=>\\text{o})\\)\u201d,\netc.) starting from those. But in fact one can have arbitrary many\nbase types \\(i_1\\), \\(i_2\\), \\(i_3\\),\u2026, \\(i_n\\) and apply an\nanalogous construction. These base types \\(i_1\\), \\(i_2\\),\n\\(i_3\\),\u2026, \\(i_n\\) can be considered as sorts.\n\nOur example from the Book of Perfect Emptiness can be\nformalized and checked using the LEO-II and LEO-III provers.\n\n\nthf(sortForObjects, type, (object: $tType)).\n\nthf(sortForTimes, type, (time: $tType)).\n\nthf(constantDawn, type, (dawn: time)).\n\nthf(constantToday, type, (today: time)).\n\nthf(constantIsExistsAt, type, \n\u00a0\u00a0(existsAt: object\\(>\\)time\\(>\\)$o)).\n\nthf(constantPrecedesTo, type, \n\u00a0\u00a0(precedesTo: time\\(>\\)time\\(>\\)$o)).\n\nthf(axiom1, axiom, (![X:time]: \n\u00a0\u00a0((?[Y:object]: (existsAt @Y@X))\n\u00a0\u00a0=\\(>\\) (![Z:time]: ((precedesTo @Z@X) \n\u00a0\u00a0=\\(>\\) (?[V:object]: (existsAt @V@Z))))))).\n\nthf(axiom2, axiom, \n\u00a0\u00a0(?[Y:object]: (existsAt @Y@today))).\n\nthf(axiom3, axiom, \n\u00a0\u00a0(![Y:time]: (precedesTo @dawn@Y))).\n\nthf(conjecture1, conjecture, \n\u00a0\u00a0(?[X:object]: (existsAt @X@dawn))).\n\n\n",
    "section_title": "2.4 Automated Theorem Provers",
    "entry_title": "Many-Sorted Logic",
    "hierarchy_title": "Many-Sorted Logic || Calculus || Automated Theorem Provers",
    "tokenized_text": [
        "calculus",
        "automated",
        "theorem",
        "provers",
        "automated",
        "theorem",
        "provers",
        "manysorted",
        "logic",
        "provides",
        "semantical",
        "concept",
        "consequence",
        "well",
        "deductive",
        "calculus",
        "used",
        "mathematical",
        "process",
        "obtaining",
        "conclusion",
        "hypothesis",
        "issue",
        "automate",
        "reasoning",
        "process",
        "building",
        "computer",
        "program",
        "conduct",
        "deductive",
        "inference",
        "already",
        "mentioned",
        "soundness",
        "essential",
        "requirement",
        "calculus",
        "completeness",
        "guarantee",
        "semantical",
        "consequence",
        "established",
        "within",
        "calculus",
        "set",
        "validity",
        "recursively",
        "enumerable",
        "relevant",
        "property",
        "automated",
        "deduction",
        "decidability",
        "complexity",
        "logic",
        "decidable",
        "algorithm",
        "answer",
        "yes",
        "finite",
        "time",
        "question",
        "formula",
        "varphi",
        "valid",
        "validity",
        "satisfiability",
        "interdefinible",
        "models",
        "varphi",
        "iff",
        "lnot",
        "varphi",
        "satisfiable",
        "problem",
        "often",
        "called",
        "satisfiability",
        "problem",
        "among",
        "basic",
        "task",
        "computer",
        "asked",
        "satisfiability",
        "model",
        "checking",
        "propositional",
        "logic",
        "decidable",
        "firstorder",
        "logic",
        "manysorted",
        "version",
        "included",
        "undecidable",
        "however",
        "propositional",
        "firstorder",
        "logic",
        "decidable",
        "logic",
        "like",
        "monadic",
        "predicate",
        "logic",
        "firstorder",
        "logic",
        "whose",
        "predicate",
        "unary",
        "predicate",
        "well",
        "decidable",
        "fragment",
        "undecidable",
        "logic",
        "moreover",
        "among",
        "decidable",
        "problem",
        "degree",
        "timespace",
        "complexity",
        "measuring",
        "time",
        "memory",
        "register",
        "used",
        "computer",
        "therefore",
        "theorem",
        "prover",
        "manysorted",
        "calculus",
        "guarantee",
        "getting",
        "answer",
        "question",
        "gamma",
        "models",
        "varphi",
        "however",
        "efficient",
        "theorem",
        "provers",
        "able",
        "solve",
        "problem",
        "many",
        "case",
        "instance",
        "decidable",
        "fragment",
        "implement",
        "see",
        "entry",
        "automated",
        "reasoning",
        "church",
        "type",
        "theory",
        "section",
        "entry",
        "church",
        "type",
        "theory",
        "devoted",
        "automation",
        "provides",
        "information",
        "machineoriented",
        "proof",
        "calculus",
        "well",
        "early",
        "proof",
        "assistant",
        "excellent",
        "selection",
        "theorem",
        "provers",
        "church",
        "type",
        "theory",
        "presented",
        "among",
        "leoii",
        "leoiii",
        "latter",
        "said",
        "cooperate",
        "firstorder",
        "reasoning",
        "tool",
        "using",
        "translation",
        "manysorted",
        "logic",
        "church",
        "simple",
        "type",
        "theory",
        "usually",
        "start",
        "base",
        "type",
        "individualsentities",
        "booleans",
        "iteratively",
        "defines",
        "function",
        "type",
        "text",
        "text",
        "text",
        "text",
        "text",
        "text",
        "text",
        "text",
        "text",
        "etc",
        "starting",
        "fact",
        "one",
        "arbitrary",
        "many",
        "base",
        "type",
        "i_",
        "i_",
        "i_",
        "i_n",
        "apply",
        "analogous",
        "construction",
        "base",
        "type",
        "i_",
        "i_",
        "i_",
        "i_n",
        "considered",
        "sort",
        "example",
        "book",
        "perfect",
        "emptiness",
        "formalized",
        "checked",
        "using",
        "leoii",
        "leoiii",
        "provers",
        "thf",
        "sortforobjects",
        "type",
        "object",
        "ttype",
        "thf",
        "sortfortimes",
        "type",
        "time",
        "ttype",
        "thf",
        "constantdawn",
        "type",
        "dawn",
        "time",
        "thf",
        "constanttoday",
        "type",
        "today",
        "time",
        "thf",
        "constantisexistsat",
        "type",
        "existsat",
        "object",
        "time",
        "thf",
        "constantprecedesto",
        "type",
        "precedesto",
        "time",
        "time",
        "thf",
        "axiom",
        "axiom",
        "x",
        "time",
        "object",
        "existsat",
        "x",
        "z",
        "time",
        "precedesto",
        "z",
        "x",
        "v",
        "object",
        "existsat",
        "v",
        "z",
        "thf",
        "axiom",
        "axiom",
        "object",
        "existsat",
        "today",
        "thf",
        "axiom",
        "axiom",
        "time",
        "precedesto",
        "dawn",
        "thf",
        "conjecture",
        "conjecture",
        "x",
        "object",
        "existsat",
        "x",
        "dawn"
    ]
}