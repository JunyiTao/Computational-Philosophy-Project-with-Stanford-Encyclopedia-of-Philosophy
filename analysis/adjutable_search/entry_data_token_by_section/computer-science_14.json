{
    "main_text": "Programs || Programs and their Relation to the World\n4.3 Programs and their Relation to the World\n\nThe problem of whether computer programs are theories is tied with the\nrelation that programs entertain with the outside world. If programs\nwere theories, they would have to represent some empirical system, and\na semantic relation would be directly established between the program\nand the world. By contrast, some have argued that the relation between\nprograms and natural systems is mediated by models of the outside\nworld (Colburn et al. 1993, Smith 1985). In particular, Smith\n(1985) argues that models are abstract descriptions of empirical\nsystems, and computational systems operating in them have programs\nthat act as models of the models, i.e., they represent abstract models\nof reality. Such an account of the ontology of programs comes in handy\nwhen describing the correctness problem in computer science (see\n \u00a7 7):\n if specifications are considered as models requiring certain\nbehaviors from computational systems, programs can be seen as models\nsatisfying specifications.\n\nTwo views of programs can be given depending on whether one admits\ntheir relation with the world (Rapaport 2020, ch. 17, see Other\nInternet Resource). According to a first view, programs are\n\u201cwide\u201d, \u201cexternal\u201d and \u201csemantic\u201d:\nthey grant direct reference to objects of an empirical system and\noperations on those objects. According to a second view, programs are\n\u201cnarrow\u201d, \u201cinternal\u201d, and\n\u201csyntactic\u201d: they make only reference to the atomic\noperations of an implementing machine carrying out computations.\nRapaport (2020, see Other Internet Resources) argues that programs\nneed not be \u201cexternal\u201d and\n\u201csemantic\u201d. First, computation itself needs not to be\n\u201cexternal\u201d: a Turing machine executes the instructions\ncontained in its finite table by using data written on its tape and\nhalting after the data resulting from the computation have\u00a0been\nwritten on the tape. Data are\u00a0not, strictly speaking, in-put-from\nand out-put-to an external user. Furthemore, Knuth (1973) required\nalgorithms to have zero or more inputs and outputs (see\n \u00a7 3.1).\n A computer program requiring no inputs may be a program, say,\noutputting all prime numbers from 1; and a program with no outputs can\nbe a program that computes the value of some given variable x without\nreturning the value stored in x as output. Second, programs need not\nbe \u201cexternal\u201d, teleological, i.e., goal oriented. This\nview opposes other known positions in the literature. Suber (1988)\nargues that, without considering goals and purposes, it would not be\npossible to assess whether a computer program is correct, that is, if\nit behaves as intended. And as recalled in\n \u00a73.3.,\n Hill (2016) specifies in her informal definition that algorithms\naccomplish \u201ca given purpose, under given provisions.\u201d\n(Hill 2016: 48). To these views, Rapaport (2020, ch. 17, see Other\nInternet Resource) replies that whereas goals, purposes, and\nprogrammers\u2019 intentions may be very useful for a human computor\nto understand a program, they are not necessary for an artificial\ncomputer to carry out the computations instructed by the program code.\nIndeed, the principle of effectiveness that classical approaches\nrequire for algorithms (see\n \u00a73.1)\n demands, among other properties, that algorithms be executed without\nany recourse to intuition. In other words, a machine executing a\nprogram for adding natural numbers does not \u201cunderstand\u201d\nthat it is adding; at the same time, knowing that a given program\nperforms addition may help a human agent to understand the\nprogram\u2019s code.\n\nAccording to this view, computing involves just symbols, not meanings.\nTuring machines become symbols manipulators and not a single but\nmultiple meanings can be associated with its operations. How can then\none identify when two programs are the same program, if not\nby their meanings, that is, by considering what function they perform?\nOne answer comes from Piccini\u2019s analysis of computation and its\n\u201cinternal semantics\u201d (Piccini 2008, 2015 ch. 3):\ntwo programs can be identified as identical by analysing only their\nsyntax and the operations the programs carry out on their symbols. The\neffects of string manipulation operations can be considered an\ninternal semantics of a program. The latter can be easily determined\nby isolating subroutines or methods in the program\u2019s code and\ncan afterwards be used to identify a program or to establish whether\ntwo programs are the same, namely when they are defined by the same\nsubroutines.\n\nHowever, it has been argued that there are cases in which it is not\npossible to determine whether two programs are the same without making\nreference to an external semantics. Sprevak (2010) proposes to\nconsider two programs for addition which differ from the fact that one\noperates on Arabic, the other one on Roman numerals. The two programs\ncompute the same function, namely addition, but this cannot always be\nestablished by inspecting the code with its subroutines; it must be\ndetermined by assigning content to the input/output strings,\ninterpreting Arabic and Roman numerals as numbers. In that regard,\nAngius and Primiero (2018) underline how the problem of identity for\ncomputer programs does not differ from the problem of identity for\nnatural kinds (Lowe 1998) and technical artifacts (Carrara et al.\n2014). The problem can be tackled by fixing an identity criterion,\nnamely a formal relation, that any two programs should entertain in\norder to be defined as identical. Angius and Primiero (2018) show how\nto use the process algebra relation of bisimulation between the two\nautomata implemented by two programs under examination as such an\nidentity criterion. Bisimulation allows to establish matching\nstructural properties of programs implementing the same function, as\nwell as providing weaker criteria for copies in terms of simulation.\nThis brings the discussion back to the notion of programs as\nimplementations. We now turn to analyze this latter concept.\n",
    "section_title": "4.3 Programs and their Relation to the World",
    "entry_title": "The Philosophy of Computer Science",
    "hierarchy_title": "The Philosophy of Computer Science || Programs || Programs and their Relation to the World",
    "tokenized_text": [
        "program",
        "program",
        "relation",
        "world",
        "program",
        "relation",
        "world",
        "problem",
        "whether",
        "computer",
        "program",
        "theory",
        "tied",
        "relation",
        "program",
        "entertain",
        "outside",
        "world",
        "program",
        "theory",
        "would",
        "represent",
        "empirical",
        "system",
        "semantic",
        "relation",
        "would",
        "directly",
        "established",
        "program",
        "world",
        "contrast",
        "argued",
        "relation",
        "program",
        "natural",
        "system",
        "mediated",
        "model",
        "outside",
        "world",
        "colburn",
        "et",
        "al",
        "smith",
        "particular",
        "smith",
        "argues",
        "model",
        "abstract",
        "description",
        "empirical",
        "system",
        "computational",
        "system",
        "operating",
        "program",
        "act",
        "model",
        "model",
        "ie",
        "represent",
        "abstract",
        "model",
        "reality",
        "account",
        "ontology",
        "program",
        "come",
        "handy",
        "describing",
        "correctness",
        "problem",
        "computer",
        "science",
        "see",
        "specification",
        "considered",
        "model",
        "requiring",
        "certain",
        "behavior",
        "computational",
        "system",
        "program",
        "seen",
        "model",
        "satisfying",
        "specification",
        "two",
        "view",
        "program",
        "given",
        "depending",
        "whether",
        "one",
        "admits",
        "relation",
        "world",
        "rapaport",
        "ch",
        "see",
        "internet",
        "resource",
        "according",
        "first",
        "view",
        "program",
        "wide",
        "external",
        "semantic",
        "grant",
        "direct",
        "reference",
        "object",
        "empirical",
        "system",
        "operation",
        "object",
        "according",
        "second",
        "view",
        "program",
        "narrow",
        "internal",
        "syntactic",
        "make",
        "reference",
        "atomic",
        "operation",
        "implementing",
        "machine",
        "carrying",
        "computation",
        "rapaport",
        "see",
        "internet",
        "resource",
        "argues",
        "program",
        "need",
        "external",
        "semantic",
        "first",
        "computation",
        "need",
        "external",
        "turing",
        "machine",
        "executes",
        "instruction",
        "contained",
        "finite",
        "table",
        "using",
        "data",
        "written",
        "tape",
        "halting",
        "data",
        "resulting",
        "computation",
        "written",
        "tape",
        "data",
        "strictly",
        "speaking",
        "inputfrom",
        "outputto",
        "external",
        "user",
        "furthemore",
        "knuth",
        "required",
        "algorithm",
        "zero",
        "input",
        "output",
        "see",
        "computer",
        "program",
        "requiring",
        "input",
        "may",
        "program",
        "say",
        "outputting",
        "prime",
        "number",
        "program",
        "output",
        "program",
        "computes",
        "value",
        "given",
        "variable",
        "x",
        "without",
        "returning",
        "value",
        "stored",
        "x",
        "output",
        "second",
        "program",
        "need",
        "external",
        "teleological",
        "ie",
        "goal",
        "oriented",
        "view",
        "opposes",
        "known",
        "position",
        "literature",
        "suber",
        "argues",
        "without",
        "considering",
        "goal",
        "purpose",
        "would",
        "possible",
        "ass",
        "whether",
        "computer",
        "program",
        "correct",
        "behaves",
        "intended",
        "recalled",
        "hill",
        "specifies",
        "informal",
        "definition",
        "algorithm",
        "accomplish",
        "given",
        "purpose",
        "given",
        "provisions",
        "hill",
        "view",
        "rapaport",
        "ch",
        "see",
        "internet",
        "resource",
        "reply",
        "whereas",
        "goal",
        "purpose",
        "programmer",
        "intention",
        "may",
        "useful",
        "human",
        "computor",
        "understand",
        "program",
        "necessary",
        "artificial",
        "computer",
        "carry",
        "computation",
        "instructed",
        "program",
        "code",
        "indeed",
        "principle",
        "effectiveness",
        "classical",
        "approach",
        "require",
        "algorithm",
        "see",
        "demand",
        "among",
        "property",
        "algorithm",
        "executed",
        "without",
        "recourse",
        "intuition",
        "word",
        "machine",
        "executing",
        "program",
        "adding",
        "natural",
        "number",
        "understand",
        "adding",
        "time",
        "knowing",
        "given",
        "program",
        "performs",
        "addition",
        "may",
        "help",
        "human",
        "agent",
        "understand",
        "program",
        "code",
        "according",
        "view",
        "computing",
        "involves",
        "symbol",
        "meaning",
        "turing",
        "machine",
        "become",
        "symbol",
        "manipulator",
        "single",
        "multiple",
        "meaning",
        "associated",
        "operation",
        "one",
        "identify",
        "two",
        "program",
        "program",
        "meaning",
        "considering",
        "function",
        "perform",
        "one",
        "answer",
        "come",
        "piccini",
        "analysis",
        "computation",
        "internal",
        "semantics",
        "piccini",
        "ch",
        "two",
        "program",
        "identified",
        "identical",
        "analysing",
        "syntax",
        "operation",
        "program",
        "carry",
        "symbol",
        "effect",
        "string",
        "manipulation",
        "operation",
        "considered",
        "internal",
        "semantics",
        "program",
        "latter",
        "easily",
        "determined",
        "isolating",
        "subroutine",
        "method",
        "program",
        "code",
        "afterwards",
        "used",
        "identify",
        "program",
        "establish",
        "whether",
        "two",
        "program",
        "namely",
        "defined",
        "subroutine",
        "however",
        "argued",
        "case",
        "possible",
        "determine",
        "whether",
        "two",
        "program",
        "without",
        "making",
        "reference",
        "external",
        "semantics",
        "sprevak",
        "proposes",
        "consider",
        "two",
        "program",
        "addition",
        "differ",
        "fact",
        "one",
        "operates",
        "arabic",
        "one",
        "roman",
        "numeral",
        "two",
        "program",
        "compute",
        "function",
        "namely",
        "addition",
        "always",
        "established",
        "inspecting",
        "code",
        "subroutine",
        "must",
        "determined",
        "assigning",
        "content",
        "inputoutput",
        "string",
        "interpreting",
        "arabic",
        "roman",
        "numeral",
        "number",
        "regard",
        "angius",
        "primiero",
        "underline",
        "problem",
        "identity",
        "computer",
        "program",
        "differ",
        "problem",
        "identity",
        "natural",
        "kind",
        "lowe",
        "technical",
        "artifact",
        "carrara",
        "et",
        "al",
        "problem",
        "tackled",
        "fixing",
        "identity",
        "criterion",
        "namely",
        "formal",
        "relation",
        "two",
        "program",
        "entertain",
        "order",
        "defined",
        "identical",
        "angius",
        "primiero",
        "show",
        "use",
        "process",
        "algebra",
        "relation",
        "bisimulation",
        "two",
        "automaton",
        "implemented",
        "two",
        "program",
        "examination",
        "identity",
        "criterion",
        "bisimulation",
        "allows",
        "establish",
        "matching",
        "structural",
        "property",
        "program",
        "implementing",
        "function",
        "well",
        "providing",
        "weaker",
        "criterion",
        "copy",
        "term",
        "simulation",
        "brings",
        "discussion",
        "back",
        "notion",
        "program",
        "implementation",
        "turn",
        "analyze",
        "latter",
        "concept"
    ]
}