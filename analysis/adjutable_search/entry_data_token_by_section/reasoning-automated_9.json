{
    "main_text": "Deduction Calculi || Mathematical Induction\n2.6 Mathematical Induction\n\nMathematical induction is a very important technique of theorem\nproving in mathematics and computer science. Problems stated in terms\nof objects or structures that involve recursive definitions or some\nform of repetition invariably require mathematical induction for their\nsolving. In particular, reasoning about the correctness of computer\nsystems requires induction and an automated reasoning program that\neffectively implements induction will have important applications.\n\nTo illustrate the need for mathematical induction, assume that a\nproperty \u03c6 is true of the number zero and also that if true of a\nnumber then is true of its successor. Then, with our deductive\nsystems, we can deduce that for any given number n, \u03c6 is\ntrue of it, \u03c6(n). But we cannot deduce that \u03c6 is true\nof all numbers, \u2200x\u03c6(x); this inference\nstep requires the rule of mathematical induction:\n\n\n\n\u03b1(0)\u00a0\u00a0\u00a0\u00a0\u00a0[\u03b1(n)\u00a0\u2014\u00a0\u03b1(succ(n))]\n\n (mathematical induction) \n\n\n\u2200x\u03b1(x) \n\n\nIn other words, to prove that \u2200x\u03b1(x)\none proves that \u03b1(0) is the case, and that\n\u03b1(succ(n)) follows from the assumption that\n\u03b1(n). The implementation of induction in a reasoning\nsystem presents very challenging search control problems. The most\nimportant of these is the ability to determine the particular way in\nwhich induction will be applied during the proof, that is, finding the\nappropriate induction schema. Related issues include selecting the\nproper variable of induction, and recognizing all the possible cases\nfor the base and the inductive steps.\n\nNqthm (Boyer & Moore 1979) has been one of the most successful\nimplementations of automated inductive theorem proving. In the spirit\nof Gentzen, Boyer and Moore were interested in how people prove\ntheorems by induction. Their theorem prover is written in the\nfunctional programming language Lisp which is also the language in\nwhich theorems are represented. For instance, to express the\ncommutativity of addition the user would enter the Lisp expression\n(EQUAL (PLUS X Y) (PLUS Y X)). Everything\ndefined in the system is a functional term, including its basic\n\u201cpredicates\u201d: T, F,\nEQUAL X Y, IF\nX Y Z, AND, NOT,\netc. The program operates largely as a black\nbox, that is, the inner working details are hidden from the user;\nproofs are conducted by rewriting terms that posses recursive\ndefinitions, ultimately reducing the conclusion\u2019s statement to the\nT predicate. The Boyer-Moore theorem prover\nhas been used to check the proofs of some quite deep theorems (Boyer,\nKaufmann & Moore 1995). Lemma caching, problem statement\ngeneralization, and proof planning are techniques particularly useful\nin inductive theorem proving (Bundy, Harmelen & Hesketh 1991).\n",
    "section_title": "2.6 Mathematical Induction",
    "entry_title": "Automated Reasoning",
    "hierarchy_title": "Automated Reasoning || Deduction Calculi || Mathematical Induction",
    "tokenized_text": [
        "deduction",
        "calculus",
        "mathematical",
        "induction",
        "mathematical",
        "induction",
        "mathematical",
        "induction",
        "important",
        "technique",
        "theorem",
        "proving",
        "mathematics",
        "computer",
        "science",
        "problem",
        "stated",
        "term",
        "object",
        "structure",
        "involve",
        "recursive",
        "definition",
        "form",
        "repetition",
        "invariably",
        "require",
        "mathematical",
        "induction",
        "solving",
        "particular",
        "reasoning",
        "correctness",
        "computer",
        "system",
        "requires",
        "induction",
        "automated",
        "reasoning",
        "program",
        "effectively",
        "implement",
        "induction",
        "important",
        "application",
        "illustrate",
        "need",
        "mathematical",
        "induction",
        "assume",
        "property",
        "\u03c6",
        "true",
        "number",
        "zero",
        "also",
        "true",
        "number",
        "true",
        "successor",
        "deductive",
        "system",
        "deduce",
        "given",
        "number",
        "n",
        "\u03c6",
        "true",
        "\u03c6",
        "n",
        "deduce",
        "\u03c6",
        "true",
        "number",
        "x\u03c6",
        "x",
        "inference",
        "step",
        "requires",
        "rule",
        "mathematical",
        "induction",
        "\u03b1",
        "\u03b1",
        "n",
        "\u03b1",
        "succ",
        "n",
        "mathematical",
        "induction",
        "x\u03b1",
        "x",
        "word",
        "prove",
        "x\u03b1",
        "x",
        "one",
        "prof",
        "\u03b1",
        "case",
        "\u03b1",
        "succ",
        "n",
        "follows",
        "assumption",
        "\u03b1",
        "n",
        "implementation",
        "induction",
        "reasoning",
        "system",
        "present",
        "challenging",
        "search",
        "control",
        "problem",
        "important",
        "ability",
        "determine",
        "particular",
        "way",
        "induction",
        "applied",
        "proof",
        "finding",
        "appropriate",
        "induction",
        "schema",
        "related",
        "issue",
        "include",
        "selecting",
        "proper",
        "variable",
        "induction",
        "recognizing",
        "possible",
        "case",
        "base",
        "inductive",
        "step",
        "nqthm",
        "boyer",
        "moore",
        "one",
        "successful",
        "implementation",
        "automated",
        "inductive",
        "theorem",
        "proving",
        "spirit",
        "gentzen",
        "boyer",
        "moore",
        "interested",
        "people",
        "prove",
        "theorem",
        "induction",
        "theorem",
        "prover",
        "written",
        "functional",
        "programming",
        "language",
        "lisp",
        "also",
        "language",
        "theorem",
        "represented",
        "instance",
        "express",
        "commutativity",
        "addition",
        "user",
        "would",
        "enter",
        "lisp",
        "expression",
        "equal",
        "plus",
        "x",
        "plus",
        "x",
        "everything",
        "defined",
        "system",
        "functional",
        "term",
        "including",
        "basic",
        "predicate",
        "f",
        "equal",
        "x",
        "x",
        "z",
        "etc",
        "program",
        "operates",
        "largely",
        "black",
        "box",
        "inner",
        "working",
        "detail",
        "hidden",
        "user",
        "proof",
        "conducted",
        "rewriting",
        "term",
        "posse",
        "recursive",
        "definition",
        "ultimately",
        "reducing",
        "conclusion",
        "statement",
        "predicate",
        "boyermoore",
        "theorem",
        "prover",
        "used",
        "check",
        "proof",
        "quite",
        "deep",
        "theorem",
        "boyer",
        "kaufmann",
        "moore",
        "lemma",
        "caching",
        "problem",
        "statement",
        "generalization",
        "proof",
        "planning",
        "technique",
        "particularly",
        "useful",
        "inductive",
        "theorem",
        "proving",
        "bundy",
        "harmelen",
        "hesketh"
    ]
}