{"url": "type-theory-intuitionistic", "title": "Intuitionistic Type Theory", "authorship": {"year": "Copyright \u00a9 2020", "author_text": "Peter Dybjer\n<peterd@chalmers.se>\nErik Palmgren", "author_links": [{"http://www.cse.chalmers.se/~peterd/": "Peter Dybjer"}, {"mailto:peterd%40chalmers%2ese": "peterd@chalmers.se"}, {"http://staff.math.su.se/palmgren/": "Erik Palmgren"}], "raw_html": "<div id=\"article-copyright\">\n<p>\n<a href=\"../../info.html#c\">Copyright \u00a9 2020</a> by\n\n<br/>\n<a href=\"http://www.cse.chalmers.se/~peterd/\" target=\"other\">Peter Dybjer</a>\n&lt;<a href=\"mailto:peterd%40chalmers%2ese\"><em>peterd<abbr title=\" at \">@</abbr>chalmers<abbr title=\" dot \">.</abbr>se</em></a>&gt;<br/>\n<a href=\"http://staff.math.su.se/palmgren/\" target=\"other\">Erik Palmgren</a>\n</p>\n</div>"}, "pubinfo": ["First published Fri Feb 12, 2016", "substantive revision Mon Jun 8, 2020"], "preamble": "\nIntuitionistic type theory (also constructive type theory or\nMartin-L\u00f6f type theory) is a formal logical system and philosophical\nfoundation for\n constructive mathematics. It is a\nfull-scale system which aims to play a similar role for constructive\nmathematics as\n Zermelo-Fraenkel Set Theory\n does for\nclassical mathematics. It is based on the propositions-as-types\nprinciple and clarifies the Brouwer-Heyting-Kolmogorov interpretation\nof intuitionistic logic. It extends this interpretation to the more\ngeneral setting of intuitionistic type theory and thus provides a\ngeneral conception not only of what a constructive proof is, but also\nof what a constructive mathematical object is. The main idea is that\nmathematical concepts such as elements, sets and functions are\nexplained in terms of concepts from programming such as data\nstructures, data types and programs. This article describes the formal\nsystem of intuitionistic type theory and its semantic foundations.\nIn this entry, we first give an overview of the most important\naspects of intuitionistic type theory\u2014a kind of \u201cextended\nabstract\u201d. It is meant for a reader who is already somewhat\nfamiliar with the theory. Section 2 on the other hand, is meant for a\nreader who is new to intuitionistic type theory but familiar with\ntraditional logic, including propositional and predicate logic,\narithmetic, and set theory. Here we informally introduce several\naspects which distinguishes intuitionistic type theory from these\ntraditional theories. In Section 3 we present a basic version of the\ntheory, close to Martin-L\u00f6f\u2019s first published version from\n1972. The reader who was intrigued by the informality of Section 2\nwill now see in detail how the theory is built up. Section 4 then\npresents a number of important extensions of the basic theory. In\nparticular, it emphasizes the central role of inductive (and\ninductive-recursive) definitions. Section 5 introduces the underlying\nphilosophical ideas including the theory of meaning developed by\nMartin-L\u00f6f. While Section 5 is about philosophy and foundations,\nSection 6 gives an overview of mathematical models of the theory. In\nSection 7 finally, we describe several important variations of the\ncore Martin-L\u00f6f \u201cintensional\u201d theory described in\nSection 3 and 4.\n", "toc": [{"#Over": "1. Overview"}, {"#PropType": "2. Propositions as Types"}, {"#IntuTypeTheoNewWayLookLogi": "2.1 Intuitionistic Type Theory: a New Way of Looking at Logic?"}, {"#CurrHowaCorr": "2.2 The Curry-Howard Correspondence"}, {"#SetsProoObje": "2.3 Sets of Proof-Objects"}, {"#DepeType": "2.4 Dependent Types"}, {"#PropTypeIntuTypeTheo": "2.5 Propositions as Types in Intuitionistic Type Theory"}, {"#BasiIntuTypeTheo": "3. Basic Intuitionistic Type Theory"}, {"#Judg": "3.1 Judgments"}, {"#JudgForm": "3.2 Judgment Forms"}, {"#InfeRule": "3.3 Inference Rules"}, {"#IntuPredLogi": "3.4 Intuitionistic Predicate Logic"}, {"#NatuNumb": "3.5 Natural Numbers"}, {"#UnivSmalType": "3.6 The Universe of Small Types"}, {"#PropIden": "3.7 Propositional Identity"}, {"#AxioChoiTheo": "3.8 The Axiom of Choice is a Theorem"}, {"#Exte": "4. Extensions"}, {"#LogiFram": "4.1 The Logical Framework"}, {"#GeneIdenTypeForm": "4.2 A General Identity Type Former"}, {"#WellFounTree": "4.3 Well-Founded Trees"}, {"#IterSetsCZF": "4.4 Iterative Sets and CZF"}, {"#InduDefi": "4.5 Inductive Definitions"}, {"#InduRecuDefi": "4.6 Inductive-Recursive Definitions"}, {"#MeanExpl": "5. Meaning Explanations"}, {"#CompCanoForm": "5.1 Computation to Canonical Form"}, {"#MeanCateJudg": "5.2 The Meaning of Categorical Judgments"}, {"#MeanHypoJudg": "5.3 The Meaning of Hypothetical Judgments"}, {"#MathMode": "6. Mathematical Models"}, {"#CateMode": "6.1 Categorical Models"}, {"#SetTheoMode": "6.2 Set-Theoretic Model"}, {"#RealMode": "6.3 Realizability Models"}, {"#ModeNormFormTypeChec": "6.4 Model of Normal Forms and Type-Checking"}, {"#VariTheo": "7. Variants of the Theory"}, {"#ExteTypeTheo": "7.1 Extensional Type Theory"}, {"#UnivFounHomoTypeTheo": "7.2 Univalent Foundations and Homotopy Type Theory"}, {"#PartNonStanTypeTheo": "7.3 Partial and Non-Standard Type Theory"}, {"#ImprTypeTheo": "7.4 Impredicative Type Theory"}, {"#ProoAssi": "7.5 Proof Assistants"}, {"#Bib": "Bibliography"}, {"#Aca": "Academic Tools"}, {"#Oth": "Other Internet Resources"}, {"#Rel": "Related Entries"}], "main_text": "\n1. Overview\nWe begin with a bird\u2019s eye view of some important aspects of\nintuitionistic type theory. Readers who are unfamiliar with the theory\nmay prefer to skip it on a first reading.\nThe origins of intuitionistic type theory are Brouwer\u2019s\nintuitionism and Russell\u2019s type theory. Like\n Church\u2019s classical simple theory of types\n it is based on the lambda calculus with types,\nbut differs from it in that it is based on the propositions-as-types\nprinciple, discovered by Curry (1958) for propositional logic and\nextended to predicate logic by Howard (1980) and de Bruijn\n(1970). This extension was made possible by the introduction of\nindexed families of types (dependent types) for representing the\npredicates of predicate logic. In this way all logical connectives and\nquantifiers can be interpreted by type formers. In intuitionistic type\ntheory further types are added, such as a type of natural numbers, a\ntype of small types (a universe) and a type of well-founded trees. The\nresulting theory contains intuitionistic number theory (Heyting\narithmetic) and much more.\nThe theory is formulated in natural deduction where the rules for\neach type former are classified as formation, introduction,\nelimination, and equality rules. These rules exhibit certain\nsymmerties between the introduction and elimination rules following\nGentzen\u2019s and Prawitz\u2019 treatment of natural deduction, \nas explained in the entry on\n proof-theoretic semantics.\nThe elements of propositions, when interpreted as types, are\ncalled proof-objects. When proof-objects are added to the\nnatural deduction calculus it becomes a typed lambda calculus with\ndependent types, which extends Church\u2019s original typed lambda\ncalculus. The equality rules are computation rules for the terms of\nthis calculus. Each function definable in the theory is total and\ncomputable. Intuitionistic type theory is thus a typed functional\nprogramming language with the unusual property that all programs\nterminate.\nIntuitionistic type theory is not only a formal logical system but\nalso provides a comprehensive philosophical framework for\nintuitionism. It is an interpreted language, where the\ndistinction between the demonstration of a judgment and\nthe proof of a proposition plays a fundamental role (Sundholm\n2012). The framework clarifies the Brouwer-Heyting-Kolmogorov\ninterpretation of intuitionistic logic and extends it to the more\ngeneral setting of intuitionistic type theory. In doing so it provides\na general conception not only of what a constructive proof is, but\nalso of what a constructive mathematical object is. The meaning of the\njudgments of intuitionistic type theory is explained in terms of\ncomputations of the canonical forms of types and terms. These\ninformal, intuitive meaning explanations are\n\u201cpre-mathematical\u201d and should be contrasted to formal\nmathematical models developed inside a standard mathematical framework\nsuch as set theory.\nThis meaning theory also justifies a variety of inductive,\nrecursive, and inductive-recursive definitions. Although\nproof-theoretically strong notions can be justified, such as analogues\nof certain large cardinals, the system is considered\npredicative. Impredicative definitions of the kind found in\nhigher-order logic, intuitionistic set theory, and topos theory are\nnot part of the theory. Neither is Markov\u2019s principle, and thus the\ntheory is distinct from Russian constructivism.\nAn alternative formal logical system for predicative constructive\nmathematics is Myhill and Aczel\u2019s\n constructive Zermelo-Fraenkel set theory\n (CZF). This theory, which is based on\nintuitionistic first-order predicate logic and weakens some of the\naxioms of classical Zermelo-Fraenkel Set Theory, has a natural\ninterpretation in intuitionistic type theory. Martin-L\u00f6f\u2019s meaning\nexplanations thus also indirectly form a basis for CZF.\nVariants of intuitionistic type theory underlie several widely used\nproof assistants, including NuPRL, Coq, and Agda. These proof\nassistants are computer systems that have been used for formalizing\nlarge and complex proofs of mathematical theorems, such as the Four\nColour Theorem in graph theory and the Feit-Thompson Theorem in finite\ngroup theory. They have also been used to prove the correctness of a realistic C compiler (Leroy 2009) and other \ncomputer software.\nPhilosophically and practically, intuitionistic type theory is a\nfoundational framework where constructive mathematics and computer\nprogramming are, in a deep sense, the same. This point has been\nemphasized by (Gonthier 2008) in the paper in which he describes his\nproof of the Four Colour Theorem:\n\nThe approach that proved successful for this proof was to turn\nalmost every mathematical concept into a data structure or a program\nin the Coq system, thereby converting the entire enterprise into one\nof program verification.\n\n2. Propositions as Types\n2.1 Intuitionistic Type Theory: a New Way of Looking at Logic?\nIntuitionistic type theory offers a new way of analyzing logic,\nmainly through its introduction of explicit proof objects. This\nprovides a direct computational interpretation of logic, since there\nare computation rules for proof objects. As regards expressive power,\nintuitionistic type theory may be considered as an extension of\nfirst-order logic, much as higher order logic, but predicative.\n2.1.1 A Type Theory\nRussell developed\n type theory in response to his discovery\nof a paradox in naive set theory. In his ramified type theory\nmathematical objects are classified according to their types:\nthe type of propositions, the type of objects, the type of properties\nof objects, etc. When Church developed his\n simple theory of types on the\n basis of a typed version of his lambda calculus he added\nthe rule that there is a type of functions between any two types of\nthe theory. Intuitionistic type theory further extends the simply\ntyped lambda calculus with dependent types, that is, indexed families\nof types. An example is the family of types of \\(n\\)-tuples indexed by\n\\(n\\).\nTypes have been widely used in programming for a long time. Early\nhigh-level programming languages introduced types of integers and\nfloating point numbers. Modern programming languages often have rich\ntype systems with many constructs for forming new\ntypes. Intuitionistic type theory is a functional programming language\nwhere the type system is so rich that practically any conceivable\nproperty of a program can be expressed as a type. Types can thus be\nused as specifications of the task of a program.\n2.1.2 An intuitionstic logic with proof-objects\nBrouwer\u2019s analysis of logic led him to an intuitionistic logic\nwhich rejects the law of excluded middle and the law of double\nnegation. These laws are not valid in intuitionistic type theory. Thus\nit does not contain classical (Peano) arithmetic but only\nintuitionistic (Heyting) arithmetic. (It is another matter that Peano\narithmetic can be interpreted in Heyting arithmetic by the double\nnegation interpretation, see the entry on\n intuitionistic logic.)\nConsider a theorem of intuitionistic arithmetic, such as the\ndivision theorem\n\n\\[\\forall m, n. m > 0 \\supset \\exists q, r. mq + r = n \n\\wedge m > r \\]\n\nA formal proof (in the usual sense) of this theorem is a sequence\n(or tree) of formulas, where the last (root) formula is the theorem\nand each formula in the sequence is either an axiom (a leaf) or the\nresult of applying an inference rule to some earlier (higher)\nformulas.\nWhen the division theorem is proved in intuitionistic type theory,\nwe do not only build a formal proof in the usual sense but also\na construction (or proof-object)\n\u201c\\(\\divi\\)\u201d which witnesses the truth of the theorem. We\nwrite\n\n\\[\\divi : \\forall m, n {:} \\N.\\, m > 0 \\supset \\exists q, r {:} \\N.\\, mq + r = n \\wedge m > r \\]\n\nto express that \\(\\divi\\) is a proof-object for the division\ntheorem, that is, an element of the type representing the division\ntheorem. When propositions are represented as types, the\n\\(\\forall\\)-quantifier is identified with the dependent function space\nformer (or general cartesian product) \\(\\Pi\\), the\n\\(\\exists\\)-quantifier with the dependent pairs type former (or\ngeneral disjoint sum) \\(\\Sigma\\), conjunction \\(\\wedge\\) with cartesian product \\( \\times \\), the identity relation = with the\ntype former \\(\\I\\) of proof-objects of identities, and the greater\nthan relation \\(>\\) with the type former \\(\\GT\\) of\nproof-objects of greater-than statements. Using\n\u201ctype-notation\u201d we thus write\n\n\\[\n\\divi : \\Pi m, n {:} \\N.\\, \\GT(m,0)\\rightarrow \n \\Sigma q, r {:} \\N.\\, \\I(\\N,mq + r,n) \\times \\GT(m,r)\n\\]\n\nto express that the proof object \u201c\\(\\divi\\)\u201d is a\nfunction which maps two numbers \\(m\\) and \\(n\\) and a proof-object \\(p\\) witnessing that\n\\(m > 0\\) to a quadruple \\((q,(r,(s,t)))\\), where \\(q\\) is the quotient\nand \\(r\\) is the remainder obtained when dividing \\(n\\) by \\(m\\). The\nthird component \\(s\\) is a proof-object witnessing the fact that \\(mq\n+ r = n\\) and the fourth component \\(t\\) is a proof object witnessing \\(m > r \\).\nCrucially, \\(\\divi\\) is not only a function in the classical sense;\nit is also a function in the intuitionistic sense, that is, a program\nwhich computes the output \\((q,(r,(s,t)))\\) when given \\(m\\), \\(n\\), \\(p\\)\nas inputs. This program is a term in a lambda calculus with special\nconstants, that is, a program in a functional programming\nlanguage.\n2.1.3 An extension of first-order predicate logic\nIntuitionistic type theory can be considered as an extension of\nfirst-order logic, much as higher order logic is an extension of first\norder logic. In higher order logic we find some individual domains\nwhich can be interpreted as any sets we like. If there are relational\nconstants in the signature these can be interpreted as any relations\nbetween the sets interpreting the individual domains. On top of that\nwe can quantify over relations, and over relations of relations,\netc. We can think of higher order logic as first-order logic equipped\nwith a way of introducing new domains of quantification: if \\(S_1,\n\\ldots, S_n\\) are domains of quantification then \\((S_1,\\ldots,S_n)\\)\nis a new domain of quantification consisting of all the n-ary\nrelations between the domains \\(S_1,\\ldots,S_n\\). Higher order logic\nhas a straightforward set-theoretic interpretation where\n\\((S_1,\\ldots,S_n)\\) is interpreted as the power set \\(P(A_1 \\times\n\\cdots \\times A_n)\\) where \\(A_i\\) is the interpretation of \\(S_i\\),\nfor \\(i=1,\\ldots,n\\). This is the kind of higher order logic or simple\ntheory of types that Ramsey, Church and others introduced.\nIntuitionistic type theory can be viewed in a similar way, only\nhere the possibilities for introducing domains of quantification are\nricher, one can use \\(\\Sigma, \\Pi, +, \\I\\) to construct new ones from\nold. (Section 3.1; Martin-L\u00f6f 1998\n[1972]). Intuitionistic type theory has a straightforward\nset-theoretic interpretation as well, where \\(\\Sigma\\), \\(\\Pi\\) etc\nare interpreted as the corresponding set-theoretic constructions; see\nbelow. We can add to intuitionistic type theory unspecified individual\ndomains just as in HOL. These are interpreted as sets as for HOL. Now\nwe exhibit a difference from HOL: in intuitionistic type theory we can\nintroduce unspecified family symbols. We can introduce \\(T\\) as a\nfamily of types over the individual domain \\(S\\):\n\n\\[T(x)\\; {\\rm type} \\;(x{:}S).\\]\n\nIf \\(S\\) is interpreted as \\(A\\), \\(T\\) can be interpreted as any\nfamily of sets indexed by \\(A\\). As a non-mathematical example, we can\nrender the binary relation loves between members of an\nindividual domain of people as follows. Introduce the binary\nfamily Loves over the domain People\n\n\\[{\\rm Loves}(x,y)\\; {\\rm type}\\;  (x{:}{\\rm People}, y{:}{\\rm People}).\\]\n\nThe interpretation can be any family of sets \\(B_{x,y}\\) (\\(x{:}A\\),\n\\(y{:}A\\)). How does this cover the standard notion of relation? Suppose\nwe have a binary relation \\(R\\) on \\(A\\) in the familiar set-theoretic\nsense. We can make a binary family corresponding to this as\nfollows\n\n\\[\nB_{x,y} = \n\\begin{cases}\n\\{0\\} &\\text{if } R(x,y) \\text{ holds} \\\\\n\\varnothing &\\text{if } R(x,y) \\text{ is false.}\n\\end{cases}\\]\n\nNow clearly \\(B_{x,y}\\) is nonempty if and only if \\(R(x,y)\\)\nholds. (We could have chosen any other element from our set theoretic\nuniverse than 0 to indicate truth.) Thus from any relation we can\nconstruct a family whose truth of \\(x,y\\) is equivalent to \\(B_{x,y}\\)\nbeing non-empty. Note that this interpretation does not care what the\nproof for \\(R(x,y)\\) is, just that it holds. Recall that\nintuitionistic type theory interprets propositions as types, so \n\\(p{:} {\\rm Loves}({\\rm John}, {\\rm Mary})\\) means that \\({\\rm Loves}({\\rm\nJohn}, {\\rm Mary})\\) is true.\nThe interpretation of relations as families allows for keeping\ntrack of proofs or evidence that \\(R(x,y)\\) holds, but we may also\nchose to ignore it.\nIn Montague semantics,\n higher order logic is used to give\nsemantics of natural language (and examples as above). Ranta (1994)\nintroduced the idea to instead employ intuitionistic type theory to\nbetter capture sentence structure with the help of dependent\ntypes.\nIn contrast, how would the mathematical relation \\(>\\) between\nnatural numbers be handled in intuitionistic type theory? First of all\nwe need a type of numbers \\(\\N\\). We could in principle introduce an\nunspecified individual domain \\(\\N\\), and then add axioms just as we\ndo in first-order logic when we set up the axiom system for Peano\narithmetic. However this would not give us the desirable computational\ninterpretation. So as explained below we lay down introduction rules\nfor constructing new natural numbers in \\(\\N\\) and elimination and\ncomputation rules for defining functions on \\(\\N\\) (by recursion). The\nstandard order relation \\(>\\) should satisfy\n\n\\[\\mbox{\\(x > y\\)  iff there exists \\(z{:} \\N\\) such that \\(y+z+1 = x\\)}.\n\\]\n\nThe right hand is rendered as \\(\\Sigma z{:}\\N.\\, \\I(\\N,y+z+1,x)\\) in\nintuitionistic type theory, and we take this as definition of relation\n\\(>\\). (\\(+\\) is defined by recursive equations, \\(\\I\\) is the\nidentity type construction). Now all the properties of \\(>\\) are\ndetermined by the mentioned introduction and elimination and\ncomputation rules for \\(\\N\\).\n2.1.4 A logic with several forms of judgment\nThe type system of intuitionistic type theory is very\nexpressive. As a consequence the well-formedness of a type is no\nlonger a simple matter of parsing, it is something which needs to be\nproved. Well-formedness of a type is one form of judgment of\nintuitionistic type theory. Well-typedness of a term with respect to a\ntype is another. Furthermore, there are equality judgments for types\nand terms. This is yet another way in which intuitionistic type theory\ndiffers from ordinary first order logic with its focus on the sole\njudgment expressing the truth of a proposition.\n2.1.5 Semantics\nWhile a standard presentation of first-order logic would follow\nTarski in defining the notion of model, intuitionistic type theory\nfollows the tradition of Brouwerian meaning theory as further\ndeveloped by Heyting and Kolmogorov, the so called BHK-interpretation\nof logic. The key point is that the proof of an implication \\(A\n\\supset B \\) is a method that transforms a proof of \\(A\\) to\na proof of \\(B\\). In intuitionistic type theory this method is\nformally represented by the program \\(f {:} A \\supset B\\) or \\(f {:} A\n\\rightarrow B\\): the type of proofs of an implication \\(A \\supset B\\)\nis the type of functions which maps proofs of \\(A\\) to proofs of\n\\(B\\).\nMoreover, whereas Tarski semantics is usually presented\nmeta-mathematically, and assumes set theory, Martin-L\u00f6f\u2019s meaning\ntheory of intuitionistic type theory should be understood directly and\n\u201cpre-mathematically\u201d, that is, without assuming a\nmeta-language such as set theory.\n2.1.6 A functional programming language\nReaders with a background in the lambda calculus and functional\nprogramming can get an alternative first approximation of\nintuitionistic type theory by thinking about it as a typed functional\nprogramming language in the style of Haskell or one of the dialects of\nML. However, it differs from these in two crucial aspects: (i) it has\ndependent types (see below) and (ii) all typable programs\nterminate. (Note that intuitionistic type theory has influenced recent\nextensions of Haskell with generalized algebraic datatypes\nwhich sometimes can play a similar role as inductively defined\ndependent types.)\n2.2 The Curry-Howard Correspondence\nAs already mentioned, the principle that\n\na proposition is the type of its proofs.\n\nis fundamental to intuitionistic type theory. This principle is\nalso known as the Curry-Howard correspondence or even Curry-Howard\nisomorphism. Curry discovered a correspondence between the\nimplicational fragment of intuitionistic logic and the simply typed\nlambda-calculus. Howard extended this correspondence to first-order\npredicate logic. In intuitionistic type theory this correspondence\nbecomes an identification of proposition and types, which has\nbeen extended to include quantification over higher types and\nmore.\n2.3 Sets of Proof-Objects\nSo what are these proof-objects like? They should not be thought of\nas logical derivations, but rather as some (structured) symbolic\nevidence that something is true. Another term for such evidence is\n\u201ctruth-maker\u201d.\nIt is instructive, as a somewhat crude first approximation, to\nreplace types by ordinary sets in this correspondence. Define a set\n\\(\\E_{m,n}\\), depending on \\(m, n \\in {{\\mathbb N}}\\), by:\n\n\\[\\E_{m,n} = \n\\left\\{\\begin{array}{ll}\n      \\{0\\} & \\mbox{if \\(m = n\\)}\\\\ \n      \\varnothing & \\mbox{if \\(m \\ne n\\).}\n\\end{array}\n\\right.\\]\n\nThen \\(\\E_{m,n}\\) is nonempty exactly when \\(m=n\\). The set\n\\(\\E_{m,n}\\) corresponds to the proposition \\(m=n\\), and the number\n\\(0\\) is a proof-object (truth-maker) inhabiting the sets\n\\(\\E_{m,m}\\).\nConsider the proposition that \\(m\\) is an even number\nexpressed as the formula \\(\\exists n \\in {{\\mathbb N}}. m= 2n\\). We\ncan build a set of proof-objects corresponding to this formula by\nusing the general set-theoretic sum operation. Suppose that \\(A_n\\)\n(\\(n\\in {{\\mathbb N}}\\)) is a family of sets. Then its disjoint sum is\ngiven by the set of pairs\n\n\\[\n(\\Sigma n \\in {{\\mathbb N}})A_n = \\{ (n,a) : n \\in {{\\mathbb N}}, a \\in A_n\\}.\\]\n\nIf we apply this construction to the family \\(A_n = \\E_{m,2n}\\) we\nsee that \\((\\Sigma n \\in {{\\mathbb N}})\\E_{m,2n}\\) is nonempty exactly\nwhen there is an \\(n\\in {{\\mathbb N}}\\) with \\(m=2n\\). Using the\ngeneral set-theoretic product operation \\((\\Pi n \\in {{\\mathbb\nN}})A_n\\) we can similarly obtain a set corresponding to a universally\nquantified proposition.\n2.4 Dependent Types\nIn intuitionistic type theory there are primitive type formers\n\\(\\Sigma\\) and \\(\\Pi\\) for general sums and products, and \\(\\I\\) for\nidentity types, analogous to the set-theoretic constructions described\nabove. The identity type \\(\\I(\\N,m,n)\\) corresponding to the\nset \\(\\E_{m,n}\\) is an example of a dependent type since it\ndepends on \\(m\\) and \\(n\\). It is also called an indexed family of\ntypes since it is a family of types indexed by \\(m\\) and\n\\(n\\). Similarly, we can form the general disjoint sum \\(\\Sigma x {:}\nA.\\, B\\) and the general cartesian product \\(\\Pi x {:} A.\\, B\\) of such a\nfamily of types \\(B\\) indexed by \\(x {:} A\\), corresponding to the set\ntheoretic sum and product operations above.\nDependent types can also be defined by primitive recursion. An\nexample is the type of \\(n\\)-tuples \\(A^n\\) of elements of type \\(A\\)\nand indexed by \\(n {:} N\\) defined by the equations\n\n\\[\\begin{align*} \nA^0 &= 1\\\\ \nA^{n+1} &= A \\times A^n \n\\end{align*}\\]\n\n where \\(1\\) is a\none element type and \\(\\times\\) denotes the cartesian product of two\ntypes. We note that dependent types introduce computation in types:\nthe defining rules above are computation rules. For example, the\nresult of computing \\(A^3\\) is \\(A \\times (A \\times (A \\times\n1))\\).\n2.5 Propositions as Types in Intuitionistic Type Theory\nWith propositions as types, predicates become dependent types. For\nexample, the predicate \\(\\mathrm{Prime}(x)\\) becomes the type of\nproofs that \\(x\\) is prime. This type depends on\n\\(x\\). Similarly, \\(x < y\\) is the type of proofs that \\(x\\) is\nless than \\(y\\).\nAccording to the Curry-Howard interpretation of propositions as\ntypes, the logical constants are interpreted as type formers:\n\n\\[\\begin{align*} \n\\bot &= \\varnothing\\\\ \n\\top &= 1\\\\ \nA \\vee B &= A + B\\\\ \nA \\wedge B &= A \\times B\\\\ \nA \\supset B &= A \\rightarrow B\\\\ \n\\exists x {:} A.\\, B &= \\Sigma x {:} A.\\, B\\\\ \n\\forall x {:} A.\\, B &= \\Pi x {:} A.\\, B \n\\end{align*}\\]\n\n\nwhere \\(\\Sigma x {:} A.\\, B\\) is the\ndisjoint sum of the \\(A\\)-indexed family of types \\(B\\) and \\(\\Pi x {:}\nA.\\, B\\) is its cartesian product. The canonical elements of \\(\\Sigma x {:}\nA.\\, B\\) are pairs \\((a,b)\\) such that \\(a {:} A\\) and \\(b {:} B[x:=a]\\)\n(the type obtained by substituting all free occurrences of \\(x\\) in\n\\(B\\) by \\(a\\)). The elements of \\(\\Pi x {:} A.\\, B\\) are (computable)\nfunctions \\(f\\) such that \\(f\\,a {:} B[x:=a]\\), whenever \\(a {:} A\\).\nFor example, consider the proposition\n\n\\[\\begin{equation} \n\\forall m {:} \\N.\\, \\exists n {:} \\N.\\, m \\lt n \\wedge \\mathrm{Prime}(n)\n\\tag{1}\\label{prop1} \n\\end{equation}\\]\n\n\n\nexpressing that there are\narbitrarily large primes. Under the Curry-Howard interpretation this\nbecomes the type \\(\\Pi m {:} \\N.\\, \\Sigma n {:} \\N.\\, m \\lt n \\times\n\\mathrm{Prime}(n)\\) of functions which map a number \\(m\\) to a triple\n\\((n,(p,q))\\), where \\(n\\) is a number, \\(p\\) is a proof that \\(m \\lt\nn\\) and \\(q\\) is a proof that \\(n\\) is prime. This is the proofs\nas programs principle: a constructive proof that there are\narbitrarily large primes becomes a program which given any number\nproduces a larger prime together with proofs that it indeed is larger\nand indeed is prime.\nNote that the proof which derives a contradiction from the\nassumption that there is a largest prime is not constructive, since it\ndoes not explicitly give a way to compute an even larger prime. To\nturn this proof into a constructive one we have to show explicitly how\nto construct the larger prime. (Since proposition (\\ref{prop1}) above\nis a \\(\\Pi^0_2\\)-formula we can for example use Friedman\u2019s\nA-translation to turn such a proof in classical arithmetic into a\nproof in intuitionistic arithmetic and thus into a proof in\nintuitionistic type theory.)\n3. Basic Intuitionistic Type Theory\nWe now present a core version of intuitionistic type theory,\nclosely related to the first version of the theory presented by\nMartin-L\u00f6f in 1972 (Martin-L\u00f6f 1998 [1972]). In addition to\nthe type formers needed for the Curry-Howard interpretation of typed\nintuitionistic predicate logic listed above, we have two types: the\ntype \\(\\N\\) of natural numbers and the type \\(\\U\\) of small types.\nThe resulting theory can be shown to contain intuitionistic number\ntheory \\(\\HA\\) (Heyting arithmetic), G\u00f6del\u2019s System \\(\\T\\) of\nprimitive recursive functions of higher type, and the theory\n\\(\\HA^\\omega\\) of Heyting arithmetic of higher type.\nThis core intuitionistic type theory is not only the original one,\nbut perhaps the minimal version which exhibits the essential features\nof the theory. Later extensions with primitive identity types,\nwell-founded tree types, universe hierarchies, and general notions of\ninductive and inductive-recursive definitions have increased the\nproof-theoretic strength of the theory and also made it more\nconvenient for programming and formalization of mathematics. For\nexample, with the addition of well-founded trees we can interpret the\nConstructive Zermelo-Fraenkel Set Theory \\(\\CZF\\) of Aczel\n(1978 [1977]). However, we will\nwait until the next section to describe those extensions.\n3.1 Judgments\nIn Martin-L\u00f6f (1996) a general philosophy of logic is presented\nwhere the traditional notion of judgment is expanded and given a\ncentral position. A judgment is no longer just an affirmation or\ndenial of a proposition, but a general act of knowledge. When\nreasoning mathematically we make judgments about mathematical\nobjects. One form of judgment is to state that some mathematical\nstatement is true. Another form of judgment is to state that something\nis a mathematical object, for example a set. The logical rules give\nmethods for producing correct judgments from earlier judgments. The\njudgments obtained by such rules can be presented in tree form\n\n\\[\n\\begin{prooftree}\n  \\AxiomC{\\(J_1\\)}\n  \\AxiomC{\\(J_2\\)}\n  \\RightLabel{\\(r_1\\)}\n  \\BinaryInfC{\\(J_3\\)}\n  \\AxiomC{\\(J_4\\)}\n  \\RightLabel{\\(r_5\\)}\n  \\UnaryInfC{\\(J_5\\)}\n  \\AxiomC{\\(J_6\\)}\n  \\RightLabel{\\(r_3\\)}\n  \\BinaryInfC{\\(J_7\\)}\n  \\RightLabel{\\(r_4\\)}\n  \\BinaryInfC{\\(J_8\\)}\n\\end{prooftree}\\]\n\nor in sequential form\n\n(1) \\(J_1  \\quad\\text{ axiom} \\)\n(2) \\(J_2  \\quad\\text{ axiom} \\)\n(3) \\(J_3 \\quad\\text{ by rule \\(r_1\\) from (1) and (2)} \\)\n(4) \\(J_4 \\quad\\text{ axiom} \\)\n(5) \\(J_5 \\quad\\text{ by rule \\(r_2\\) from (4)} \\)\n(6) \\(J_6 \\quad\\text{ axiom} \\)\n(7) \\(J_7 \\quad\\text{ by rule \\(r_3\\) from(5) and (6)} \\)\n(8) \\(J_8 \\quad\\text{ by rule \\(r_4\\) from (3) and (7)} \\)\n\nThe latter form is common in mathematical arguments. Such a\nsequence or tree formed by logical rules from axioms is\na derivation or demonstration of a judgment.\nFirst-order reasoning may be presented using a single kind of\njudgment:\n\nthe proposition \\(B\\) is true under the hypothesis that the\npropositions \\(A_1, \\ldots, A_n\\) are all true.\n\nWe write this hypothetical judgment as a\nso-called Gentzen sequent\n\n\\[A_1, \\ldots,  A_n {\\vdash}B.\\]\n\nNote that this is a single judgment that should not be confused with\nthe derivation of the judgment \\({\\vdash}B\\) from the judgments\n\\({\\vdash}A_1, \\ldots, {\\vdash}A_n\\). When \\(n=0\\), then\nthe categorical judgment \\( {\\vdash}B\\) states that \\(B\\) is\ntrue without any assumptions. With sequent notation the familiar rule\nfor conjunctive introduction becomes\n\n\\[\\begin{prooftree}\n  \\AxiomC{\\(A_1, \\ldots,A_n {\\vdash}B\\)}\n  \\AxiomC{\\(A_1, \\ldots, A_n {\\vdash}C\\)}\n  \\RightLabel{\\((\\land I)\\).}\n  \\BinaryInfC{\\(A_1, \\ldots, A_n {\\vdash}B \\land C\\)}\n\\end{prooftree}\\]\n\n3.2 Judgment Forms\nMartin-L\u00f6f type theory has four basic forms of judgments and is a\nconsiderably more complicated system than first-order logic. One\nreason is that more information is carried around in the derivations\ndue to the identification of propositions and types. Another reason is\nthat the syntax is more involved. For instance, the well-formed\nformulas (types) have to be generated simultaneously with the provably\ntrue formulas (inhabited types).\nThe four forms of categorical judgment are\n\n\n\\(\\vdash A \\; {\\rm type}\\), meaning that \\(A\\) is a well-formed\ntype,\n\n\n\\(\\vdash a {:} A\\), meaning that \\(a\\) has type \\(A\\),\n\n\n\\(\\vdash A = A'\\), meaning that \\(A\\) and \\(A'\\) are equal\ntypes,\n\n\n\\(\\vdash a = a' {:} A\\), meaning that \\(a\\) and \\(a'\\) are\nequal elements of type \\(A\\).\n\n\nIn general, a judgment is hypothetical, that is, it is\nmade in a context \\(\\Gamma\\), that is, a list \\(x_1 {:} A_1, \\ldots, x_n\n{:} A_n\\) of variables which may occur free in the judgment together\nwith their respective types. Note that the types in a context can\ndepend on variables of earlier types. For example, \\(A_n\\) can depend\non \\(x_1 {:} A_1, \\ldots, x_{n-1} {:} A_{n-1}\\). The four forms of\nhypothetical judgments are\n\n\n\\(\\Gamma \\vdash A \\; {\\rm type}\\), meaning that \\(A\\) is a\nwell-formed type in the context \\(\\Gamma\\),\n\n\n\\(\\Gamma \\vdash a {:} A\\), meaning that \\(a\\) has type \\(A\\) in\ncontext \\(\\Gamma\\),\n\n\n\\(\\Gamma \\vdash A = A'\\), meaning that \\(A\\) and \\(A'\\) are\nequal types in the context \\(\\Gamma\\),\n\n\n\\(\\Gamma \\vdash a = a' {:} A\\), meaning that \\(a\\) and \\(a'\\)\nare equal elements of type \\(A\\) in the context \\(\\Gamma\\).\n\n\nUnder the proposition as types interpretation\n\n\\[\\tag{2}\\label{analytic} \\vdash a {:} A\n\\] \n\n\ncan be understood as the judgment that \\(a\\) is a proof-object for the\nproposition \\(A\\). When suppressing this object we get a judgment\ncorresponding to the one in ordinary first-order logic (see\nabove):\n\n\\[\\tag{3}\\label{synthetic} \\vdash A\\; {\\rm true}.\n\\]\n\nRemark 3.1. Martin-L\u00f6f\n(1994) argues that\nKant\u2019s analytic judgment a priori and synthetic judgment\na priori can be exemplified, in the realm of logic, by\n([analytic]) and ([synthetic]) respectively. In the analytic judgment\n([analytic]) everything that is needed to make the judgment evident is\nexplicit. For its synthetic version ([synthetic]) a possibly\ncomplicated proof construction \\(a\\) needs to be provided to make it\nevident. This understanding of analyticity and syntheticity has the\nsurprising consequence that \u201cthe logical laws in their usual\nformulation are all synthetic.\u201d Martin-L\u00f6f (1994:\n95). His analysis further\ngives:\n \u201c [\u2026] the logic of analytic judgments,\nthat is, the logic for deriving judgments of the two analytic forms,\nis complete and decidable, whereas the logic of synthetic judgments is\nincomplete and undecidable, as was shown by G\u00f6del.\u201d\nMartin-L\u00f6f (1994: 97).\n\n The decidability of the two analytic judgments (\\(\\vdash a{:}A\\) and\n\\(\\vdash a=b{:}A\\)) hinges on the metamathematical properties of type\ntheory: strong normalization and decidable type checking. \nSometimes also the following forms are explicitly considered to be\njudgments of the theory:\n\n\\(\\Gamma \\; {\\rm context}\\), meaning that \\(\\Gamma\\) is a\nwell-formed context.\n\\(\\Gamma = \\Gamma'\\), meaning that \\(\\Gamma\\) and\n\\(\\Gamma'\\) are equal contexts.\n\nBelow we shall abbreviate the judgment \\(\\Gamma \\vdash A \\; {\\rm\ntype}\\) as \\(\\Gamma \\vdash A\\) and \\(\\Gamma \\; {\\rm context}\\) as\n\\(\\Gamma \\vdash.\\)\n3.3 Inference Rules\nWhen stating the rules we will use the letter \\(\\Gamma\\) as a\nmeta-variable ranging over contexts, \\(A,B,\\ldots\\) as meta-variables\nranging over types, and \\(a,b,c,d,e,f,\\ldots\\) as meta-variables\nranging over terms.\nThe first group of inference rules are general rules including\nrules of assumption, substitution, and context formation. There are\nalso rules which express that equalities are equivalence\nrelations. There are numerous such rules, and we only show the\nparticularly important rule of type equality which is crucial\nfor computation in types:\n\n\\[\\frac{\\Gamma \\vdash a {:} A\\hspace{2em}\\Gamma \\vdash A = B}\n{\\Gamma \\vdash a {:} B}\\]\n\nThe remaining rules are specific to the type formers. These are\nclassified as formation, introduction, elimination, and equality\nrules.\n3.4 Intuitionistic Predicate Logic\nWe only give the rules for \\(\\Pi\\). There are analogous rules for\nthe other type formers corresponding to the logical constants of typed\npredicate logic.\nIn the following \\(B[x := a]\\) means the term obtained by\nsubstituting the term \\(a\\) for each free occurrence of the variable\n\\(x\\) in \\(B\\) (avoiding variable capture).\n\\(\\Pi\\)-formation.\n\n\\[\\frac{\\Gamma \\vdash A\\hspace{2em} \\Gamma, x {:} A \\vdash B}\n{\\Gamma \\vdash \\Pi x {:} A. B}\\]\n\n\\(\\Pi\\)-introduction.\n\n\\[\\frac{\\Gamma, x {:} A \\vdash b {:} B}\n{\\Gamma \\vdash \\lambda x. b {:} \\Pi x {:} A. B}\\]\n\n\\(\\Pi\\)-elimination.\n\n\\[\\frac\n{\\Gamma \\vdash f {:} \\Pi x {:} A.B\\hspace{2em}\\Gamma \\vdash a {:} A}\n{\\Gamma \\vdash f\\,a {:} B[x := a]}\\]\n\n\\(\\Pi\\)-equality.\n\n\\[\\frac\n{\\Gamma, x {:} A \\vdash b {:} B\\hspace{2em}\\Gamma \\vdash a {:} A}\n{\\Gamma \\vdash (\\lambda x.b)\\,a = b[x := a] {:} B[x := a]}\\]\n\nThis is the rule of \\(\\beta\\)-conversion. We\nmay also add the rule of \\(\\eta\\)-conversion:\n\n\\[\\frac\n{\\Gamma \\vdash f {:} \\Pi x {:} A. B}\n{\\Gamma \\vdash \\lambda x. f\\,x = f {:} \\Pi x {:} A. B}.\\]\n\nFurthermore, there are congruence rules expressing that operations\nintroduced by the formation, introduction, and elimination rules\npreserve equality. For example, the congruence rule for \\(\\Pi\\) is\n\n\\[\\frac{\\Gamma \\vdash A = A'\\hspace{2em} \\Gamma, x {:} A \\vdash B=B'}\n{\\Gamma \\vdash \\Pi x {:} A. B = \\Pi x {:} A'. B'}.\\]\n\n3.5 Natural Numbers\nAs in Peano arithmetic the natural numbers are generated by 0 and\nthe successor operation \\(\\s\\). The elimination rule states that these\nare the only possible ways to generate a natural number.\nWe write \\(f(c) = \\R(c,d,xy.e)\\) for the function which is defined\nby primitive recursion on the natural number \\(c\\) with base case\n\\(d\\) and step function \\(xy.e\\) (or alternatively \\(\\lambda xy.e\\))\nwhich maps the value \\(y\\) for the previous number \\(x {:} \\N\\) to the\nvalue for \\(\\s(x)\\). Note that \\(\\R\\) is a new variable-binding\noperator: the variables \\(x\\) and \\(y\\) become bound in \\(e\\).\n\\(\\N\\)-formation.\n\n\\[\\Gamma \\vdash \\N\\]\n\n\\(\\N\\)-introduction.\n\n\\[\\Gamma \\vdash 0 {:} \\N\n\\hspace{2em}\n\\frac{\\Gamma \\vdash a {:} \\N}\n{\\Gamma \\vdash s(a) {:} \\N}\\]\n\n\\(\\N\\)-elimination.\n \n\\[\\frac{\n\\Gamma, x {:} \\N \\vdash C\n\\hspace{1em}\n\\Gamma \\vdash c {:} \\N\n\\hspace{1em}\n\\Gamma \\vdash d {:} C[x := 0]\n\\hspace{1em}\n\\Gamma, y {:} \\N, z {:} C[x := y] \\vdash e {:} C[x := s(y)]\n}\n{\n\\Gamma \\vdash \\R(c,d,yz.e) {:} C[x := c]\n}\\]\n \n\n\\(\\N\\)-equality (under appropriate premises).\n\n\\[\\begin{align*}\n\\R(0,d,yz.e) &= d {:} C[x := 0]\\\\ \n\\R(s(a),d,yz.e) &= e[y := a, z := \\R(a,d,yz.e)] {:} C[x := s(a)]\n\\end{align*}\\]\n\nThe rule of \\(\\N\\)-elimination simultaneously expresses the type of\na function defined by primitive recursion and, under the Curry-Howard\ninterpretation, the rule of mathematical induction: we prove the\nproperty \\(C\\) of a natural number \\(x\\) by induction on \\(x\\).\nG\u00f6del\u2019s System \\(\\T\\) is essentially intuitionistic type theory with\nonly the type formers \\(\\N\\) and \\(A \\rightarrow B\\) (the type of\nfunctions from \\(A\\) to \\(B\\), which is the special case of \n\\((\\Pi x {:} A)B\\) where \\(B\\) does not depend on \\(x {:} A\\)). Since there are no\ndependent types in System \\(\\T\\) the rules can be simplified.\n3.6 The Universe of Small Types\nMartin-L\u00f6f\u2019s first version of type theory (Martin-L\u00f6f 1971a) had an\naxiom stating that there is a type of all types. This was proved\ninconsistent by Girard who found that the Burali-Forti paradox could\nbe encoded in this theory.\nTo overcome this pathological impredicativity, but still retain\nsome of its expressivity, Martin-L\u00f6f introduced in 1972 a universe\n\\(\\U\\) of small types closed under all type formers of the theory,\nexcept that it does not contain itself (Martin-L\u00f6f 1998 [1972]). The rules\nare:\n\\(\\U\\)-formation.\n\n\\[\\Gamma \\vdash \\U\\]\n\n\\(\\U\\)-introduction.\n\n\\[\\Gamma \\vdash \\varnothing {:} \\U\n\\hspace{3em}\n\\Gamma \\vdash 1 {:} \\U\\]\n\n\n\\[\\frac{\\Gamma \\vdash A {:} \\U\\hspace{2em} \\Gamma \\vdash B {:} \\U}\n{\\Gamma \\vdash A + B {:} \\U}\n\\hspace{3em}\n\\frac{\\Gamma \\vdash A {:} \\U\\hspace{2em} \\Gamma \\vdash B {:} \\U}\n{\\Gamma \\vdash A \\times B {:} \\U}\\]\n\n\\[\\frac{\\Gamma \\vdash A {:} \\U\\hspace{2em} \\Gamma \\vdash B {:} \\U}\n{\\Gamma \\vdash A \\rightarrow B {:} \\U}\\]\n\n\\[\\frac{\\Gamma \\vdash A {:} U\\hspace{2em} \\Gamma, x {:} A \\vdash B {:} \\U}\n{\\Gamma \\vdash \\Sigma x {:} A.\\, B {:} \\U}\n\\hspace{3em}\n\\frac{\\Gamma \\vdash A {:} \\U\\hspace{2em} \\Gamma, x {:} A \\vdash B {:} \\U}\n{\\Gamma \\vdash \\Pi x {:} A.\\, B {:} \\U}\\]\n\n\\[\\Gamma \\vdash \\N {:} \\U\\]\n\n\\(\\U\\)-elimination.\n\n\\[\\frac{\\Gamma \\vdash A {:} \\U}\n{\\Gamma \\vdash A}\\]\n\nSince \\(\\U\\) is a type, we can use \\(\\N\\)-elimination to define small\ntypes by primitive recursion. For example, if \\(A : \\U\\), we can define\nthe type of \\(n\\)-tuples of elements in \\(A\\) as follows:\n\n\\[A^n = \\R(n,1,xy.A \\times y) {:} \\U\\]\n\nThis type-theoretic universe \\(\\U\\) is analogous to a Grothendieck\nuniverse in set theory which is a set of sets closed under all the\nways sets can be constructed in Zermelo-Fraenkel set theory. The\nexistence of a Grothendieck universe cannot be proved from the usual\naxioms of Zermelo-Fraenkel set theory but needs a new axiom.\nIn Martin-L\u00f6f (1975) the universe is extended to a countable\nhierarchy of universes\n\n\\[\\U_0 : \\U_1 : \\U_2 : \\cdots .\\]\n\nIn this way each type has a type, not only each small type.\n3.7 Propositional Identity\nAbove, we introduced the equality judgment\n\n\\[\\tag{4}\\label{defeq} \\Gamma \\vdash a = a' {:} A.\\] \n\n\nThis is usually called a \u201cdefinitional equality\u201d because\nit can be decided by normalizing the terms \\(a\\) and \\(a'\\) and\nchecking whether the normal forms are identical. However, this\nequality is a judgment and not a proposition (type) and we thus cannot\nprove such judgmental equalities by induction. For this reason we need\nto introduce propositional identity types. For example, the identity\ntype for natural numbers \\(\\I(\\N,m,n)\\) can be defined by\n\\(\\U\\)-valued primitive recursion. We can then express and prove the\nPeano axioms. Moreover, extensional equality of ufnctions can be\ndefined by\n\n\\[\\I(\\N\\rightarrow \\N,f,f') = \\Pi x {:} \\N. \\I(\\N,f\\,x,f'\\,x).\\]\n\n3.8 The Axiom of Choice is a Theorem\nThe following form of the axiom of choice is an immediate\nconsequence of the BHK-interpretation of the intuitionistic\nquantifiers, and is easily proved in intuitionistic type theory:\n\n\\[(\\Pi x {:} A. \\Sigma y {:} B. C) \\rightarrow \\Sigma f {:} (\\Pi x {:} A. B). C[y := f\\,x]\\]\n\nThe reason is that \\(\\Pi x {:} A. \\Sigma y {:} B. C\\) is the type of\nfunctions which map elements \\(x {:} A\\) to pairs \\((y,z)\\) with \\(y {:}\nB\\) and \\(z {:} C\\). The choice function \\(f\\) is obtained by returning\nthe first component \\(y {:} B\\) of this pair.\nIt is perhaps surprising that intuitionistic type theory directly\nvalidates an axiom of choice, since this axiom is often considered\nproblematic from a constructive point of view. A possible explanation\nfor this state of affairs is that the above is an axiom of choice\nfor types, and that types are not in general appropriate\nconstructive approximations of sets in the classical sense. For\nexample, we can represent a real number as a Cauchy sequence in\nintuitionistic type theory, but the set of real numbers is not the\ntype of Cauchy sequences, but the type of Cauchy sequences up to\nequiconvergence. More generally, a set in Bishop\u2019s constructive\nmathematics is represented by a type (commonly called\n\u201cpreset\u201d) together with an equivalence relation.\nIf \\(A\\) and \\(B\\) are equipped with equivalence relations, there\nis of course no guarantee that the choice function, \\(f\\) above, is\nextensional in the sense that it maps equivalent element to equivalent\nelements. This is the failure of the extensional axiom of\nchoice, see Martin-L\u00f6f (2009) for an analysis.\n4. Extensions\n4.1 The Logical Framework\nThe above completes the description of a core version of\nintuitionistic type theory close to that of (Martin-L\u00f6f 1998 [1972]).\nIn 1986 Martin-L\u00f6f proposed a reformulation of intuitionistic type\ntheory; see Nordstr\u00f6m, Peterson and Smith (1990) for an\nexposition. The purpose was to give a more compact formulation, where\n\\(\\lambda\\) and \\(\\Pi\\) are the only variable binding operations. It\nis nowadays considered the main version of the theory. It is also the\nbasis for the Agda proof assistant. The 1986 theory has two parts:\n\n\nthe theory of types (the logical framework);\n\n\nthe theory of sets (small types).\n\n\nRemark 4.1. Note that the word\n\u201cset\u201d in the logical framework does not coincide with the\nway it is used in Bishop\u2019s constructive mathematics. To avoid this\nconfusion, types together with equivalence relations are usually\ncalled \u201csetoids\u201d or \u201cextensional sets\u201d in\nintuitionistic type theory.\nThe logical framework has only two type formers: \\(\\Pi x {:} A. B\\)\n(usually written \\((x {:} A)B\\) or \\((x {:} A) \\rightarrow B\\) in the\nlogical framework formulation) and \\(\\U\\) (usually called\n\\(\\Set\\)). The rules for \\(\\Pi x{:} A. B\\) (\\((x {:} A) \\rightarrow B\\))\nare the same as given above (including \\(\\eta\\)-conversion). The rules\nfor \\(\\U\\) (\\(\\Set\\)) are also the same, except that the logical\nframework only stipulates closure under \\(\\Pi\\)-type formation.\nThe other small type formers (\u201cset formers\u201d) are\nintroduced in the theory of sets. In the logical framework formulation\neach formation, introduction, and elimination rule can be expressed as\nthe typing of a new constant. For example, the rules for natural\nnumbers become\n\n\\[\\begin{align*} \\N &: \\Set,\\\\ \n0 &: \\N,\\\\ \n\\s &: \\N \\rightarrow \\N,\\\\ \n\\R &: (C {:} \\N \\rightarrow \\Set) \\rightarrow C\\,0\n\\rightarrow (( x {:} \\N) \\rightarrow C\\,x \\rightarrow C\\,(\\s\\,x))\n\\rightarrow (c {:} \\N) \\rightarrow C\\,c.  \n\\end{align*}\\]\n\n\nwhere we have omitted the common context \\(\\Gamma\\), since the types\nof these constants are closed. Note that the recursion operator \\(R\\)\nhas a first argument \\(C {:} \\N \\rightarrow \\Set\\) unlike in the\noriginal formulation.\nMoreover, the equality rules can be expressed as equations\n\n\\[\\begin{align*} \n\\R\\, C\\, d\\, e\\, 0 &= d {:} C\\,0\\\\ \n\\R\\, C\\, d\\, e\\, (\\s\\, a) &= e\\, a\\, (\\R\\, C\\, d\\, e\\, a) {:} C\\,(\\s\\,a)\n\\end{align*}\\]\n\nunder suitable assumptions.\nIn the sequel we will present several extensions of type theory. To\nkeep the presentation uniform we will however not use the\nlogical framework presentation of type theory, but will use the same\nnotation as in section 2.\n4.2 A General Identity Type Former\nAs we mentioned above, identity on natural numbers can be defined\nby primitive recursion. Identity relations on other types can also be\ndefined in the basic version of intuitionistic type theory presented\nin section 2.\nHowever, Martin-L\u00f6f (1975) extended intuitionistic type theory with\na uniform primitive identity type former \\(\\I\\) for all types. The\nrules for \\(\\I\\) express that the identity relation is inductively\ngenerated by the proof of reflexivity, a canonicial constant called\n\\(\\r\\). (Note that \\(\\r\\) was coded by the number 0 in the introductory\npresentation of proof-objects\nin 2.3. The elimination rule for the identity type is a\ngeneralization of identity elimination in predicate logic and\nintroduces an elimination constant \\(\\J\\). We here show the\nformulation due to Paulin-Mohring (1993) rather than the\noriginal formulation of Martin-L\u00f6f (1975). The inference rules are\nthe following.\n\\(\\I\\)-formation.\n\n\\[\\frac{\\Gamma \\vdash A\n\\hspace{1em}\n\\Gamma \\vdash a {:} A\n\\hspace{1em}\n\\Gamma \\vdash a' {:} A}\n{\\Gamma \\vdash \\I(A,a,a')}\\]\n\\(\\I\\)-introduction.\n\n\\[\\frac{\\Gamma \\vdash A\n\\hspace{1em}\n\\Gamma \\vdash a {:} A}\n{\\Gamma \\vdash \\r {:} \\I(A,a,a)}\\]\n\\(\\I\\)-elimination.\n\n\\[\\frac{ \n\\Gamma, x {:} A, y {:} \\I(A,a,x) \\vdash C\n\\hspace{1em}\n\\Gamma  \\vdash  b {:} A\n\\hspace{1em}\n\\Gamma \\vdash c {:} \\I(A,a,b)\n\\hspace{1em} \n\\Gamma  \\vdash d {:} C[x := a, y := r]}\n{ \\Gamma \\vdash \\J(c,d) {:} C[x := b, y:= c]}\\]\n\n\\(\\I\\)-equality (under appropriate assumptions).\n\n\\[\\begin{align*}\n\\J(r,d) &= d\n\\end{align*}\\]\nNote that if \\(C\\) only depends on \\(x : A\\) and not on the proof \\(y : \\I(A,a,x)\\) (and we also suppress proof objects) in the rule of \\(\\I\\)-elimination we recover the rule of identity elimination in predicate logic.\nBy constructing a model of type theory where types are interpreted\nas groupoids (categories where all arrows are isomorphisms)\nHofmann and Streicher (1998) showed that it cannot be proved in\nintuitionistic type theory that all proofs of \\(I(A,a,b)\\) are\nidentical. This may seem as an incompleteness of the theory and\nStreicher suggested a new axiom \\(\\K\\) from which it follows that all\nproofs of \\(\\I(A,a,b)\\) are identical to \\(\\r\\).\nThe \\(\\I\\)-type is often called the intensional identity\ntype, since it does not satisfy the principle of function\nextensionality. Intuitionistic type theory with the intensional\nidentity type is also often called intensional intuitionistic type\ntheory to distinguish it from extensional intuitionistic type\ntheory which will be presented in\n section 7.1.\n4.3 Well-Founded Trees\nA type of well-founded trees of the form \\(\\W x {:} A. B\\) was\nintroduced in Martin-L\u00f6f 1982 (and in a more restricted form by Scott\n1970). Elements of \\(\\W x {:} A. B\\) are trees of varying and arbitrary\nbranching: varying, because the branching type \\(B\\) is indexed by \\(x\n{:} A\\) and arbitrary because \\(B\\) can be arbitrary. The type is given\nby a generalized inductive definition since the well-founded\ntrees may be infinitely branching. We can think of \\(\\W x{:}A. B\\) as the\nfree term algebra, where each \\(a {:} A\\) represents a term constructor\n\\(\\sup\\,a\\) with (possibly infinite) arity \\(B[x := a]\\).\n\\(\\W\\)-formation.\n\n\\[\\frac{\\Gamma \\vdash A\\hspace{2em} \\Gamma, x {:} A \\vdash B}\n{\\Gamma \\vdash \\W x {:} A. B}\\]\n\n\\(\\W\\)-introduction.\n\n\\[\\frac{\\Gamma \\vdash a {:} A \\hspace{2em} \\Gamma, y {:} B[x:=a] \\vdash\n  b : Wx{:}A. B} {\\Gamma \\vdash \\sup(a, y.b) : \\W x {:} A. B}\\]\n\nWe omit the rules of \\(\\W\\)-elimination and \\(\\W\\)-equality.\nAdding well-founded trees to intuitionistic type theory increases\nits proof-theoretic strength significantly (Setzer\n(1998)).\n4.4 Iterative Sets and CZF\nAn important application of well-founded trees is Aczel\u2019s (1978)\nconstruction of a type-theoretic model of Constructive Zermelo\nFraenkel Set Theory. To this end he defines the type of iterative sets\nas\n\n\\[\\V = \\W x {:} \\U. x.\\]\n\nLet \\(A {:} \\U\\) be a small type, and \\(x {:} A\\vdash M\\) be an indexed\nfamily of iterative sets. Then \\(\\sup(A,x.M)\\), or with a more\nsuggestive notation \\(\\{ M\\mid x {:} A\\}\\), is an iterative set. To\nparaphrase: an iterative set is a family of iterative sets indexed by a small type.\nNote that an iterative set is a data-structure in the sense of\nfunctional programming: a possibly infinitely branching well-founded\ntree. Different trees may represent the same set. We therefore need to\ndefine a notion of extensional equality between iterative sets which\ndisregards repetition and order of elements. This definition is\nformally similar to the definition of bisimulation of processes in\nprocess algebra. The type \\(\\V\\) up to extensional equality can be\nviewed as a constructive type-theoretic model of the cumulative\nhierarchy, see the entry on \n  set theory: constructive and intuitionistic ZF\nfor further information about CZF.\n4.5 Inductive Definitions\nThe notion of an inductive definition is fundamental in\nintuitionistic type theory. It is a primitive notion and not, as in\nset theory, a derived notion where an inductively defined set is\ndefined impredicatively as the smallest set closed under some\nrules. However, in intuitionistic type theory inductive definitions\nare considered predicative: they are viewed as being built up from\nbelow.\nThe inductive definability of types is inherent in the meaning\nexplanations of intuitionistic type theory which we shall discuss in\nthe next section. In fact, intuitionistic type theory can be described\nbriefly as a theory of inductive, recursive, and inductive-recursive\ndefinitions based on a framework of lambda calculus with dependent\ntypes.\nWe have already seen the type of natural numbers and the type of\nwell-founded trees as examples of types given by inductive\ndefinitions; the natural numbers is an example of an ordinary finitary\ninductive definition and the well-founded trees of a generalized\npossibly infinitary inductive definition. The introduction rules\ndescribe how elements of these types are inductively generated and the\nelimination and equality rules describe how functions from these types\ncan be defined by structural recursion on the way these elements are\ngenerated. According to the propositions as types principle, the\nelimination rules are simultaneously rules for proof by structural\ninduction on the way the elements are generated.\nThe type formers \\(0, 1, +, \\times, \\rightarrow, \\Sigma,\\) and\n\\(\\Pi\\) which interpret the logical constants for intuitionistic\npredicate logic are examples of degenerate inductive definitions. Even\nthe identity type (in intensional intuitionistic type theory) is\ninductively generated; it is the type of proofs generated by the\nreflexivity axiom. Its elimination rule expresses proof by pattern\nmatching on the proof of reflexivity.\nThe common structure of the rules of the type formers can be\ncaptured by a general schema for inductive definitions (Dybjer\n1991). This general schema has many useful instances, for example, the\ntype \\(\\List(A)\\) of lists with elements of type \\(A\\) has the\nfollowing introduction rules:\n\n\\[\\Gamma \\vdash \\nil {:} \\List(A)\n\\hspace{3em}\n\\frac{\\Gamma \\vdash a {:} A\\hspace{2em}\\Gamma \\vdash as {:} \\List(A)}\n{\\Gamma \\vdash \\cons(a,as) {:} \\List(A)}\\]\n\nOther useful instances are types of binary trees and other trees\nsuch as the infinitely branching trees of the Brouwer ordinals of the\nsecond and higher number classes.\nThe general schema does not only cover inductively defined types,\nbut also inductively defined families of types, such as the identity\nrelation. The above mentioned type \\(A^n\\) of \\(n\\)-tuples of type\n\\(A\\) was defined above by primitive recursion on \\(n\\). It can also\nbe defined as an inductive family with the following introduction\nrules\n\n\\[\\Gamma \\vdash \\nil {:} A^0\n\\hspace{3em}\n\\frac{\\Gamma \\vdash a {:} A\\hspace{2em}\\Gamma \\vdash as {:} A^n}\n{\\Gamma \\vdash \\cons(a,as) {:} A^{\\s(n)}}\\]\n\nThe schema for inductive types and families is a type-theoretic\ngeneralization of a schema for iterated inductive definitions in\npredicate logic (formulated in natural deduction) presented by\nMartin-L\u00f6f (1971b). This paper immediately preceded\nMartin-L\u00f6f\u2019s first version of intuitionistic type\ntheory. It is both conceptually and technically a forerunner to the\ndevelopment of the theory.\nIt is an essential feature of proof assistants such as Agda and Coq\nthat it enables users to define their own inductive types and families\nby listing their introduction rules (the types of their\nconstructors). This is much like in typed functional programming\nlanguages such as Haskell and the different dialects of ML. However,\nunlike in these programming languages the schema for inductive\ndefinitions in intuitionistic type theory enforces a restriction\namounting to well-foundedness of the elements of the defined\ntypes.\n4.6 Inductive-Recursive Definitions\nWe already mentioned that there are two main definition principles\nin intuitionistic type theory: the inductive definition of types\n(sets) and the (primitive, structural) definition of functions by\nrecursion on the way the elements of such types are inductively\ngenerated. Usually, the inductive definition of a set comes first: the\nformation and introduction rules make no reference to the elimination\nrule. However, there are definitions in intuitionistic type theory for\nwhich this is not the case and we simultaneously inductively generate\na type and a function from that type defined by structural\nrecursion. Such definitions are\nsimultaneously inductive-recursive.\nThe first example of such an inductive-recursive definition is an\nalternative formulation \u00e0 la Tarski of the universe of small\ntypes. Above we presented the universe formulated \u00e0 la\nRussell, where there is no notational distinction between the\nelement \\(A {:} \\U\\) and the corresponding type \\(A\\). For a\nuniverse \u00e0 la Tarski there is such a distinction, for\nexample, between the element \\(\\hat{\\N} {:} \\U\\) and the corresponding\ntype \\(\\N\\). The element \\(\\hat{\\N}\\) is called the code for\n\\(\\N\\).\nThe elimination rule for the universe \u00e0 la Tarski is:\n\n\\[\\frac{\\Gamma \\vdash a {:} \\U}\n{\\Gamma \\vdash \\T(a)}\\]\n\nThis expresses that there is a function \\(\\T\\) which maps a code\n\\(a\\) to its corresponding type \\(T(a)\\). The equality rules define\nthis correspondence. For example,\n\n\\[\\T(\\hat{\\N}) = \\N.\\]\n\nWe see that \\(\\U\\) is inductively generated with one introduction\nrule for each small type former, and \\(\\T\\) is defined by recursion on\nthese small type formers. The simultaneous inductive-recursive nature\nof this definition becomes apparent in the rules for \\(\\Pi\\) for\nexample. The introduction rule is\n\n\\[\\frac{\\Gamma \\vdash a {:} \\U\\hspace{2em} \\Gamma, x {:} \\T(a) \\vdash b {:} \\U}\n{\\Gamma \\vdash \\hat{\\Pi} x {:} a. b {:} \\U}\\]\n\nand the corresponding equality rule is\n\n\\[\\T(\\hat{\\Pi}x {:} a. b) = \\Pi x {:} \\T(a). \\T(b)\\]\n\n\nNote that the introduction rule for \\(\\U\\) refers to \\(\\T\\), and hence\nthat \\(\\U\\) and \\(\\T\\) must be defined simultaneously.\nThere are a number of other universe constructions which are\ndefined inductive-recursively: universe hierarchies, superuniverses\n(Palmgren 1998; Rathjen, Griffor, and Palmgren 1998), and Mahlo\nuniverses (Setzer 2000). These universes are analogues of certain\nlarge cardinals in set theory: inaccessible, hyperinaccessible, and\nMahlo cardinals.\nOther examples of inductive-recursive definitions include an\ninformal definition of computability predicates used by Martin-L\u00f6f in\nan early normalization proof of intuitionistic type theory (Martin-L\u00f6f\n1998 [1972]). There are also many natural examples of \u201csmall\u201d\ninductive-recursive definitions, where the recursively defined\n(decoding) function returns an element of a type rather than a\ntype.\nA large class of inductive-recursive definitions, including the\nabove, can be captured by a general schema (Dybjer 2000) which extends\nthe schema for inductive definitions mentioned above. As shown by\nSetzer, intuitionistic type theory with this class of\ninductive-recursive definitions is very strong proof-theoretically\n(Dybjer and Setzer 2003). However, as proposed in recent unpublished\nwork by Setzer, it is possible to increase the strength of the theory\neven further and define universes such as an autonomous Mahlo\nuniverse which are analogues of even larger cardinals.\n5. Meaning Explanations\nThe consistency of intuitionistic type theory relative to set\ntheory can be proved by model constructions. Perhaps the simplest\nmethod is an interpretation whereby each type-theoretic concept is\ngiven its corresponding set-theoretic meaning, as outlined\nin \n section 2.3. For example the type of functions \\(A \\rightarrow B\\)\nis interpreted as the set of all functions in the set-theoretic sense\nbetween the set denoted by \\(A\\) and the set denoted by \\(B\\). To\ninterpret \\(\\U\\) we need a set-theoretic universe which is closed under\nall (set-theoretic analogues of) the type constructors. Such a\nuniverse can be proved to exist if we assume the existence of an\ninaccessible cardinal \\(\\kappa\\) and interpret \\(\\U\\) by \\(V_\\kappa\\)\nin the cumulative hierarchy.\nAlternatives are realizability models, and for intensional type\ntheory, a model of terms in normal forms. The latter can also be used\nfor proving decidability of the judgments of the theory.\nMathematical models only prove consistency relative to classical\nset theory (or whatever other meta-theory we are using). Is it\npossible to be convinced about the consistency of the theory in a more\ndirect way, so called simple minded consistency\n(Martin-L\u00f6f 1984)? In fact, is there a way to explain what\nit means for a judgment to be correct in a\ndirect pre-mathematical way? And given that we know what the\njudgments mean can we then be convinced that the inference rules of\nthe theory are valid? An answer to this problem was proposed by\nMartin-L\u00f6f in 1979 in the paper \u201cConstructive Mathematics\nand Computer Programming\u201d (Martin-L\u00f6f 1982) and elaborated\nlater on in numerous lectures and notes, see for example,\nMartin-L\u00f6f (1984, 1987). These meaning explanations for\nintuitionistic type theory are also referred to as the direct\nsemantics, intuitive semantics, informal\nsemantics, standard semantics, or\nthe syntactico-semantical approach to meaning theory.\nThis meaning theory follows the Wittgensteinian meaning-as-use\ntradition. The meaning is based on rules for building objects\n(introduction rules) of types and computation rules (elimination\nrules) for computing with these objects. A difference from much of the\nWittgensteinian tradition is that also higher order types like \\(\\N\n\\rightarrow \\N\\) are given meaning using rules.\nTo explain the meaning of a judgment we must first know how the\nterms in the judgment are computed to canonical form. Then the\nformation rules explain how correct canonical types are built and the\nintroduction rules explain how correct canonical objects of such\ncanonical types are built. We quote (Martin-L\u00f6f 1982):\n\nA canonical type \\(A\\) is defined by prescribing how a canonical\nobject of type \\(A\\) is formed as well as how two equal canonical\nobjects of type \\(A\\) are formed. There is no limitation on this\nprescription except that the relation of equality which it defines\nbetween canonical objects of type \\(A\\) must be reflexive, symmetric\nand transitive.\n \nIn other words, a canonical type is equipped with an equivalence\nrelation on the canonical objects. Below we shall give a simplified\nform of the meaning explanations, where this equivalence relation is\nextensional identity of objects.\nIn spite of the pre-mathematical nature of this meaning\ntheory, its technical aspects can be captured as a mathematical model\nconstruction similar to Kleene\u2019s realizability interpretation\nof intuitionistic logic, see the next section. The realizers here are\nthe terms of type theory rather than the number realizers used by\nKleene.\n5.1 Computation to Canonical Form\nThe meaning of a judgment is explained in terms of the computation\nof the types and terms in the judgment. These computations stop when a\ncanonical form is reached. By canonical form we mean a term where the outermost form is a constructor (introduction form). These are the canonical forms used in lazy\nfunctional programming (for example in the Haskell language).\nFor the purpose of illustration we consider meaning explanations\nonly for three type formers: \\(\\N, \\Pi x {:} A.B\\), and \\(\\U\\). The\ncontext free grammar for the terms of this fragment of Intuitionistic\nType Theory is as follows:\n\n\\[ \na :: = 0 \\mid \\s(a) \\mid \\lambda\nx.a \\mid \\N \\mid \\Pi x{:}a.a \\mid \\U \\mid \\R(a,a,xx.a) \\mid a\\,a .\n\\]\n\nThe canonical terms are generated by the following grammar:\n\n\\[v :: =  0 \\mid \\s(a) \\mid \\lambda x.a \\mid \\N \\mid \\Pi\nx{:}a.a \\mid \\U ,\\]\n\nwhere \\(a\\) ranges over arbitrary, not necessarily canonical,\nterms. Note that \\(\\s(a)\\) is canonical even if \\(a\\) is not.\nTo explain how terms are computed to canonical form, we introduce the relation \\(a \\Rightarrow\nv\\) between closed terms \\(a\\) and canonical forms (values)\n\\(v\\) given by the following computation rules:\n\n\\[\n\\frac{c \\Rightarrow 0\\hspace{1em}d \\Rightarrow v}{\\R(c,d,xy.e)\\Rightarrow v}\n\\hspace{2em}\n\\frac{c \\Rightarrow \\s(a)\\hspace{1em}e[x := d,y := \\R(a,d,xy.e)]\\Rightarrow v}{\\R(c,d,xy.e)\\Rightarrow v}\n\\]\n\n\\[\n\\frac{f\\Rightarrow \\lambda x.b\\hspace{1em}b[x := a]\\Rightarrow v}{f\\,a \\Rightarrow v}\n\\]\n\nin addition to the rule\n\n\\[v \\Rightarrow v\\]\n\nstating that a canonical term has itself as value.\n5.2 The Meaning of Categorical Judgments\nA categorical judgment is a judgment where the context is empty and\nthere are no free variables.\nThe meaning of the categorical judgment \\(\\vdash A\\) is that \\(A\\)\nhas a canonical type as value. In our fragment this means that either\nof the following holds:\n\n\n\\(A \\Rightarrow \\N\\),\n\n\n\\(A \\Rightarrow \\U\\),\n\n\n\\(A \\Rightarrow \\Pi x {:} B. C\\) and furthermore that \\(\\vdash B\\) and\n\\(x {:} B \\vdash C\\).\n\n\nThe meaning of the categorical judgment \\(\\vdash a {:} A\\) is that\n\\(a\\) has a canonical term of the canonical type of \\(A\\) as value. In\nour fragment this means that either of the following holds:\n\n\n\\(A \\Rightarrow \\N\\) and either \\(a \\Rightarrow 0\\) or \\(a\n    \\Rightarrow \\s(b)\\) and \\(\\vdash b {:} \\N\\),\n\n\n\\(A \\Rightarrow \\U\\) and either \\(a \\Rightarrow \\N\\) or \\(a\n    \\Rightarrow \\Pi x {:} b. c\\) where furthermore \\(\\vdash b {:} \\U\\) and\n    \\(x {:} b \\vdash c {:} \\U\\),\n\n\n\\(A \\Rightarrow \\Pi x {:} B. C\\) and \\(a \\Rightarrow \\lambda x.c\\) and\n\\(x {:} B \\vdash c {:} C\\).\n\n\nThe meaning of the categorical judgment \\(\\vdash A = A'\\) is\nthat \\(A\\) and \\(A'\\) have the same canonical types as values. In\nour fragment this means that either of the following holds:\n\n\n\\(A \\Rightarrow \\N\\) and \\(A' \\Rightarrow \\N\\),\n\n\n\\(A \\Rightarrow \\U\\) and \\(A' \\Rightarrow \\U\\),\n\n\n\\(A \\Rightarrow \\Pi x {:} B. C\\) and \\(A' \\Rightarrow \\Pi x {:}\nB'. C'\\) and furthermore that \\(\\vdash B = B'\\) and \\(x {:} B\n\\vdash C = C'\\).\n\n\nThe meaning of the categorical judgment \\(\\vdash a = a' {:} A\\)\nis explained in a similar way.\nIt is a tacit assumption of the meaning explanations that the\nrepeated computations of canonical forms is well-founded. For example,\na natural number is the result of finitely many computations of the\nsuccessor function \\(\\s\\) ended by \\(0\\). A computation which results\nin infinitely many computations of \\(\\s\\) is not a natural number in\nintuitionistic type theory. (However, there are extensions of type\ntheory, for example, partial type theory, and non-standard type\ntheory, where such infinite computations can occur,\nsee section 7.3. To justify the rules of such\ntheories the present meaning explanations do not suffice.)\n5.3 The Meaning of Hypothetical Judgments\nAccording to Martin-L\u00f6f (1982) the meaning of a hypothetical\njudgment is reduced to the meaning of the categorical judgments by\nsubstituting the closed terms of appropriate types for the free\nvariables. For example, the meaning of\n\n\\[x_1 {:} A_1, \\ldots, x_n {:} A_n \\vdash a {:} A\\]\n\nis that the categorical judgment\n\n\\[\\vdash a[x_1 := a_1, \\ldots , x_n := a_n] : A[x_1 := a_1, \\ldots ,\nx_n := a_n]\\]\n\nis valid whenever the categorical judgments\n\n\\[\\vdash a_1 {:} A_1, \\ldots , \\vdash a_n[x_1 := a_1, \\ldots , x_{n-1} :=\na_{n-1}] {:} A_n[x_1 := a_1, \\ldots , x_{n-1} := a_{n-1}]\\]\n\nare valid.\n6. Mathematical Models\n6.1 Categorical Models\n6.1.1 Hyperdoctrines\nCurry\u2019s correspondence between propositions and types was extended\nto predicate logic in the late 1960s by Howard (1980) and de Bruijn\n(1970). At around the same time Lawvere developed related ideas in\ncategorical logic. In particular he proposed the notion of\na hyperdoctrine (Lawvere 1970) as a categorical model of\n(typed) predicate logic. A hyperdoctrine is an indexed category \\(P {:}\nT^{op} \\rightarrow \\mathbf{Cat}\\), where \\(T\\) is a category where the\nobjects represent types and the arrows represent terms. If \\(A\\) is a\ntype then the fibre \\(P(A)\\) is a category of propositions\ndepending on a variable \\(x {:} A\\). The arrows in this category are\nproofs \\(Q \\vdash R\\) and can be thought of as\nproof-objects. Moreover, since we have an indexed category, for each\narrow \\(t\\) from \\(A\\) to \\(B\\), there is a reindexing functor \\(P(B)\n\\rightarrow P(A)\\) representing substitution of \\(t\\) for a variable\n\\(y {:} B\\). The category \\(P(A)\\) is assumed to be cartesian closed and\nconjunction and implications are modelled by products and exponentials\nin this category. The quantifiers \\(\\exists\\) and \\(\\forall\\) are\nmodelled by the left and right adjoints of the reindexing\nfunctor. Moreover, Lawvere added further structure to hyperdoctrines\nto model identity propositions (as left adjoints to a diagonal\nfunctor) and a comprehension schema.\n6.1.2 Contextual categories, categories with attributes, and categories with families\nLawvere\u2019s definition of hyperdoctrines preceded intuitionistic type\ntheory but did not go all the way to identifying propositions and types. Nevertheless Lawvere influenced\nScott\u2019s (1970) work on constructive validity, a somewhat\npreliminary precursor of intuitionistic type theory. After Martin-L\u00f6f\n(1998 [1972]) had presented a\nmore definite formulation of the theory, the first work on categorical\nmodels was presented by Cartmell in 1978 with his notions of category\nwith attributes and contextual category (Cartmell 1986). However, we\nwill not define these structures here but instead the closely\nrelated categories with families (Dybjer 1996) which are\nformulated so that they directly model a variable-free version of a\nformulation of intuitionistic type theory with explicit substitutions\n(Martin-L\u00f6f 1995).\nA category with families is a functor \\(T {:} C^{op} \\rightarrow\n\\mathbf{Fam}\\), where \\(\\mathbf{Fam}\\) is the category of families of\nsets. The category \\(C\\) is the category of contexts and\nsubstitutions. If \\(\\Gamma\\) is an object of \\(C\\) (a context), then\n\\(T(\\Gamma)\\) is the family of terms of type \\(A\\) which depend on\nvariables in \\(\\Gamma\\). If \\(\\gamma\\) is an arrow in \\(C\\)\nrepresenting a substitution, then the arrow part of the functor\nrepresents substitution of \\(\\gamma\\) in types and terms. A category\nwith families also has a terminal object and a notion of context\ncomprehension, reminiscent of Lawvere\u2019s comprehension in\nhyperdoctrines. The terminal object captures the rules for empty\ncontexts and empty substitutions. Context comprehension captures the\nrules for extending contexts and substitutions, and has projections\ncapturing weakening and assumption of the last variable.\nCategories with families are algebraic structures which model the\ngeneral rules of dependent type theory, those which come before the\nrules for specific type formers, such as \\(\\Pi\\), \\(\\Sigma\\), identity\ntypes, universes, etc. In order to model specific type-former\ncorresponding extra structure needs to be added.\n6.1.3 Locally cartesian closed categories\nFrom a categorical perspective the above-mentioned structures may\nappear somewhat special and ad hoc. A more regular structure which\ngives rise to models of intuitionistic type theory are the locally\ncartesian closed categories. These are categories with a terminal\nobject, where each slice category is cartesian closed. It can be shown\nthat the pullback functor has a left and a right adjoint, representing\n\\(\\Sigma\\)- and \\(\\Pi\\)-types, respectively. Locally cartesian closed\ncategories correspond to intuitionistic type theory with extensional\nidentity types and \\(\\Sigma\\) and \\(\\Pi\\)-types (Seely 1984,\nClairambault and Dybjer 2014). It should be remarked that the\ncorrespondence with intuitionistic type theory is somewhat indirect,\nsince a coherence problem, in the sense of category theory, needs to\nbe solved. The problem is that in locally cartesian closed categories\ntype substituion is represented by pullbacks, but these are only\ndefined up to isomorphism, see Curien 1993 and Hofmann 1994.\n6.2 Set-Theoretic Model\nIntuitionistic type theory is a possible framework for constructive\nmathematics in Bishop\u2019s sense. Such constructive mathematics is\ncompatible with classical mathematics: a constructive proof in\nBishop\u2019s sense can directly be understood as a proof in classical\nlogic. A formal way to understand this is by constructing a\nset-theoretic model of intuitionistic type theory, where each concept\nof type theory is interpreted as the corresponding concept in\nZermelo-Fraenkel Set Theory. For example, a type is interpreted as a\nset, and the type of functions in \\(A \\rightarrow B\\) is interpreted\nas the set of all functions in the set-theoretic sense from the set\nrepresenting \\(A\\) to the set representing \\(B\\). The type of natural\nnumbers is interpreted as the set of natural numbers. The\ninterpretations of identity types, and \\(\\Sigma\\) and \\(\\Pi\\)-types\nwere already discussed in the introduction. And as already mentioned,\nto interpret the type-theoretic universe we need an inaccessible\ncardinal.\n6.2.1 Model in CZF\nIt can be shown that the interpretation outlined above can be\ncarried out in Aczel\u2019s constructive set theory CZF. Hence it does not\ndepend on classical logic or impredicative features of set theory.\n6.3 Realizability Models\nThe set-theoretic model can be criticized on the grounds that it\nmodels the type of functions as the set of all set-theoretic\nfunctions, in spite of the fact that a function in type theory is\nalways computable, whereas a set-theoretic function may not be.\nTo remedy this problem one can instead construct\na realizability model whereby one starts with a set\nof realizers. One can here follow Kleene\u2019s numerical\nrealizability closely where functions are realized by codes for Turing\nmachines. Or alternatively, one can let realizers be terms in a lambda\ncalculus or combinatory logic possibly extended with appropriate\nconstants. Types are then represented by sets of realizers, or often\nas partial equivalence relations on the set of realizers. A partial\nequivalence relation is a convenient way to represent a type with a\nnotion of \u201cequality\u201d on it.\nThere are many variations on the theme of realizability model. Some\nsuch models tacitly\nassume set theory as the metatheory (Aczel 1980, Beeson 1985), whereas others explictly assume a\nconstructive metatheory (Smith 1984).\nRealizability models are also models of the extensional version of\nintuitionistic type theory (Martin-L\u00f6f 1982) which will be presented\nin section 7.1 below.\n6.4 Model of Normal Forms and Type-Checking\nIn intuitionistic type theory each type and each well-typed term\nhas a normal form. A consequence of this normal form property is that\nall the judgments are decidable: for example, given a correct context\n\\(\\Gamma\\), a correct type \\(A\\) and a possibly ill-typed term \\(a\\),\nthere is an algorithm for deciding whether \\(\\Gamma \\vdash a {:}\nA\\). This type-checking algorithm is the key component of\nproof-assistants for Intensional Type Theory, such as Agda.\nThe correctness of the normal form property can be expressed as a\nmodel of normal forms, where each context, type, and term are\ninterpreted as their respective normal forms.\n7. Variants of the Theory\n7.1 Extensional Type Theory\nIn extensional intuitionistic type theory (Martin-L\u00f6f 1982) the\nrules of \\(\\I\\)-elimination and \\(\\I\\)-equality for the general identity\ntype are replaced by the following two rules:\n\n\\[\\frac{\\Gamma\\vdash c {:} \\I(A,a,a')} {\\Gamma \\vdash a=a' {:} A} \\hspace{3em}\n\\frac{\\Gamma\\vdash c{:}I(A,a,a')} {\\Gamma\\vdash c = \\r {:} \\I(A,a,a')}\\] \n\n\nThe first causes the distinction between\npropositional and judgmental equality to disappear. The second forces\nidentity proofs to be unique. Unlike the rules for the intensional\nidentity type former, the rules for extensional identity types do not\nfit into the schema for inductively defined types mentioned above.\nThese rules are however justified by the meaning explanations in\nMartin-L\u00f6f (1982). This is because the categorical judgment\n\n\\[\\vdash c {:} \\I(A,a,a')\\]\n\nis valid iff \\(c \\Rightarrow \\r\\) and the judgment \\(\\vdash a = a' {:}\nA\\) is valid.\nHowever, these rules make it possible to define terms without\nnormal forms. Since the type-checking algorithm relies on the\ncomputation of normal forms of types, it no longer works for\nextensional type theory, see (Castellan, Clairambault, and Dybjer 2015).\nOn the other hand, certain constructions which are not available in\nintensional type theory are possible in extensional type theory. For\nexample, function extensionality\n\n\\[(\\Pi x {:} A. \\I(B,f\\,x,f'\\,x)) \\rightarrow \\I(\\Pi x{:}A.B,f,f')\\]\n\nis a theorem.\nAnother example is that \\(\\W\\)-types can be used for encoding other\ninductively defined types in Extensional Type Theory. For example, the\nBrouwer ordinals of the second and higher number classes can be\ndefined as special instances of the \\(\\W\\)-type (Martin-L\u00f6f 1984). More\ngenerally, it can be shown that all inductively defined types which\nare given by a strictly positive type operator can be\nrepresented as instances of well-founded trees (Dybjer 1997).\n7.2 Univalent Foundations and Homotopy Type Theory\nUnivalent foundations refer to Voevodsky\u2019s programme for a new\nfoundation of mathematics based on intuitionistic type theory and\nemploying ideas from homotopy theory. Here every type \\(A\\) is\nconsidered as a space, and the identity type \\(\\I(A,a,b)\\) is the space\nof paths from point \\(a\\) to point \\(b\\) in \\(A\\). Iterated identity types represent higher homotopies, e.g.\n\n \\[\\I(\\I(A,a,b),f,g)\\]\n\nis the space of homotopies between \\(f\\) and \\(g\\).\nThe notion of\nordinary set can be thought of as a discrete space \\(A\\) where\nall paths in \\(\\I(A,a,b)\\) are trivial loops.\n\n\nThe origin of these ideas\nwas the remarkable discovery by (Hofmann and Streicher 1998) that the axioms of\nintensional type theory do not force all proofs of an identity to be equal, that is, not all paths need to be trivial. This was\nshown by a model construction where each type is interpreted as a\ngroupoid. \n\nFurther connections between identity\ntypes and notions from homotopy theory and higher categories were\nsubsequently discovered by (Awodey and Warren 2009), (Lumsdaine 2010), and\n(van den Berg and Garner 2011). Voevodsky realized that the whole intensional intuitionistic type\ntheory could be modelled by a well-known category studied in homotopy\ntheory, namely the Kan simplicial sets. Inspired by this model he\nintroduced the univalence axiom. For a universe\n\\(\\U\\) of small types, this axiom states that the substitution map associated with\nthe \\(J\\)-operator\n\n\\[\\I(\\U,a,b) \\longrightarrow \\T(a) \\cong \\T(b)\\]\n\n\nis an equivalence. Equivalence (\\(\\cong\\)) here refers to a general notion of\nequivalence of higher dimensional objects, as in the\nsequence equal elements, isomorphic sets, equivalent groupoids,\nbiequivalent bigroupoids, etc. The univalence axiom expresses\nthat \u201ceverything is preserved by equivalence\u201d, thereby\nrealizing the informal categorical slogan that all categorical\nconstructions are preserved by isomorphism, and its generalization,\nthat all constructions of categories are preserved by equivalence of\ncategories, etc.\nThe axiom of univalence was originally justified by\nVoevodsky\u2019s simplical set model. This model is however not\nconstructive and (Bezem, Coquand and Huber 2014 [2013]) has more\nrecently proposed a model in Kan cubical sets.\nAlthough univalent foundations concern preservation of mathematical\nstructure in general, strongly inspired by category theory,\napplications within homotopy theory are particularly actively\ninvestigated. Intensional type theory extended with the univalence\naxiom and so called higher inductive types is therefore also called\n\u201chomotopy type theory\u201d. We refer to the entry on\n type theory for further details.\n7.3 Partial and Non-Standard Type Theory\nIntuitionistic type theory is not intended to model Brouwer\u2019s\nnotion of free choice sequence, although lawlike choice\nsequences can be modelled as functions from \\(\\N\\). However, there are\nextensions of the theory which incorporate such choice sequences:\nnamely partial type theory and non-standard type\ntheory (Martin-L\u00f6f 1990). The types in partial type theory\ncan be interpreted as Scott domains (Martin-L\u00f6f 1986, Palmgren\nand Stoltenberg-Hansen 1990, Palmgren 1991). In this way a type \\(\\N\\)\nwhich contains an infinite number \\(\\infty\\) can be\ninterpreted. However, in partial type theory all types are inhabited\nby a least element \\(\\bot\\), and thus the propositions as types\nprinciple is not maintained. Non-standard type theory incorporates\nnon-standard elements, such as an infinite number \\(\\infty {:} \\N\\)\nwithout inhabiting all types.\n7.4 Impredicative Type Theory\nThe inconsistent version of intuitionistic type theory of\nMartin-L\u00f6f (1971a) was based on the strongly impredicative axiom that\nthere is a type of all types. However, (Coquand and Huet 1988) showed with their\ncalculus of constructions, that there is a powerful impredicative but\nconsistent version of type theory. In this theory the universe \\(\\U\\)\n(usually called \\({\\bf Prop}\\) in this theory) is closed under the following formation rule\nfor cartesian product of families of types:\n\n\\[\\frac{\\Gamma \\vdash A \\hspace{2em} \\Gamma, x {:} A \\vdash B {:} \\U}\n{\\Gamma \\vdash \\Pi x {:} A. B {:} \\U}\\]\n\nThis rule is more general than the rule for constructing small\ncartesian products of families of small types in intuitionistic type\ntheory, since we can now quantify over arbitrary types \\(A\\),\nincluding \\(\\U\\), and not just small types. We say that \\(\\U\\) is impredicative since we can construct a new element of it by quantifying over all elements, even the element which is constructed.\nThe motivation for this theory was that inductively defined types\nand families of types become definable in terms of impredicative\nquantification. For example, the type of natural numbers can be\ndefined as the type of Church numerals:\n\n\\[\\N = \\Pi X {:} \\U. X \\rightarrow (X \\rightarrow X) \\rightarrow X {:} \\U\\]\n\nThis is an impredicative definition, since it is a small type which\nis constructed by quantification over all small types. Similarly we\ncan define an identity type by impredicative quantification:\n\n\\[\\I(A,a,a')= \\Pi X {:} A \\rightarrow \\U. X\\,a \\rightarrow X\\,a' {:} \\U\\]\n\nThis is Leibniz\u2019 definition of equality: \\(a\\) and \\(a'\\) are\nequal iff they satisfy the same properties (ranged over by \\(X\\)).\nUnlike in intuitionistic type theory, the function type in\nimpredicative type cannot be interpreted set-theoretically in a\nstraightfoward way, see (Reynolds 1984).\n7.5 Proof Assistants\nIn 1979 Martin-L\u00f6f wrote the paper \u201cConstructive Mathematics\nand Computer Programming\u201d where he explained that intuitionistic\ntype theory is a programming language which can also be used as a\nformal foundation for constructive mathematics. Shortly after that,\ninteractive proof systems which help the user to derive valid\njudgments in the theory, so called proof assistants, were\ndeveloped.\nOne of the first systems was the NuPrl system (PRL Group 1986),\nwhich is based on an extensional type theory similar to (Martin-L\u00f6f\n1982).\nSystems based on versions of intensional type theory go back to the\ntype-checker for the impredicative calculus of constructions which was\nwritten around 1984 by Coquand and Huet. This led to the Coq system,\nwhich is based on the calculus of inductive constructions\n(Paulin-Mohring 1993), a theory which extends the calculus of\nconstruction with primitive inductive types and families. The\nencodings of the pure calculus of constructions were found to be\ninconvenient, since the full elimination rules could not be derived\nand instead had to be postulated. We also remark that the calculus of\ninductive constructions has a subsystem, the predicative calculus of\ninductive constructions, which follows the principles of\nMartin-L\u00f6f\u2019s intuitionistic type theory.\nAgda is another proof assistant which is based on the logical\nframework formulation of intuitionistic type theory, but adds numerous\nfeatures inspired by practical programming languages (Norell 2008). It\nis an intensional theory with decidable judgments and a type-checker\nsimilar to Coq\u2019s. However, in contrast to Coq it is based on\nMartin-L\u00f6f\u2019s predicative intuitionistic type theory.\nThere are several other systems based either on the calculus of\nconstructions (Lego, Matita, Lean) or on intuitionistic type theory\n(Epigram, Idris); see (Pollack 1994; Asperti et al. 2011; de Moura et al. 2015;\nMcBride and McKinna 2004; Brady 2011).\n", "bibliography": {"categories": [], "cat_ref_text": {"ref_list": ["Aczel, Peter, 1978 [1977], \u201cThe type theoretic\ninterpretation of constructive set theory\u201d, in <em>Logic\nColloquium \u201977</em>, A. Macintyre, L. Pacholski, J. Paris (eds),\nAmsterdam-New York: North-Holland, pp. 55\u201366.", "\u2013\u2013\u2013, 1980, \u201cFrege Structures and the\nNotions of Proposition, Truth and Set\u201d, in <em>The Kleene\nSymposium</em>, J. Barwise, H.J. Keisler, K. Kunen (eds), Studies in\nLogic and the Foundations of Mathematics 101, Amsterdam:\nNorth-Holland, pp. 31\u201359.", "Asperti, Andrea, Wilmer Ricciotti, Claudio Sacerdoti Coen, and\nEnrico Tassi, 2011, \u201cThe Matita interactive theorem\nprover\u201d, in <em>Automated deduction: CADE-23</em>,\nN. Bj\u00f8rner and V. Sofronie-Stokkermans (eds), Lecture Notes in\nComputer Science (LNCS), vol. 6803, Heidelberg: Springer-Verlag,\npp. 64\u201369.", "Awodey, Steve and Michael A. Warren, 2009, \u201cHomotopy\ntheoretic models of identity types\u201d, <em>Mathematical\nProceedings of the Cambridge Philosophical Society</em>, 146(1):\n45\u201355.", "Beeson, Michael, 1985, <em>Foundations of Constructive Mathematics</em>, Springer-Verlag, Berlin.", "van den Berg, Benno and Richard Garner, 2011, \u201cTypes are\nweak \\(\\omega\\)-groupoids\u201d, <em>Proceedings of the London\nMathematical Society</em>, 102(2):\n370\u2013394. doi:10.1112/plms/pdq026", "Bezem, Marc, Thierry Coquand, and Simon Huber, 2014 [2013],\n\u201cA model of type theory in cubical sets\u201d, in <em>19th\nInternational Conference on Types for Proofs and Programs (TYPES\n2013)</em>, Ralph Matthes and Aleksy Schubert (eds), Dagstuhl,\nGermany: Schloss Dagstuhl--Leibniz-Zentrum fuer Informatik,\npp. 107\u2013128.", "Bishop, Errett, 1967, <em>Foundations of constructive\nanalysis</em>, New York-Toronto, Ont.-London: McGraw-Hill Book\nCo..", "Brady, Edwin C., 2011, \u201cIDRIS: systems programming meets\nfull dependent types\u201d, in <em>Proceedings of the 5th ACM\nworkshop on Programming Languages meets Program Verification (PLPV\n2011)</em>, pp. 43\u201354, doi:10.1145/1929529.1929536.", "de Bruijn, Nicholas G., 1970, \u201cThe mathematical language\nAUTOMATH, its usage, and some of its extensions\u201d,\nin <em>Symposium on Automatic Demonstration (Versailles, 1968)</em>,\nLecture Notes in Mathematics, Vol. 125, Berlin: Springer,\npp. 29:61.  ", "Cartmell, John, 1986, \u201cGeneralised algebraic theories and\ncontextual categories\u201d, <em>Annals of Pure and Applied\nLogic</em>, 32: 209\u2013243.", "Castellan, Simon, Pierre Clairambault, and Peter Dybjer, 2015:\n\u201cUndecidability of Equality in the Free Locally Cartesian Closed Category\u201d, <em>TLCA</em> pp 138-152. ", "Clairambault, Pierre and Peter Dybjer, 2014, \u201cThe\nbiequivalence of locally cartesian closed categories and\nMartin-L\u00f6f type theories\u201d, <em>Mathematical Structures in\nComputer Science</em>, 24(6). doi:10.1017/S0960129513000881", "Coquand, Thierry and G\u00e9rard Huet, 1988, \u201cThe calculus\nof constructions\u201d, <em>Information and Computation</em>,\n76(2\u20133): 95\u2013120, doi:10.1016/0890-5401(88)90005-3.", "Curien, Pierre-Louis, 1993, \u201cSubstitution up to\nisomorphism\u201d, <em>Fundamentae Informatica</em>, 19:\n51\u201385.", "Curry, Haskell B. and Robert Feys, 1958, <em>Combinatory\nLogic</em>, Amsterdam: North-Holland.", "Dybjer, Peter, 1991, \u201cInductive sets and families in\nMartin-L\u00f6f\u2019s type theory and their set-theoretic\nsemantics\u201d, in <em>Logical Frameworks</em>, G\u00e9rard Huet\nand Gordon Plotkin (eds), Cambridge: Cambridge University Press,\npp. 280\u2013306 .", "\u2013\u2013\u2013, 1996, \u201cInternal Type Theory\u201d,\nin <em>Types for Proofs and Programs, TYPES '95</em>, Stefano Berardi\nand Mario Coppo (eds), Lecture Notes in Computer Science Volume\n(LNCS), vol. 1158, Heidelberg: Springer-Verlag,\npp. 120\u2013134.", "\u2013\u2013\u2013, 1997, \u201cRepresenting inductively\ndefined sets by wellorderings in Martin-L\u00f6f\u2019s type\ntheory\u201d, <em>Theoretical Computer Science</em>, 176:\n329\u2013335.", "\u2013\u2013\u2013, 2000, \u201cA general formulation of\nsimultaneous inductive-recursive definitions in type\ntheory\u201d, <em>Journal of Symbolic Logic</em>, 65:\n525\u2013549.", "Dybjer, Peter and Anton Setzer, 2003, \u201cInduction-recursion\nand initial algebras\u201d, <em>Annals of Pure and Applied\nLogic</em>, 124: 1\u201347.", "Gonthier, Georges, 2008, \u201cFormal proof of the four-color\ntheorem\u201d, <em>Notices American Mathematical Society</em>, 55:\n1382\u20131393.", "Hofmann, Martin, 1994, \u201cInterpretation of Type Theory in\nLocally Cartesian Closed Categories\u201d, in <em>Proceedings of\nCSL</em>, Lecture Notes in Computer Science (LNCS), Berlin:\nSpringer-Verlag. doi:10.1007/BFb0022273", "\u2013\u2013\u2013, 1997, \u201cSyntax and semantics of\ndependent types\u201d, in <em>Semantics and logics of\ncomputation</em>, Andrew M. Pitts and P. Dybjer (eds), Publications of\nthe Newton Institure (No.14), Cambridge: Cambridge University Press,\npp. 79\u2013130.", "Hofmann, Martin and Thomas Streicher, 1998, \u201cThe groupoid\ninterpretation of type theory\u201d, in Sambin and Smith 1998:\n83\u2013111.", "Howard, William A., 1980, \u201cThe Formulae-as-Types Notion of\nConstruction\u201d, in <em>To H.B. Curry: Essays on Combinatory\nLogic, Lambda Calculus and Formalism</em>, J.P. Seldin and\nJ.R. Hindley (eds), Academic Press, pp. 479\u2013490.", "Jacobs, Bart, 1999, <em>Categorical logic and type theory</em>,\nStudies in Logic and the Foundations of Mathematics 141, Amsterdam:\nNorth-Holland.", "Lawvere, F. William, 1970, \u201cEquality in Hyperdoctrines and\nComprehension Schema as an Adjoint Functor\u201d, in <em>Proceedings\nof the American Mathematical Society Symposium on Pure Mathematics\nXVII</em>, pp. 1\u201314.", "Leroy, Xavier, 2009, \u201cFormal verification of a realistic compiler\u201d, <em>Communications of the ACM</em>, 52(7):107\u2013115.", "Lumsdaine, Peter LeFanu, 2010, \u201cWeak omega-categories from\nintensional type theory\u201d, <em>Logical Methods in Computer\nScience</em>, 6(3), doi:10.2168/LMCS-6(3:24)2010,\n[<a href=\"http://www.lmcs-online.org/ojs/viewarticle.php?id=628\" target=\"other\">LeFanu Lumsdaine 2010 available online</a>]", "Martin-L\u00f6f, Per, 1971a, <em>An intuitionistic theory of\ntypes</em>, unpublished preprint.", "\u2013\u2013\u2013, 1971b, \u201cHauptsatz for the\nintuitionistic theory of iterated inductive definitions\u201d,\nin <em>Proceedings of the 2nd Scandinavian logic symposium</em>,\nJ.E. Fenstad (ed.), Amsterdam: North-Holland, pp.  179\u2013216.", "\u2013\u2013\u2013, 1975, \u201cAn intuitionistic theory of\ntypes: Predicative part\u201d, in <em>Logic colloquium\n\u201973</em>, H.E. Rose and J. Shepherdson (eds), Amsterdam:\nNorth-Holland, pp.  73\u2013118.", "\u2013\u2013\u2013, 1982, \u201cConstructive mathematics and\ncomputer programming\u201d, in <em>Logic, methodology and philosophy\nof science VI, Proceedings of the 1979 international congress at\nHannover, Germany</em>, L.J. Cohen, J. Los, H. Pfeiffer and\nK.-P. Podewski (eds). Amsterdam: North- Holland Publishing Company,\npp.  153\u2013175.", "\u2013\u2013\u2013, 1984, <em>Intuitionistic type theory: Notes\nby Giovanni Sambin of a series of lectures given in Padua, June\n1980</em>, Napoli: Bibliopolis.", "\u2013\u2013\u2013, 1986, \u201cUnifying Scott\u2019s theory\nof domains for denotational semantics and intuitionistic type theory\n(abstract)\u201d, in <em>Atti del Congresso \u2019Logica e Filosofia\ndella Scienza, oggi\u2019, San Gimignano, 7\u201311 December 1983,\nVol. I \u2013 Logica</em>, CLUEB, Bologna.", "\u2013\u2013\u2013, 1987, \u201cTruth of a proposition,\nevidence of a judgment, validity of a proof\u201d, <em>Synthese</em>,\n73: 407\u2013420.", "\u2013\u2013\u2013, 1990, \u201cMathematics of\ninfinity\u201d, in <em>COLOG-88</em>, P. Martin-L\u00f6f and G. Mints\n(eds), Berlin: Springer, pp. 146\u2013197.", "\u2013\u2013\u2013, 1994, \u201cAnalytic and synthetic\njudgments in type theory\u201d, in <em>Kant and contemporary\nepistemology</em>, P. Parrini (ed.), Dordrecht: Kluwer,\npp. 87\u201399.", "\u2013\u2013\u2013, 1996, \u201cOn the meanings of the logical\nconstants and the justifications of the logical\nlaws\u201d, <em>Nordic Journal of Philosophical Logic</em>, 1(1):\n11\u201360.", "\u2013\u2013\u2013, 1998 [1972], \u201cAn intuitionistic\ntheory of types\u201d, in Sambin and Smith 1998:\n127\u2013172. (Written in 1972 but unpublished.)", "\u2013\u2013\u2013, 2009, \u201c100 years of Zermelo\u2019s\nAxiom of Choice: What was the problem with it?\u201d in <em>Logicism,\nintuitionism, and formalism: What has become of them?</em>,\nS. Lindstr\u00f6m, E. Palmgren, K. Segerberg, and\nV. Stoltenberg-Hansen (eds), Dordrecht: Springer,\npp. 209\u2013219.", "McBride, Conor and James McKinna, 2004, \u201cThe view from the\nleft\u201d, <em>Journal of Functional Programming</em>, 14:\n69\u2013111.", "de Moura, Leonardo, Soonho Kong, Jeremy Avigad, Floris van Doorn and Jakob von Raumer,\n2015, \u201cThe Lean Theorem Prover\u201d, in <em>25th International Conference on Automated Deduction (CADE-25)</em>, Berlin, Germany.\n[<a href=\"https://leanprover.github.io/papers/system.pdf\" target=\"other\">de Moura et al. 2015 available online</a>]\n", "Nordstr\u00f6m, Bengt, Kent Petersson, and Jan M. Smith,\n1990, <em>Programming in Martin-L\u00f6f\u2019s type theory. An\nintroduction</em>, New York: Oxford University Press.", "Norell, Ulf, 2008, \u201cDependently Typed Programming in\nAgda\u201d, in <em>Proceedings of the 6th international conference on\nAdvanced Functional Programming</em>, pp. 230\u2013266.", "Palmgren, Erik, 1991, <em>On Fixed Point Operators, Inductive\nDefinitions and Universes in Martin-L\u00f6f Type Theory</em>,\nDoctoral dissertation in mathematics, Uppsala University.", "\u2013\u2013\u2013, 1998, \u201cOn universes in type\ntheory\u201d, in Sambin and Smith\n1998: 191-204.", "Palmgren, Erik and Viggo Stoltenberg-Hansen, 1990 \u201cDomain\ninterpretations of Martin-L\u00f6f\u2019s partial type\ntheory\u201d, <em>Annals of Pure and Applied Logic</em>, 48:\n135\u2013196.", "Paulin-Mohring, Christine, 1993, \u201cInductive Definitions in\nthe system Coq: Rules and Properties\u201d, in <em>Proceedings of the\nInternational Conference on Typed Lambda Calculi and Applications,\nTLCA '93</em>, Marc Bezem and Jan F. Groote (eds), Lecture Notes in\nComputer Science (LNCS), Springer, pp.  328\u2013345.  ", "Pollack, Randy, 1994, <em>The theory of LEGO</em>, PhD Thesis,\nEdinburgh.", "PRL Group, 1986, <em>Implementing Mathematics with the Nuprl Proof\nDevelopment System</em>, Engelwood Cliffs, NJ: Prentice-Hall.", "Ranta, Aarne, 1994, <em>Type-theoretical Grammar</em>, Oxford:\nOxford University Press.", "Rathjen, Michael, Edward R. Griffor, and Erik Palmgren, 1998,\n\u201cInaccessibility in constructive set theory and type\ntheory\u201d, <em>Annals of Pure and Applied Logic</em>, 94:\n181\u2013200.", "Reynolds, John C., 1984, \u201cPolymorphism is not\nSet-Theoretic\u201d, in <em>Semantics of Data Types: International\nSymposium Sophia-Antipolis, France, June 27\u201329, 1984\nProceedings</em>, Giles Kahn, David B. MacQueen, and Gordon Plotkin\n(eds), Lecture Notes in Computer Science (LNCS), vol. 173, Springer,\npp. 145\u2013156.", "Sambin, G. and Jan M. Smith (eds), 1998, <em>Twenty-five years of\nconstructive type theory</em>, Oxford: Clarendon Press.", "Scott, Dana S., 1970, \u201cConstructive Validity\u201d,\nin <em>Symposium on Automatics Demonstration (Versailles, December\n1968</em>, M. Laudet, D. Lacombe, L. Nolin, and M. Sch\u00fctzenberg\n(eds), Lecture Notes in Mathematics, vol. 125, Springer,\npp. 237\u2013275.", "Seely, Robert A.G., 1984, \u201cLocally cartesian closed\ncategories and type theory\u201d, <em>Mathematical Proceedings of the\nCambridge Philosophical Society</em>, 95: 33\u201348.", "Setzer, Anton, 1998, \u201cWell-ordering proofs for\nMartin-L\u00f6f type theory\u201d, <em>Annals of Pure and Applied\nLogic</em>, 92: 113\u2013159.", "\u2013\u2013\u2013, 2000, \u201cExtending Martin-L\u00f6f type\ntheory by one Mahlo-universe\u201d, <em>Archive for Mathematical\nLogic</em>, 39: 155\u2013181.", "Smith, Jan, 1984, \u201cAn interpretation of\nMartin-L\u00f6f\u2019s type theory in a type-free theory of\npropositions\u201d, <em>Journal of Symbolic Logic</em>, 49:\n730\u2013753.", "Sundholm, G\u00f6ran, 2012, \u201cOn the Philosophical Work of\nPer Martin-L\u00f6f\u201d, in P. Dybjer, S. Lindstr\u00f6m,\nE. Palmgren, and G. Sundholm (eds), <em>Epistemology versus Ontology:\nEssays on the Philosophy and Foundations of Mathematics in Honour of\nPer Martin-L\u00f6f</em>, Springer, pp. xxiii\u2013xxiv.", "The Univalent\nFoundations Program, 2013, <em>Homotopy Type\nTheory: Univalent Foundations of Mathematics</em>, Institute for Advanced Study, Princeton. http://homotopytypetheory.org/book."]}, "raw_text": "<div id=\"bibliography\">\n<h2 id=\"Bib\">Bibliography</h2>\n<ul class=\"hanging\">\n<li>Aczel, Peter, 1978 [1977], \u201cThe type theoretic\ninterpretation of constructive set theory\u201d, in <em>Logic\nColloquium \u201977</em>, A. Macintyre, L. Pacholski, J. Paris (eds),\nAmsterdam-New York: North-Holland, pp. 55\u201366.</li>\n<li>\u2013\u2013\u2013, 1980, \u201cFrege Structures and the\nNotions of Proposition, Truth and Set\u201d, in <em>The Kleene\nSymposium</em>, J. Barwise, H.J. Keisler, K. Kunen (eds), Studies in\nLogic and the Foundations of Mathematics 101, Amsterdam:\nNorth-Holland, pp. 31\u201359.</li>\n<li>Asperti, Andrea, Wilmer Ricciotti, Claudio Sacerdoti Coen, and\nEnrico Tassi, 2011, \u201cThe Matita interactive theorem\nprover\u201d, in <em>Automated deduction: CADE-23</em>,\nN. Bj\u00f8rner and V. Sofronie-Stokkermans (eds), Lecture Notes in\nComputer Science (LNCS), vol. 6803, Heidelberg: Springer-Verlag,\npp. 64\u201369.</li>\n<li>Awodey, Steve and Michael A. Warren, 2009, \u201cHomotopy\ntheoretic models of identity types\u201d, <em>Mathematical\nProceedings of the Cambridge Philosophical Society</em>, 146(1):\n45\u201355.</li>\n<li>Beeson, Michael, 1985, <em>Foundations of Constructive Mathematics</em>, Springer-Verlag, Berlin.</li>\n<li>van den Berg, Benno and Richard Garner, 2011, \u201cTypes are\nweak \\(\\omega\\)-groupoids\u201d, <em>Proceedings of the London\nMathematical Society</em>, 102(2):\n370\u2013394. doi:10.1112/plms/pdq026</li>\n<li>Bezem, Marc, Thierry Coquand, and Simon Huber, 2014 [2013],\n\u201cA model of type theory in cubical sets\u201d, in <em>19th\nInternational Conference on Types for Proofs and Programs (TYPES\n2013)</em>, Ralph Matthes and Aleksy Schubert (eds), Dagstuhl,\nGermany: Schloss Dagstuhl--Leibniz-Zentrum fuer Informatik,\npp. 107\u2013128.</li>\n<li>Bishop, Errett, 1967, <em>Foundations of constructive\nanalysis</em>, New York-Toronto, Ont.-London: McGraw-Hill Book\nCo..</li>\n<li>Brady, Edwin C., 2011, \u201cIDRIS: systems programming meets\nfull dependent types\u201d, in <em>Proceedings of the 5th ACM\nworkshop on Programming Languages meets Program Verification (PLPV\n2011)</em>, pp. 43\u201354, doi:10.1145/1929529.1929536.</li>\n<li>de Bruijn, Nicholas G., 1970, \u201cThe mathematical language\nAUTOMATH, its usage, and some of its extensions\u201d,\nin <em>Symposium on Automatic Demonstration (Versailles, 1968)</em>,\nLecture Notes in Mathematics, Vol. 125, Berlin: Springer,\npp. 29:61.  </li>\n<li>Cartmell, John, 1986, \u201cGeneralised algebraic theories and\ncontextual categories\u201d, <em>Annals of Pure and Applied\nLogic</em>, 32: 209\u2013243.</li>\n<li>Castellan, Simon, Pierre Clairambault, and Peter Dybjer, 2015:\n\u201cUndecidability of Equality in the Free Locally Cartesian Closed Category\u201d, <em>TLCA</em> pp 138-152. </li>\n<li>Clairambault, Pierre and Peter Dybjer, 2014, \u201cThe\nbiequivalence of locally cartesian closed categories and\nMartin-L\u00f6f type theories\u201d, <em>Mathematical Structures in\nComputer Science</em>, 24(6). doi:10.1017/S0960129513000881</li>\n<li>Coquand, Thierry and G\u00e9rard Huet, 1988, \u201cThe calculus\nof constructions\u201d, <em>Information and Computation</em>,\n76(2\u20133): 95\u2013120, doi:10.1016/0890-5401(88)90005-3.</li>\n<li>Curien, Pierre-Louis, 1993, \u201cSubstitution up to\nisomorphism\u201d, <em>Fundamentae Informatica</em>, 19:\n51\u201385.</li>\n<li>Curry, Haskell B. and Robert Feys, 1958, <em>Combinatory\nLogic</em>, Amsterdam: North-Holland.</li>\n<li>Dybjer, Peter, 1991, \u201cInductive sets and families in\nMartin-L\u00f6f\u2019s type theory and their set-theoretic\nsemantics\u201d, in <em>Logical Frameworks</em>, G\u00e9rard Huet\nand Gordon Plotkin (eds), Cambridge: Cambridge University Press,\npp. 280\u2013306 .</li>\n<li>\u2013\u2013\u2013, 1996, \u201cInternal Type Theory\u201d,\nin <em>Types for Proofs and Programs, TYPES '95</em>, Stefano Berardi\nand Mario Coppo (eds), Lecture Notes in Computer Science Volume\n(LNCS), vol. 1158, Heidelberg: Springer-Verlag,\npp. 120\u2013134.</li>\n<li>\u2013\u2013\u2013, 1997, \u201cRepresenting inductively\ndefined sets by wellorderings in Martin-L\u00f6f\u2019s type\ntheory\u201d, <em>Theoretical Computer Science</em>, 176:\n329\u2013335.</li>\n<li>\u2013\u2013\u2013, 2000, \u201cA general formulation of\nsimultaneous inductive-recursive definitions in type\ntheory\u201d, <em>Journal of Symbolic Logic</em>, 65:\n525\u2013549.</li>\n<li>Dybjer, Peter and Anton Setzer, 2003, \u201cInduction-recursion\nand initial algebras\u201d, <em>Annals of Pure and Applied\nLogic</em>, 124: 1\u201347.</li>\n<li>Gonthier, Georges, 2008, \u201cFormal proof of the four-color\ntheorem\u201d, <em>Notices American Mathematical Society</em>, 55:\n1382\u20131393.</li>\n<li>Hofmann, Martin, 1994, \u201cInterpretation of Type Theory in\nLocally Cartesian Closed Categories\u201d, in <em>Proceedings of\nCSL</em>, Lecture Notes in Computer Science (LNCS), Berlin:\nSpringer-Verlag. doi:10.1007/BFb0022273</li>\n<li>\u2013\u2013\u2013, 1997, \u201cSyntax and semantics of\ndependent types\u201d, in <em>Semantics and logics of\ncomputation</em>, Andrew M. Pitts and P. Dybjer (eds), Publications of\nthe Newton Institure (No.14), Cambridge: Cambridge University Press,\npp. 79\u2013130.</li>\n<li>Hofmann, Martin and Thomas Streicher, 1998, \u201cThe groupoid\ninterpretation of type theory\u201d, in Sambin and Smith 1998:\n83\u2013111.</li>\n<li>Howard, William A., 1980, \u201cThe Formulae-as-Types Notion of\nConstruction\u201d, in <em>To H.B. Curry: Essays on Combinatory\nLogic, Lambda Calculus and Formalism</em>, J.P. Seldin and\nJ.R. Hindley (eds), Academic Press, pp. 479\u2013490.</li>\n<li>Jacobs, Bart, 1999, <em>Categorical logic and type theory</em>,\nStudies in Logic and the Foundations of Mathematics 141, Amsterdam:\nNorth-Holland.</li>\n<li>Lawvere, F. William, 1970, \u201cEquality in Hyperdoctrines and\nComprehension Schema as an Adjoint Functor\u201d, in <em>Proceedings\nof the American Mathematical Society Symposium on Pure Mathematics\nXVII</em>, pp. 1\u201314.</li>\n<li>Leroy, Xavier, 2009, \u201cFormal verification of a realistic compiler\u201d, <em>Communications of the ACM</em>, 52(7):107\u2013115.</li>\n<li>Lumsdaine, Peter LeFanu, 2010, \u201cWeak omega-categories from\nintensional type theory\u201d, <em>Logical Methods in Computer\nScience</em>, 6(3), doi:10.2168/LMCS-6(3:24)2010,\n[<a href=\"http://www.lmcs-online.org/ojs/viewarticle.php?id=628\" target=\"other\">LeFanu Lumsdaine 2010 available online</a>]</li>\n<li>Martin-L\u00f6f, Per, 1971a, <em>An intuitionistic theory of\ntypes</em>, unpublished preprint.</li>\n<li>\u2013\u2013\u2013, 1971b, \u201cHauptsatz for the\nintuitionistic theory of iterated inductive definitions\u201d,\nin <em>Proceedings of the 2nd Scandinavian logic symposium</em>,\nJ.E. Fenstad (ed.), Amsterdam: North-Holland, pp.  179\u2013216.</li>\n<li>\u2013\u2013\u2013, 1975, \u201cAn intuitionistic theory of\ntypes: Predicative part\u201d, in <em>Logic colloquium\n\u201973</em>, H.E. Rose and J. Shepherdson (eds), Amsterdam:\nNorth-Holland, pp.  73\u2013118.</li>\n<li>\u2013\u2013\u2013, 1982, \u201cConstructive mathematics and\ncomputer programming\u201d, in <em>Logic, methodology and philosophy\nof science VI, Proceedings of the 1979 international congress at\nHannover, Germany</em>, L.J. Cohen, J. Los, H. Pfeiffer and\nK.-P. Podewski (eds). Amsterdam: North- Holland Publishing Company,\npp.  153\u2013175.</li>\n<li>\u2013\u2013\u2013, 1984, <em>Intuitionistic type theory: Notes\nby Giovanni Sambin of a series of lectures given in Padua, June\n1980</em>, Napoli: Bibliopolis.</li>\n<li>\u2013\u2013\u2013, 1986, \u201cUnifying Scott\u2019s theory\nof domains for denotational semantics and intuitionistic type theory\n(abstract)\u201d, in <em>Atti del Congresso \u2019Logica e Filosofia\ndella Scienza, oggi\u2019, San Gimignano, 7\u201311 December 1983,\nVol. I \u2013 Logica</em>, CLUEB, Bologna.</li>\n<li>\u2013\u2013\u2013, 1987, \u201cTruth of a proposition,\nevidence of a judgment, validity of a proof\u201d, <em>Synthese</em>,\n73: 407\u2013420.</li>\n<li>\u2013\u2013\u2013, 1990, \u201cMathematics of\ninfinity\u201d, in <em>COLOG-88</em>, P. Martin-L\u00f6f and G. Mints\n(eds), Berlin: Springer, pp. 146\u2013197.</li>\n<li>\u2013\u2013\u2013, 1994, \u201cAnalytic and synthetic\njudgments in type theory\u201d, in <em>Kant and contemporary\nepistemology</em>, P. Parrini (ed.), Dordrecht: Kluwer,\npp. 87\u201399.</li>\n<!--\n<li>&ndash;&ndash;&ndash;, 1995, <em>The substitution calculus</em>,\nNotes from a seminar, Stockholm.</li>\n-->\n<li>\u2013\u2013\u2013, 1996, \u201cOn the meanings of the logical\nconstants and the justifications of the logical\nlaws\u201d, <em>Nordic Journal of Philosophical Logic</em>, 1(1):\n11\u201360.</li>\n<li>\u2013\u2013\u2013, 1998 [1972], \u201cAn intuitionistic\ntheory of types\u201d, in Sambin and Smith 1998:\n127\u2013172. (Written in 1972 but unpublished.)</li>\n<li>\u2013\u2013\u2013, 2009, \u201c100 years of Zermelo\u2019s\nAxiom of Choice: What was the problem with it?\u201d in <em>Logicism,\nintuitionism, and formalism: What has become of them?</em>,\nS. Lindstr\u00f6m, E. Palmgren, K. Segerberg, and\nV. Stoltenberg-Hansen (eds), Dordrecht: Springer,\npp. 209\u2013219.</li>\n<li>McBride, Conor and James McKinna, 2004, \u201cThe view from the\nleft\u201d, <em>Journal of Functional Programming</em>, 14:\n69\u2013111.</li>\n<li>de Moura, Leonardo, Soonho Kong, Jeremy Avigad, Floris van Doorn and Jakob von Raumer,\n2015, \u201cThe Lean Theorem Prover\u201d, in <em>25th International Conference on Automated Deduction (CADE-25)</em>, Berlin, Germany.\n[<a href=\"https://leanprover.github.io/papers/system.pdf\" target=\"other\">de Moura et al. 2015 available online</a>]\n</li>\n<li>Nordstr\u00f6m, Bengt, Kent Petersson, and Jan M. Smith,\n1990, <em>Programming in Martin-L\u00f6f\u2019s type theory. An\nintroduction</em>, New York: Oxford University Press.</li>\n<li>Norell, Ulf, 2008, \u201cDependently Typed Programming in\nAgda\u201d, in <em>Proceedings of the 6th international conference on\nAdvanced Functional Programming</em>, pp. 230\u2013266.</li>\n<li>Palmgren, Erik, 1991, <em>On Fixed Point Operators, Inductive\nDefinitions and Universes in Martin-L\u00f6f Type Theory</em>,\nDoctoral dissertation in mathematics, Uppsala University.</li>\n<li>\u2013\u2013\u2013, 1998, \u201cOn universes in type\ntheory\u201d, in Sambin and Smith\n1998: 191-204.</li>\n<li>Palmgren, Erik and Viggo Stoltenberg-Hansen, 1990 \u201cDomain\ninterpretations of Martin-L\u00f6f\u2019s partial type\ntheory\u201d, <em>Annals of Pure and Applied Logic</em>, 48:\n135\u2013196.</li>\n<li>Paulin-Mohring, Christine, 1993, \u201cInductive Definitions in\nthe system Coq: Rules and Properties\u201d, in <em>Proceedings of the\nInternational Conference on Typed Lambda Calculi and Applications,\nTLCA '93</em>, Marc Bezem and Jan F. Groote (eds), Lecture Notes in\nComputer Science (LNCS), Springer, pp.  328\u2013345.  </li>\n<li>Pollack, Randy, 1994, <em>The theory of LEGO</em>, PhD Thesis,\nEdinburgh.</li>\n<li>PRL Group, 1986, <em>Implementing Mathematics with the Nuprl Proof\nDevelopment System</em>, Engelwood Cliffs, NJ: Prentice-Hall.</li>\n<li>Ranta, Aarne, 1994, <em>Type-theoretical Grammar</em>, Oxford:\nOxford University Press.</li>\n<li>Rathjen, Michael, Edward R. Griffor, and Erik Palmgren, 1998,\n\u201cInaccessibility in constructive set theory and type\ntheory\u201d, <em>Annals of Pure and Applied Logic</em>, 94:\n181\u2013200.</li>\n<li>Reynolds, John C., 1984, \u201cPolymorphism is not\nSet-Theoretic\u201d, in <em>Semantics of Data Types: International\nSymposium Sophia-Antipolis, France, June 27\u201329, 1984\nProceedings</em>, Giles Kahn, David B. MacQueen, and Gordon Plotkin\n(eds), Lecture Notes in Computer Science (LNCS), vol. 173, Springer,\npp. 145\u2013156.</li>\n<li>Sambin, G. and Jan M. Smith (eds), 1998, <em>Twenty-five years of\nconstructive type theory</em>, Oxford: Clarendon Press.</li>\n<li>Scott, Dana S., 1970, \u201cConstructive Validity\u201d,\nin <em>Symposium on Automatics Demonstration (Versailles, December\n1968</em>, M. Laudet, D. Lacombe, L. Nolin, and M. Sch\u00fctzenberg\n(eds), Lecture Notes in Mathematics, vol. 125, Springer,\npp. 237\u2013275.</li>\n<li>Seely, Robert A.G., 1984, \u201cLocally cartesian closed\ncategories and type theory\u201d, <em>Mathematical Proceedings of the\nCambridge Philosophical Society</em>, 95: 33\u201348.</li>\n<li>Setzer, Anton, 1998, \u201cWell-ordering proofs for\nMartin-L\u00f6f type theory\u201d, <em>Annals of Pure and Applied\nLogic</em>, 92: 113\u2013159.</li>\n<li>\u2013\u2013\u2013, 2000, \u201cExtending Martin-L\u00f6f type\ntheory by one Mahlo-universe\u201d, <em>Archive for Mathematical\nLogic</em>, 39: 155\u2013181.</li>\n<li>Smith, Jan, 1984, \u201cAn interpretation of\nMartin-L\u00f6f\u2019s type theory in a type-free theory of\npropositions\u201d, <em>Journal of Symbolic Logic</em>, 49:\n730\u2013753.</li>\n<li>Sundholm, G\u00f6ran, 2012, \u201cOn the Philosophical Work of\nPer Martin-L\u00f6f\u201d, in P. Dybjer, S. Lindstr\u00f6m,\nE. Palmgren, and G. Sundholm (eds), <em>Epistemology versus Ontology:\nEssays on the Philosophy and Foundations of Mathematics in Honour of\nPer Martin-L\u00f6f</em>, Springer, pp. xxiii\u2013xxiv.</li>\n<li>The Univalent\nFoundations Program, 2013, <em>Homotopy Type\nTheory: Univalent Foundations of Mathematics</em>, Institute for Advanced Study, Princeton. http://homotopytypetheory.org/book.</li>\n</ul>\n</div>"}, "related_entries": {"entry_list": ["logic, history of: intuitionistic logic", "logic: intuitionistic", "mathematics, philosophy of: intuitionism", "mathematics: constructive", "proof theory: development of", "semantics: Montague", "semantics: proof-theoretic", "set theory", "set theory: constructive and intuitionistic ZF", "set theory: Zermelo\u2019s axiomatization of", "type theory", "type theory: Church\u2019s type theory"], "entry_link": [{"../intuitionistic-logic-development/": "logic, history of: intuitionistic logic"}, {"../logic-intuitionistic/": "logic: intuitionistic"}, {"../intuitionism/": "mathematics, philosophy of: intuitionism"}, {"../mathematics-constructive/": "mathematics: constructive"}, {"../proof-theory-development/": "proof theory: development of"}, {"../montague-semantics/": "semantics: Montague"}, {"../proof-theoretic-semantics/": "semantics: proof-theoretic"}, {"../set-theory/": "set theory"}, {"../set-theory-constructive/": "set theory: constructive and intuitionistic ZF"}, {"../zermelo-set-theory/": "set theory: Zermelo\u2019s axiomatization of"}, {"../type-theory/": "type theory"}, {"../type-theory-church/": "type theory: Church\u2019s type theory"}]}, "academic_tools": {"listed_text": ["<img alt=\"sep man icon\" src=\"../../symbols/sepman-icon.jpg\"/>", "<a href=\"https://plato.stanford.edu/cgi-bin/encyclopedia/archinfo.cgi?entry=type-theory-intuitionistic\" target=\"other\">How to cite this entry</a>.", "<img alt=\"sep man icon\" src=\"../../symbols/sepman-icon.jpg\"/>", "<a href=\"https://leibniz.stanford.edu/friends/preview/type-theory-intuitionistic/\" target=\"other\">Preview the PDF version of this entry</a> at the\n <a href=\"https://leibniz.stanford.edu/friends/\" target=\"other\">Friends of the SEP Society</a>.", "<img alt=\"inpho icon\" src=\"../../symbols/inpho.png\"/>", "<a href=\"https://www.inphoproject.org/entity?sep=type-theory-intuitionistic&amp;redirect=True\" target=\"other\">Look up topics and thinkers related to this entry</a>\n at the Internet Philosophy Ontology Project (InPhO).", "<img alt=\"phil papers icon\" src=\"../../symbols/pp.gif\"/>", "<a href=\"https://philpapers.org/sep/type-theory-intuitionistic/\" target=\"other\">Enhanced bibliography for this entry</a>\nat <a href=\"https://philpapers.org/\" target=\"other\">PhilPapers</a>, with links to its database."], "listed_links": [{"https://plato.stanford.edu/cgi-bin/encyclopedia/archinfo.cgi?entry=type-theory-intuitionistic": "How to cite this entry"}, {"https://leibniz.stanford.edu/friends/preview/type-theory-intuitionistic/": "Preview the PDF version of this entry"}, {"https://leibniz.stanford.edu/friends/": "Friends of the SEP Society"}, {"https://www.inphoproject.org/entity?sep=type-theory-intuitionistic&redirect=True": "Look up topics and thinkers related to this entry"}, {"https://philpapers.org/sep/type-theory-intuitionistic/": "Enhanced bibliography for this entry"}, {"https://philpapers.org/": "PhilPapers"}]}, "other_internet_resources": {"listed_text": ["\n<a href=\"http://www.iep.utm.edu/con-math/\" target=\"other\"> Internet Encyclopedia of Philosophy: Constructive Mathematics </a>\n", "\n<a href=\"http://www.scholarpedia.org/article/Computational_type_theory\" target=\"other\"> Scholarpedia: Computational Type Theory </a>\n", "\n<a href=\"https://ncatlab.org/nlab/show/type+theory\" target=\"other\"> nLab: Type Theory </a>\n"], "listed_links": [{"http://www.iep.utm.edu/con-math/": " Internet Encyclopedia of Philosophy: Constructive Mathematics "}, {"http://www.scholarpedia.org/article/Computational_type_theory": " Scholarpedia: Computational Type Theory "}, {"https://ncatlab.org/nlab/show/type+theory": " nLab: Type Theory "}]}, "tokenized_text": ["1", "overview", "begin", "bird", "eye", "view", "important", "aspect", "intuitionistic", "type", "theory", "reader", "unfamiliar", "theory", "may", "prefer", "skip", "first", "reading", "origin", "intuitionistic", "type", "theory", "brouwer", "intuitionism", "russell", "type", "theory", "like", "church", "classical", "simple", "theory", "type", "based", "lambda", "calculus", "type", "differs", "based", "propositionsastypes", "principle", "discovered", "curry", "1958", "propositional", "logic", "extended", "predicate", "logic", "howard", "1980", "de", "bruijn", "1970", "extension", "made", "possible", "introduction", "indexed", "family", "type", "dependent", "type", "representing", "predicate", "predicate", "logic", "way", "logical", "connective", "quantifier", "interpreted", "type", "former", "intuitionistic", "type", "theory", "type", "added", "type", "natural", "number", "type", "small", "type", "universe", "type", "wellfounded", "tree", "resulting", "theory", "contains", "intuitionistic", "number", "theory", "heyting", "arithmetic", "much", "theory", "formulated", "natural", "deduction", "rule", "type", "former", "classified", "formation", "introduction", "elimination", "equality", "rule", "rule", "exhibit", "certain", "symmerties", "introduction", "elimination", "rule", "following", "gentzen", "prawitz", "treatment", "natural", "deduction", "explained", "entry", "prooftheoretic", "semantics", "element", "proposition", "interpreted", "type", "called", "proofobjects", "proofobjects", "added", "natural", "deduction", "calculus", "becomes", "typed", "lambda", "calculus", "dependent", "type", "extends", "church", "original", "typed", "lambda", "calculus", "equality", "rule", "computation", "rule", "term", "calculus", "function", "definable", "theory", "total", "computable", "intuitionistic", "type", "theory", "thus", "typed", "functional", "programming", "language", "unusual", "property", "program", "terminate", "intuitionistic", "type", "theory", "formal", "logical", "system", "also", "provides", "comprehensive", "philosophical", "framework", "intuitionism", "interpreted", "language", "distinction", "demonstration", "judgment", "proof", "proposition", "play", "fundamental", "role", "sundholm", "2012", "framework", "clarifies", "brouwerheytingkolmogorov", "interpretation", "intuitionistic", "logic", "extends", "general", "setting", "intuitionistic", "type", "theory", "provides", "general", "conception", "constructive", "proof", "also", "constructive", "mathematical", "object", "meaning", "judgment", "intuitionistic", "type", "theory", "explained", "term", "computation", "canonical", "form", "type", "term", "informal", "intuitive", "meaning", "explanation", "premathematical", "contrasted", "formal", "mathematical", "model", "developed", "inside", "standard", "mathematical", "framework", "set", "theory", "meaning", "theory", "also", "justifies", "variety", "inductive", "recursive", "inductiverecursive", "definition", "although", "prooftheoretically", "strong", "notion", "justified", "analogue", "certain", "large", "cardinal", "system", "considered", "predicative", "impredicative", "definition", "kind", "found", "higherorder", "logic", "intuitionistic", "set", "theory", "topos", "theory", "part", "theory", "neither", "markov", "principle", "thus", "theory", "distinct", "russian", "constructivism", "alternative", "formal", "logical", "system", "predicative", "constructive", "mathematics", "myhill", "aczel", "constructive", "zermelofraenkel", "set", "theory", "czf", "theory", "based", "intuitionistic", "firstorder", "predicate", "logic", "weakens", "axiom", "classical", "zermelofraenkel", "set", "theory", "natural", "interpretation", "intuitionistic", "type", "theory", "martinl\u00f6f", "meaning", "explanation", "thus", "also", "indirectly", "form", "basis", "czf", "variant", "intuitionistic", "type", "theory", "underlie", "several", "widely", "used", "proof", "assistant", "including", "nuprl", "coq", "agda", "proof", "assistant", "computer", "system", "used", "formalizing", "large", "complex", "proof", "mathematical", "theorem", "four", "colour", "theorem", "graph", "theory", "feitthompson", "theorem", "finite", "group", "theory", "also", "used", "prove", "correctness", "realistic", "c", "compiler", "leroy", "2009", "computer", "software", "philosophically", "practically", "intuitionistic", "type", "theory", "foundational", "framework", "constructive", "mathematics", "computer", "programming", "deep", "sense", "point", "emphasized", "gonthier", "2008", "paper", "describes", "proof", "four", "colour", "theorem", "approach", "proved", "successful", "proof", "turn", "almost", "every", "mathematical", "concept", "data", "structure", "program", "coq", "system", "thereby", "converting", "entire", "enterprise", "one", "program", "verification", "2", "proposition", "type", "21", "intuitionistic", "type", "theory", "new", "way", "looking", "logic", "intuitionistic", "type", "theory", "offer", "new", "way", "analyzing", "logic", "mainly", "introduction", "explicit", "proof", "object", "provides", "direct", "computational", "interpretation", "logic", "since", "computation", "rule", "proof", "object", "regard", "expressive", "power", "intuitionistic", "type", "theory", "may", "considered", "extension", "firstorder", "logic", "much", "higher", "order", "logic", "predicative", "211", "type", "theory", "russell", "developed", "type", "theory", "response", "discovery", "paradox", "naive", "set", "theory", "ramified", "type", "theory", "mathematical", "object", "classified", "according", "type", "type", "proposition", "type", "object", "type", "property", "object", "etc", "church", "developed", "simple", "theory", "type", "basis", "typed", "version", "lambda", "calculus", "added", "rule", "type", "function", "two", "type", "theory", "intuitionistic", "type", "theory", "extends", "simply", "typed", "lambda", "calculus", "dependent", "type", "indexed", "family", "type", "example", "family", "type", "n", "tuples", "indexed", "n", "type", "widely", "used", "programming", "long", "time", "early", "highlevel", "programming", "language", "introduced", "type", "integer", "floating", "point", "number", "modern", "programming", "language", "often", "rich", "type", "system", "many", "construct", "forming", "new", "type", "intuitionistic", "type", "theory", "functional", "programming", "language", "type", "system", "rich", "practically", "conceivable", "property", "program", "expressed", "type", "type", "thus", "used", "specification", "task", "program", "212", "intuitionstic", "logic", "proofobjects", "brouwer", "analysis", "logic", "led", "intuitionistic", "logic", "reject", "law", "excluded", "middle", "law", "double", "negation", "law", "valid", "intuitionistic", "type", "theory", "thus", "contain", "classical", "peano", "arithmetic", "intuitionistic", "heyting", "arithmetic", "another", "matter", "peano", "arithmetic", "interpreted", "heyting", "arithmetic", "double", "negation", "interpretation", "see", "entry", "intuitionistic", "logic", "consider", "theorem", "intuitionistic", "arithmetic", "division", "theorem", "forall", "n", "0", "supset", "exists", "q", "r", "mq", "r", "n", "wedge", "r", "formal", "proof", "usual", "sense", "theorem", "sequence", "tree", "formula", "last", "root", "formula", "theorem", "formula", "sequence", "either", "axiom", "leaf", "result", "applying", "inference", "rule", "earlier", "higher", "formula", "division", "theorem", "proved", "intuitionistic", "type", "theory", "build", "formal", "proof", "usual", "sense", "also", "construction", "proofobject", "divi", "witness", "truth", "theorem", "write", "divi", "forall", "n", "n", "0", "supset", "exists", "q", "r", "n", "mq", "r", "n", "wedge", "r", "express", "divi", "proofobject", "division", "theorem", "element", "type", "representing", "division", "theorem", "proposition", "represented", "type", "forall", "quantifier", "identified", "dependent", "function", "space", "former", "general", "cartesian", "product", "pi", "exists", "quantifier", "dependent", "pair", "type", "former", "general", "disjoint", "sum", "sigma", "conjunction", "wedge", "cartesian", "product", "times", "identity", "relation", "type", "former", "i", "proofobjects", "identity", "greater", "relation", "type", "former", "gt", "proofobjects", "greaterthan", "statement", "using", "typenotation", "thus", "write", "divi", "pi", "n", "n", "gt", "m0", "rightarrow", "sigma", "q", "r", "n", "i", "n", "mq", "r", "n", "times", "gt", "r", "express", "proof", "object", "divi", "function", "map", "two", "number", "m", "n", "proofobject", "p", "witnessing", "0", "quadruple", "q", "r", "q", "quotient", "r", "remainder", "obtained", "dividing", "n", "m", "third", "component", "s", "proofobject", "witnessing", "fact", "mq", "r", "n", "fourth", "component", "t", "proof", "object", "witnessing", "r", "crucially", "divi", "function", "classical", "sense", "also", "function", "intuitionistic", "sense", "program", "computes", "output", "q", "r", "given", "m", "n", "p", "input", "program", "term", "lambda", "calculus", "special", "constant", "program", "functional", "programming", "language", "213", "extension", "firstorder", "predicate", "logic", "intuitionistic", "type", "theory", "considered", "extension", "firstorder", "logic", "much", "higher", "order", "logic", "extension", "first", "order", "logic", "higher", "order", "logic", "find", "individual", "domain", "interpreted", "set", "like", "relational", "constant", "signature", "interpreted", "relation", "set", "interpreting", "individual", "domain", "top", "quantify", "relation", "relation", "relation", "etc", "think", "higher", "order", "logic", "firstorder", "logic", "equipped", "way", "introducing", "new", "domain", "quantification", "s_1", "ldots", "s_n", "domain", "quantification", "s_1", "ldots", "s_n", "new", "domain", "quantification", "consisting", "nary", "relation", "domain", "s_1", "ldots", "s_n", "higher", "order", "logic", "straightforward", "settheoretic", "interpretation", "s_1", "ldots", "s_n", "interpreted", "power", "set", "p", "a_1", "times", "cdots", "times", "a_n", "a_i", "interpretation", "s_i", "i1", "ldots", "n", "kind", "higher", "order", "logic", "simple", "theory", "type", "ramsey", "church", "others", "introduced", "intuitionistic", "type", "theory", "viewed", "similar", "way", "possibility", "introducing", "domain", "quantification", "richer", "one", "use", "sigma", "pi", "i", "construct", "new", "one", "old", "section", "31", "martinl\u00f6f", "1998", "1972", "intuitionistic", "type", "theory", "straightforward", "settheoretic", "interpretation", "well", "sigma", "pi", "etc", "interpreted", "corresponding", "settheoretic", "construction", "see", "add", "intuitionistic", "type", "theory", "unspecified", "individual", "domain", "hol", "interpreted", "set", "hol", "exhibit", "difference", "hol", "intuitionistic", "type", "theory", "introduce", "unspecified", "family", "symbol", "introduce", "t", "family", "type", "individual", "domain", "s", "x", "rm", "type", "x", "s", "interpreted", "a", "t", "interpreted", "family", "set", "indexed", "a", "nonmathematical", "example", "render", "binary", "relation", "love", "member", "individual", "domain", "people", "follows", "introduce", "binary", "family", "love", "domain", "people", "rm", "love", "x", "rm", "type", "x", "rm", "people", "rm", "people", "interpretation", "family", "set", "b_", "x", "x", "a", "a", "cover", "standard", "notion", "relation", "suppose", "binary", "relation", "r", "a", "familiar", "settheoretic", "sense", "make", "binary", "family", "corresponding", "follows", "b_", "x", "begin", "case", "0", "text", "r", "x", "text", "hold", "varnothing", "text", "r", "x", "text", "false", "end", "case", "clearly", "b_", "x", "nonempty", "r", "x", "hold", "could", "chosen", "element", "set", "theoretic", "universe", "0", "indicate", "truth", "thus", "relation", "construct", "family", "whose", "truth", "x", "y", "equivalent", "b_", "x", "nonempty", "note", "interpretation", "care", "proof", "r", "x", "hold", "recall", "intuitionistic", "type", "theory", "interprets", "proposition", "type", "p", "rm", "love", "rm", "john", "rm", "mary", "mean", "rm", "love", "rm", "john", "rm", "mary", "true", "interpretation", "relation", "family", "allows", "keeping", "track", "proof", "evidence", "r", "x", "hold", "may", "also", "chose", "ignore", "montague", "semantics", "higher", "order", "logic", "used", "give", "semantics", "natural", "language", "example", "ranta", "1994", "introduced", "idea", "instead", "employ", "intuitionistic", "type", "theory", "better", "capture", "sentence", "structure", "help", "dependent", "type", "contrast", "would", "mathematical", "relation", "natural", "number", "handled", "intuitionistic", "type", "theory", "first", "need", "type", "number", "n", "could", "principle", "introduce", "unspecified", "individual", "domain", "n", "add", "axiom", "firstorder", "logic", "set", "axiom", "system", "peano", "arithmetic", "however", "would", "give", "u", "desirable", "computational", "interpretation", "explained", "lay", "introduction", "rule", "constructing", "new", "natural", "number", "n", "elimination", "computation", "rule", "defining", "function", "n", "recursion", "standard", "order", "relation", "satisfy", "mbox", "x", "y", "iff", "exists", "z", "n", "yz1", "x", "right", "hand", "rendered", "sigma", "z", "n", "i", "n", "yz1", "x", "intuitionistic", "type", "theory", "take", "definition", "relation", "defined", "recursive", "equation", "i", "identity", "type", "construction", "property", "determined", "mentioned", "introduction", "elimination", "computation", "rule", "n", "214", "logic", "several", "form", "judgment", "type", "system", "intuitionistic", "type", "theory", "expressive", "consequence", "wellformedness", "type", "longer", "simple", "matter", "parsing", "something", "need", "proved", "wellformedness", "type", "one", "form", "judgment", "intuitionistic", "type", "theory", "welltypedness", "term", "respect", "type", "another", "furthermore", "equality", "judgment", "type", "term", "yet", "another", "way", "intuitionistic", "type", "theory", "differs", "ordinary", "first", "order", "logic", "focus", "sole", "judgment", "expressing", "truth", "proposition", "215", "semantics", "standard", "presentation", "firstorder", "logic", "would", "follow", "tarski", "defining", "notion", "model", "intuitionistic", "type", "theory", "follows", "tradition", "brouwerian", "meaning", "theory", "developed", "heyting", "kolmogorov", "called", "bhkinterpretation", "logic", "key", "point", "proof", "implication", "supset", "b", "method", "transforms", "proof", "a", "proof", "b", "intuitionistic", "type", "theory", "method", "formally", "represented", "program", "f", "supset", "b", "f", "rightarrow", "b", "type", "proof", "implication", "supset", "b", "type", "function", "map", "proof", "a", "proof", "b", "moreover", "whereas", "tarski", "semantics", "usually", "presented", "metamathematically", "assumes", "set", "theory", "martinl\u00f6f", "meaning", "theory", "intuitionistic", "type", "theory", "understood", "directly", "premathematically", "without", "assuming", "metalanguage", "set", "theory", "216", "functional", "programming", "language", "reader", "background", "lambda", "calculus", "functional", "programming", "get", "alternative", "first", "approximation", "intuitionistic", "type", "theory", "thinking", "typed", "functional", "programming", "language", "style", "haskell", "one", "dialect", "ml", "however", "differs", "two", "crucial", "aspect", "dependent", "type", "see", "ii", "typable", "program", "terminate", "note", "intuitionistic", "type", "theory", "influenced", "recent", "extension", "haskell", "generalized", "algebraic", "datatypes", "sometimes", "play", "similar", "role", "inductively", "defined", "dependent", "type", "22", "curryhoward", "correspondence", "already", "mentioned", "principle", "proposition", "type", "proof", "fundamental", "intuitionistic", "type", "theory", "principle", "also", "known", "curryhoward", "correspondence", "even", "curryhoward", "isomorphism", "curry", "discovered", "correspondence", "implicational", "fragment", "intuitionistic", "logic", "simply", "typed", "lambdacalculus", "howard", "extended", "correspondence", "firstorder", "predicate", "logic", "intuitionistic", "type", "theory", "correspondence", "becomes", "identification", "proposition", "type", "extended", "include", "quantification", "higher", "type", "23", "set", "proofobjects", "proofobjects", "like", "thought", "logical", "derivation", "rather", "structured", "symbolic", "evidence", "something", "true", "another", "term", "evidence", "truthmaker", "instructive", "somewhat", "crude", "first", "approximation", "replace", "type", "ordinary", "set", "correspondence", "define", "set", "e_", "n", "depending", "n", "in", "mathbb", "n", "e_", "n", "left", "begin", "array", "0", "mbox", "n", "varnothing", "mbox", "ne", "n", "end", "array", "right", "e_", "n", "nonempty", "exactly", "mn", "set", "e_", "n", "corresponds", "proposition", "mn", "number", "0", "proofobject", "truthmaker", "inhabiting", "set", "e_", "consider", "proposition", "m", "even", "number", "expressed", "formula", "exists", "n", "in", "mathbb", "n", "m", "2n", "build", "set", "proofobjects", "corresponding", "formula", "using", "general", "settheoretic", "sum", "operation", "suppose", "a_n", "nin", "mathbb", "n", "family", "set", "disjoint", "sum", "given", "set", "pair", "sigma", "n", "in", "mathbb", "n", "a_n", "n", "n", "in", "mathbb", "n", "in", "a_n", "apply", "construction", "family", "a_n", "e_", "m2n", "see", "sigma", "n", "in", "mathbb", "n", "e_", "m2n", "nonempty", "exactly", "nin", "mathbb", "n", "m2n", "using", "general", "settheoretic", "product", "operation", "pi", "n", "in", "mathbb", "n", "a_n", "similarly", "obtain", "set", "corresponding", "universally", "quantified", "proposition", "24", "dependent", "type", "intuitionistic", "type", "theory", "primitive", "type", "former", "sigma", "pi", "general", "sum", "product", "i", "identity", "type", "analogous", "settheoretic", "construction", "described", "identity", "type", "i", "n", "n", "corresponding", "set", "e_", "n", "example", "dependent", "type", "since", "depends", "m", "n", "also", "called", "indexed", "family", "type", "since", "family", "type", "indexed", "m", "n", "similarly", "form", "general", "disjoint", "sum", "sigma", "x", "a", "b", "general", "cartesian", "product", "pi", "x", "a", "b", "family", "type", "b", "indexed", "x", "a", "corresponding", "set", "theoretic", "sum", "product", "operation", "dependent", "type", "also", "defined", "primitive", "recursion", "example", "type", "n", "tuples", "an", "element", "type", "a", "indexed", "n", "n", "defined", "equation", "begin", "align", "a0", "1", "a", "n1", "times", "an", "end", "align", "1", "one", "element", "type", "times", "denotes", "cartesian", "product", "two", "type", "note", "dependent", "type", "introduce", "computation", "type", "defining", "rule", "computation", "rule", "example", "result", "computing", "a3", "times", "times", "times", "1", "25", "proposition", "type", "intuitionistic", "type", "theory", "proposition", "type", "predicate", "become", "dependent", "type", "example", "predicate", "mathrm", "prime", "x", "becomes", "type", "proof", "x", "prime", "type", "depends", "x", "similarly", "x", "y", "type", "proof", "x", "le", "y", "according", "curryhoward", "interpretation", "proposition", "type", "logical", "constant", "interpreted", "type", "former", "begin", "align", "bot", "varnothing", "top", "1", "vee", "b", "b", "wedge", "b", "times", "b", "supset", "b", "rightarrow", "b", "exists", "x", "a", "b", "sigma", "x", "a", "b", "forall", "x", "a", "b", "pi", "x", "a", "b", "end", "align", "sigma", "x", "a", "b", "disjoint", "sum", "a", "indexed", "family", "type", "b", "pi", "x", "a", "b", "cartesian", "product", "canonical", "element", "sigma", "x", "a", "b", "pair", "b", "a", "b", "b", "x", "a", "type", "obtained", "substituting", "free", "occurrence", "x", "b", "a", "element", "pi", "x", "a", "b", "computable", "function", "f", "f", "b", "x", "a", "whenever", "a", "example", "consider", "proposition", "begin", "equation", "forall", "n", "exists", "n", "n", "lt", "n", "wedge", "mathrm", "prime", "n", "tag", "1", "label", "prop1", "end", "equation", "expressing", "arbitrarily", "large", "prime", "curryhoward", "interpretation", "becomes", "type", "pi", "n", "sigma", "n", "n", "lt", "n", "times", "mathrm", "prime", "n", "function", "map", "number", "m", "triple", "n", "p", "q", "n", "number", "p", "proof", "lt", "n", "q", "proof", "n", "prime", "proof", "program", "principle", "constructive", "proof", "arbitrarily", "large", "prime", "becomes", "program", "given", "number", "produce", "larger", "prime", "together", "proof", "indeed", "larger", "indeed", "prime", "note", "proof", "derives", "contradiction", "assumption", "largest", "prime", "constructive", "since", "explicitly", "give", "way", "compute", "even", "larger", "prime", "turn", "proof", "constructive", "one", "show", "explicitly", "construct", "larger", "prime", "since", "proposition", "ref", "prop1", "pi0_2", "formula", "example", "use", "friedman", "atranslation", "turn", "proof", "classical", "arithmetic", "proof", "intuitionistic", "arithmetic", "thus", "proof", "intuitionistic", "type", "theory", "3", "basic", "intuitionistic", "type", "theory", "present", "core", "version", "intuitionistic", "type", "theory", "closely", "related", "first", "version", "theory", "presented", "martinl\u00f6f", "1972", "martinl\u00f6f", "1998", "1972", "addition", "type", "former", "needed", "curryhoward", "interpretation", "typed", "intuitionistic", "predicate", "logic", "listed", "two", "type", "type", "n", "natural", "number", "type", "u", "small", "type", "resulting", "theory", "shown", "contain", "intuitionistic", "number", "theory", "ha", "heyting", "arithmetic", "g\u00f6del", "system", "t", "primitive", "recursive", "function", "higher", "type", "theory", "haomega", "heyting", "arithmetic", "higher", "type", "core", "intuitionistic", "type", "theory", "original", "one", "perhaps", "minimal", "version", "exhibit", "essential", "feature", "theory", "later", "extension", "primitive", "identity", "type", "wellfounded", "tree", "type", "universe", "hierarchy", "general", "notion", "inductive", "inductiverecursive", "definition", "increased", "prooftheoretic", "strength", "theory", "also", "made", "convenient", "programming", "formalization", "mathematics", "example", "addition", "wellfounded", "tree", "interpret", "constructive", "zermelofraenkel", "set", "theory", "czf", "aczel", "1978", "1977", "however", "wait", "next", "section", "describe", "extension", "31", "judgment", "martinl\u00f6f", "1996", "general", "philosophy", "logic", "presented", "traditional", "notion", "judgment", "expanded", "given", "central", "position", "judgment", "longer", "affirmation", "denial", "proposition", "general", "act", "knowledge", "reasoning", "mathematically", "make", "judgment", "mathematical", "object", "one", "form", "judgment", "state", "mathematical", "statement", "true", "another", "form", "judgment", "state", "something", "mathematical", "object", "example", "set", "logical", "rule", "give", "method", "producing", "correct", "judgment", "earlier", "judgment", "judgment", "obtained", "rule", "presented", "tree", "form", "begin", "prooftree", "axiomc", "j_1", "axiomc", "j_2", "rightlabel", "r_1", "binaryinfc", "j_3", "axiomc", "j_4", "rightlabel", "r_5", "unaryinfc", "j_5", "axiomc", "j_6", "rightlabel", "r_3", "binaryinfc", "j_7", "rightlabel", "r_4", "binaryinfc", "j_8", "end", "prooftree", "sequential", "form", "1", "j_1", "quadtext", "axiom", "2", "j_2", "quadtext", "axiom", "3", "j_3", "quadtext", "rule", "r_1", "1", "2", "4", "j_4", "quadtext", "axiom", "5", "j_5", "quadtext", "rule", "r_2", "4", "6", "j_6", "quadtext", "axiom", "7", "j_7", "quadtext", "rule", "r_3", "5", "6", "8", "j_8", "quadtext", "rule", "r_4", "3", "7", "latter", "form", "common", "mathematical", "argument", "sequence", "tree", "formed", "logical", "rule", "axiom", "derivation", "demonstration", "judgment", "firstorder", "reasoning", "may", "presented", "using", "single", "kind", "judgment", "proposition", "b", "true", "hypothesis", "proposition", "a_1", "ldots", "a_n", "true", "write", "hypothetical", "judgment", "socalled", "gentzen", "sequent", "a_1", "ldots", "a_n", "vdash", "b", "note", "single", "judgment", "confused", "derivation", "judgment", "vdash", "b", "judgment", "vdash", "a_1", "ldots", "vdash", "a_n", "n0", "categorical", "judgment", "vdash", "b", "state", "b", "true", "without", "assumption", "sequent", "notation", "familiar", "rule", "conjunctive", "introduction", "becomes", "begin", "prooftree", "axiomc", "a_1", "ldots", "a_n", "vdash", "b", "axiomc", "a_1", "ldots", "a_n", "vdash", "c", "rightlabel", "land", "binaryinfc", "a_1", "ldots", "a_n", "vdash", "b", "land", "c", "end", "prooftree", "32", "judgment", "form", "martinl\u00f6f", "type", "theory", "four", "basic", "form", "judgment", "considerably", "complicated", "system", "firstorder", "logic", "one", "reason", "information", "carried", "around", "derivation", "due", "identification", "proposition", "type", "another", "reason", "syntax", "involved", "instance", "wellformed", "formula", "type", "generated", "simultaneously", "provably", "true", "formula", "inhabited", "type", "four", "form", "categorical", "judgment", "vdash", "rm", "type", "meaning", "a", "wellformed", "type", "vdash", "a", "meaning", "a", "type", "a", "vdash", "a", "meaning", "a", "a", "equal", "type", "vdash", "a", "meaning", "a", "a", "equal", "element", "type", "a", "general", "judgment", "hypothetical", "made", "context", "gamma", "list", "x_1", "a_1", "ldots", "x_n", "a_n", "variable", "may", "occur", "free", "judgment", "together", "respective", "type", "note", "type", "context", "depend", "variable", "earlier", "type", "example", "a_n", "depend", "x_1", "a_1", "ldots", "x_", "n1", "a_", "n1", "four", "form", "hypothetical", "judgment", "gamma", "vdash", "rm", "type", "meaning", "a", "wellformed", "type", "context", "gamma", "gamma", "vdash", "a", "meaning", "a", "type", "a", "context", "gamma", "gamma", "vdash", "a", "meaning", "a", "a", "equal", "type", "context", "gamma", "gamma", "vdash", "a", "meaning", "a", "a", "equal", "element", "type", "a", "context", "gamma", "proposition", "type", "interpretation", "tag", "2", "label", "analytic", "vdash", "understood", "judgment", "a", "proofobject", "proposition", "a", "suppressing", "object", "get", "judgment", "corresponding", "one", "ordinary", "firstorder", "logic", "see", "tag", "3", "label", "synthetic", "vdash", "a", "rm", "true", "remark", "31", "martinl\u00f6f", "1994", "argues", "kant", "analytic", "judgment", "priori", "synthetic", "judgment", "priori", "exemplified", "realm", "logic", "analytic", "synthetic", "respectively", "analytic", "judgment", "analytic", "everything", "needed", "make", "judgment", "evident", "explicit", "synthetic", "version", "synthetic", "possibly", "complicated", "proof", "construction", "a", "need", "provided", "make", "evident", "understanding", "analyticity", "syntheticity", "surprising", "consequence", "logical", "law", "usual", "formulation", "synthetic", "martinl\u00f6f", "1994", "95", "analysis", "give", "logic", "analytic", "judgment", "logic", "deriving", "judgment", "two", "analytic", "form", "complete", "decidable", "whereas", "logic", "synthetic", "judgment", "incomplete", "undecidable", "shown", "g\u00f6del", "martinl\u00f6f", "1994", "97", "decidability", "two", "analytic", "judgment", "vdash", "a", "vdash", "ab", "a", "hinge", "metamathematical", "property", "type", "theory", "strong", "normalization", "decidable", "type", "checking", "sometimes", "also", "following", "form", "explicitly", "considered", "judgment", "theory", "gamma", "rm", "context", "meaning", "gamma", "wellformed", "context", "gamma", "gamma", "meaning", "gamma", "gamma", "equal", "context", "shall", "abbreviate", "judgment", "gamma", "vdash", "rm", "type", "gamma", "vdash", "a", "gamma", "rm", "context", "gamma", "vdash", "33", "inference", "rule", "stating", "rule", "use", "letter", "gamma", "metavariable", "ranging", "context", "b", "ldots", "metavariables", "ranging", "type", "b", "c", "e", "f", "ldots", "metavariables", "ranging", "term", "first", "group", "inference", "rule", "general", "rule", "including", "rule", "assumption", "substitution", "context", "formation", "also", "rule", "express", "equality", "equivalence", "relation", "numerous", "rule", "show", "particularly", "important", "rule", "type", "equality", "crucial", "computation", "type", "frac", "gamma", "vdash", "ahspace", "2em", "gamma", "vdash", "b", "gamma", "vdash", "b", "remaining", "rule", "specific", "type", "former", "classified", "formation", "introduction", "elimination", "equality", "rule", "34", "intuitionistic", "predicate", "logic", "give", "rule", "pi", "analogous", "rule", "type", "former", "corresponding", "logical", "constant", "typed", "predicate", "logic", "following", "b", "x", "mean", "term", "obtained", "substituting", "term", "a", "free", "occurrence", "variable", "x", "b", "avoiding", "variable", "capture", "pi", "formation", "frac", "gamma", "vdash", "ahspace", "2em", "gamma", "x", "vdash", "b", "gamma", "vdash", "pi", "x", "a", "b", "pi", "introduction", "frac", "gamma", "x", "vdash", "b", "b", "gamma", "vdash", "lambda", "x", "b", "pi", "x", "a", "b", "pi", "elimination", "frac", "gamma", "vdash", "f", "pi", "x", "abhspace", "2em", "gamma", "vdash", "gamma", "vdash", "f", "b", "x", "pi", "equality", "frac", "gamma", "x", "vdash", "b", "bhspace", "2em", "gamma", "vdash", "gamma", "vdash", "lambda", "xb", "b", "x", "b", "x", "rule", "beta", "conversion", "may", "also", "add", "rule", "eta", "conversion", "frac", "gamma", "vdash", "f", "pi", "x", "a", "b", "gamma", "vdash", "lambda", "x", "f", "x", "f", "pi", "x", "a", "b", "furthermore", "congruence", "rule", "expressing", "operation", "introduced", "formation", "introduction", "elimination", "rule", "preserve", "equality", "example", "congruence", "rule", "pi", "frac", "gamma", "vdash", "ahspace", "2em", "gamma", "x", "vdash", "bb", "gamma", "vdash", "pi", "x", "a", "b", "pi", "x", "b", "35", "natural", "number", "peano", "arithmetic", "natural", "number", "generated", "0", "successor", "operation", "s", "elimination", "rule", "state", "possible", "way", "generate", "natural", "number", "write", "f", "c", "r", "c", "xye", "function", "defined", "primitive", "recursion", "natural", "number", "c", "base", "case", "d", "step", "function", "xye", "alternatively", "lambda", "xye", "map", "value", "y", "previous", "number", "x", "n", "value", "s", "x", "note", "r", "new", "variablebinding", "operator", "variable", "x", "y", "become", "bound", "e", "n", "formation", "gamma", "vdash", "n", "n", "introduction", "gamma", "vdash", "0", "n", "hspace", "2em", "frac", "gamma", "vdash", "n", "gamma", "vdash", "n", "n", "elimination", "frac", "gamma", "x", "n", "vdash", "c", "hspace", "1em", "gamma", "vdash", "c", "n", "hspace", "1em", "gamma", "vdash", "c", "x", "0", "hspace", "1em", "gamma", "n", "z", "c", "x", "vdash", "e", "c", "x", "gamma", "vdash", "r", "c", "yze", "c", "x", "c", "n", "equality", "appropriate", "premise", "begin", "align", "r", "0", "yze", "c", "x", "0", "r", "yze", "e", "z", "r", "yze", "c", "x", "end", "align", "rule", "n", "elimination", "simultaneously", "express", "type", "function", "defined", "primitive", "recursion", "curryhoward", "interpretation", "rule", "mathematical", "induction", "prove", "property", "c", "natural", "number", "x", "induction", "x", "g\u00f6del", "system", "t", "essentially", "intuitionistic", "type", "theory", "type", "former", "n", "rightarrow", "b", "type", "function", "a", "b", "special", "case", "pi", "x", "b", "b", "depend", "x", "a", "since", "dependent", "type", "system", "t", "rule", "simplified", "36", "universe", "small", "type", "martinl\u00f6f", "first", "version", "type", "theory", "martinl\u00f6f", "1971a", "axiom", "stating", "type", "type", "proved", "inconsistent", "girard", "found", "buraliforti", "paradox", "could", "encoded", "theory", "overcome", "pathological", "impredicativity", "still", "retain", "expressivity", "martinl\u00f6f", "introduced", "1972", "universe", "u", "small", "type", "closed", "type", "former", "theory", "except", "contain", "martinl\u00f6f", "1998", "1972", "rule", "u", "formation", "gamma", "vdash", "u", "u", "introduction", "gamma", "vdash", "varnothing", "u", "hspace", "3em", "gamma", "vdash", "1", "u", "frac", "gamma", "vdash", "uhspace", "2em", "gamma", "vdash", "b", "u", "gamma", "vdash", "b", "u", "hspace", "3em", "frac", "gamma", "vdash", "uhspace", "2em", "gamma", "vdash", "b", "u", "gamma", "vdash", "times", "b", "u", "frac", "gamma", "vdash", "uhspace", "2em", "gamma", "vdash", "b", "u", "gamma", "vdash", "rightarrow", "b", "u", "frac", "gamma", "vdash", "uhspace", "2em", "gamma", "x", "vdash", "b", "u", "gamma", "vdash", "sigma", "x", "a", "b", "u", "hspace", "3em", "frac", "gamma", "vdash", "uhspace", "2em", "gamma", "x", "vdash", "b", "u", "gamma", "vdash", "pi", "x", "a", "b", "u", "gamma", "vdash", "n", "u", "u", "elimination", "frac", "gamma", "vdash", "u", "gamma", "vdash", "since", "u", "type", "use", "n", "elimination", "define", "small", "type", "primitive", "recursion", "example", "u", "define", "type", "n", "tuples", "element", "a", "follows", "an", "r", "n1", "xya", "times", "u", "typetheoretic", "universe", "u", "analogous", "grothendieck", "universe", "set", "theory", "set", "set", "closed", "way", "set", "constructed", "zermelofraenkel", "set", "theory", "existence", "grothendieck", "universe", "proved", "usual", "axiom", "zermelofraenkel", "set", "theory", "need", "new", "axiom", "martinl\u00f6f", "1975", "universe", "extended", "countable", "hierarchy", "universe", "u_0", "u_1", "u_2", "cdots", "way", "type", "type", "small", "type", "37", "propositional", "identity", "introduced", "equality", "judgment", "tag", "4", "label", "defeq", "gamma", "vdash", "a", "usually", "called", "definitional", "equality", "decided", "normalizing", "term", "a", "a", "checking", "whether", "normal", "form", "identical", "however", "equality", "judgment", "proposition", "type", "thus", "prove", "judgmental", "equality", "induction", "reason", "need", "introduce", "propositional", "identity", "type", "example", "identity", "type", "natural", "number", "i", "n", "n", "defined", "u", "valued", "primitive", "recursion", "express", "prove", "peano", "axiom", "moreover", "extensional", "equality", "ufnctions", "defined", "i", "nrightarrow", "n", "f", "f", "pi", "x", "n", "i", "n", "f", "x", "f", "x", "38", "axiom", "choice", "theorem", "following", "form", "axiom", "choice", "immediate", "consequence", "bhkinterpretation", "intuitionistic", "quantifier", "easily", "proved", "intuitionistic", "type", "theory", "pi", "x", "sigma", "b", "c", "rightarrow", "sigma", "f", "pi", "x", "a", "b", "c", "f", "x", "reason", "pi", "x", "sigma", "b", "c", "type", "function", "map", "element", "x", "a", "pair", "z", "b", "z", "c", "choice", "function", "f", "obtained", "returning", "first", "component", "b", "pair", "perhaps", "surprising", "intuitionistic", "type", "theory", "directly", "validates", "axiom", "choice", "since", "axiom", "often", "considered", "problematic", "constructive", "point", "view", "possible", "explanation", "state", "affair", "axiom", "choice", "type", "type", "general", "appropriate", "constructive", "approximation", "set", "classical", "sense", "example", "represent", "real", "number", "cauchy", "sequence", "intuitionistic", "type", "theory", "set", "real", "number", "type", "cauchy", "sequence", "type", "cauchy", "sequence", "equiconvergence", "generally", "set", "bishop", "constructive", "mathematics", "represented", "type", "commonly", "called", "preset", "together", "equivalence", "relation", "a", "b", "equipped", "equivalence", "relation", "course", "guarantee", "choice", "function", "f", "extensional", "sense", "map", "equivalent", "element", "equivalent", "element", "failure", "extensional", "axiom", "choice", "see", "martinl\u00f6f", "2009", "analysis", "4", "extension", "41", "logical", "framework", "completes", "description", "core", "version", "intuitionistic", "type", "theory", "close", "martinl\u00f6f", "1998", "1972", "1986", "martinl\u00f6f", "proposed", "reformulation", "intuitionistic", "type", "theory", "see", "nordstr\u00f6m", "peterson", "smith", "1990", "exposition", "purpose", "give", "compact", "formulation", "lambda", "pi", "variable", "binding", "operation", "nowadays", "considered", "main", "version", "theory", "also", "basis", "agda", "proof", "assistant", "1986", "theory", "two", "part", "theory", "type", "logical", "framework", "theory", "set", "small", "type", "remark", "41", "note", "word", "set", "logical", "framework", "coincide", "way", "used", "bishop", "constructive", "mathematics", "avoid", "confusion", "type", "together", "equivalence", "relation", "usually", "called", "setoids", "extensional", "set", "intuitionistic", "type", "theory", "logical", "framework", "two", "type", "former", "pi", "x", "a", "b", "usually", "written", "x", "b", "x", "rightarrow", "b", "logical", "framework", "formulation", "u", "usually", "called", "set", "rule", "pi", "x", "a", "b", "x", "rightarrow", "b", "given", "including", "eta", "conversion", "rule", "u", "set", "also", "except", "logical", "framework", "stipulates", "closure", "pi", "type", "formation", "small", "type", "former", "set", "former", "introduced", "theory", "set", "logical", "framework", "formulation", "formation", "introduction", "elimination", "rule", "expressed", "typing", "new", "constant", "example", "rule", "natural", "number", "become", "begin", "align", "n", "set", "0", "n", "s", "n", "rightarrow", "n", "r", "c", "n", "rightarrow", "set", "rightarrow", "c0", "rightarrow", "x", "n", "rightarrow", "c", "x", "rightarrow", "c", "s", "x", "rightarrow", "c", "n", "rightarrow", "c", "c", "end", "align", "omitted", "common", "context", "gamma", "since", "type", "constant", "closed", "note", "recursion", "operator", "r", "first", "argument", "c", "n", "rightarrow", "set", "unlike", "original", "formulation", "moreover", "equality", "rule", "expressed", "equation", "begin", "align", "r", "c", "d", "e", "0", "c0", "r", "c", "d", "e", "s", "e", "a", "r", "c", "d", "e", "c", "s", "end", "align", "suitable", "assumption", "sequel", "present", "several", "extension", "type", "theory", "keep", "presentation", "uniform", "however", "use", "logical", "framework", "presentation", "type", "theory", "use", "notation", "section", "2", "42", "general", "identity", "type", "former", "mentioned", "identity", "natural", "number", "defined", "primitive", "recursion", "identity", "relation", "type", "also", "defined", "basic", "version", "intuitionistic", "type", "theory", "presented", "section", "2", "however", "martinl\u00f6f", "1975", "extended", "intuitionistic", "type", "theory", "uniform", "primitive", "identity", "type", "former", "i", "type", "rule", "i", "express", "identity", "relation", "inductively", "generated", "proof", "reflexivity", "canonicial", "constant", "called", "r", "note", "r", "coded", "number", "0", "introductory", "presentation", "proofobjects", "23", "elimination", "rule", "identity", "type", "generalization", "identity", "elimination", "predicate", "logic", "introduces", "elimination", "constant", "j", "show", "formulation", "due", "paulinmohring", "1993", "rather", "original", "formulation", "martinl\u00f6f", "1975", "inference", "rule", "following", "i", "formation", "frac", "gamma", "vdash", "hspace", "1em", "gamma", "vdash", "hspace", "1em", "gamma", "vdash", "gamma", "vdash", "i", "i", "introduction", "frac", "gamma", "vdash", "hspace", "1em", "gamma", "vdash", "gamma", "vdash", "r", "i", "i", "elimination", "frac", "gamma", "x", "i", "x", "vdash", "c", "hspace", "1em", "gamma", "vdash", "b", "hspace", "1em", "gamma", "vdash", "c", "i", "b", "hspace", "1em", "gamma", "vdash", "c", "x", "r", "gamma", "vdash", "j", "c", "c", "x", "b", "c", "i", "equality", "appropriate", "assumption", "begin", "align", "j", "r", "end", "align", "note", "c", "depends", "x", "a", "proof", "i", "x", "also", "suppress", "proof", "object", "rule", "i", "elimination", "recover", "rule", "identity", "elimination", "predicate", "logic", "constructing", "model", "type", "theory", "type", "interpreted", "groupoids", "category", "arrow", "isomorphism", "hofmann", "streicher", "1998", "showed", "proved", "intuitionistic", "type", "theory", "proof", "b", "identical", "may", "seem", "incompleteness", "theory", "streicher", "suggested", "new", "axiom", "k", "follows", "proof", "i", "b", "identical", "r", "i", "type", "often", "called", "intensional", "identity", "type", "since", "satisfy", "principle", "function", "extensionality", "intuitionistic", "type", "theory", "intensional", "identity", "type", "also", "often", "called", "intensional", "intuitionistic", "type", "theory", "distinguish", "extensional", "intuitionistic", "type", "theory", "presented", "section", "71", "43", "wellfounded", "tree", "type", "wellfounded", "tree", "form", "w", "x", "a", "b", "introduced", "martinl\u00f6f", "1982", "restricted", "form", "scott", "1970", "element", "w", "x", "a", "b", "tree", "varying", "arbitrary", "branching", "varying", "branching", "type", "b", "indexed", "x", "a", "arbitrary", "b", "arbitrary", "type", "given", "generalized", "inductive", "definition", "since", "wellfounded", "tree", "may", "infinitely", "branching", "think", "w", "x", "a", "b", "free", "term", "algebra", "a", "represents", "term", "constructor", "sup", "a", "possibly", "infinite", "arity", "b", "x", "w", "formation", "frac", "gamma", "vdash", "ahspace", "2em", "gamma", "x", "vdash", "b", "gamma", "vdash", "w", "x", "a", "b", "w", "introduction", "frac", "gamma", "vdash", "hspace", "2em", "gamma", "b", "x", "a", "vdash", "b", "wx", "a", "b", "gamma", "vdash", "sup", "yb", "w", "x", "a", "b", "omit", "rule", "w", "elimination", "w", "equality", "adding", "wellfounded", "tree", "intuitionistic", "type", "theory", "increase", "prooftheoretic", "strength", "significantly", "setzer", "1998", "44", "iterative", "set", "czf", "important", "application", "wellfounded", "tree", "aczel", "1978", "construction", "typetheoretic", "model", "constructive", "zermelo", "fraenkel", "set", "theory", "end", "defines", "type", "iterative", "set", "v", "w", "x", "u", "x", "let", "u", "small", "type", "x", "avdash", "m", "indexed", "family", "iterative", "set", "sup", "xm", "suggestive", "notation", "mmid", "x", "a", "iterative", "set", "paraphrase", "iterative", "set", "family", "iterative", "set", "indexed", "small", "type", "note", "iterative", "set", "datastructure", "sense", "functional", "programming", "possibly", "infinitely", "branching", "wellfounded", "tree", "different", "tree", "may", "represent", "set", "therefore", "need", "define", "notion", "extensional", "equality", "iterative", "set", "disregard", "repetition", "order", "element", "definition", "formally", "similar", "definition", "bisimulation", "process", "process", "algebra", "type", "v", "extensional", "equality", "viewed", "constructive", "typetheoretic", "model", "cumulative", "hierarchy", "see", "entry", "set", "theory", "constructive", "intuitionistic", "zf", "information", "czf", "45", "inductive", "definition", "notion", "inductive", "definition", "fundamental", "intuitionistic", "type", "theory", "primitive", "notion", "set", "theory", "derived", "notion", "inductively", "defined", "set", "defined", "impredicatively", "smallest", "set", "closed", "rule", "however", "intuitionistic", "type", "theory", "inductive", "definition", "considered", "predicative", "viewed", "built", "inductive", "definability", "type", "inherent", "meaning", "explanation", "intuitionistic", "type", "theory", "shall", "discus", "next", "section", "fact", "intuitionistic", "type", "theory", "described", "briefly", "theory", "inductive", "recursive", "inductiverecursive", "definition", "based", "framework", "lambda", "calculus", "dependent", "type", "already", "seen", "type", "natural", "number", "type", "wellfounded", "tree", "example", "type", "given", "inductive", "definition", "natural", "number", "example", "ordinary", "finitary", "inductive", "definition", "wellfounded", "tree", "generalized", "possibly", "infinitary", "inductive", "definition", "introduction", "rule", "describe", "element", "type", "inductively", "generated", "elimination", "equality", "rule", "describe", "function", "type", "defined", "structural", "recursion", "way", "element", "generated", "according", "proposition", "type", "principle", "elimination", "rule", "simultaneously", "rule", "proof", "structural", "induction", "way", "element", "generated", "type", "former", "0", "1", "times", "rightarrow", "sigma", "pi", "interpret", "logical", "constant", "intuitionistic", "predicate", "logic", "example", "degenerate", "inductive", "definition", "even", "identity", "type", "intensional", "intuitionistic", "type", "theory", "inductively", "generated", "type", "proof", "generated", "reflexivity", "axiom", "elimination", "rule", "express", "proof", "pattern", "matching", "proof", "reflexivity", "common", "structure", "rule", "type", "former", "captured", "general", "schema", "inductive", "definition", "dybjer", "1991", "general", "schema", "many", "useful", "instance", "example", "type", "list", "list", "element", "type", "a", "following", "introduction", "rule", "gamma", "vdash", "nil", "list", "hspace", "3em", "frac", "gamma", "vdash", "ahspace", "2em", "gamma", "vdash", "list", "gamma", "vdash", "cons", "list", "useful", "instance", "type", "binary", "tree", "tree", "infinitely", "branching", "tree", "brouwer", "ordinal", "second", "higher", "number", "class", "general", "schema", "cover", "inductively", "defined", "type", "also", "inductively", "defined", "family", "type", "identity", "relation", "mentioned", "type", "an", "n", "tuples", "type", "a", "defined", "primitive", "recursion", "n", "also", "defined", "inductive", "family", "following", "introduction", "rule", "gamma", "vdash", "nil", "a0", "hspace", "3em", "frac", "gamma", "vdash", "ahspace", "2em", "gamma", "vdash", "an", "gamma", "vdash", "cons", "a", "s", "n", "schema", "inductive", "type", "family", "typetheoretic", "generalization", "schema", "iterated", "inductive", "definition", "predicate", "logic", "formulated", "natural", "deduction", "presented", "martinl\u00f6f", "1971b", "paper", "immediately", "preceded", "martinl\u00f6f", "first", "version", "intuitionistic", "type", "theory", "conceptually", "technically", "forerunner", "development", "theory", "essential", "feature", "proof", "assistant", "agda", "coq", "enables", "user", "define", "inductive", "type", "family", "listing", "introduction", "rule", "type", "constructor", "much", "like", "typed", "functional", "programming", "language", "haskell", "different", "dialect", "ml", "however", "unlike", "programming", "language", "schema", "inductive", "definition", "intuitionistic", "type", "theory", "enforces", "restriction", "amounting", "wellfoundedness", "element", "defined", "type", "46", "inductiverecursive", "definition", "already", "mentioned", "two", "main", "definition", "principle", "intuitionistic", "type", "theory", "inductive", "definition", "type", "set", "primitive", "structural", "definition", "function", "recursion", "way", "element", "type", "inductively", "generated", "usually", "inductive", "definition", "set", "come", "first", "formation", "introduction", "rule", "make", "reference", "elimination", "rule", "however", "definition", "intuitionistic", "type", "theory", "case", "simultaneously", "inductively", "generate", "type", "function", "type", "defined", "structural", "recursion", "definition", "simultaneously", "inductiverecursive", "first", "example", "inductiverecursive", "definition", "alternative", "formulation", "\u00e0", "la", "tarski", "universe", "small", "type", "presented", "universe", "formulated", "\u00e0", "la", "russell", "notational", "distinction", "element", "u", "corresponding", "type", "a", "universe", "\u00e0", "la", "tarski", "distinction", "example", "element", "hat", "n", "u", "corresponding", "type", "n", "element", "hat", "n", "called", "code", "n", "elimination", "rule", "universe", "\u00e0", "la", "tarski", "frac", "gamma", "vdash", "u", "gamma", "vdash", "t", "express", "function", "t", "map", "code", "a", "corresponding", "type", "equality", "rule", "define", "correspondence", "example", "t", "hat", "n", "n", "see", "u", "inductively", "generated", "one", "introduction", "rule", "small", "type", "former", "t", "defined", "recursion", "small", "type", "former", "simultaneous", "inductiverecursive", "nature", "definition", "becomes", "apparent", "rule", "pi", "example", "introduction", "rule", "frac", "gamma", "vdash", "uhspace", "2em", "gamma", "x", "t", "vdash", "b", "u", "gamma", "vdash", "hat", "pi", "x", "a", "b", "u", "corresponding", "equality", "rule", "t", "hat", "pi", "x", "a", "b", "pi", "x", "t", "t", "b", "note", "introduction", "rule", "u", "refers", "t", "hence", "u", "t", "must", "defined", "simultaneously", "number", "universe", "construction", "defined", "inductiverecursively", "universe", "hierarchy", "superuniverses", "palmgren", "1998", "rathjen", "griffor", "palmgren", "1998", "mahlo", "universe", "setzer", "2000", "universe", "analogue", "certain", "large", "cardinal", "set", "theory", "inaccessible", "hyperinaccessible", "mahlo", "cardinal", "example", "inductiverecursive", "definition", "include", "informal", "definition", "computability", "predicate", "used", "martinl\u00f6f", "early", "normalization", "proof", "intuitionistic", "type", "theory", "martinl\u00f6f", "1998", "1972", "also", "many", "natural", "example", "small", "inductiverecursive", "definition", "recursively", "defined", "decoding", "function", "return", "element", "type", "rather", "type", "large", "class", "inductiverecursive", "definition", "including", "captured", "general", "schema", "dybjer", "2000", "extends", "schema", "inductive", "definition", "mentioned", "shown", "setzer", "intuitionistic", "type", "theory", "class", "inductiverecursive", "definition", "strong", "prooftheoretically", "dybjer", "setzer", "2003", "however", "proposed", "recent", "unpublished", "work", "setzer", "possible", "increase", "strength", "theory", "even", "define", "universe", "autonomous", "mahlo", "universe", "analogue", "even", "larger", "cardinal", "5", "meaning", "explanation", "consistency", "intuitionistic", "type", "theory", "relative", "set", "theory", "proved", "model", "construction", "perhaps", "simplest", "method", "interpretation", "whereby", "typetheoretic", "concept", "given", "corresponding", "settheoretic", "meaning", "outlined", "section", "23", "example", "type", "function", "rightarrow", "b", "interpreted", "set", "function", "settheoretic", "sense", "set", "denoted", "a", "set", "denoted", "b", "interpret", "u", "need", "settheoretic", "universe", "closed", "settheoretic", "analogue", "type", "constructor", "universe", "proved", "exist", "assume", "existence", "inaccessible", "cardinal", "kappa", "interpret", "u", "v_kappa", "cumulative", "hierarchy", "alternative", "realizability", "model", "intensional", "type", "theory", "model", "term", "normal", "form", "latter", "also", "used", "proving", "decidability", "judgment", "theory", "mathematical", "model", "prove", "consistency", "relative", "classical", "set", "theory", "whatever", "metatheory", "using", "possible", "convinced", "consistency", "theory", "direct", "way", "called", "simple", "minded", "consistency", "martinl\u00f6f", "1984", "fact", "way", "explain", "mean", "judgment", "correct", "direct", "premathematical", "way", "given", "know", "judgment", "mean", "convinced", "inference", "rule", "theory", "valid", "answer", "problem", "proposed", "martinl\u00f6f", "1979", "paper", "constructive", "mathematics", "computer", "programming", "martinl\u00f6f", "1982", "elaborated", "later", "numerous", "lecture", "note", "see", "example", "martinl\u00f6f", "1984", "1987", "meaning", "explanation", "intuitionistic", "type", "theory", "also", "referred", "direct", "semantics", "intuitive", "semantics", "informal", "semantics", "standard", "semantics", "syntacticosemantical", "approach", "meaning", "theory", "meaning", "theory", "follows", "wittgensteinian", "meaningasuse", "tradition", "meaning", "based", "rule", "building", "object", "introduction", "rule", "type", "computation", "rule", "elimination", "rule", "computing", "object", "difference", "much", "wittgensteinian", "tradition", "also", "higher", "order", "type", "like", "n", "rightarrow", "n", "given", "meaning", "using", "rule", "explain", "meaning", "judgment", "must", "first", "know", "term", "judgment", "computed", "canonical", "form", "formation", "rule", "explain", "correct", "canonical", "type", "built", "introduction", "rule", "explain", "correct", "canonical", "object", "canonical", "type", "built", "quote", "martinl\u00f6f", "1982", "canonical", "type", "a", "defined", "prescribing", "canonical", "object", "type", "a", "formed", "well", "two", "equal", "canonical", "object", "type", "a", "formed", "limitation", "prescription", "except", "relation", "equality", "defines", "canonical", "object", "type", "a", "must", "reflexive", "symmetric", "transitive", "word", "canonical", "type", "equipped", "equivalence", "relation", "canonical", "object", "shall", "give", "simplified", "form", "meaning", "explanation", "equivalence", "relation", "extensional", "identity", "object", "spite", "premathematical", "nature", "meaning", "theory", "technical", "aspect", "captured", "mathematical", "model", "construction", "similar", "kleene", "realizability", "interpretation", "intuitionistic", "logic", "see", "next", "section", "realizers", "term", "type", "theory", "rather", "number", "realizers", "used", "kleene", "51", "computation", "canonical", "form", "meaning", "judgment", "explained", "term", "computation", "type", "term", "judgment", "computation", "stop", "canonical", "form", "reached", "canonical", "form", "mean", "term", "outermost", "form", "constructor", "introduction", "form", "canonical", "form", "used", "lazy", "functional", "programming", "example", "haskell", "language", "purpose", "illustration", "consider", "meaning", "explanation", "three", "type", "former", "n", "pi", "x", "ab", "u", "context", "free", "grammar", "term", "fragment", "intuitionistic", "type", "theory", "follows", "0", "mid", "s", "mid", "lambda", "xa", "mid", "n", "mid", "pi", "x", "aa", "mid", "u", "mid", "r", "xxa", "mid", "a", "canonical", "term", "generated", "following", "grammar", "v", "0", "mid", "s", "mid", "lambda", "xa", "mid", "n", "mid", "pi", "x", "aa", "mid", "u", "a", "range", "arbitrary", "necessarily", "canonical", "term", "note", "s", "canonical", "even", "a", "explain", "term", "computed", "canonical", "form", "introduce", "relation", "rightarrow", "v", "closed", "term", "a", "canonical", "form", "value", "v", "given", "following", "computation", "rule", "frac", "c", "rightarrow", "0hspace", "1em", "rightarrow", "v", "r", "c", "xye", "rightarrow", "v", "hspace", "2em", "frac", "c", "rightarrow", "s", "hspace", "1em", "e", "x", "r", "xye", "rightarrow", "v", "r", "c", "xye", "rightarrow", "v", "frac", "frightarrow", "lambda", "xbhspace", "1em", "b", "x", "rightarrow", "v", "f", "rightarrow", "v", "addition", "rule", "v", "rightarrow", "v", "stating", "canonical", "term", "value", "52", "meaning", "categorical", "judgment", "categorical", "judgment", "judgment", "context", "empty", "free", "variable", "meaning", "categorical", "judgment", "vdash", "a", "a", "canonical", "type", "value", "fragment", "mean", "either", "following", "hold", "rightarrow", "n", "rightarrow", "u", "rightarrow", "pi", "x", "b", "c", "furthermore", "vdash", "b", "x", "b", "vdash", "c", "meaning", "categorical", "judgment", "vdash", "a", "a", "canonical", "term", "canonical", "type", "a", "value", "fragment", "mean", "either", "following", "hold", "rightarrow", "n", "either", "rightarrow", "0", "rightarrow", "s", "b", "vdash", "b", "n", "rightarrow", "u", "either", "rightarrow", "n", "rightarrow", "pi", "x", "b", "c", "furthermore", "vdash", "b", "u", "x", "b", "vdash", "c", "u", "rightarrow", "pi", "x", "b", "c", "rightarrow", "lambda", "xc", "x", "b", "vdash", "c", "c", "meaning", "categorical", "judgment", "vdash", "a", "a", "a", "canonical", "type", "value", "fragment", "mean", "either", "following", "hold", "rightarrow", "n", "rightarrow", "n", "rightarrow", "u", "rightarrow", "u", "rightarrow", "pi", "x", "b", "c", "rightarrow", "pi", "x", "b", "c", "furthermore", "vdash", "b", "b", "x", "b", "vdash", "c", "c", "meaning", "categorical", "judgment", "vdash", "a", "explained", "similar", "way", "tacit", "assumption", "meaning", "explanation", "repeated", "computation", "canonical", "form", "wellfounded", "example", "natural", "number", "result", "finitely", "many", "computation", "successor", "function", "s", "ended", "0", "computation", "result", "infinitely", "many", "computation", "s", "natural", "number", "intuitionistic", "type", "theory", "however", "extension", "type", "theory", "example", "partial", "type", "theory", "nonstandard", "type", "theory", "infinite", "computation", "occur", "see", "section", "73", "justify", "rule", "theory", "present", "meaning", "explanation", "suffice", "53", "meaning", "hypothetical", "judgment", "according", "martinl\u00f6f", "1982", "meaning", "hypothetical", "judgment", "reduced", "meaning", "categorical", "judgment", "substituting", "closed", "term", "appropriate", "type", "free", "variable", "example", "meaning", "x_1", "a_1", "ldots", "x_n", "a_n", "vdash", "a", "categorical", "judgment", "vdash", "x_1", "a_1", "ldots", "x_n", "a_n", "x_1", "a_1", "ldots", "x_n", "a_n", "valid", "whenever", "categorical", "judgment", "vdash", "a_1", "a_1", "ldots", "vdash", "a_n", "x_1", "a_1", "ldots", "x_", "n1", "a_", "n1", "a_n", "x_1", "a_1", "ldots", "x_", "n1", "a_", "n1", "valid", "6", "mathematical", "model", "61", "categorical", "model", "611", "hyperdoctrines", "curry", "correspondence", "proposition", "type", "extended", "predicate", "logic", "late", "1960s", "howard", "1980", "de", "bruijn", "1970", "around", "time", "lawvere", "developed", "related", "idea", "categorical", "logic", "particular", "proposed", "notion", "hyperdoctrine", "lawvere", "1970", "categorical", "model", "typed", "predicate", "logic", "hyperdoctrine", "indexed", "category", "p", "t", "op", "rightarrow", "mathbf", "cat", "t", "category", "object", "represent", "type", "arrow", "represent", "term", "a", "type", "fibre", "p", "category", "proposition", "depending", "variable", "x", "a", "arrow", "category", "proof", "q", "vdash", "r", "thought", "proofobjects", "moreover", "since", "indexed", "category", "arrow", "t", "a", "b", "reindexing", "functor", "p", "b", "rightarrow", "p", "representing", "substitution", "t", "variable", "b", "category", "p", "assumed", "cartesian", "closed", "conjunction", "implication", "modelled", "product", "exponential", "category", "quantifier", "exists", "forall", "modelled", "left", "right", "adjoints", "reindexing", "functor", "moreover", "lawvere", "added", "structure", "hyperdoctrines", "model", "identity", "proposition", "left", "adjoints", "diagonal", "functor", "comprehension", "schema", "612", "contextual", "category", "category", "attribute", "category", "family", "lawvere", "definition", "hyperdoctrines", "preceded", "intuitionistic", "type", "theory", "go", "way", "identifying", "proposition", "type", "nevertheless", "lawvere", "influenced", "scott", "1970", "work", "constructive", "validity", "somewhat", "preliminary", "precursor", "intuitionistic", "type", "theory", "martinl\u00f6f", "1998", "1972", "presented", "definite", "formulation", "theory", "first", "work", "categorical", "model", "presented", "cartmell", "1978", "notion", "category", "attribute", "contextual", "category", "cartmell", "1986", "however", "define", "structure", "instead", "closely", "related", "category", "family", "dybjer", "1996", "formulated", "directly", "model", "variablefree", "version", "formulation", "intuitionistic", "type", "theory", "explicit", "substitution", "martinl\u00f6f", "1995", "category", "family", "functor", "c", "op", "rightarrow", "mathbf", "fam", "mathbf", "fam", "category", "family", "set", "category", "c", "category", "context", "substitution", "gamma", "object", "c", "context", "gamma", "family", "term", "type", "a", "depend", "variable", "gamma", "gamma", "arrow", "c", "representing", "substitution", "arrow", "part", "functor", "represents", "substitution", "gamma", "type", "term", "category", "family", "also", "terminal", "object", "notion", "context", "comprehension", "reminiscent", "lawvere", "comprehension", "hyperdoctrines", "terminal", "object", "capture", "rule", "empty", "context", "empty", "substitution", "context", "comprehension", "capture", "rule", "extending", "context", "substitution", "projection", "capturing", "weakening", "assumption", "last", "variable", "category", "family", "algebraic", "structure", "model", "general", "rule", "dependent", "type", "theory", "come", "rule", "specific", "type", "former", "pi", "sigma", "identity", "type", "universe", "etc", "order", "model", "specific", "typeformer", "corresponding", "extra", "structure", "need", "added", "613", "locally", "cartesian", "closed", "category", "categorical", "perspective", "abovementioned", "structure", "may", "appear", "somewhat", "special", "ad", "hoc", "regular", "structure", "give", "rise", "model", "intuitionistic", "type", "theory", "locally", "cartesian", "closed", "category", "category", "terminal", "object", "slice", "category", "cartesian", "closed", "shown", "pullback", "functor", "left", "right", "adjoint", "representing", "sigma", "pi", "types", "respectively", "locally", "cartesian", "closed", "category", "correspond", "intuitionistic", "type", "theory", "extensional", "identity", "type", "sigma", "pi", "types", "seely", "1984", "clairambault", "dybjer", "2014", "remarked", "correspondence", "intuitionistic", "type", "theory", "somewhat", "indirect", "since", "coherence", "problem", "sense", "category", "theory", "need", "solved", "problem", "locally", "cartesian", "closed", "category", "type", "substituion", "represented", "pullback", "defined", "isomorphism", "see", "curien", "1993", "hofmann", "1994", "62", "settheoretic", "model", "intuitionistic", "type", "theory", "possible", "framework", "constructive", "mathematics", "bishop", "sense", "constructive", "mathematics", "compatible", "classical", "mathematics", "constructive", "proof", "bishop", "sense", "directly", "understood", "proof", "classical", "logic", "formal", "way", "understand", "constructing", "settheoretic", "model", "intuitionistic", "type", "theory", "concept", "type", "theory", "interpreted", "corresponding", "concept", "zermelofraenkel", "set", "theory", "example", "type", "interpreted", "set", "type", "function", "rightarrow", "b", "interpreted", "set", "function", "settheoretic", "sense", "set", "representing", "a", "set", "representing", "b", "type", "natural", "number", "interpreted", "set", "natural", "number", "interpretation", "identity", "type", "sigma", "pi", "types", "already", "discussed", "introduction", "already", "mentioned", "interpret", "typetheoretic", "universe", "need", "inaccessible", "cardinal", "621", "model", "czf", "shown", "interpretation", "outlined", "carried", "aczel", "constructive", "set", "theory", "czf", "hence", "depend", "classical", "logic", "impredicative", "feature", "set", "theory", "63", "realizability", "model", "settheoretic", "model", "criticized", "ground", "model", "type", "function", "set", "settheoretic", "function", "spite", "fact", "function", "type", "theory", "always", "computable", "whereas", "settheoretic", "function", "may", "remedy", "problem", "one", "instead", "construct", "realizability", "model", "whereby", "one", "start", "set", "realizers", "one", "follow", "kleene", "numerical", "realizability", "closely", "function", "realized", "code", "turing", "machine", "alternatively", "one", "let", "realizers", "term", "lambda", "calculus", "combinatory", "logic", "possibly", "extended", "appropriate", "constant", "type", "represented", "set", "realizers", "often", "partial", "equivalence", "relation", "set", "realizers", "partial", "equivalence", "relation", "convenient", "way", "represent", "type", "notion", "equality", "many", "variation", "theme", "realizability", "model", "model", "tacitly", "assume", "set", "theory", "metatheory", "aczel", "1980", "beeson", "1985", "whereas", "others", "explictly", "assume", "constructive", "metatheory", "smith", "1984", "realizability", "model", "also", "model", "extensional", "version", "intuitionistic", "type", "theory", "martinl\u00f6f", "1982", "presented", "section", "71", "64", "model", "normal", "form", "typechecking", "intuitionistic", "type", "theory", "type", "welltyped", "term", "normal", "form", "consequence", "normal", "form", "property", "judgment", "decidable", "example", "given", "correct", "context", "gamma", "correct", "type", "a", "possibly", "illtyped", "term", "a", "algorithm", "deciding", "whether", "gamma", "vdash", "a", "typechecking", "algorithm", "key", "component", "proofassistants", "intensional", "type", "theory", "agda", "correctness", "normal", "form", "property", "expressed", "model", "normal", "form", "context", "type", "term", "interpreted", "respective", "normal", "form", "7", "variant", "theory", "71", "extensional", "type", "theory", "extensional", "intuitionistic", "type", "theory", "martinl\u00f6f", "1982", "rule", "i", "elimination", "i", "equality", "general", "identity", "type", "replaced", "following", "two", "rule", "frac", "gammavdash", "c", "i", "gamma", "vdash", "aa", "hspace", "3em", "frac", "gammavdash", "c", "gammavdash", "c", "r", "i", "first", "cause", "distinction", "propositional", "judgmental", "equality", "disappear", "second", "force", "identity", "proof", "unique", "unlike", "rule", "intensional", "identity", "type", "former", "rule", "extensional", "identity", "type", "fit", "schema", "inductively", "defined", "type", "mentioned", "rule", "however", "justified", "meaning", "explanation", "martinl\u00f6f", "1982", "categorical", "judgment", "vdash", "c", "i", "valid", "iff", "c", "rightarrow", "r", "judgment", "vdash", "a", "valid", "however", "rule", "make", "possible", "define", "term", "without", "normal", "form", "since", "typechecking", "algorithm", "relies", "computation", "normal", "form", "type", "longer", "work", "extensional", "type", "theory", "see", "castellan", "clairambault", "dybjer", "2015", "hand", "certain", "construction", "available", "intensional", "type", "theory", "possible", "extensional", "type", "theory", "example", "function", "extensionality", "pi", "x", "i", "b", "f", "x", "f", "x", "rightarrow", "i", "pi", "x", "ab", "f", "f", "theorem", "another", "example", "w", "types", "used", "encoding", "inductively", "defined", "type", "extensional", "type", "theory", "example", "brouwer", "ordinal", "second", "higher", "number", "class", "defined", "special", "instance", "w", "type", "martinl\u00f6f", "1984", "generally", "shown", "inductively", "defined", "type", "given", "strictly", "positive", "type", "operator", "represented", "instance", "wellfounded", "tree", "dybjer", "1997", "72", "univalent", "foundation", "homotopy", "type", "theory", "univalent", "foundation", "refer", "voevodsky", "programme", "new", "foundation", "mathematics", "based", "intuitionistic", "type", "theory", "employing", "idea", "homotopy", "theory", "every", "type", "a", "considered", "space", "identity", "type", "i", "b", "space", "path", "point", "a", "point", "b", "a", "iterated", "identity", "type", "represent", "higher", "homotopies", "eg", "i", "i", "b", "f", "g", "space", "homotopies", "f", "g", "notion", "ordinary", "set", "thought", "discrete", "space", "a", "path", "i", "b", "trivial", "loop", "origin", "idea", "remarkable", "discovery", "hofmann", "streicher", "1998", "axiom", "intensional", "type", "theory", "force", "proof", "identity", "equal", "path", "need", "trivial", "shown", "model", "construction", "type", "interpreted", "groupoid", "connection", "identity", "type", "notion", "homotopy", "theory", "higher", "category", "subsequently", "discovered", "awodey", "warren", "2009", "lumsdaine", "2010", "van", "den", "berg", "garner", "2011", "voevodsky", "realized", "whole", "intensional", "intuitionistic", "type", "theory", "could", "modelled", "wellknown", "category", "studied", "homotopy", "theory", "namely", "kan", "simplicial", "set", "inspired", "model", "introduced", "univalence", "axiom", "universe", "u", "small", "type", "axiom", "state", "substitution", "map", "associated", "j", "operator", "i", "u", "b", "longrightarrow", "t", "cong", "t", "b", "equivalence", "equivalence", "cong", "refers", "general", "notion", "equivalence", "higher", "dimensional", "object", "sequence", "equal", "element", "isomorphic", "set", "equivalent", "groupoids", "biequivalent", "bigroupoids", "etc", "univalence", "axiom", "express", "everything", "preserved", "equivalence", "thereby", "realizing", "informal", "categorical", "slogan", "categorical", "construction", "preserved", "isomorphism", "generalization", "construction", "category", "preserved", "equivalence", "category", "etc", "axiom", "univalence", "originally", "justified", "voevodsky", "simplical", "set", "model", "model", "however", "constructive", "bezem", "coquand", "huber", "2014", "2013", "recently", "proposed", "model", "kan", "cubical", "set", "although", "univalent", "foundation", "concern", "preservation", "mathematical", "structure", "general", "strongly", "inspired", "category", "theory", "application", "within", "homotopy", "theory", "particularly", "actively", "investigated", "intensional", "type", "theory", "extended", "univalence", "axiom", "called", "higher", "inductive", "type", "therefore", "also", "called", "homotopy", "type", "theory", "refer", "entry", "type", "theory", "detail", "73", "partial", "nonstandard", "type", "theory", "intuitionistic", "type", "theory", "intended", "model", "brouwer", "notion", "free", "choice", "sequence", "although", "lawlike", "choice", "sequence", "modelled", "function", "n", "however", "extension", "theory", "incorporate", "choice", "sequence", "namely", "partial", "type", "theory", "nonstandard", "type", "theory", "martinl\u00f6f", "1990", "type", "partial", "type", "theory", "interpreted", "scott", "domain", "martinl\u00f6f", "1986", "palmgren", "stoltenberghansen", "1990", "palmgren", "1991", "way", "type", "n", "contains", "infinite", "number", "infty", "interpreted", "however", "partial", "type", "theory", "type", "inhabited", "least", "element", "bot", "thus", "proposition", "type", "principle", "maintained", "nonstandard", "type", "theory", "incorporates", "nonstandard", "element", "infinite", "number", "infty", "n", "without", "inhabiting", "type", "74", "impredicative", "type", "theory", "inconsistent", "version", "intuitionistic", "type", "theory", "martinl\u00f6f", "1971a", "based", "strongly", "impredicative", "axiom", "type", "type", "however", "coquand", "huet", "1988", "showed", "calculus", "construction", "powerful", "impredicative", "consistent", "version", "type", "theory", "theory", "universe", "u", "usually", "called", "bf", "prop", "theory", "closed", "following", "formation", "rule", "cartesian", "product", "family", "type", "frac", "gamma", "vdash", "hspace", "2em", "gamma", "x", "vdash", "b", "u", "gamma", "vdash", "pi", "x", "a", "b", "u", "rule", "general", "rule", "constructing", "small", "cartesian", "product", "family", "small", "type", "intuitionistic", "type", "theory", "since", "quantify", "arbitrary", "type", "a", "including", "u", "small", "type", "say", "u", "impredicative", "since", "construct", "new", "element", "quantifying", "element", "even", "element", "constructed", "motivation", "theory", "inductively", "defined", "type", "family", "type", "become", "definable", "term", "impredicative", "quantification", "example", "type", "natural", "number", "defined", "type", "church", "numeral", "n", "pi", "x", "u", "x", "rightarrow", "x", "rightarrow", "x", "rightarrow", "x", "u", "impredicative", "definition", "since", "small", "type", "constructed", "quantification", "small", "type", "similarly", "define", "identity", "type", "impredicative", "quantification", "i", "pi", "x", "rightarrow", "u", "x", "rightarrow", "x", "u", "leibniz", "definition", "equality", "a", "a", "equal", "iff", "satisfy", "property", "ranged", "x", "unlike", "intuitionistic", "type", "theory", "function", "type", "impredicative", "type", "interpreted", "settheoretically", "straightfoward", "way", "see", "reynolds", "1984", "75", "proof", "assistant", "1979", "martinl\u00f6f", "wrote", "paper", "constructive", "mathematics", "computer", "programming", "explained", "intuitionistic", "type", "theory", "programming", "language", "also", "used", "formal", "foundation", "constructive", "mathematics", "shortly", "interactive", "proof", "system", "help", "user", "derive", "valid", "judgment", "theory", "called", "proof", "assistant", "developed", "one", "first", "system", "nuprl", "system", "prl", "group", "1986", "based", "extensional", "type", "theory", "similar", "martinl\u00f6f", "1982", "system", "based", "version", "intensional", "type", "theory", "go", "back", "typechecker", "impredicative", "calculus", "construction", "written", "around", "1984", "coquand", "huet", "led", "coq", "system", "based", "calculus", "inductive", "construction", "paulinmohring", "1993", "theory", "extends", "calculus", "construction", "primitive", "inductive", "type", "family", "encoding", "pure", "calculus", "construction", "found", "inconvenient", "since", "full", "elimination", "rule", "could", "derived", "instead", "postulated", "also", "remark", "calculus", "inductive", "construction", "subsystem", "predicative", "calculus", "inductive", "construction", "follows", "principle", "martinl\u00f6f", "intuitionistic", "type", "theory", "agda", "another", "proof", "assistant", "based", "logical", "framework", "formulation", "intuitionistic", "type", "theory", "add", "numerous", "feature", "inspired", "practical", "programming", "language", "norell", "2008", "intensional", "theory", "decidable", "judgment", "typechecker", "similar", "coq", "however", "contrast", "coq", "based", "martinl\u00f6f", "predicative", "intuitionistic", "type", "theory", "several", "system", "based", "either", "calculus", "construction", "lego", "matita", "lean", "intuitionistic", "type", "theory", "epigram", "idris", "see", "pollack", "1994", "asperti", "et", "al", "2011", "de", "moura", "et", "al", "2015", "mcbride", "mckinna", "2004", "brady", "2011"]}