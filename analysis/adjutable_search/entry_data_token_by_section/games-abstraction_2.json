{
    "main_text": "Introduction || Program equivalence and full abstraction\n1.3 Program equivalence and full abstraction\n\nThe existence of an interpretation of a programming language \\({L}\\)\ninduces in a standard way an equivalence of program\nphrases:\n\n\nDefinition 1.1 (Denotational equivalence). Given any\ntwo program phrases \\(e,e'\\), they are denotationally\nequivalent, written \\(e \\simeq_{\\mathcal{M}}e'\\), when\n\\({\\mathcal{M}}(e) = {\\mathcal{M}}(e')\\).\n\n\nIf \\({\\mathcal{M}}\\) is compositional, then \\({\\simeq_{\\mathcal{M}}}\\)\nis a congruence over the algebra of programs, whose derived\noperations, those obtained by composition of operations of the\nsignature, are called contexts. A context \\(C\\blbr\\)\nrepresents a program phrase with a \u201chole\u201d that can be\nfilled by program phrases \\(e\\) of appropriate type to yield the\nprogram phrase \\(C[e]\\). By means of contexts we can characterize\neasily the compositionality of a semantic mapping:\n\n\nProposition 1.1. If \\({\\mathcal{M}}\\) is\ncompositional, then for all phrases \\(e,e'\\) and all contexts\n\\(C\\blbr\\): \n\n\\[\\tag{1}\\label{compositionality}{e \\simeq_{\\mathcal{M}} e'} \\Rightarrow {C[e] \\simeq_{\\mathcal{M}} C[e']}.\\]\n\n\nThis formulation highlights another valuable aspect of\ncompositionality, namely the referentially transparency of\nall contexts, equivalently their extensionality:\ndenotationally equivalent phrases can be substituted in any context\nleaving unchanged the denotation of the resulting phrase. The\nimplication (\\(\\ref{compositionality}\\)) states, in particular, that\n\\({\\simeq_{\\mathcal{M}}}\\) is a congruence. In order to compare\ndenotational and operational congruence, therefore, we must carve a\ncongruence out of the naive operational equivalence defined by setting\n\\(e \\sim e'\\) if and only if \\({\\mathcal{O}}(e) = {\\mathcal{O}}(e')\\).\nThis can be done by exploiting program contexts \\(C\\blbr\\),\nrepresenting a program with a \u201chole\u201d that can be filled by\nprogram phrases \\(e\\) of suitable type to yield a complete program\n\\(C[e]\\).\n\n\nDefinition 1.2 (Observational equivalence) Given any\ntwo program phrases \\(e,e'\\), they are observational\nequivalent, written \\(e \\simeq_{\\mathcal{O}}e'\\), when, for all\nprogram contexts \\(C\\blbr\\) and all program values \\(v\\): \n\n\\[C[e] \\opDownarrow v\\  \\text{ if and only if }\\  C[e'] \\opDownarrow v.\\]\n\n\n\n\nObservational equivalence is then a congruence over the algebra of\nprogram phrases, and in fact it is the largest congruence contained in\n\\(\\sim\\). From the general point of view of the account of Milner\n(1975), that we are following closely, the context of a computing\nagent represents one of its possible environments. If we adopt the\nprinciple that \u201cthe overt behavior constitutes the\nwhole meaning of a computing agent\u201d (Milner 1975: 160),\nthen the contexts represents intuitively the observations that we can\nmake on the behavior of the computing agent. In the case of programs,\nthe observables are the values, so observational equivalence\nidentifies phrases that cannot be distinguished by means of\nobservations whose outcomes are distinct values. One consequence of\nMilner\u2019s methodological principle is that a computing agent\nbecomes a \n\n\ntransducer, whose input sequence consists of enquiries by, or\nresponses from, its environment, and whose output sequence consists of\nenquiries of, or responses to, its environment. (Milner 1975: 160)\n\n\n\nA behavior of a computing agent takes then the form of a\ndialogue between the agent and its environment, a metaphor\nthat will be at the heart of the game theoretic approaches to\nsemantics to be discussed in\n Section 3.\n This behavioral stance, which has its roots in the work of engineers\non finite state devices has also been extended by Milner to a\nmethodology of modeling concurrent systems, with the aim \n\n\nto describe a concurrent system fully enough to determine exactly what\nbehaviour will be seen or experienced by an external observer. Thus\nthe approach is thoroughly extensional; two systems are\nindistinguishable if we cannot tell them apart without pulling them\napart. (Milner 1980: 2) \n\n\nIn addition, the roles of system and observer are symmetric, to such\nan extent that \n\n\nwe would like to represent the observer as a machine, then to\nrepresent the composite observer/machine as a machine, then to\nunderstand how this machine behaves for a new observer. (Milner 1980:\n19)\n\n\nWhile observational equivalence is blind to the inner details of a\ncomputing agent but only observes the possible interactions\nwith its environment in which it takes part, denotational equivalence\ntakes as given the internal structure of a computing agent and, in a\ncompositional way, synthesizes its description from those of its\ninternal parts. The notion of full abstraction is precisely intended\nto capture the coincidence of these dual perspectives:\n\n\nDefinition 1.3 (Full abstraction). A denotational\nsemantics \\({\\mathcal{M}}\\) is fully abstract with respect to\nan operational semantics \\({\\mathcal{O}}\\) if the induced equivalences\n\\({\\simeq_{\\mathcal{M}}}\\) and \\({\\simeq_{\\mathcal{O}}}\\)\ncoincide.\n\n\nAs a tool for investigating program properties, full abstraction can\nbe seen as a completeness property of denotational semantics:\nevery equivalence of programs that can be proved operationally, can\nalso be proved by denotational means. Equivalently, a denotational\nproof that two terms are not equivalent will be enough to show that\nthey are not interchangeable in every program context.\n\nFull abstraction also functions as a criterion for assessing a\ntranslation \\(\\vartheta\\) from a language \\({L}_1\\) into a (not\nnecessarily different) language \\({L}_2\\), provided the two languages\nhave the same sets of observables, say Obs (Riecke 1993).\nThen \\(\\vartheta\\) is fully abstract if observational\nequivalence (defined with respect to Obs) of \\(e,e' \\in\n{L}_1\\) is equivalent to observational equivalence of\n\\(\\vartheta(e),\\vartheta(e')\\) in \\({L}_2\\). The existence of fully\nabstract translation between languages can be used to compare their\nexpressive power, following a suggestion of (Mitchell 1993; Riecke\n1993): \\({L}_1\\) is no more expressive than \\({L}_2\\) if there is a\nfully abstract translation of \\({L}_1\\) into \\({L}_2\\).\n\nBefore going on in this general introduction to full abstraction and\nrelated notions in the area of programming languages semantics, in\norder to show the broad relevance of these notions, it is interesting\nto observe that there is a very general setting in which it is\npossible to study the full abstraction property, suggested by recent\ninvestigations on compositionality in natural and artificial languages\nby Hodges (2001) and others. In this setting, full abstraction is\nconnected to the problem of finding a compositional extension of a\nsemantic interpretation of a subset \\(X\\) of a language \\(Y\\) to an\ninterpretation of the whole language, via Frege\u2019s Context\nPrinciple (see Janssen 2001 on this), stating that the meaning of\nan expression in \\(Y\\) is the contribution it makes to the meaning of\nthe expressions of \\(X\\) that contain it. In the original formulation\nby Frege \\(X\\) was the set of sentences and \\(Y\\) the set of all\nexpressions, while in programming theory \\(X\\) is the set of programs,\n\\(Y\\) the set of all program phrases.\n\nA weakening of the definition of full abstraction represents an\nessential adequacy requirement for a denotational interpretation of a\nlanguage:\n\n\nDefinition 1.4 (Computational adequacy). A\ndenotational semantics \\({\\mathcal{M}}\\) is computationally\nadequate with respect to an operational semantics\n\\({\\mathcal{O}}\\) if, for all programs \\(e\\) and all values \\(v\\)\n\n\\[{\\mathcal{O}}(e) = v \\ \\text{ if and only if } \\ {\\mathcal{M}}(e) = {\\mathcal{M}}(v).\\]\n\n \n\n\nAn equivalent formulation of computational adequacy allows to\nhighlight its relation to full abstraction:\n\n\nProposition 1.2. Assume that \\({\\mathcal{M}}\\) is a\ncompositional denotational interpretation such that \\({\\mathcal{O}}(e)\n= v\\) implies \\({\\mathcal{M}}(e) = {\\mathcal{M}}(v)\\). The following\ntwo statements are equivalent:\n\n\\({\\mathcal{M}}\\) is computationally adequate with respect to\n\\({\\mathcal{O}}\\);\nfor any two programs \\(e,e' \\in {\\texttt{Prog}}\\),\n\n\\[e \\simeq_{\\mathcal{M}} e'  \\ \\text{ if and only if } \\  e \\simeq_{\\mathcal{O}} e'\\]\n\n \n\n\n\nWhile the definition of the full abstraction property is\nstraightforward, fully abstract models for very natural examples of\nprogramming languages have proved elusive, giving rise to a full\nabstraction problem. In our discussion of full abstraction we\nshall mainly concentrate on the full abstraction problem for the\nlanguage PCF (Programming language for Computable Functions, Plotkin\n1977), a simply typed \\(\\lambda\\)-calculus with arithmetic primitives\nand a fixed-point combinator at all types proposed in Scott 1969b.\nThis language is important because it includes most of the programming\nfeatures semantic analysis has to cope with: higher-order functions,\ntypes and recursion, with reduction rules that provide an abstract\nsetting for experimenting with several evaluation strategies.\nFurthermore, PCF is also a model for other extensions of simply typed\n\\(\\lambda\\)-calculus used for experimenting with programming features,\nlike the Idealized Algol of Reynolds (1981). The efforts towards a\nsolution of the full abstraction problem for PCF contributed, as a\nside effect, to the systematic development of a set of mathematical\ntechniques for semantical analysis whose usefulness goes beyond their\noriginal applications. We shall describe some of them in\n Section 2,\n devoted to the semantic analysis of PCF based on partially ordered\nstructures, the domains introduced by Dana Scott (1970), that\nwe examine in\n Section 2.3.\n Technical developments in the theory of domains and also in the new\nresearch area focussed on Girard\u2019s linear logic (Girard\n1987) have led to game semantics (Abramsky, Jagadeesan, &\nMalacaria 2000; Hyland & Ong 2000), which is now regarded as a\nviable alternative to standard denotational semantics based on\ndomains. It is to this approach that we shall dedicate\n Section 3\n trying to provide enough details to orient the reader in an extensive\nand still growing literature documenting the applications of games to\nthe interpretation of a wide spectrum of programming language\nfeatures.\n",
    "section_title": "1.3 Program equivalence and full abstraction",
    "entry_title": "Games, Full Abstraction and Full Completeness",
    "hierarchy_title": "Games, Full Abstraction and Full Completeness || Introduction || Program equivalence and full abstraction",
    "tokenized_text": [
        "introduction",
        "program",
        "equivalence",
        "full",
        "abstraction",
        "program",
        "equivalence",
        "full",
        "abstraction",
        "existence",
        "interpretation",
        "programming",
        "language",
        "l",
        "induces",
        "standard",
        "way",
        "equivalence",
        "program",
        "phrase",
        "definition",
        "denotational",
        "equivalence",
        "given",
        "two",
        "program",
        "phrase",
        "e",
        "e",
        "denotationally",
        "equivalent",
        "written",
        "e",
        "simeq_",
        "mathcal",
        "e",
        "mathcal",
        "e",
        "mathcal",
        "e",
        "mathcal",
        "compositional",
        "simeq_",
        "mathcal",
        "congruence",
        "algebra",
        "program",
        "whose",
        "derived",
        "operation",
        "obtained",
        "composition",
        "operation",
        "signature",
        "called",
        "context",
        "context",
        "cblbr",
        "represents",
        "program",
        "phrase",
        "hole",
        "filled",
        "program",
        "phrase",
        "e",
        "appropriate",
        "type",
        "yield",
        "program",
        "phrase",
        "c",
        "e",
        "mean",
        "context",
        "characterize",
        "easily",
        "compositionality",
        "semantic",
        "mapping",
        "proposition",
        "mathcal",
        "compositional",
        "phrase",
        "e",
        "e",
        "context",
        "cblbr",
        "tag",
        "label",
        "compositionality",
        "e",
        "simeq_",
        "mathcal",
        "e",
        "rightarrow",
        "c",
        "e",
        "simeq_",
        "mathcal",
        "c",
        "e",
        "formulation",
        "highlight",
        "another",
        "valuable",
        "aspect",
        "compositionality",
        "namely",
        "referentially",
        "transparency",
        "context",
        "equivalently",
        "extensionality",
        "denotationally",
        "equivalent",
        "phrase",
        "substituted",
        "context",
        "leaving",
        "unchanged",
        "denotation",
        "resulting",
        "phrase",
        "implication",
        "ref",
        "compositionality",
        "state",
        "particular",
        "simeq_",
        "mathcal",
        "congruence",
        "order",
        "compare",
        "denotational",
        "operational",
        "congruence",
        "therefore",
        "must",
        "carve",
        "congruence",
        "naive",
        "operational",
        "equivalence",
        "defined",
        "setting",
        "e",
        "sim",
        "e",
        "mathcal",
        "e",
        "mathcal",
        "e",
        "done",
        "exploiting",
        "program",
        "context",
        "cblbr",
        "representing",
        "program",
        "hole",
        "filled",
        "program",
        "phrase",
        "e",
        "suitable",
        "type",
        "yield",
        "complete",
        "program",
        "c",
        "e",
        "definition",
        "observational",
        "equivalence",
        "given",
        "two",
        "program",
        "phrase",
        "e",
        "e",
        "observational",
        "equivalent",
        "written",
        "e",
        "simeq_",
        "mathcal",
        "e",
        "program",
        "context",
        "cblbr",
        "program",
        "value",
        "v",
        "c",
        "e",
        "opdownarrow",
        "v",
        "text",
        "c",
        "e",
        "opdownarrow",
        "v",
        "observational",
        "equivalence",
        "congruence",
        "algebra",
        "program",
        "phrase",
        "fact",
        "largest",
        "congruence",
        "contained",
        "sim",
        "general",
        "point",
        "view",
        "account",
        "milner",
        "following",
        "closely",
        "context",
        "computing",
        "agent",
        "represents",
        "one",
        "possible",
        "environment",
        "adopt",
        "principle",
        "overt",
        "behavior",
        "constitutes",
        "whole",
        "meaning",
        "computing",
        "agent",
        "milner",
        "context",
        "represents",
        "intuitively",
        "observation",
        "make",
        "behavior",
        "computing",
        "agent",
        "case",
        "program",
        "observables",
        "value",
        "observational",
        "equivalence",
        "identifies",
        "phrase",
        "distinguished",
        "mean",
        "observation",
        "whose",
        "outcome",
        "distinct",
        "value",
        "one",
        "consequence",
        "milner",
        "methodological",
        "principle",
        "computing",
        "agent",
        "becomes",
        "transducer",
        "whose",
        "input",
        "sequence",
        "consists",
        "enquiry",
        "response",
        "environment",
        "whose",
        "output",
        "sequence",
        "consists",
        "enquiry",
        "response",
        "environment",
        "milner",
        "behavior",
        "computing",
        "agent",
        "take",
        "form",
        "dialogue",
        "agent",
        "environment",
        "metaphor",
        "heart",
        "game",
        "theoretic",
        "approach",
        "semantics",
        "discussed",
        "section",
        "behavioral",
        "stance",
        "root",
        "work",
        "engineer",
        "finite",
        "state",
        "device",
        "also",
        "extended",
        "milner",
        "methodology",
        "modeling",
        "concurrent",
        "system",
        "aim",
        "describe",
        "concurrent",
        "system",
        "fully",
        "enough",
        "determine",
        "exactly",
        "behaviour",
        "seen",
        "experienced",
        "external",
        "observer",
        "thus",
        "approach",
        "thoroughly",
        "extensional",
        "two",
        "system",
        "indistinguishable",
        "tell",
        "apart",
        "without",
        "pulling",
        "apart",
        "milner",
        "addition",
        "role",
        "system",
        "observer",
        "symmetric",
        "extent",
        "would",
        "like",
        "represent",
        "observer",
        "machine",
        "represent",
        "composite",
        "observermachine",
        "machine",
        "understand",
        "machine",
        "behaves",
        "new",
        "observer",
        "milner",
        "observational",
        "equivalence",
        "blind",
        "inner",
        "detail",
        "computing",
        "agent",
        "observes",
        "possible",
        "interaction",
        "environment",
        "take",
        "part",
        "denotational",
        "equivalence",
        "take",
        "given",
        "internal",
        "structure",
        "computing",
        "agent",
        "compositional",
        "way",
        "synthesizes",
        "description",
        "internal",
        "part",
        "notion",
        "full",
        "abstraction",
        "precisely",
        "intended",
        "capture",
        "coincidence",
        "dual",
        "perspective",
        "definition",
        "full",
        "abstraction",
        "denotational",
        "semantics",
        "mathcal",
        "fully",
        "abstract",
        "respect",
        "operational",
        "semantics",
        "mathcal",
        "induced",
        "equivalence",
        "simeq_",
        "mathcal",
        "simeq_",
        "mathcal",
        "coincide",
        "tool",
        "investigating",
        "program",
        "property",
        "full",
        "abstraction",
        "seen",
        "completeness",
        "property",
        "denotational",
        "semantics",
        "every",
        "equivalence",
        "program",
        "proved",
        "operationally",
        "also",
        "proved",
        "denotational",
        "mean",
        "equivalently",
        "denotational",
        "proof",
        "two",
        "term",
        "equivalent",
        "enough",
        "show",
        "interchangeable",
        "every",
        "program",
        "context",
        "full",
        "abstraction",
        "also",
        "function",
        "criterion",
        "assessing",
        "translation",
        "vartheta",
        "language",
        "l",
        "_",
        "necessarily",
        "different",
        "language",
        "l",
        "_",
        "provided",
        "two",
        "language",
        "set",
        "observables",
        "say",
        "ob",
        "riecke",
        "vartheta",
        "fully",
        "abstract",
        "observational",
        "equivalence",
        "defined",
        "respect",
        "ob",
        "e",
        "e",
        "in",
        "l",
        "_",
        "equivalent",
        "observational",
        "equivalence",
        "vartheta",
        "e",
        "vartheta",
        "e",
        "l",
        "_",
        "existence",
        "fully",
        "abstract",
        "translation",
        "language",
        "used",
        "compare",
        "expressive",
        "power",
        "following",
        "suggestion",
        "mitchell",
        "riecke",
        "l",
        "_",
        "expressive",
        "l",
        "_",
        "fully",
        "abstract",
        "translation",
        "l",
        "_",
        "l",
        "_",
        "going",
        "general",
        "introduction",
        "full",
        "abstraction",
        "related",
        "notion",
        "area",
        "programming",
        "language",
        "semantics",
        "order",
        "show",
        "broad",
        "relevance",
        "notion",
        "interesting",
        "observe",
        "general",
        "setting",
        "possible",
        "study",
        "full",
        "abstraction",
        "property",
        "suggested",
        "recent",
        "investigation",
        "compositionality",
        "natural",
        "artificial",
        "language",
        "hodges",
        "others",
        "setting",
        "full",
        "abstraction",
        "connected",
        "problem",
        "finding",
        "compositional",
        "extension",
        "semantic",
        "interpretation",
        "subset",
        "x",
        "language",
        "y",
        "interpretation",
        "whole",
        "language",
        "via",
        "frege",
        "context",
        "principle",
        "see",
        "janssen",
        "stating",
        "meaning",
        "expression",
        "y",
        "contribution",
        "make",
        "meaning",
        "expression",
        "x",
        "contain",
        "original",
        "formulation",
        "frege",
        "x",
        "set",
        "sentence",
        "y",
        "set",
        "expression",
        "programming",
        "theory",
        "x",
        "set",
        "program",
        "y",
        "set",
        "program",
        "phrase",
        "weakening",
        "definition",
        "full",
        "abstraction",
        "represents",
        "essential",
        "adequacy",
        "requirement",
        "denotational",
        "interpretation",
        "language",
        "definition",
        "computational",
        "adequacy",
        "denotational",
        "semantics",
        "mathcal",
        "computationally",
        "adequate",
        "respect",
        "operational",
        "semantics",
        "mathcal",
        "program",
        "e",
        "value",
        "v",
        "mathcal",
        "e",
        "v",
        "text",
        "mathcal",
        "e",
        "mathcal",
        "v",
        "equivalent",
        "formulation",
        "computational",
        "adequacy",
        "allows",
        "highlight",
        "relation",
        "full",
        "abstraction",
        "proposition",
        "assume",
        "mathcal",
        "compositional",
        "denotational",
        "interpretation",
        "mathcal",
        "e",
        "v",
        "implies",
        "mathcal",
        "e",
        "mathcal",
        "v",
        "following",
        "two",
        "statement",
        "equivalent",
        "mathcal",
        "computationally",
        "adequate",
        "respect",
        "mathcal",
        "two",
        "program",
        "e",
        "e",
        "in",
        "texttt",
        "prog",
        "e",
        "simeq_",
        "mathcal",
        "e",
        "text",
        "e",
        "simeq_",
        "mathcal",
        "e",
        "definition",
        "full",
        "abstraction",
        "property",
        "straightforward",
        "fully",
        "abstract",
        "model",
        "natural",
        "example",
        "programming",
        "language",
        "proved",
        "elusive",
        "giving",
        "rise",
        "full",
        "abstraction",
        "problem",
        "discussion",
        "full",
        "abstraction",
        "shall",
        "mainly",
        "concentrate",
        "full",
        "abstraction",
        "problem",
        "language",
        "pcf",
        "programming",
        "language",
        "computable",
        "function",
        "plotkin",
        "simply",
        "typed",
        "lambda",
        "calculus",
        "arithmetic",
        "primitive",
        "fixedpoint",
        "combinator",
        "type",
        "proposed",
        "scott",
        "b",
        "language",
        "important",
        "includes",
        "programming",
        "feature",
        "semantic",
        "analysis",
        "cope",
        "higherorder",
        "function",
        "type",
        "recursion",
        "reduction",
        "rule",
        "provide",
        "abstract",
        "setting",
        "experimenting",
        "several",
        "evaluation",
        "strategy",
        "furthermore",
        "pcf",
        "also",
        "model",
        "extension",
        "simply",
        "typed",
        "lambda",
        "calculus",
        "used",
        "experimenting",
        "programming",
        "feature",
        "like",
        "idealized",
        "algol",
        "reynolds",
        "effort",
        "towards",
        "solution",
        "full",
        "abstraction",
        "problem",
        "pcf",
        "contributed",
        "side",
        "effect",
        "systematic",
        "development",
        "set",
        "mathematical",
        "technique",
        "semantical",
        "analysis",
        "whose",
        "usefulness",
        "go",
        "beyond",
        "original",
        "application",
        "shall",
        "describe",
        "section",
        "devoted",
        "semantic",
        "analysis",
        "pcf",
        "based",
        "partially",
        "ordered",
        "structure",
        "domain",
        "introduced",
        "dana",
        "scott",
        "examine",
        "section",
        "technical",
        "development",
        "theory",
        "domain",
        "also",
        "new",
        "research",
        "area",
        "focussed",
        "girard",
        "linear",
        "logic",
        "girard",
        "led",
        "game",
        "semantics",
        "abramsky",
        "jagadeesan",
        "malacaria",
        "hyland",
        "ong",
        "regarded",
        "viable",
        "alternative",
        "standard",
        "denotational",
        "semantics",
        "based",
        "domain",
        "approach",
        "shall",
        "dedicate",
        "section",
        "trying",
        "provide",
        "enough",
        "detail",
        "orient",
        "reader",
        "extensive",
        "still",
        "growing",
        "literature",
        "documenting",
        "application",
        "game",
        "interpretation",
        "wide",
        "spectrum",
        "programming",
        "language",
        "feature"
    ]
}