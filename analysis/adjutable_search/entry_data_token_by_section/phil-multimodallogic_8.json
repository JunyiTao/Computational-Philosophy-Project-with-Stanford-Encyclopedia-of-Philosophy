{
    "main_text": "Defining Concepts in Terms of Others || Infinite Modalities via Syntactic Constructors\n2.7 Infinite Modalities via Syntactic Constructors\n\nJust as some multi-modal systems are created by extending existing\nones, some others are born with multiple modalities in mind. Among\nthem,\n propositional dynamic logic\n (Harel, Kozen, & Tiuryn 2000) and Boolean modal logic\n(Gargov & Passy 1990; Gargov, Passy, & Tinchev 1987) deserve a\nspecial mention. The reason is that they both define, within the\nlanguage, operators for building new modalities from a collection of\nbasic ones. As a consequence, both systems contain an\ninfinite number of modalities.\n\nFollowing earlier approaches to reason about programs in Engeler\n(1967) and Hoare (1969), Propositional dynamic logic (PDL),\nthe logic of programs (Harel, Kozen, & Tiuryn 2000), intends to\ndescribe what programs can achieve. Semantically, programs are\ninterpreted in standard relational models, with one binary relation\n\\(R_a\\) for every basic program a; syntactically, the\nlanguage contains a modality \\([a]\\) for each such a.\n\nSo far, PDL is technically similar to a multi-agent epistemic\nlogic (the difference being, besides the symbols used for the\nmodalities, the fact that there are no restrictions on the relations\nfor the basic\n programs).[8]\n The crucial insight is, however, that basic programs can be\ncomposed in order to create more complex ones: one can think\nof executing one program after another, or repeating some of them a\nnumber of times. Thus, these basic modalities are not enough. For\nthis, a new syntactic entity is created: besides formulas, the\nlanguage of PDL contains a set of basic programs\ntogether with program constructors representing those for\nregular expressions (Kleene 1956). Formally, formulas\n\\(\\varphi\\) and programs \\(\\alpha\\) of the\nPDL-language \\(\\cL_{\\textit{PDL}}\\) are defined\nsimultaneously via mutual recursion as \n\\[ \\begin{align} \\varphi & ::= p \\mid \\lnot \\varphi \\mid \\varphi\n\\land \\varphi \\mid [\\alpha]\\varphi\\\\ \\alpha & ::= a \\mid \\varphi\n\\qbin \\mid \\alpha \\scbin \\alpha \\mid \\alpha \\bcup \\alpha \\mid\n\\alpha^{\\ast} \\end{align} \\]\n\n\nwith p an atomic proposition coming from a given set, and\na a basic program coming from a given set. For formulas, the\nintended reading of the Boolean operators is standard, and formulas of\nthe form \\([\\alpha]\\varphi\\) express that \u201cevery execution\nof program \\(\\alpha\\) from the current state leads to a state\nsatisfying \\(\\varphi\\)\u201d. For programs, while the basic\nprograms simply represent themselves, \u201c\\(\\varphi \\qbin\\)\u201d\nis a program that \u2018does nothing\u2019 when \\(\\varphi\\) is the\ncase but \u2018fails\u2019 otherwise (essentially, a test\nfor \\(\\varphi)\\), \u201c\\(\\alpha \\scbin \\beta\\)\u201d represents the\nprogram that results from executing \\(\\alpha\\) and then executing\n\\(\\beta\\) (their sequential composition), \u201c\\(\\alpha\n\\bcup \\beta\\)\u201d represents the program that results from\nexecuting either \\(\\alpha\\) or else \\(\\beta\\) (their\nnon-deterministic choice), and\n\u201c\\({\\alpha^{\\ast}}\\)\u201d represents the program that results\nfrom repeating \\(\\alpha\\) a finite number of times \\((\\alpha\\)\u2019s\niteration).\n\nWith these program constructors it is possible to build more complex\nprograms. Famous examples are\n\n\n\n\\((\\varphi \\qbin \\scbin \\alpha) \\bcup (\\lnot\\varphi \\qbin \\scbin\n\\beta)\\)\n\u201cif \\(\\varphi\\) holds, then do \\(\\alpha\\), and otherwise\ndo \\(\\beta\\)\u201d, \n\n\\((\\varphi \\qbin \\scbin \\alpha)^{\\ast} \\scbin {\\lnot\\varphi}\n\\qbin\\)\n\u201cwhile \\(\\varphi\\) holds, do \\(\\alpha\\)\u201d, \n\n\\(\\alpha \\scbin ({\\lnot\\varphi} \\qbin \\scbin\\alpha)^{\\ast}\n\\scbin {\\varphi \\qbin}\\)\n\u201crepeat \\(\\alpha\\) until \\(\\varphi\\) holds\u201d.\n \n\n\nThen, it is possible to build formulas as \\(p \\rightarrow [(q \\qbin\n\\scbin a) \\bcup (\\lnot q \\qbin \\scbin b)]r\\) (\u201cif p\nholds, then r will be achieved by choosing between actions\na and b according to whether q holds\u201d)\nand \\(\\lnot p \\rightarrow \\langle a \\scbin (\\lnot q \\qbin \\scbin\na)^{\\ast} \\scbin q \\qbin \\rangle p\\) (\u201cif the desired\nrequirement p is not true yet, it is possible to achieve it by\na repeated execution of a\u201d).\n\nFor the semantic interpretation, a relation \\(R_\\alpha\\) is required\nfor each program \\(\\alpha\\). However, while the relations \\(R_a\\) for\nbasic programs are arbitrary, those for complex programs should behave\naccording to their intended meaning. The simplest way to obtain this\nis to take the relations for the basic programs, and then\ndefine those for complex programs in an inductive way. This\nand further details about PDL can be found in\n Section 2\n of the SEP entry on\n dynamic logic.\n\nThe Boolean modal logic of Gargov and Passy 1990 and Gargov,\nPassy, and Tinchev 1987) follows a similar strategy. The difference is\nthat, while PDL focuses on constructors for regular\nexpressions (sequential composition, non-deterministic choice, finite\niteration), Boolean modal logic focuses on constructors for the\nBoolean algebra over relations: complement \\((\\bdash)\\), union\n\\((\\bcup)\\) and intersection \\((\\bcap)\\), together with a\n\u2018global\u2019 constant \\((\\boldsymbol{1})\\). More\nprecisely, \n\\[ \\begin{align} \\varphi & ::= p \\mid \\lnot \\varphi \\mid \\varphi\n\\land \\varphi \\mid [\\alpha]\\varphi\\\\ \\alpha & ::= a \\mid\n\\boldsymbol{1} \\mid \\bdash \\alpha \\mid \\alpha \\bcup \\alpha \\mid \\alpha\n\\bcap\\alpha\\\\ \\end{align} \\]\n\n\nThe semantic interpretation follows the same steps as in PDL:\nrelations \\(R_a\\) for the basic modalities a are assumed, and\nrelations for complex ones are defined in the expected way (with\n\\({\\boldsymbol{1}}\\) being interpreted with respect to the global\nrelation \\(W \\times W)\\).\n\nInterestingly, by combining the negation over formulas and the Boolean\ncomplement over relations, it is possible to define the following\noperator (often called window; see Goldblatt 1974; van\nBenthem 1979; Gargov, Passy, & Tinchev 1987): \n\\[\n\\oubracket{.7em}{\\alpha} \\varphi := [\\bdash\\alpha] \\lnot\\varphi\n\\]\n\n\nWindow is an extremely natural operator that complements the standard\nuniversal modality. Indeed, while formulas of the form\n\\([\\alpha]\\varphi\\) express that all executions of \\(\\alpha\\)\nreach a \\(\\varphi\\)-state, \n\\[ (M, w) \\Vdash [\\alpha]\\varphi \\quad\\tiff\\quad \\text{for all } u \\in\n    W, \\; \\text{ if } R_{\\alpha}wu \\text{ then } (M, u) \\Vdash\n    \\varphi, \\]\n\n\nformulas of the form \\(\\oubracket{.7em}{\\alpha}\\varphi\\) express that\nall \\(\\varphi\\)-states are reachable by an execution of\n\\(\\alpha\\): \n\\[ (M, w) \\Vdash \\oubracket{.7em}{\\alpha} \\varphi \\quad\\tiff\\quad\n    \\text{for all } u \\in W, \\; \\text{ if } (M, u) \\Vdash \\varphi\n    \\text{ then } R_{\\alpha}wu \\]\n\n\nNot only that: window allows a smooth interaction between the\nconstructors \\(\\bcup\\) and \\(\\bcap\\). As discussed in Blackburn,\nRijke, and Venema (2001: 427), \n\n\n[i]n a sense, the relations are divided into two kingdoms: the\nordinary \\([\\alpha]\\) modalities govern relations built with\n\\(\\bcup\\), the window modalities \\(\\oubracket{.7em}{\\alpha}\\) govern\nthe relations built with \\(\\bcap\\), and the \\(\\bdash\\) constructor\nacts as a bridge between the two realms: \n\\[ \\begin{align} \\Vdash {[\\alpha \\bcup\\beta]\\varphi}\n&\\leftrightarrow ([\\alpha] \\varphi \\land [\\beta]\\varphi), &\n\\Vdash {[\\bdash\\alpha]\\varphi} &\\leftrightarrow\n\\oubracket{.7em}{\\alpha} \\lnot\\varphi \\\\ \\Vdash\n\\oubracket{3.1em}{\\alpha \\bcap\\beta} \\varphi &\\leftrightarrow\n\\left(\\oubracket{1em}{\\alpha} \\varphi \\land \\oubracket{.8em}{\\beta}\n\\varphi\\right), & \\Vdash [\\alpha]\\lnot\\varphi &\\leftrightarrow\n\\oubracket{1.8em}{\\bdash\\alpha}\\varphi.\\\\ \\end{align} \\]\n\n\n\nOf course, many other program constructors can be used. Among them,\none worthy of mention is that for the\n converse\n of a given relation. Modalities for the converse of a relation have\nbeen used in, e.g.,\n tense logic,\n with the \u2018past\u2019 modalities (H and P, the\nuniversal and existential versions, respectively) interpreted\nsemantically in terms of the converse of the relation used for\ninterpreting the \u2018future\u2019 modalities (G and\nF, respectively).\n",
    "section_title": "2.7 Infinite Modalities via Syntactic Constructors",
    "entry_title": "Philosophical Aspects of Multi-Modal Logic",
    "hierarchy_title": "Philosophical Aspects of Multi-Modal Logic || Defining Concepts in Terms of Others || Infinite Modalities via Syntactic Constructors",
    "tokenized_text": [
        "defining",
        "concept",
        "term",
        "others",
        "infinite",
        "modality",
        "via",
        "syntactic",
        "constructor",
        "infinite",
        "modality",
        "via",
        "syntactic",
        "constructor",
        "multimodal",
        "system",
        "created",
        "extending",
        "existing",
        "one",
        "others",
        "born",
        "multiple",
        "modality",
        "mind",
        "among",
        "propositional",
        "dynamic",
        "logic",
        "harel",
        "kozen",
        "tiuryn",
        "boolean",
        "modal",
        "logic",
        "gargov",
        "passy",
        "gargov",
        "passy",
        "tinchev",
        "deserve",
        "special",
        "mention",
        "reason",
        "define",
        "within",
        "language",
        "operator",
        "building",
        "new",
        "modality",
        "collection",
        "basic",
        "one",
        "consequence",
        "system",
        "contain",
        "infinite",
        "number",
        "modality",
        "following",
        "earlier",
        "approach",
        "reason",
        "program",
        "engeler",
        "hoare",
        "propositional",
        "dynamic",
        "logic",
        "pdl",
        "logic",
        "program",
        "harel",
        "kozen",
        "tiuryn",
        "intends",
        "describe",
        "program",
        "achieve",
        "semantically",
        "program",
        "interpreted",
        "standard",
        "relational",
        "model",
        "one",
        "binary",
        "relation",
        "r_a",
        "every",
        "basic",
        "program",
        "syntactically",
        "language",
        "contains",
        "modality",
        "a",
        "far",
        "pdl",
        "technically",
        "similar",
        "multiagent",
        "epistemic",
        "logic",
        "difference",
        "besides",
        "symbol",
        "used",
        "modality",
        "fact",
        "restriction",
        "relation",
        "basic",
        "program",
        "crucial",
        "insight",
        "however",
        "basic",
        "program",
        "composed",
        "order",
        "create",
        "complex",
        "one",
        "one",
        "think",
        "executing",
        "one",
        "program",
        "another",
        "repeating",
        "number",
        "time",
        "thus",
        "basic",
        "modality",
        "enough",
        "new",
        "syntactic",
        "entity",
        "created",
        "besides",
        "formula",
        "language",
        "pdl",
        "contains",
        "set",
        "basic",
        "program",
        "together",
        "program",
        "constructor",
        "representing",
        "regular",
        "expression",
        "kleene",
        "formally",
        "formula",
        "varphi",
        "program",
        "alpha",
        "pdllanguage",
        "cl_",
        "textit",
        "pdl",
        "defined",
        "simultaneously",
        "via",
        "mutual",
        "recursion",
        "begin",
        "align",
        "varphi",
        "p",
        "mid",
        "lnot",
        "varphi",
        "mid",
        "varphi",
        "land",
        "varphi",
        "mid",
        "alpha",
        "varphi",
        "alpha",
        "mid",
        "varphi",
        "qbin",
        "mid",
        "alpha",
        "scbin",
        "alpha",
        "mid",
        "alpha",
        "bcup",
        "alpha",
        "mid",
        "alpha",
        "ast",
        "end",
        "align",
        "p",
        "atomic",
        "proposition",
        "coming",
        "given",
        "set",
        "basic",
        "program",
        "coming",
        "given",
        "set",
        "formula",
        "intended",
        "reading",
        "boolean",
        "operator",
        "standard",
        "formula",
        "form",
        "alpha",
        "varphi",
        "express",
        "every",
        "execution",
        "program",
        "alpha",
        "current",
        "state",
        "lead",
        "state",
        "satisfying",
        "varphi",
        "program",
        "basic",
        "program",
        "simply",
        "represent",
        "varphi",
        "qbin",
        "program",
        "nothing",
        "varphi",
        "case",
        "fails",
        "otherwise",
        "essentially",
        "test",
        "varphi",
        "alpha",
        "scbin",
        "beta",
        "represents",
        "program",
        "result",
        "executing",
        "alpha",
        "executing",
        "beta",
        "sequential",
        "composition",
        "alpha",
        "bcup",
        "beta",
        "represents",
        "program",
        "result",
        "executing",
        "either",
        "alpha",
        "else",
        "beta",
        "nondeterministic",
        "choice",
        "alpha",
        "ast",
        "represents",
        "program",
        "result",
        "repeating",
        "alpha",
        "finite",
        "number",
        "time",
        "alpha",
        "iteration",
        "program",
        "constructor",
        "possible",
        "build",
        "complex",
        "program",
        "famous",
        "example",
        "varphi",
        "qbin",
        "scbin",
        "alpha",
        "bcup",
        "lnotvarphi",
        "qbin",
        "scbin",
        "beta",
        "varphi",
        "hold",
        "alpha",
        "otherwise",
        "beta",
        "varphi",
        "qbin",
        "scbin",
        "alpha",
        "ast",
        "scbin",
        "lnotvarphi",
        "qbin",
        "varphi",
        "hold",
        "alpha",
        "alpha",
        "scbin",
        "lnotvarphi",
        "qbin",
        "scbinalpha",
        "ast",
        "scbin",
        "varphi",
        "qbin",
        "repeat",
        "alpha",
        "varphi",
        "hold",
        "possible",
        "build",
        "formula",
        "p",
        "rightarrow",
        "q",
        "qbin",
        "scbin",
        "bcup",
        "lnot",
        "q",
        "qbin",
        "scbin",
        "b",
        "r",
        "p",
        "hold",
        "r",
        "achieved",
        "choosing",
        "action",
        "b",
        "according",
        "whether",
        "q",
        "hold",
        "lnot",
        "p",
        "rightarrow",
        "langle",
        "scbin",
        "lnot",
        "q",
        "qbin",
        "scbin",
        "ast",
        "scbin",
        "q",
        "qbin",
        "rangle",
        "p",
        "desired",
        "requirement",
        "p",
        "true",
        "yet",
        "possible",
        "achieve",
        "repeated",
        "execution",
        "semantic",
        "interpretation",
        "relation",
        "r_alpha",
        "required",
        "program",
        "alpha",
        "however",
        "relation",
        "r_a",
        "basic",
        "program",
        "arbitrary",
        "complex",
        "program",
        "behave",
        "according",
        "intended",
        "meaning",
        "simplest",
        "way",
        "obtain",
        "take",
        "relation",
        "basic",
        "program",
        "define",
        "complex",
        "program",
        "inductive",
        "way",
        "detail",
        "pdl",
        "found",
        "section",
        "sep",
        "entry",
        "dynamic",
        "logic",
        "boolean",
        "modal",
        "logic",
        "gargov",
        "passy",
        "gargov",
        "passy",
        "tinchev",
        "follows",
        "similar",
        "strategy",
        "difference",
        "pdl",
        "focus",
        "constructor",
        "regular",
        "expression",
        "sequential",
        "composition",
        "nondeterministic",
        "choice",
        "finite",
        "iteration",
        "boolean",
        "modal",
        "logic",
        "focus",
        "constructor",
        "boolean",
        "algebra",
        "relation",
        "complement",
        "bdash",
        "union",
        "bcup",
        "intersection",
        "bcap",
        "together",
        "global",
        "constant",
        "boldsymbol",
        "precisely",
        "begin",
        "align",
        "varphi",
        "p",
        "mid",
        "lnot",
        "varphi",
        "mid",
        "varphi",
        "land",
        "varphi",
        "mid",
        "alpha",
        "varphi",
        "alpha",
        "mid",
        "boldsymbol",
        "mid",
        "bdash",
        "alpha",
        "mid",
        "alpha",
        "bcup",
        "alpha",
        "mid",
        "alpha",
        "bcapalpha",
        "end",
        "align",
        "semantic",
        "interpretation",
        "follows",
        "step",
        "pdl",
        "relation",
        "r_a",
        "basic",
        "modality",
        "assumed",
        "relation",
        "complex",
        "one",
        "defined",
        "expected",
        "way",
        "boldsymbol",
        "interpreted",
        "respect",
        "global",
        "relation",
        "w",
        "times",
        "w",
        "interestingly",
        "combining",
        "negation",
        "formula",
        "boolean",
        "complement",
        "relation",
        "possible",
        "define",
        "following",
        "operator",
        "often",
        "called",
        "window",
        "see",
        "goldblatt",
        "van",
        "benthem",
        "gargov",
        "passy",
        "tinchev",
        "oubracket",
        "em",
        "alpha",
        "varphi",
        "bdashalpha",
        "lnotvarphi",
        "window",
        "extremely",
        "natural",
        "operator",
        "complement",
        "standard",
        "universal",
        "modality",
        "indeed",
        "formula",
        "form",
        "alpha",
        "varphi",
        "express",
        "execution",
        "alpha",
        "reach",
        "varphi",
        "state",
        "w",
        "vdash",
        "alpha",
        "varphi",
        "quadtiffquad",
        "text",
        "u",
        "in",
        "w",
        "text",
        "r_",
        "alpha",
        "wu",
        "text",
        "u",
        "vdash",
        "varphi",
        "formula",
        "form",
        "oubracket",
        "em",
        "alpha",
        "varphi",
        "express",
        "varphi",
        "states",
        "reachable",
        "execution",
        "alpha",
        "w",
        "vdash",
        "oubracket",
        "em",
        "alpha",
        "varphi",
        "quadtiffquad",
        "text",
        "u",
        "in",
        "w",
        "text",
        "u",
        "vdash",
        "varphi",
        "text",
        "r_",
        "alpha",
        "wu",
        "window",
        "allows",
        "smooth",
        "interaction",
        "constructor",
        "bcup",
        "bcap",
        "discussed",
        "blackburn",
        "rijke",
        "venema",
        "n",
        "sense",
        "relation",
        "divided",
        "two",
        "kingdom",
        "ordinary",
        "alpha",
        "modality",
        "govern",
        "relation",
        "built",
        "bcup",
        "window",
        "modality",
        "oubracket",
        "em",
        "alpha",
        "govern",
        "relation",
        "built",
        "bcap",
        "bdash",
        "constructor",
        "act",
        "bridge",
        "two",
        "realm",
        "begin",
        "align",
        "vdash",
        "alpha",
        "bcupbeta",
        "varphi",
        "leftrightarrow",
        "alpha",
        "varphi",
        "land",
        "beta",
        "varphi",
        "vdash",
        "bdashalpha",
        "varphi",
        "leftrightarrow",
        "oubracket",
        "em",
        "alpha",
        "lnotvarphi",
        "vdash",
        "oubracket",
        "em",
        "alpha",
        "bcapbeta",
        "varphi",
        "leftrightarrow",
        "left",
        "oubracket",
        "em",
        "alpha",
        "varphi",
        "land",
        "oubracket",
        "em",
        "beta",
        "varphiright",
        "vdash",
        "alpha",
        "lnotvarphi",
        "leftrightarrow",
        "oubracket",
        "em",
        "bdashalpha",
        "varphi",
        "end",
        "align",
        "course",
        "many",
        "program",
        "constructor",
        "used",
        "among",
        "one",
        "worthy",
        "mention",
        "converse",
        "given",
        "relation",
        "modality",
        "converse",
        "relation",
        "used",
        "eg",
        "tense",
        "logic",
        "past",
        "modality",
        "h",
        "p",
        "universal",
        "existential",
        "version",
        "respectively",
        "interpreted",
        "semantically",
        "term",
        "converse",
        "relation",
        "used",
        "interpreting",
        "future",
        "modality",
        "g",
        "f",
        "respectively"
    ]
}