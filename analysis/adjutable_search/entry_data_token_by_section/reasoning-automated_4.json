{
    "main_text": "Deduction Calculi || Resolution\n2.1 Resolution\n\nOf the many calculi used in the implementation of reasoning programs,\nthe ones based on the resolution principle have been\nthe most popular. Resolution is modeled after the chain rule (of which\nModus Ponens is a special case) and essentially states that from\np \u2228 q and ~q \u2228 r one can\ninfer p \u2228 r. More formally, let C\n\u2212 l denote the clause C with the literal\nl removed. Assume that C1 and\nC2 are ground clauses containing, respectively, a\npositive literal l1 and a negative literal\n~l2 such that l1 and\n~l2 are complementary. Then, the rule of\nground resolution states that, as a result of\nresolving C1 and\nC2, one can infer (C1 \u2212\nl1) \u2228 (C2 \u2212\n~l2):\n\n\n\n\nC1\u00a0\u00a0\u00a0\u00a0\u00a0C2\n\n (ground resolution) \n\n (C1 \u2212 l1) \u2228\n(C2 \u2212 ~l2) \n\n\n\nHerbrand\u2019s theorem (Herbrand 1930) assures us that\nthe non-satisfiability of any set of clauses, ground or not,\ncan be established by using ground resolution. This is a very\nsignificant result for automated deduction since it tells us that if a\nset \u0393 is not satisfied by any of the infinitely many\ninterpretations, this fact can be determined in finitely many\nsteps. Unfortunately, a direct implementation of ground resolution\nusing Herbrand\u2019s theorem requires the generation of a vast number of\nground terms making this approach hopelessly inefficient. This issue\nwas effectively addressed by generalizing the ground resolution rule\nto binary resolution and by introducing the notion of\nunification (Robinson 1965a). Unification allows resolution proofs to\nbe \u201clifted\u201d and be conducted at a more general level;\nclauses only need to be instantiated at the moment where they are to\nbe resolved. Moreover, the clauses resulting from the instantiation\nprocess do not have to be ground instances and may still contain\nvariables. The introduction of binary resolution and unification is\nconsidered one of the most important developments in the field of\nautomated reasoning.\nUnification\n\nA unifier of two expressions\u2014terms or\nclauses\u2014is a substitution that when applied to the expressions\nmakes them equal. For example, the substitution \u03c3 given by\n\n\u03c3 := {x \u2190 b, y \u2190\nb, z \u2190 f(a,b)}\n\n\nis a unifier for \n\nR(x,f(a,y)) and\nR(b,z)\n\n\nsince when applied to both expressions it makes them equal: \n\n\n\nR(x,f(a,y))\u03c3\n\n\u00a0\n=\n\u00a0\nR(b,f(a,b))\n\n\n\u00a0\n\u00a0\n=\n\u00a0\nR(b,z)\u03c3 \n\n\n\nA most general unifier (mgu) produces the most\ngeneral instance shared by two unifiable expressions. In the previous\nexample, the substitution {x \u2190 b, y\n\u2190 b, z \u2190\nf(a,b)} is a unifier but not an mgu;\nhowever, {x \u2190 b, z \u2190\nf(a,y)} is an mgu. Note that unification\nattempts to \u201cmatch\u201d two expressions and this fundamental\nprocess has become a central component of most automated deduction\nprograms, resolution-based and otherwise.\nTheory-unification is an extension of the unification\nmechanism that includes built-in inference capabilities. For example,\nthe clauses R(g(a,b),x)\nand R(g(b,a),d) do not\nunify but they AC-unify, where AC-unification is unification with\nbuilt-in associative and commutative rules such as\ng(a,b) = g(b,a).\nShifting inference capabilities into the unification mechanism adds\npower but at a price: The existence of an mgu for two unifiable\nexpressions may not be unique (there could actually be infinitely\nmany), and the unification process becomes undecidable in general.\n\nBinary resolution\n\nLet C1 and C2 be two clauses\ncontaining, respectively, a positive literal l1\nand a negative literal ~l2 such that\nl1 and l2 unify with mgu\n\u03b8. Then, \n\n\n\n\nC1\u00a0\u00a0\u00a0\u00a0\u00a0C2\n\n (binary resolution) \n\n (C1\u03b8 \u2212\nl1\u03b8) \u2228 (C2\u03b8\n\u2212 ~l2\u03b8) \n\n\n\nby binary resolution; the clause (C1\u03b8\n\u2212 l1\u03b8) \u2228\n(C2\u03b8 \u2212 ~l2\u03b8)\nis called a binary resolvent of\nC1 and C2. \nFactoring\n\nIf two or more literals occurring in a clause C share an mgu\n\u03b8 then C\u03b8 is a factor of\nC. For example, in R(x,a) \u2228\n~K(f(x),b) \u2228\nR(c,y) the literals\nR(x,a) and\nR(c,y) unify with mgu {x \u2190\nc, y \u2190 a} and, hence,\nR(c,a) \u2228\n~K(f(c),b) is a factor of the\noriginal clause. \nThe Resolution Principle\n\nLet C1and C2 be two clauses.\nThen, a resolvent obtained by\nresolution from C1 and\nC2 is defined as: (a) a binary resolvent of\nC1 and C2; (b) a binary\nresolvent of C1 and a factor of\nC2; (c) a binary resolvent of a factor of\nC1 and C2; or, (d) a binary\nresolvent of a factor of C1 and a factor of\nC2. \n\nResolution proofs, more precisely refutations, are constructed by\nderiving the empty clause [\u00a0] from \u0393 \u222a {~\u03b1} using\nresolution; this will always be possible if \u0393 \u222a {~\u03b1}\nis unsatisfiable since resolution is refutation complete (Robinson\n1965a). As an example of a resolution proof, we show that the set\n{\u2200x(P(x) \u2228\nQ(x)), \u2200x(P(x)\n\u2283\nR(x)),\u2200x(Q(x)\n\u2283 R(x))}, denoted by \u0393, entails the\nformula \u2203xR(x). The first step is to\nfind the clausal form of \u0393 \u222a\n{~\u2203xR(x)}; the resulting clause set,\ndenoted by S0, is shown in steps 1 to 4 in the\nrefutation below. The refutation is constructed by using a\nlevel-saturation method: Compute all the resolvents of the initial\nset, S0, add them to the set and repeat the\nprocess until the empty clause is derived. (This produces the sequence\nof increasingly larger sets: S0,\nS1, S2,\u2026) The only\nconstraint that we impose is that we do not resolve the same two\nclauses more than once.\n\n\n\nS0\n1\nP(x) \u2228 Q(x)\nAssumption \n\n\u00a0\n2\n~P(x) \u2228 R(x)\nAssumption \n\n\u00a0\n3\n~Q(x) \u2228 R(x)\nAssumption \n\n\u00a0\n4\n~R(a)\nNegate conclusion \n\nS1\n5\nQ(x) \u2228 R(x)\nRes 1 2 \n\n\u00a0\n6\nP(x) \u2228 R(x)\nRes 1 3 \n\n\u00a0\n7\n~P(a)\nRes 2 4 \n\n\u00a0\n8\n~Q(a)\nRes 3 4 \n\nS2\n9\nQ(a)\nRes 1 7 \n\n\u00a0\n10\nP(a)\nRes 1 8 \n\n\u00a0\n11\nR(x)\nRes 2 6 \n\n\u00a0\n12\nR(x)\nRes 3 5 \n\n\u00a0\n13\nQ(a)\nRes 4 5 \n\n\u00a0\n14\nP(a)\nRes 4 6 \n\n\u00a0\n15\nR(a)\nRes 5 8 \n\n\u00a0\n16\nR(a)\nRes 6 7 \n\nS3\u00a0\u00a0\n17\nR(a)\nRes 2 10 \n\n\u00a0\n18\nR(a)\nRes 2 14 \n\n\u00a0\n19\nR(a)\nRes 3 9 \n\n\u00a0\n20\nR(a)\nRes 3 13 \n\n\u00a0\n21\u00a0\n[\u00a0]\nRes 4 11 \n\n\n\nAlthough the resolution proof is successful in deriving [\u00a0], it\nhas some significant drawbacks. To start with, the refutation is too\nlong as it takes 21 steps to reach the contradiction, [\u00a0]. This\nis due to the na\u00efve brute-force nature of the implementation. The\napproach not only generates too many formulas but some are clearly\nredundant. Note how R(a) is derived six times; also,\nR(x) has more \u201cinformation content\u201d than\nR(a) and one should keep the former and disregard\nthe latter. Resolution, like all other automated deduction methods,\nmust be supplemented by strategies aimed at improving the efficiency\nof the deduction process. The above sample derivation has 21 steps but\nresearch-type problems command derivations with thousands or hundreds\nof thousands of steps.\nResolution Strategies\n\nThe successful implementation of a deduction calculus in an automated\nreasoning program requires the integration of search strategies that\nreduce the search space by pruning unnecessary deduction paths. Some\nstrategies remove redundant clauses or tautologies as soon as they\nappear in a derivation. Another strategy is to remove more specific\nclauses in the presence of more general ones by a process known as\nsubsumption (Robinson 1965a). Unrestricted\nsubsumption, however, does not preserve the refutation completeness of\nresolution and, hence, there is a need to restrict its applicability\n(Loveland 1978). Model elimination (Loveland 1969)\ncan discard a sentence by showing that it is false in some model of\nthe axioms. The subject of model generation has received much\nattention as a complementary process to theorem proving. The method\nhas been used successfully by automated reasoning programs to show the\nindependence of axioms sets and to determine the existence of discrete\nmathematical structures meeting some given criteria. \n\nInstead of removing redundant clauses, some strategies prevent the\ngeneration of useless clauses in the first place. The\nset-of-support strategy (Wos, Carson & Robinson\n1965) is one of the most powerful strategies of this kind. A subset\nT of the set S, where S is initially\n\u0393 \u222a {~\u03b1}, is called a set of support\nof S iff S \u2212 T is satisfiable.\nSet-of-support resolution dictates that the resolved clauses are not\nboth from S \u2212 T. The motivation behind\nset-of-support is that since the set \u0393 is usually satisfiable it\nmight be wise not to resolve two clauses from \u0393 against each\nother. Hyperresolution (Robinson 1965b) reduces the\nnumber of intermediate resolvents by combining several resolution\nsteps into a single inference step.\n\nIndependently co-discovered, linear resolution\n(Loveland 1970, Luckham 1970) always resolves a clause against the\nmost recently derived resolvent. This gives the deduction a simple\n\u201clinear\u201d structure affording a straightforward\nimplementation; yet, linear resolution preserves refutation\ncompleteness. Using linear resolution we can derive the empty clause\nin the above example in only eight steps:\n\n\n\n1\u00a0\nP(x) \u2228 Q(x)\nAssumption \n\n2\n~P(x) \u2228 R(x)\nAssumption \n\n3\n~Q(x) \u2228 R(x)\nAssumption \n\n4\n~R(a)\nNegated conclusion \n\n5\n~P(a)\nRes 2 4 \n\n6\nQ(a)\nRes 1 5 \n\n7\nR(a)\nRes 3 6 \n\n8\n[\u00a0]\nRes 4 7 \n\n\n\nWith the exception of unrestricted subsumption, all the strategies\nmentioned so far preserve refutation completeness. Efficiency is an\nimportant consideration in automated reasoning and one may sometimes\nbe willing to trade completeness for speed. Unit\nresolution and input resolution are two such\nrefinements of linear resolution. In the former, one of the resolved\nclauses is always a literal; in the latter, one of the resolved\nclauses is always selected from the original set to be refuted. Albeit\nefficient, neither strategy is complete. Ordering strategies impose\nsome form of partial ordering on the predicate symbols, terms,\nliterals, or clauses occurring in the deduction. Ordered\nresolution treats clauses not as sets of literals but as\nsequences\u2014linear orders\u2014of literals. Ordered resolution is\nextremely efficient but, like unit and input resolution, is not\nrefutation complete. To end, it must be noted that some strategies\nimprove certain aspects of the deduction process at the expense of\nothers. For instance, a strategy may reduce the size of the proof\nsearch space at the expense of increasing, say, the length of the\nshortest refutations. A taxonomy and detailed presentation of\ntheorem-proving strategies can be found in (Bonacina 1999).\n\nThere are several automated reasoning programs that are based on\nresolution, or refinements of resolution. Otter (succeeded by Prover4)\nwas a driving force in the development of automated reasoning (Wos,\nOverbeek, Lusk & Boyle 1984) but it has been superseded by more\ncapable programs like Vampire (Voronkov 1995, Kov\u00e1cs &\nVoronkov 2013). Resolution also provides the underlying\nlogico-computational mechanism for the popular logic programming\nlanguage Prolog (Clocksin & Mellish 1981).\n",
    "section_title": "2.1 Resolution",
    "entry_title": "Automated Reasoning",
    "hierarchy_title": "Automated Reasoning || Deduction Calculi || Resolution",
    "tokenized_text": [
        "deduction",
        "calculus",
        "resolution",
        "resolution",
        "many",
        "calculus",
        "used",
        "implementation",
        "reasoning",
        "program",
        "one",
        "based",
        "resolution",
        "principle",
        "popular",
        "resolution",
        "modeled",
        "chain",
        "rule",
        "modus",
        "ponens",
        "special",
        "case",
        "essentially",
        "state",
        "p",
        "q",
        "q",
        "r",
        "one",
        "infer",
        "p",
        "r",
        "formally",
        "let",
        "c",
        "l",
        "denote",
        "clause",
        "c",
        "literal",
        "l",
        "removed",
        "assume",
        "c",
        "c",
        "ground",
        "clause",
        "containing",
        "respectively",
        "positive",
        "literal",
        "l",
        "negative",
        "literal",
        "l",
        "l",
        "l",
        "complementary",
        "rule",
        "ground",
        "resolution",
        "state",
        "result",
        "resolving",
        "c",
        "c",
        "one",
        "infer",
        "c",
        "l",
        "c",
        "l",
        "c",
        "c",
        "ground",
        "resolution",
        "c",
        "l",
        "c",
        "l",
        "herbrand",
        "theorem",
        "herbrand",
        "assures",
        "u",
        "nonsatisfiability",
        "set",
        "clause",
        "ground",
        "established",
        "using",
        "ground",
        "resolution",
        "significant",
        "result",
        "automated",
        "deduction",
        "since",
        "tell",
        "u",
        "set",
        "\u03b3",
        "satisfied",
        "infinitely",
        "many",
        "interpretation",
        "fact",
        "determined",
        "finitely",
        "many",
        "step",
        "unfortunately",
        "direct",
        "implementation",
        "ground",
        "resolution",
        "using",
        "herbrand",
        "theorem",
        "requires",
        "generation",
        "vast",
        "number",
        "ground",
        "term",
        "making",
        "approach",
        "hopelessly",
        "inefficient",
        "issue",
        "effectively",
        "addressed",
        "generalizing",
        "ground",
        "resolution",
        "rule",
        "binary",
        "resolution",
        "introducing",
        "notion",
        "unification",
        "robinson",
        "a",
        "unification",
        "allows",
        "resolution",
        "proof",
        "lifted",
        "conducted",
        "general",
        "level",
        "clause",
        "need",
        "instantiated",
        "moment",
        "resolved",
        "moreover",
        "clause",
        "resulting",
        "instantiation",
        "process",
        "ground",
        "instance",
        "may",
        "still",
        "contain",
        "variable",
        "introduction",
        "binary",
        "resolution",
        "unification",
        "considered",
        "one",
        "important",
        "development",
        "field",
        "automated",
        "reasoning",
        "unification",
        "unifier",
        "two",
        "expressionsterms",
        "clausesis",
        "substitution",
        "applied",
        "expression",
        "make",
        "equal",
        "example",
        "substitution",
        "\u03c3",
        "given",
        "\u03c3",
        "x",
        "b",
        "b",
        "z",
        "f",
        "b",
        "unifier",
        "r",
        "x",
        "f",
        "r",
        "b",
        "z",
        "since",
        "applied",
        "expression",
        "make",
        "equal",
        "r",
        "x",
        "f",
        "\u03c3",
        "r",
        "b",
        "f",
        "b",
        "r",
        "b",
        "z",
        "\u03c3",
        "general",
        "unifier",
        "mgu",
        "produce",
        "general",
        "instance",
        "shared",
        "two",
        "unifiable",
        "expression",
        "previous",
        "example",
        "substitution",
        "x",
        "b",
        "b",
        "z",
        "f",
        "b",
        "unifier",
        "mgu",
        "however",
        "x",
        "b",
        "z",
        "f",
        "mgu",
        "note",
        "unification",
        "attempt",
        "match",
        "two",
        "expression",
        "fundamental",
        "process",
        "become",
        "central",
        "component",
        "automated",
        "deduction",
        "program",
        "resolutionbased",
        "otherwise",
        "theoryunification",
        "extension",
        "unification",
        "mechanism",
        "includes",
        "builtin",
        "inference",
        "capability",
        "example",
        "clause",
        "r",
        "g",
        "b",
        "x",
        "r",
        "g",
        "b",
        "unify",
        "acunify",
        "acunification",
        "unification",
        "builtin",
        "associative",
        "commutative",
        "rule",
        "g",
        "b",
        "g",
        "b",
        "shifting",
        "inference",
        "capability",
        "unification",
        "mechanism",
        "add",
        "power",
        "price",
        "existence",
        "mgu",
        "two",
        "unifiable",
        "expression",
        "may",
        "unique",
        "could",
        "actually",
        "infinitely",
        "many",
        "unification",
        "process",
        "becomes",
        "undecidable",
        "general",
        "binary",
        "resolution",
        "let",
        "c",
        "c",
        "two",
        "clause",
        "containing",
        "respectively",
        "positive",
        "literal",
        "l",
        "negative",
        "literal",
        "l",
        "l",
        "l",
        "unify",
        "mgu",
        "\u03b8",
        "c",
        "c",
        "binary",
        "resolution",
        "c\u03b8",
        "l\u03b8",
        "c\u03b8",
        "l\u03b8",
        "binary",
        "resolution",
        "clause",
        "c\u03b8",
        "l\u03b8",
        "c\u03b8",
        "l\u03b8",
        "called",
        "binary",
        "resolvent",
        "c",
        "c",
        "factoring",
        "two",
        "literal",
        "occurring",
        "clause",
        "c",
        "share",
        "mgu",
        "\u03b8",
        "c\u03b8",
        "factor",
        "c",
        "example",
        "r",
        "x",
        "k",
        "f",
        "x",
        "b",
        "r",
        "c",
        "literal",
        "r",
        "x",
        "r",
        "c",
        "unify",
        "mgu",
        "x",
        "c",
        "hence",
        "r",
        "c",
        "k",
        "f",
        "c",
        "b",
        "factor",
        "original",
        "clause",
        "resolution",
        "principle",
        "let",
        "cand",
        "c",
        "two",
        "clause",
        "resolvent",
        "obtained",
        "resolution",
        "c",
        "c",
        "defined",
        "binary",
        "resolvent",
        "c",
        "c",
        "b",
        "binary",
        "resolvent",
        "c",
        "factor",
        "c",
        "c",
        "binary",
        "resolvent",
        "factor",
        "c",
        "c",
        "binary",
        "resolvent",
        "factor",
        "c",
        "factor",
        "c",
        "resolution",
        "proof",
        "precisely",
        "refutation",
        "constructed",
        "deriving",
        "empty",
        "clause",
        "\u03b3",
        "\u03b1",
        "using",
        "resolution",
        "always",
        "possible",
        "\u03b3",
        "\u03b1",
        "unsatisfiable",
        "since",
        "resolution",
        "refutation",
        "complete",
        "robinson",
        "a",
        "example",
        "resolution",
        "proof",
        "show",
        "set",
        "x",
        "p",
        "x",
        "q",
        "x",
        "x",
        "p",
        "x",
        "r",
        "x",
        "x",
        "q",
        "x",
        "r",
        "x",
        "denoted",
        "\u03b3",
        "entail",
        "formula",
        "xr",
        "x",
        "first",
        "step",
        "find",
        "clausal",
        "form",
        "\u03b3",
        "xr",
        "x",
        "resulting",
        "clause",
        "set",
        "denoted",
        "s",
        "shown",
        "step",
        "refutation",
        "refutation",
        "constructed",
        "using",
        "levelsaturation",
        "method",
        "compute",
        "resolvent",
        "initial",
        "set",
        "s",
        "add",
        "set",
        "repeat",
        "process",
        "empty",
        "clause",
        "derived",
        "produce",
        "sequence",
        "increasingly",
        "larger",
        "set",
        "s",
        "s",
        "s",
        "constraint",
        "impose",
        "resolve",
        "two",
        "clause",
        "s",
        "p",
        "x",
        "q",
        "x",
        "assumption",
        "p",
        "x",
        "r",
        "x",
        "assumption",
        "q",
        "x",
        "r",
        "x",
        "assumption",
        "r",
        "negate",
        "conclusion",
        "s",
        "q",
        "x",
        "r",
        "x",
        "re",
        "p",
        "x",
        "r",
        "x",
        "re",
        "p",
        "re",
        "q",
        "re",
        "s",
        "q",
        "re",
        "p",
        "re",
        "r",
        "x",
        "re",
        "r",
        "x",
        "re",
        "q",
        "re",
        "p",
        "re",
        "r",
        "re",
        "r",
        "re",
        "s",
        "r",
        "re",
        "r",
        "re",
        "r",
        "re",
        "r",
        "re",
        "re",
        "although",
        "resolution",
        "proof",
        "successful",
        "deriving",
        "significant",
        "drawback",
        "start",
        "refutation",
        "long",
        "take",
        "step",
        "reach",
        "contradiction",
        "due",
        "na\u00efve",
        "bruteforce",
        "nature",
        "implementation",
        "approach",
        "generates",
        "many",
        "formula",
        "clearly",
        "redundant",
        "note",
        "r",
        "derived",
        "six",
        "time",
        "also",
        "r",
        "x",
        "information",
        "content",
        "r",
        "one",
        "keep",
        "former",
        "disregard",
        "latter",
        "resolution",
        "like",
        "automated",
        "deduction",
        "method",
        "must",
        "supplemented",
        "strategy",
        "aimed",
        "improving",
        "efficiency",
        "deduction",
        "process",
        "sample",
        "derivation",
        "step",
        "researchtype",
        "problem",
        "command",
        "derivation",
        "thousand",
        "hundred",
        "thousand",
        "step",
        "resolution",
        "strategy",
        "successful",
        "implementation",
        "deduction",
        "calculus",
        "automated",
        "reasoning",
        "program",
        "requires",
        "integration",
        "search",
        "strategy",
        "reduce",
        "search",
        "space",
        "pruning",
        "unnecessary",
        "deduction",
        "path",
        "strategy",
        "remove",
        "redundant",
        "clause",
        "tautology",
        "soon",
        "appear",
        "derivation",
        "another",
        "strategy",
        "remove",
        "specific",
        "clause",
        "presence",
        "general",
        "one",
        "process",
        "known",
        "subsumption",
        "robinson",
        "a",
        "unrestricted",
        "subsumption",
        "however",
        "preserve",
        "refutation",
        "completeness",
        "resolution",
        "hence",
        "need",
        "restrict",
        "applicability",
        "loveland",
        "model",
        "elimination",
        "loveland",
        "discard",
        "sentence",
        "showing",
        "false",
        "model",
        "axiom",
        "subject",
        "model",
        "generation",
        "received",
        "much",
        "attention",
        "complementary",
        "process",
        "theorem",
        "proving",
        "method",
        "used",
        "successfully",
        "automated",
        "reasoning",
        "program",
        "show",
        "independence",
        "axiom",
        "set",
        "determine",
        "existence",
        "discrete",
        "mathematical",
        "structure",
        "meeting",
        "given",
        "criterion",
        "instead",
        "removing",
        "redundant",
        "clause",
        "strategy",
        "prevent",
        "generation",
        "useless",
        "clause",
        "first",
        "place",
        "setofsupport",
        "strategy",
        "wos",
        "carson",
        "robinson",
        "one",
        "powerful",
        "strategy",
        "kind",
        "subset",
        "set",
        "initially",
        "\u03b3",
        "\u03b1",
        "called",
        "set",
        "support",
        "iff",
        "satisfiable",
        "setofsupport",
        "resolution",
        "dictate",
        "resolved",
        "clause",
        "t",
        "motivation",
        "behind",
        "setofsupport",
        "since",
        "set",
        "\u03b3",
        "usually",
        "satisfiable",
        "might",
        "wise",
        "resolve",
        "two",
        "clause",
        "\u03b3",
        "hyperresolution",
        "robinson",
        "b",
        "reduces",
        "number",
        "intermediate",
        "resolvent",
        "combining",
        "several",
        "resolution",
        "step",
        "single",
        "inference",
        "step",
        "independently",
        "codiscovered",
        "linear",
        "resolution",
        "loveland",
        "luckham",
        "always",
        "resolve",
        "clause",
        "recently",
        "derived",
        "resolvent",
        "give",
        "deduction",
        "simple",
        "linear",
        "structure",
        "affording",
        "straightforward",
        "implementation",
        "yet",
        "linear",
        "resolution",
        "preserve",
        "refutation",
        "completeness",
        "using",
        "linear",
        "resolution",
        "derive",
        "empty",
        "clause",
        "example",
        "eight",
        "step",
        "p",
        "x",
        "q",
        "x",
        "assumption",
        "p",
        "x",
        "r",
        "x",
        "assumption",
        "q",
        "x",
        "r",
        "x",
        "assumption",
        "r",
        "negated",
        "conclusion",
        "p",
        "re",
        "q",
        "re",
        "r",
        "re",
        "re",
        "exception",
        "unrestricted",
        "subsumption",
        "strategy",
        "mentioned",
        "far",
        "preserve",
        "refutation",
        "completeness",
        "efficiency",
        "important",
        "consideration",
        "automated",
        "reasoning",
        "one",
        "may",
        "sometimes",
        "willing",
        "trade",
        "completeness",
        "speed",
        "unit",
        "resolution",
        "input",
        "resolution",
        "two",
        "refinement",
        "linear",
        "resolution",
        "former",
        "one",
        "resolved",
        "clause",
        "always",
        "literal",
        "latter",
        "one",
        "resolved",
        "clause",
        "always",
        "selected",
        "original",
        "set",
        "refuted",
        "albeit",
        "efficient",
        "neither",
        "strategy",
        "complete",
        "ordering",
        "strategy",
        "impose",
        "form",
        "partial",
        "ordering",
        "predicate",
        "symbol",
        "term",
        "literal",
        "clause",
        "occurring",
        "deduction",
        "ordered",
        "resolution",
        "treat",
        "clause",
        "set",
        "literal",
        "sequenceslinear",
        "ordersof",
        "literal",
        "ordered",
        "resolution",
        "extremely",
        "efficient",
        "like",
        "unit",
        "input",
        "resolution",
        "refutation",
        "complete",
        "end",
        "must",
        "noted",
        "strategy",
        "improve",
        "certain",
        "aspect",
        "deduction",
        "process",
        "expense",
        "others",
        "instance",
        "strategy",
        "may",
        "reduce",
        "size",
        "proof",
        "search",
        "space",
        "expense",
        "increasing",
        "say",
        "length",
        "shortest",
        "refutation",
        "taxonomy",
        "detailed",
        "presentation",
        "theoremproving",
        "strategy",
        "found",
        "bonacina",
        "several",
        "automated",
        "reasoning",
        "program",
        "based",
        "resolution",
        "refinement",
        "resolution",
        "otter",
        "succeeded",
        "prover",
        "driving",
        "force",
        "development",
        "automated",
        "reasoning",
        "wos",
        "overbeek",
        "lusk",
        "boyle",
        "superseded",
        "capable",
        "program",
        "like",
        "vampire",
        "voronkov",
        "kov\u00e1cs",
        "voronkov",
        "resolution",
        "also",
        "provides",
        "underlying",
        "logicocomputational",
        "mechanism",
        "popular",
        "logic",
        "programming",
        "language",
        "prolog",
        "clocksin",
        "mellish"
    ]
}