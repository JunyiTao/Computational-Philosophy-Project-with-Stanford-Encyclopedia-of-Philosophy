{
    "main_text": "Computational Systems || Software and Hardware\n1.1 Software and Hardware\n\nUsually, computational systems are seen as composed of two\nontologically distinct entities: software and hardware. Algorithms,\nsource codes, and programs fall in the first category of abstract\nentities; microprocessors, hard drives, and computing machines are\nconcrete, physical entities.\n\nMoore (1978) argues that such a duality is one of the three myths of\ncomputer science, in that the dichotomy software/hardware has a\npragmatic, but not an ontological, significance. Computer programs, as\nthe set of instructions a computer may execute, can be examined both\nat the symbolic level, as encoded instructions, and at the physical\nlevel, as the set of instructions stored in a physical medium. Moore\nstresses that no program exists as a pure abstract entity, that is,\nwithout a physical realization (a flash drive, a hard disk on a\nserver, or even a piece of paper). Early programs were even hardwired\ndirectly and, at the beginning of the computer era, programs consisted\nonly in patterns of physical levers. By the software/hardware\nopposition, one usually identifies software with the symbolic level of\nprograms, and hardware with the corresponding physical level. The\ndistinction, however, can be only pragmatically justified in that it\ndelimits the different tasks of developers. For them, software may be\ngiven by algorithms and the source code implementing them, while\nhardware is given by machine code and the microprocessors able to\nexecute it. By contrast, engineers realizing circuits implementing\nhardwired programs may be inclined to call software many physical\nparts of a computing machine. In other words, what counts as software\nfor one professional may count as hardware for another one.\n\nSuber (1988) goes even further, maintaining that hardware is a kind of\nsoftware. Software is defined as any pattern that is amenable to being\nread and executed: once one realizes that all physical objects display\npatterns, one is forced to accept the conclusion that hardware, as a\nphysical object, is also software. Suber defines a pattern as\n\u201cany definite structure, not in the narrow sense that requires\nsome recurrence, regularity, or symmetry\u201d (1988, 90) and argues\nthat any such structure can indeed be read and executed: for any\ndefinite pattern to which no meaning is associated, it is always\npossible to conceive a syntax and a semantics giving a meaning,\nthereby making the pattern an executable program.\n\nColburn (1999, 2000), while keeping software and hardware apart,\nstresses that the former has a dual nature, it is a \u201cconcrete\nabstraction\u201d as being both abstract and concrete. To define\nsoftware, one needs to make reference to both a \u201cmedium of\ndescription\u201d, i.e., the language used to express an algorithm,\nand a \u201cmedium of execution\u201d, namely the circuits composing\nthe hardware. While software is always concrete in that there is no\nsoftware without a concretization in some physical medium, it is\nnonetheless abstract, because programmers do not consider the\nimplementing machines in their activities: they would rather develop a\nprogram executable by any machine. This aspect is called by Colburn\n(1999) \u201cenlargement of content\u201d and it defines abstraction\nin computer science as an \u201cabstraction of content\u201d:\ncontent is enlarged rather than deleted, as it happens with\nmathematical abstraction.\n\nIrmak (2012) criticizes the dual nature of software proposed by\nColburn (1999, 2000). He understands an abstract entity as one lacking\nspatio-temporal properties, while being concrete means having those\nproperties. Defining software as a concrete abstraction would\ntherefore imply for software to have contradictory properties.\nSoftware does have temporal properties: as an object of human\ncreation, it starts to exist at some time once conceived and\nimplemented; and it can cease to exist at a certain subsequent time.\nSoftware ceases to exist when all copies are destroyed, their authors\ndie and nobody else remembers the respective algorithms. As an object\nof human creation, software is an artifact. However, software lacks\nspatial properties in that it cannot be identified with any concrete\nrealization of it. Destroying all the physical copies of a given\nsoftware would not imply that a particular software ceases to exist,\nas stated above, nor, for the very same reason, would deleting all\ntexts implementing the software algorithms in some high-level\nlanguage. Software is thus an abstract entity endowed with temporal\nproperties. For these reasons, Irmak (2010) definies software as an\nabstract artifact.\n\nDuncan (2011) points out that distinguishing software from hardware\nrequires a finer ontology than the one involving the simple\nabstract/concrete dichotomy. Duncan (2017) aims at providing such an\nontology by focusing on Turner\u2019s (2011) notion of specification\nas an expression that gives correctness conditions for a program (see\n \u00a72).\n Duncan (2017) stresses that a program acts also as a specification\nfor the implementing machine, meaning that a program specifies all\ncorrect behaviors that the machine is required to perform. If the\nmachine does not act consistently with the program, the machine is\nsaid to malfunction, in the same way a program which is not correct\nwith respect to its specification is said to be flawed or containing a\nbug. Another ontological category necessary to define the distinction\nsoftware/hardware is that of artifact, which Duncan (2017) defines as\na physical, spatio-temporal entity, which has been constructed so as\nto fulfill some functions and such that there is a community\nrecognizing the artifact as serving that purpose. That said, software\nis defined as a set of instructions encoded in some programming\nlanguage which act as specifications for an artifact able to read\nthose instructions; hardware is defined as an artifact whose function\nis to carry out the specified computation.\n",
    "section_title": "1.1 Software and Hardware",
    "entry_title": "The Philosophy of Computer Science",
    "hierarchy_title": "The Philosophy of Computer Science || Computational Systems || Software and Hardware",
    "tokenized_text": [
        "computational",
        "system",
        "software",
        "hardware",
        "software",
        "hardware",
        "usually",
        "computational",
        "system",
        "seen",
        "composed",
        "two",
        "ontologically",
        "distinct",
        "entity",
        "software",
        "hardware",
        "algorithm",
        "source",
        "code",
        "program",
        "fall",
        "first",
        "category",
        "abstract",
        "entity",
        "microprocessor",
        "hard",
        "drive",
        "computing",
        "machine",
        "concrete",
        "physical",
        "entity",
        "moore",
        "argues",
        "duality",
        "one",
        "three",
        "myth",
        "computer",
        "science",
        "dichotomy",
        "softwarehardware",
        "pragmatic",
        "ontological",
        "significance",
        "computer",
        "program",
        "set",
        "instruction",
        "computer",
        "may",
        "execute",
        "examined",
        "symbolic",
        "level",
        "encoded",
        "instruction",
        "physical",
        "level",
        "set",
        "instruction",
        "stored",
        "physical",
        "medium",
        "moore",
        "stress",
        "program",
        "exists",
        "pure",
        "abstract",
        "entity",
        "without",
        "physical",
        "realization",
        "flash",
        "drive",
        "hard",
        "disk",
        "server",
        "even",
        "piece",
        "paper",
        "early",
        "program",
        "even",
        "hardwired",
        "directly",
        "beginning",
        "computer",
        "era",
        "program",
        "consisted",
        "pattern",
        "physical",
        "lever",
        "softwarehardware",
        "opposition",
        "one",
        "usually",
        "identifies",
        "software",
        "symbolic",
        "level",
        "program",
        "hardware",
        "corresponding",
        "physical",
        "level",
        "distinction",
        "however",
        "pragmatically",
        "justified",
        "delimits",
        "different",
        "task",
        "developer",
        "software",
        "may",
        "given",
        "algorithm",
        "source",
        "code",
        "implementing",
        "hardware",
        "given",
        "machine",
        "code",
        "microprocessor",
        "able",
        "execute",
        "contrast",
        "engineer",
        "realizing",
        "circuit",
        "implementing",
        "hardwired",
        "program",
        "may",
        "inclined",
        "call",
        "software",
        "many",
        "physical",
        "part",
        "computing",
        "machine",
        "word",
        "count",
        "software",
        "one",
        "professional",
        "may",
        "count",
        "hardware",
        "another",
        "one",
        "suber",
        "go",
        "even",
        "maintaining",
        "hardware",
        "kind",
        "software",
        "software",
        "defined",
        "pattern",
        "amenable",
        "read",
        "executed",
        "one",
        "realizes",
        "physical",
        "object",
        "display",
        "pattern",
        "one",
        "forced",
        "accept",
        "conclusion",
        "hardware",
        "physical",
        "object",
        "also",
        "software",
        "suber",
        "defines",
        "pattern",
        "definite",
        "structure",
        "narrow",
        "sense",
        "requires",
        "recurrence",
        "regularity",
        "symmetry",
        "argues",
        "structure",
        "indeed",
        "read",
        "executed",
        "definite",
        "pattern",
        "meaning",
        "associated",
        "always",
        "possible",
        "conceive",
        "syntax",
        "semantics",
        "giving",
        "meaning",
        "thereby",
        "making",
        "pattern",
        "executable",
        "program",
        "colburn",
        "keeping",
        "software",
        "hardware",
        "apart",
        "stress",
        "former",
        "dual",
        "nature",
        "concrete",
        "abstraction",
        "abstract",
        "concrete",
        "define",
        "software",
        "one",
        "need",
        "make",
        "reference",
        "medium",
        "description",
        "ie",
        "language",
        "used",
        "express",
        "algorithm",
        "medium",
        "execution",
        "namely",
        "circuit",
        "composing",
        "hardware",
        "software",
        "always",
        "concrete",
        "software",
        "without",
        "concretization",
        "physical",
        "medium",
        "nonetheless",
        "abstract",
        "programmer",
        "consider",
        "implementing",
        "machine",
        "activity",
        "would",
        "rather",
        "develop",
        "program",
        "executable",
        "machine",
        "aspect",
        "called",
        "colburn",
        "enlargement",
        "content",
        "defines",
        "abstraction",
        "computer",
        "science",
        "abstraction",
        "content",
        "content",
        "enlarged",
        "rather",
        "deleted",
        "happens",
        "mathematical",
        "abstraction",
        "irmak",
        "criticizes",
        "dual",
        "nature",
        "software",
        "proposed",
        "colburn",
        "understands",
        "abstract",
        "entity",
        "one",
        "lacking",
        "spatiotemporal",
        "property",
        "concrete",
        "mean",
        "property",
        "defining",
        "software",
        "concrete",
        "abstraction",
        "would",
        "therefore",
        "imply",
        "software",
        "contradictory",
        "property",
        "software",
        "temporal",
        "property",
        "object",
        "human",
        "creation",
        "start",
        "exist",
        "time",
        "conceived",
        "implemented",
        "cease",
        "exist",
        "certain",
        "subsequent",
        "time",
        "software",
        "cease",
        "exist",
        "copy",
        "destroyed",
        "author",
        "die",
        "nobody",
        "else",
        "remembers",
        "respective",
        "algorithm",
        "object",
        "human",
        "creation",
        "software",
        "artifact",
        "however",
        "software",
        "lack",
        "spatial",
        "property",
        "identified",
        "concrete",
        "realization",
        "destroying",
        "physical",
        "copy",
        "given",
        "software",
        "would",
        "imply",
        "particular",
        "software",
        "cease",
        "exist",
        "stated",
        "reason",
        "would",
        "deleting",
        "text",
        "implementing",
        "software",
        "algorithm",
        "highlevel",
        "language",
        "software",
        "thus",
        "abstract",
        "entity",
        "endowed",
        "temporal",
        "property",
        "reason",
        "irmak",
        "definies",
        "software",
        "abstract",
        "artifact",
        "duncan",
        "point",
        "distinguishing",
        "software",
        "hardware",
        "requires",
        "finer",
        "ontology",
        "one",
        "involving",
        "simple",
        "abstractconcrete",
        "dichotomy",
        "duncan",
        "aim",
        "providing",
        "ontology",
        "focusing",
        "turner",
        "notion",
        "specification",
        "expression",
        "give",
        "correctness",
        "condition",
        "program",
        "see",
        "duncan",
        "stress",
        "program",
        "act",
        "also",
        "specification",
        "implementing",
        "machine",
        "meaning",
        "program",
        "specifies",
        "correct",
        "behavior",
        "machine",
        "required",
        "perform",
        "machine",
        "act",
        "consistently",
        "program",
        "machine",
        "said",
        "malfunction",
        "way",
        "program",
        "correct",
        "respect",
        "specification",
        "said",
        "flawed",
        "containing",
        "bug",
        "another",
        "ontological",
        "category",
        "necessary",
        "define",
        "distinction",
        "softwarehardware",
        "artifact",
        "duncan",
        "defines",
        "physical",
        "spatiotemporal",
        "entity",
        "constructed",
        "fulfill",
        "function",
        "community",
        "recognizing",
        "artifact",
        "serving",
        "purpose",
        "said",
        "software",
        "defined",
        "set",
        "instruction",
        "encoded",
        "programming",
        "language",
        "act",
        "specification",
        "artifact",
        "able",
        "read",
        "instruction",
        "hardware",
        "defined",
        "artifact",
        "whose",
        "function",
        "carry",
        "specified",
        "computation"
    ]
}