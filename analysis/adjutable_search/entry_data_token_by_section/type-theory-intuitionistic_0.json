{
    "main_text": "Overview\n1. Overview\nWe begin with a bird\u2019s eye view of some important aspects of\nintuitionistic type theory. Readers who are unfamiliar with the theory\nmay prefer to skip it on a first reading.\nThe origins of intuitionistic type theory are Brouwer\u2019s\nintuitionism and Russell\u2019s type theory. Like\n Church\u2019s classical simple theory of types\n it is based on the lambda calculus with types,\nbut differs from it in that it is based on the propositions-as-types\nprinciple, discovered by Curry (1958) for propositional logic and\nextended to predicate logic by Howard (1980) and de Bruijn\n(1970). This extension was made possible by the introduction of\nindexed families of types (dependent types) for representing the\npredicates of predicate logic. In this way all logical connectives and\nquantifiers can be interpreted by type formers. In intuitionistic type\ntheory further types are added, such as a type of natural numbers, a\ntype of small types (a universe) and a type of well-founded trees. The\nresulting theory contains intuitionistic number theory (Heyting\narithmetic) and much more.\nThe theory is formulated in natural deduction where the rules for\neach type former are classified as formation, introduction,\nelimination, and equality rules. These rules exhibit certain\nsymmerties between the introduction and elimination rules following\nGentzen\u2019s and Prawitz\u2019 treatment of natural deduction, \nas explained in the entry on\n proof-theoretic semantics.\nThe elements of propositions, when interpreted as types, are\ncalled proof-objects. When proof-objects are added to the\nnatural deduction calculus it becomes a typed lambda calculus with\ndependent types, which extends Church\u2019s original typed lambda\ncalculus. The equality rules are computation rules for the terms of\nthis calculus. Each function definable in the theory is total and\ncomputable. Intuitionistic type theory is thus a typed functional\nprogramming language with the unusual property that all programs\nterminate.\nIntuitionistic type theory is not only a formal logical system but\nalso provides a comprehensive philosophical framework for\nintuitionism. It is an interpreted language, where the\ndistinction between the demonstration of a judgment and\nthe proof of a proposition plays a fundamental role (Sundholm\n2012). The framework clarifies the Brouwer-Heyting-Kolmogorov\ninterpretation of intuitionistic logic and extends it to the more\ngeneral setting of intuitionistic type theory. In doing so it provides\na general conception not only of what a constructive proof is, but\nalso of what a constructive mathematical object is. The meaning of the\njudgments of intuitionistic type theory is explained in terms of\ncomputations of the canonical forms of types and terms. These\ninformal, intuitive meaning explanations are\n\u201cpre-mathematical\u201d and should be contrasted to formal\nmathematical models developed inside a standard mathematical framework\nsuch as set theory.\nThis meaning theory also justifies a variety of inductive,\nrecursive, and inductive-recursive definitions. Although\nproof-theoretically strong notions can be justified, such as analogues\nof certain large cardinals, the system is considered\npredicative. Impredicative definitions of the kind found in\nhigher-order logic, intuitionistic set theory, and topos theory are\nnot part of the theory. Neither is Markov\u2019s principle, and thus the\ntheory is distinct from Russian constructivism.\nAn alternative formal logical system for predicative constructive\nmathematics is Myhill and Aczel\u2019s\n constructive Zermelo-Fraenkel set theory\n (CZF). This theory, which is based on\nintuitionistic first-order predicate logic and weakens some of the\naxioms of classical Zermelo-Fraenkel Set Theory, has a natural\ninterpretation in intuitionistic type theory. Martin-L\u00f6f\u2019s meaning\nexplanations thus also indirectly form a basis for CZF.\nVariants of intuitionistic type theory underlie several widely used\nproof assistants, including NuPRL, Coq, and Agda. These proof\nassistants are computer systems that have been used for formalizing\nlarge and complex proofs of mathematical theorems, such as the Four\nColour Theorem in graph theory and the Feit-Thompson Theorem in finite\ngroup theory. They have also been used to prove the correctness of a realistic C compiler (Leroy 2009) and other \ncomputer software.\nPhilosophically and practically, intuitionistic type theory is a\nfoundational framework where constructive mathematics and computer\nprogramming are, in a deep sense, the same. This point has been\nemphasized by (Gonthier 2008) in the paper in which he describes his\nproof of the Four Colour Theorem:\n\nThe approach that proved successful for this proof was to turn\nalmost every mathematical concept into a data structure or a program\nin the Coq system, thereby converting the entire enterprise into one\nof program verification.\n\n",
    "section_title": "1. Overview",
    "entry_title": "Intuitionistic Type Theory",
    "hierarchy_title": "Intuitionistic Type Theory || Overview",
    "tokenized_text": [
        "overview",
        "overview",
        "begin",
        "bird",
        "eye",
        "view",
        "important",
        "aspect",
        "intuitionistic",
        "type",
        "theory",
        "reader",
        "unfamiliar",
        "theory",
        "may",
        "prefer",
        "skip",
        "first",
        "reading",
        "origin",
        "intuitionistic",
        "type",
        "theory",
        "brouwer",
        "intuitionism",
        "russell",
        "type",
        "theory",
        "like",
        "church",
        "classical",
        "simple",
        "theory",
        "type",
        "based",
        "lambda",
        "calculus",
        "type",
        "differs",
        "based",
        "propositionsastypes",
        "principle",
        "discovered",
        "curry",
        "propositional",
        "logic",
        "extended",
        "predicate",
        "logic",
        "howard",
        "de",
        "bruijn",
        "extension",
        "made",
        "possible",
        "introduction",
        "indexed",
        "family",
        "type",
        "dependent",
        "type",
        "representing",
        "predicate",
        "predicate",
        "logic",
        "way",
        "logical",
        "connective",
        "quantifier",
        "interpreted",
        "type",
        "former",
        "intuitionistic",
        "type",
        "theory",
        "type",
        "added",
        "type",
        "natural",
        "number",
        "type",
        "small",
        "type",
        "universe",
        "type",
        "wellfounded",
        "tree",
        "resulting",
        "theory",
        "contains",
        "intuitionistic",
        "number",
        "theory",
        "heyting",
        "arithmetic",
        "much",
        "theory",
        "formulated",
        "natural",
        "deduction",
        "rule",
        "type",
        "former",
        "classified",
        "formation",
        "introduction",
        "elimination",
        "equality",
        "rule",
        "rule",
        "exhibit",
        "certain",
        "symmerties",
        "introduction",
        "elimination",
        "rule",
        "following",
        "gentzen",
        "prawitz",
        "treatment",
        "natural",
        "deduction",
        "explained",
        "entry",
        "prooftheoretic",
        "semantics",
        "element",
        "proposition",
        "interpreted",
        "type",
        "called",
        "proofobjects",
        "proofobjects",
        "added",
        "natural",
        "deduction",
        "calculus",
        "becomes",
        "typed",
        "lambda",
        "calculus",
        "dependent",
        "type",
        "extends",
        "church",
        "original",
        "typed",
        "lambda",
        "calculus",
        "equality",
        "rule",
        "computation",
        "rule",
        "term",
        "calculus",
        "function",
        "definable",
        "theory",
        "total",
        "computable",
        "intuitionistic",
        "type",
        "theory",
        "thus",
        "typed",
        "functional",
        "programming",
        "language",
        "unusual",
        "property",
        "program",
        "terminate",
        "intuitionistic",
        "type",
        "theory",
        "formal",
        "logical",
        "system",
        "also",
        "provides",
        "comprehensive",
        "philosophical",
        "framework",
        "intuitionism",
        "interpreted",
        "language",
        "distinction",
        "demonstration",
        "judgment",
        "proof",
        "proposition",
        "play",
        "fundamental",
        "role",
        "sundholm",
        "framework",
        "clarifies",
        "brouwerheytingkolmogorov",
        "interpretation",
        "intuitionistic",
        "logic",
        "extends",
        "general",
        "setting",
        "intuitionistic",
        "type",
        "theory",
        "provides",
        "general",
        "conception",
        "constructive",
        "proof",
        "also",
        "constructive",
        "mathematical",
        "object",
        "meaning",
        "judgment",
        "intuitionistic",
        "type",
        "theory",
        "explained",
        "term",
        "computation",
        "canonical",
        "form",
        "type",
        "term",
        "informal",
        "intuitive",
        "meaning",
        "explanation",
        "premathematical",
        "contrasted",
        "formal",
        "mathematical",
        "model",
        "developed",
        "inside",
        "standard",
        "mathematical",
        "framework",
        "set",
        "theory",
        "meaning",
        "theory",
        "also",
        "justifies",
        "variety",
        "inductive",
        "recursive",
        "inductiverecursive",
        "definition",
        "although",
        "prooftheoretically",
        "strong",
        "notion",
        "justified",
        "analogue",
        "certain",
        "large",
        "cardinal",
        "system",
        "considered",
        "predicative",
        "impredicative",
        "definition",
        "kind",
        "found",
        "higherorder",
        "logic",
        "intuitionistic",
        "set",
        "theory",
        "topos",
        "theory",
        "part",
        "theory",
        "neither",
        "markov",
        "principle",
        "thus",
        "theory",
        "distinct",
        "russian",
        "constructivism",
        "alternative",
        "formal",
        "logical",
        "system",
        "predicative",
        "constructive",
        "mathematics",
        "myhill",
        "aczel",
        "constructive",
        "zermelofraenkel",
        "set",
        "theory",
        "czf",
        "theory",
        "based",
        "intuitionistic",
        "firstorder",
        "predicate",
        "logic",
        "weakens",
        "axiom",
        "classical",
        "zermelofraenkel",
        "set",
        "theory",
        "natural",
        "interpretation",
        "intuitionistic",
        "type",
        "theory",
        "martinl\u00f6f",
        "meaning",
        "explanation",
        "thus",
        "also",
        "indirectly",
        "form",
        "basis",
        "czf",
        "variant",
        "intuitionistic",
        "type",
        "theory",
        "underlie",
        "several",
        "widely",
        "used",
        "proof",
        "assistant",
        "including",
        "nuprl",
        "coq",
        "agda",
        "proof",
        "assistant",
        "computer",
        "system",
        "used",
        "formalizing",
        "large",
        "complex",
        "proof",
        "mathematical",
        "theorem",
        "four",
        "colour",
        "theorem",
        "graph",
        "theory",
        "feitthompson",
        "theorem",
        "finite",
        "group",
        "theory",
        "also",
        "used",
        "prove",
        "correctness",
        "realistic",
        "c",
        "compiler",
        "leroy",
        "computer",
        "software",
        "philosophically",
        "practically",
        "intuitionistic",
        "type",
        "theory",
        "foundational",
        "framework",
        "constructive",
        "mathematics",
        "computer",
        "programming",
        "deep",
        "sense",
        "point",
        "emphasized",
        "gonthier",
        "paper",
        "describes",
        "proof",
        "four",
        "colour",
        "theorem",
        "approach",
        "proved",
        "successful",
        "proof",
        "turn",
        "almost",
        "every",
        "mathematical",
        "concept",
        "data",
        "structure",
        "program",
        "coq",
        "system",
        "thereby",
        "converting",
        "entire",
        "enterprise",
        "one",
        "program",
        "verification"
    ]
}