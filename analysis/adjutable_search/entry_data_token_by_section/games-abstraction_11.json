{
    "main_text": "Game semantics || Interaction\n3.2 Interaction\n\nIn our description of the refinements to the continuous model of PCF\nin order to guarantee the definability of finite elements at each\ntype, we have progressively come closer to an interactive explanation\nof computation. For example, the action of a sequential algorithm \\(M\n\\to M'\\) (Curien 1986: sec. 3.4) exploits an external calling agent\nwhich triggers a cycle of requests and responses on input cells\nleading (possibly) to the emission of an output value. That\ninteraction should be a central notion in the analysis of computation,\nespecially in relation to full abstraction, is perhaps a natural\noutcome of the observational stance taken in the definition of\noperational equivalence. Our short account of game semantics starts\nprecisely from an analysis of a general notion of interaction\nas a motivation to a first formalization of games which is however\nrich enough to provide a universe for the interpretation of a\nrestricted set of types and terms. Later we shall add to this\ndefinition of game and strategies the features needed to express the\nconstraints that allow strategies to characterize precisely\nhigher-order, sequential computations, which is the aim set for\ndenotational semantics by the full abstraction problem. The present\naccount of the conceptual background of game semantics owes much to\nthe work of Abramsky and Curien (Abramsky 1994, 1996, 1997; Curien\n2003a).\n\nThe relevant notion of interaction has been isolated as the result of\ncontributions that come from widely different research areas\nintensively investigated only in relatively recent years, notably\nlinear logic (Girard 1987) and the theory of concurrent processes. It\nis in these areas that a notion of composition as interaction\nof modules takes shape. We give here just a simple example\nwhere the composition of modules in the form of \u201cparallel\ncomposition + hiding\u201d is found in nature, in order to connect it\nwith the origin of this idea in the semantics of concurrent processes\ndeveloped by Hoare (1985), and also to afford a first glimpse into a\nsimplified game formalism.\n\nConsider a module \\(S\\) with four channels labeled\n\\(a_\\textrm{in},a_\\textrm{out},r_\\textrm{in},r_\\textrm{out}\\). The\nmodule is intended to return on channel \\(a_\\textrm{out}\\) the\nsuccessor of the number \\(n\\) incoming through channel\n\\(a_\\textrm{in}\\), therefore its behavior can be specified as\nfollows:\n\n\\(S\\) receives an input signal \\(\\mathbf{?}_\\textrm{in}\\) on\nchannel \\(r_\\textrm{in}\\), then\nemits a signal \\(\\mathbf{?}_\\textrm{out}\\) on channel\n\\(r_\\textrm{out}\\), and\nwaits for a value \\(n\\) on channel \\(a_\\textrm{in}\\) and then,\nafter receiving it,\nemits a value \\(n+1\\) on channel \\(a_\\textrm{out}\\).\n\n\n(This pattern of interaction is formally identical to the\nhandshake protocol which is used in hardware design to\nsynchronize components in order to avoid hazards caused by\ninterference of signals.) This behavior can be mapped on the channels\nas follows:\n\n\n\nFigure 1: A module for the successor\nfunction.\n\n\nwhere \\(\\circ\\) means input or, more generally, a passive\ninvolvement of the module in the corresponding action, whereas\n\\(\\bullet\\) means output, or active involvement in the\naction. We can describe the behavior of \\(S\\) using traces\n(Hoare 1985), i.e., finite sequences of symbols from the infinite\nalphabet \\( \\alpha S = {\\{\n\\mathbf{?}_\\textrm{in},\\mathbf{?}_\\textrm{out},n_\\textrm{in},m_\\textrm{out}\n\\}}: \\) \n\n\\[\\tau S = {\\{ \\varepsilon,\\mathbf{?}_\\textrm{in},\\mathbf{?}_\\textrm{in}  \\mathbf{?}_\\textrm{out}, \\mathbf{?}_\\textrm{in}  \\mathbf{?}_\\textrm{out} n_\\textrm{in},\\mathbf{?}_\\textrm{in}  \\mathbf{?}_\\textrm{out} n_\\textrm{in}  n+1_\\textrm{out},\\ldots \\}}\\]\n\n If we consider another instance \\(S'\\) of \\(S\\)\nwith alphabet \\( \\alpha S' = {\\{\n\\mathbf{?}_\\textrm{in}',\\mathbf{?}_\\textrm{out}',n_\\textrm{in}',m_\\textrm{out}'\n\\}} \\) we can compose \\(S\\) and \\(S'\\) by identifying (= connecting)\nchannels \\(r_\\textrm{out},r_\\textrm{in}'\\), and \\(a_\\textrm{in} ,\na_\\textrm{out}'\\), and the signals passing through them, as shown:\n\n\\[\\begin{aligned}\n\\mathbf{?}_\\textrm{out} , \\mathbf{?}_\\textrm{in}' &\\leadsto x\\\\\nn+1_\\textrm{in} , n+1_\\textrm{out}' &\\leadsto y\\end{aligned}\\]\n\n This represents the parallel composition of the modules,\n\\(S \\| S'\\):\n\n\n\nFigure 2\n\n\nThe behavior of the compound module is described by the set of traces\n\n\\[{\\{ \\varepsilon,\n\\mathbf{?}_\\textrm{in},\n\\mathbf{?}_\\textrm{in}  x, \n\\mathbf{?}_\\textrm{in}  x  \\mathbf{?}_\\textrm{out}',\n\\mathbf{?}_\\textrm{in}  x  \\mathbf{?}_\\textrm{out}'  n_\\textrm{in}',\n\\mathbf{?}_\\textrm{in}  x  \\mathbf{?}_\\textrm{out}'  n_\\textrm{in}'  y, \n\\mathbf{?}_\\textrm{in}  x  \\mathbf{?}_\\textrm{out}'  n_\\textrm{in}'  y  n+2_\\textrm{out}, \\ldots \\}}\\]\n\n The symbols \\(x,y\\) can now be hidden, representing the\nbehavior of the final system\n\n\n\nFigure 3\n\n\nwhose traces have the required form \n\n\\[{\\{ \n\\varepsilon,\n\\mathbf{?}_\\textrm{in},\n\\mathbf{?}_\\textrm{in}  \\mathbf{?}_\\textrm{out}',\n\\mathbf{?}_\\textrm{in}   \\mathbf{?}_\\textrm{out}' n_\\textrm{in}',\n\\mathbf{?}_\\textrm{in}   \\mathbf{?}_\\textrm{out}'  n_\\textrm{in}'   n+2_\\textrm{out}, \\ldots \\}}.\\]\n\n This example contains\nmany of the ingredients on which game semantics is based. There is the\nidea of a System, whose behavior is triggered by an incoming request\nfrom its Environment: in a game formalism these are the roles of\nProponent and Opponent in a two-person game. The behavior of each\nmodule is described as the trace of its possible interactions with\nother agents, and the behaviors can be composed by a peculiar change\nof role whereby the module who plays as System (in the above example,\n\\(S\\) emitting a request signal on channel \\(r_\\textrm{out}\\)) is made\nto behave as Environment with respect to \\(S'\\) when this signal is\nreceived in input on channel \\(r_\\textrm{in}'\\). Let us see how this\nexample can be generalized.\n",
    "section_title": "3.2 Interaction",
    "entry_title": "Games, Full Abstraction and Full Completeness",
    "hierarchy_title": "Games, Full Abstraction and Full Completeness || Game semantics || Interaction",
    "tokenized_text": [
        "game",
        "semantics",
        "interaction",
        "interaction",
        "description",
        "refinement",
        "continuous",
        "model",
        "pcf",
        "order",
        "guarantee",
        "definability",
        "finite",
        "element",
        "type",
        "progressively",
        "come",
        "closer",
        "interactive",
        "explanation",
        "computation",
        "example",
        "action",
        "sequential",
        "algorithm",
        "to",
        "m",
        "curien",
        "sec",
        "exploit",
        "external",
        "calling",
        "agent",
        "trigger",
        "cycle",
        "request",
        "response",
        "input",
        "cell",
        "leading",
        "possibly",
        "emission",
        "output",
        "value",
        "interaction",
        "central",
        "notion",
        "analysis",
        "computation",
        "especially",
        "relation",
        "full",
        "abstraction",
        "perhaps",
        "natural",
        "outcome",
        "observational",
        "stance",
        "taken",
        "definition",
        "operational",
        "equivalence",
        "short",
        "account",
        "game",
        "semantics",
        "start",
        "precisely",
        "analysis",
        "general",
        "notion",
        "interaction",
        "motivation",
        "first",
        "formalization",
        "game",
        "however",
        "rich",
        "enough",
        "provide",
        "universe",
        "interpretation",
        "restricted",
        "set",
        "type",
        "term",
        "later",
        "shall",
        "add",
        "definition",
        "game",
        "strategy",
        "feature",
        "needed",
        "express",
        "constraint",
        "allow",
        "strategy",
        "characterize",
        "precisely",
        "higherorder",
        "sequential",
        "computation",
        "aim",
        "set",
        "denotational",
        "semantics",
        "full",
        "abstraction",
        "problem",
        "present",
        "account",
        "conceptual",
        "background",
        "game",
        "semantics",
        "owes",
        "much",
        "work",
        "abramsky",
        "curien",
        "abramsky",
        "curien",
        "a",
        "relevant",
        "notion",
        "interaction",
        "isolated",
        "result",
        "contribution",
        "come",
        "widely",
        "different",
        "research",
        "area",
        "intensively",
        "investigated",
        "relatively",
        "recent",
        "year",
        "notably",
        "linear",
        "logic",
        "girard",
        "theory",
        "concurrent",
        "process",
        "area",
        "notion",
        "composition",
        "interaction",
        "module",
        "take",
        "shape",
        "give",
        "simple",
        "example",
        "composition",
        "module",
        "form",
        "parallel",
        "composition",
        "hiding",
        "found",
        "nature",
        "order",
        "connect",
        "origin",
        "idea",
        "semantics",
        "concurrent",
        "process",
        "developed",
        "hoare",
        "also",
        "afford",
        "first",
        "glimpse",
        "simplified",
        "game",
        "formalism",
        "consider",
        "module",
        "s",
        "four",
        "channel",
        "labeled",
        "a_textrm",
        "a_textrm",
        "r_textrm",
        "r_textrm",
        "module",
        "intended",
        "return",
        "channel",
        "a_textrm",
        "successor",
        "number",
        "n",
        "incoming",
        "channel",
        "a_textrm",
        "therefore",
        "behavior",
        "specified",
        "follows",
        "s",
        "receives",
        "input",
        "signal",
        "mathbf",
        "_textrm",
        "channel",
        "r_textrm",
        "emits",
        "signal",
        "mathbf",
        "_textrm",
        "channel",
        "r_textrm",
        "wait",
        "value",
        "n",
        "channel",
        "a_textrm",
        "receiving",
        "emits",
        "value",
        "n",
        "channel",
        "a_textrm",
        "pattern",
        "interaction",
        "formally",
        "identical",
        "handshake",
        "protocol",
        "used",
        "hardware",
        "design",
        "synchronize",
        "component",
        "order",
        "avoid",
        "hazard",
        "caused",
        "interference",
        "signal",
        "behavior",
        "mapped",
        "channel",
        "follows",
        "figure",
        "module",
        "successor",
        "function",
        "circ",
        "mean",
        "input",
        "generally",
        "passive",
        "involvement",
        "module",
        "corresponding",
        "action",
        "whereas",
        "bullet",
        "mean",
        "output",
        "active",
        "involvement",
        "action",
        "describe",
        "behavior",
        "s",
        "using",
        "trace",
        "hoare",
        "ie",
        "finite",
        "sequence",
        "symbol",
        "infinite",
        "alphabet",
        "alpha",
        "mathbf",
        "_textrm",
        "mathbf",
        "_textrm",
        "n_textrm",
        "m_textrm",
        "tau",
        "varepsilon",
        "mathbf",
        "_textrm",
        "mathbf",
        "_textrm",
        "mathbf",
        "_textrm",
        "mathbf",
        "_textrm",
        "mathbf",
        "_textrm",
        "n_textrm",
        "mathbf",
        "_textrm",
        "mathbf",
        "_textrm",
        "n_textrm",
        "n_textrm",
        "ldots",
        "consider",
        "another",
        "instance",
        "s",
        "s",
        "alphabet",
        "alpha",
        "mathbf",
        "_textrm",
        "mathbf",
        "_textrm",
        "n_textrm",
        "m_textrm",
        "compose",
        "s",
        "s",
        "identifying",
        "connecting",
        "channel",
        "r_textrm",
        "r_textrm",
        "a_textrm",
        "a_textrm",
        "signal",
        "passing",
        "shown",
        "begin",
        "aligned",
        "mathbf",
        "_textrm",
        "mathbf",
        "_textrm",
        "leadsto",
        "x",
        "n_textrm",
        "n_textrm",
        "leadsto",
        "yend",
        "aligned",
        "represents",
        "parallel",
        "composition",
        "module",
        "s",
        "figure",
        "behavior",
        "compound",
        "module",
        "described",
        "set",
        "trace",
        "varepsilon",
        "mathbf",
        "_textrm",
        "mathbf",
        "_textrm",
        "x",
        "mathbf",
        "_textrm",
        "x",
        "mathbf",
        "_textrm",
        "mathbf",
        "_textrm",
        "x",
        "mathbf",
        "_textrm",
        "n_textrm",
        "mathbf",
        "_textrm",
        "x",
        "mathbf",
        "_textrm",
        "n_textrm",
        "mathbf",
        "_textrm",
        "x",
        "mathbf",
        "_textrm",
        "n_textrm",
        "n_textrm",
        "ldots",
        "symbol",
        "x",
        "y",
        "hidden",
        "representing",
        "behavior",
        "final",
        "system",
        "figure",
        "whose",
        "trace",
        "required",
        "form",
        "varepsilon",
        "mathbf",
        "_textrm",
        "mathbf",
        "_textrm",
        "mathbf",
        "_textrm",
        "mathbf",
        "_textrm",
        "mathbf",
        "_textrm",
        "n_textrm",
        "mathbf",
        "_textrm",
        "mathbf",
        "_textrm",
        "n_textrm",
        "n_textrm",
        "ldots",
        "example",
        "contains",
        "many",
        "ingredient",
        "game",
        "semantics",
        "based",
        "idea",
        "system",
        "whose",
        "behavior",
        "triggered",
        "incoming",
        "request",
        "environment",
        "game",
        "formalism",
        "role",
        "proponent",
        "opponent",
        "twoperson",
        "game",
        "behavior",
        "module",
        "described",
        "trace",
        "possible",
        "interaction",
        "agent",
        "behavior",
        "composed",
        "peculiar",
        "change",
        "role",
        "whereby",
        "module",
        "play",
        "system",
        "example",
        "s",
        "emitting",
        "request",
        "signal",
        "channel",
        "r_textrm",
        "made",
        "behave",
        "environment",
        "respect",
        "s",
        "signal",
        "received",
        "input",
        "channel",
        "r_textrm",
        "let",
        "u",
        "see",
        "example",
        "generalized"
    ]
}