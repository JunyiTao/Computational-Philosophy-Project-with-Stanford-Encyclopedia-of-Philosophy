{
    "main_text": "Structured programming and correctness of programs || Hoare calculus\n3.1 Hoare calculus\n\nTo illustrate the sort of principles of programs captured by the rules\nin the Hoare calculus it is enough to consult some of them. (N.B.: the\nrules mean that if all the statements above the rule line\nhold\u2014the premises\u2014then also the statement under the rule\nline\u2014the conclusion\u2014 holds.) \n\\[\n\\frac{\\{A\\}\\alpha_1 \\{B\\}\\quad\\{B\\} \\alpha_2\\{C\\}}\n    {\\{A\\} \\alpha_1;\\alpha_2\\{C\\}}\n\\text{ (rule of composition)}\n\\]\n\n\nThe rule of composition captures the elementary sequential composition\nof programs. As premises, we have two assumptions about the partial\ncorrectness of two programs \\(\\alpha_1\\) and \\(\\alpha_2\\). The first\nassumption is that when \\(\\alpha_1\\) is executed in a state satisfying\n\\(A\\), then it will finish in a state satisfying \\(B\\), whenever it\nhalts. The second assumption is that when \\(\\alpha_2\\) is executed in\na state satisfying \\(B\\), then it will finish in a state satisfying\n\\(C\\), whenever it halts. The conclusion of the rule is about the\npartial correctness of the program \\(\\alpha_1;\\alpha_2\\) (i.e.,\n\\(\\alpha_1\\) sequentially composed with \\(\\alpha_2\\)), that follows\nfrom the two assumptions. Namely, we can conclude that if\n\\(\\alpha_1;\\alpha_2\\) is executed in a state satisfying \\(A\\), then it\nfinishes in a state satisfying \\(C\\), whenever it halts.\n\nThe rule of iteration is an important one because it captures the\nessential ability of programs to execute some portion of code\nrepeatedly until a certain condition ceases to hold. \n\\[\n\\frac{\\{A \\land B\\}\\alpha\\{A\\}}\n     {\\{A\\} \\mathsf{while}~B~\\mathsf{do}~\\alpha \\{\\lnot B \\land A\\}}\n \\text{ (rule of iteration)}\n\\]\n\n\nFinally, the two rules of consequence are fundamental to give a formal\nbasis to intuitively clear reasoning involving weaker post-conditions\nand stronger preconditions respectively. \n\\[\n\\frac{\\{A\\}\\alpha\\{B\\}\\quad B \\rightarrow C}\n     {\\{A\\} \\alpha \\{C\\}}\n \\text{ (rule of consequence 1)}\n\\]\n \n\\[\n\\frac{C\\rightarrow A\\quad \\{A\\}\\alpha\\{B\\}}\n     {\\{C\\}\\alpha\\{B\\}}\n \\text{ (rule of consequence 2)}\n\\]\n\n\nFrom the formalism presented in Hoare [1969], we leave out its axiom\nschemas as it would require a first-order language. Finally, in\nsubsequent work on Hoare logic, more rules are also often added. See\nApt [1979] for an early overview.\n",
    "section_title": "3.1 Hoare calculus",
    "entry_title": "Propositional Dynamic Logic",
    "hierarchy_title": "Propositional Dynamic Logic || Structured programming and correctness of programs || Hoare calculus",
    "tokenized_text": [
        "structured",
        "programming",
        "correctness",
        "program",
        "hoare",
        "calculus",
        "hoare",
        "calculus",
        "illustrate",
        "sort",
        "principle",
        "program",
        "captured",
        "rule",
        "hoare",
        "calculus",
        "enough",
        "consult",
        "nb",
        "rule",
        "mean",
        "statement",
        "rule",
        "line",
        "holdthe",
        "premisesthen",
        "also",
        "statement",
        "rule",
        "linethe",
        "conclusion",
        "hold",
        "frac",
        "a",
        "alpha_",
        "b",
        "quad",
        "b",
        "alpha_",
        "c",
        "a",
        "alpha_",
        "alpha_",
        "c",
        "text",
        "rule",
        "composition",
        "rule",
        "composition",
        "capture",
        "elementary",
        "sequential",
        "composition",
        "program",
        "premise",
        "two",
        "assumption",
        "partial",
        "correctness",
        "two",
        "program",
        "alpha_",
        "alpha_",
        "first",
        "assumption",
        "alpha_",
        "executed",
        "state",
        "satisfying",
        "a",
        "finish",
        "state",
        "satisfying",
        "b",
        "whenever",
        "halt",
        "second",
        "assumption",
        "alpha_",
        "executed",
        "state",
        "satisfying",
        "b",
        "finish",
        "state",
        "satisfying",
        "c",
        "whenever",
        "halt",
        "conclusion",
        "rule",
        "partial",
        "correctness",
        "program",
        "alpha_",
        "alpha_",
        "ie",
        "alpha_",
        "sequentially",
        "composed",
        "alpha_",
        "follows",
        "two",
        "assumption",
        "namely",
        "conclude",
        "alpha_",
        "alpha_",
        "executed",
        "state",
        "satisfying",
        "a",
        "finish",
        "state",
        "satisfying",
        "c",
        "whenever",
        "halt",
        "rule",
        "iteration",
        "important",
        "one",
        "capture",
        "essential",
        "ability",
        "program",
        "execute",
        "portion",
        "code",
        "repeatedly",
        "certain",
        "condition",
        "cease",
        "hold",
        "frac",
        "land",
        "b",
        "alpha",
        "a",
        "a",
        "mathsf",
        "bmathsf",
        "alpha",
        "lnot",
        "b",
        "land",
        "a",
        "text",
        "rule",
        "iteration",
        "finally",
        "two",
        "rule",
        "consequence",
        "fundamental",
        "give",
        "formal",
        "basis",
        "intuitively",
        "clear",
        "reasoning",
        "involving",
        "weaker",
        "postconditions",
        "stronger",
        "precondition",
        "respectively",
        "frac",
        "a",
        "alpha",
        "b",
        "quad",
        "b",
        "rightarrow",
        "c",
        "a",
        "alpha",
        "c",
        "text",
        "rule",
        "consequence",
        "frac",
        "crightarrow",
        "aquad",
        "a",
        "alpha",
        "b",
        "c",
        "alpha",
        "b",
        "text",
        "rule",
        "consequence",
        "formalism",
        "presented",
        "hoare",
        "leave",
        "axiom",
        "schema",
        "would",
        "require",
        "firstorder",
        "language",
        "finally",
        "subsequent",
        "work",
        "hoare",
        "logic",
        "rule",
        "also",
        "often",
        "added",
        "see",
        "apt",
        "early",
        "overview"
    ]
}