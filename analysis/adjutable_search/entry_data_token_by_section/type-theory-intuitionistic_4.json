{
    "main_text": "Propositions as Types || Dependent Types\n2.4 Dependent Types\nIn intuitionistic type theory there are primitive type formers\n\\(\\Sigma\\) and \\(\\Pi\\) for general sums and products, and \\(\\I\\) for\nidentity types, analogous to the set-theoretic constructions described\nabove. The identity type \\(\\I(\\N,m,n)\\) corresponding to the\nset \\(\\E_{m,n}\\) is an example of a dependent type since it\ndepends on \\(m\\) and \\(n\\). It is also called an indexed family of\ntypes since it is a family of types indexed by \\(m\\) and\n\\(n\\). Similarly, we can form the general disjoint sum \\(\\Sigma x {:}\nA.\\, B\\) and the general cartesian product \\(\\Pi x {:} A.\\, B\\) of such a\nfamily of types \\(B\\) indexed by \\(x {:} A\\), corresponding to the set\ntheoretic sum and product operations above.\nDependent types can also be defined by primitive recursion. An\nexample is the type of \\(n\\)-tuples \\(A^n\\) of elements of type \\(A\\)\nand indexed by \\(n {:} N\\) defined by the equations\n\n\\[\\begin{align*} \nA^0 &= 1\\\\ \nA^{n+1} &= A \\times A^n \n\\end{align*}\\]\n\n where \\(1\\) is a\none element type and \\(\\times\\) denotes the cartesian product of two\ntypes. We note that dependent types introduce computation in types:\nthe defining rules above are computation rules. For example, the\nresult of computing \\(A^3\\) is \\(A \\times (A \\times (A \\times\n1))\\).\n",
    "section_title": "2.4 Dependent Types",
    "entry_title": "Intuitionistic Type Theory",
    "hierarchy_title": "Intuitionistic Type Theory || Propositions as Types || Dependent Types",
    "tokenized_text": [
        "proposition",
        "type",
        "dependent",
        "type",
        "dependent",
        "type",
        "intuitionistic",
        "type",
        "theory",
        "primitive",
        "type",
        "former",
        "sigma",
        "pi",
        "general",
        "sum",
        "product",
        "i",
        "identity",
        "type",
        "analogous",
        "settheoretic",
        "construction",
        "described",
        "identity",
        "type",
        "i",
        "n",
        "n",
        "corresponding",
        "set",
        "e_",
        "n",
        "example",
        "dependent",
        "type",
        "since",
        "depends",
        "m",
        "n",
        "also",
        "called",
        "indexed",
        "family",
        "type",
        "since",
        "family",
        "type",
        "indexed",
        "m",
        "n",
        "similarly",
        "form",
        "general",
        "disjoint",
        "sum",
        "sigma",
        "x",
        "a",
        "b",
        "general",
        "cartesian",
        "product",
        "pi",
        "x",
        "a",
        "b",
        "family",
        "type",
        "b",
        "indexed",
        "x",
        "a",
        "corresponding",
        "set",
        "theoretic",
        "sum",
        "product",
        "operation",
        "dependent",
        "type",
        "also",
        "defined",
        "primitive",
        "recursion",
        "example",
        "type",
        "n",
        "tuples",
        "an",
        "element",
        "type",
        "a",
        "indexed",
        "n",
        "n",
        "defined",
        "equation",
        "begin",
        "align",
        "a",
        "a",
        "n",
        "times",
        "an",
        "end",
        "align",
        "one",
        "element",
        "type",
        "times",
        "denotes",
        "cartesian",
        "product",
        "two",
        "type",
        "note",
        "dependent",
        "type",
        "introduce",
        "computation",
        "type",
        "defining",
        "rule",
        "computation",
        "rule",
        "example",
        "result",
        "computing",
        "a",
        "times",
        "times",
        "times"
    ]
}