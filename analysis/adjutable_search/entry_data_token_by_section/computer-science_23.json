{
    "main_text": "Verification || Explanation\n6.3 Explanation\n\nA software test is considered successful when miscomputations are\ndetected (assuming that no computational artifact is 100% correct).\nThe successive step is to find out what caused the execution to be\nincorrect, that is, to trace back the fault (more familiarly named\n\u2018bug\u2019), before proceeding to the debugging phase and then\ntesting the system again. In other words, an explanation of\nthe observed miscomputation is to be advanced.\n\nEfforts have been made to consider explanations in computer science\n(Piccinini 2007; Piccinini and Craver 2011; Piccinini 2015; Angius and\nTamburrini 2016) in relation to the different models of explanations\nelaborated in the philosophy of science. In particular, computational\nexplanations can be understood as a specific kind of mechanistic\nexplanation (Glennan 1996; Machamer et al. 2000; Bechtel\nand Abrahamsen 2005), insofar as computing processes can be analyzed\nas mechanisms (Piccinini 2007; 2015; see also the entry on\n computation in physical systems).\n\nConsider a processor executing an instruction. The involved process\ncan be understood as a mechanism whose components are states and\ncombinatory elements in the processor instantiating the functions\nprescribed by the relevant hardware specifications (specifications for\nregisters, for the Arithmetic Logic Unit etc..), organized in such a\nway that they are capable of carrying out the observed execution.\nProviding the description of such a mechanism counts as advancing a\nmechanist explanation of the observed computation, such as the\nexplanation of an operational malfunction.\n\nFor every type of miscomputation (see\n \u00a77.3),\n a corresponding mechanist explanation can be defined at the adequate\nLoA and with respect to the set of specifications characterizing that\nLoA. Indeed, abstract descriptions of mechanisms still supply one with\na mechanist explanation in the form of a mechanism schema,\ndefined as \u201ca truncated abstract description of a mechanism that\ncan be filled with descriptions of known component parts and\nactivities\u201d (Machamer et al. 2000, p. 15). For\ninstance, suppose the very common case in which a machine miscomputes\nby executing a program containing syntax errors, called slips. The\ncomputing machine is unable to correctly implement the functional\nrequirements provided by the program specifications. However, for\nexplanatory purposes, it would be redundant to provide an explanation\nof the occurred slip at the hardware level of abstraction, by\nadvancing the detailed description of the hardware components and\ntheir functional organization. In such cases, a satisfactory\nexplanation may consist in showing that the program\u2019s code is\nnot a correct instantiation of the provided program specifications\n(Angius and Tamburrini 2016). In order to explain mechanistically an\noccurred miscomputation, it may be sufficient to provide the\ndescription of the incorrect program, abstracting from the rest of the\ncomputing mechanism (Piccinini and Craver 2011). Abstraction is a\nvirtue not only in software development and specification, but also in\nthe explanation of computational systems\u2019 behaviors.\n",
    "section_title": "6.3 Explanation",
    "entry_title": "The Philosophy of Computer Science",
    "hierarchy_title": "The Philosophy of Computer Science || Verification || Explanation",
    "tokenized_text": [
        "verification",
        "explanation",
        "explanation",
        "software",
        "test",
        "considered",
        "successful",
        "miscomputations",
        "detected",
        "assuming",
        "computational",
        "artifact",
        "correct",
        "successive",
        "step",
        "find",
        "caused",
        "execution",
        "incorrect",
        "trace",
        "back",
        "fault",
        "familiarly",
        "named",
        "bug",
        "proceeding",
        "debugging",
        "phase",
        "testing",
        "system",
        "word",
        "explanation",
        "observed",
        "miscomputation",
        "advanced",
        "effort",
        "made",
        "consider",
        "explanation",
        "computer",
        "science",
        "piccinini",
        "piccinini",
        "craver",
        "piccinini",
        "angius",
        "tamburrini",
        "relation",
        "different",
        "model",
        "explanation",
        "elaborated",
        "philosophy",
        "science",
        "particular",
        "computational",
        "explanation",
        "understood",
        "specific",
        "kind",
        "mechanistic",
        "explanation",
        "glennan",
        "machamer",
        "et",
        "al",
        "bechtel",
        "abrahamsen",
        "insofar",
        "computing",
        "process",
        "analyzed",
        "mechanism",
        "piccinini",
        "see",
        "also",
        "entry",
        "computation",
        "physical",
        "system",
        "consider",
        "processor",
        "executing",
        "instruction",
        "involved",
        "process",
        "understood",
        "mechanism",
        "whose",
        "component",
        "state",
        "combinatory",
        "element",
        "processor",
        "instantiating",
        "function",
        "prescribed",
        "relevant",
        "hardware",
        "specification",
        "specification",
        "register",
        "arithmetic",
        "logic",
        "unit",
        "etc",
        "organized",
        "way",
        "capable",
        "carrying",
        "observed",
        "execution",
        "providing",
        "description",
        "mechanism",
        "count",
        "advancing",
        "mechanist",
        "explanation",
        "observed",
        "computation",
        "explanation",
        "operational",
        "malfunction",
        "every",
        "type",
        "miscomputation",
        "see",
        "corresponding",
        "mechanist",
        "explanation",
        "defined",
        "adequate",
        "loa",
        "respect",
        "set",
        "specification",
        "characterizing",
        "loa",
        "indeed",
        "abstract",
        "description",
        "mechanism",
        "still",
        "supply",
        "one",
        "mechanist",
        "explanation",
        "form",
        "mechanism",
        "schema",
        "defined",
        "truncated",
        "abstract",
        "description",
        "mechanism",
        "filled",
        "description",
        "known",
        "component",
        "part",
        "activity",
        "machamer",
        "et",
        "al",
        "p",
        "instance",
        "suppose",
        "common",
        "case",
        "machine",
        "miscomputes",
        "executing",
        "program",
        "containing",
        "syntax",
        "error",
        "called",
        "slip",
        "computing",
        "machine",
        "unable",
        "correctly",
        "implement",
        "functional",
        "requirement",
        "provided",
        "program",
        "specification",
        "however",
        "explanatory",
        "purpose",
        "would",
        "redundant",
        "provide",
        "explanation",
        "occurred",
        "slip",
        "hardware",
        "level",
        "abstraction",
        "advancing",
        "detailed",
        "description",
        "hardware",
        "component",
        "functional",
        "organization",
        "case",
        "satisfactory",
        "explanation",
        "may",
        "consist",
        "showing",
        "program",
        "code",
        "correct",
        "instantiation",
        "provided",
        "program",
        "specification",
        "angius",
        "tamburrini",
        "order",
        "explain",
        "mechanistically",
        "occurred",
        "miscomputation",
        "may",
        "sufficient",
        "provide",
        "description",
        "incorrect",
        "program",
        "abstracting",
        "rest",
        "computing",
        "mechanism",
        "piccinini",
        "craver",
        "abstraction",
        "virtue",
        "software",
        "development",
        "specification",
        "also",
        "explanation",
        "computational",
        "system",
        "behavior"
    ]
}