{
    "main_text": "Computing with Turing Machines || Turing\u2019s Universal Machine\n2.3 Turing\u2019s Universal Machine\n\nThe universal Turing machine which was constructed to prove the\nuncomputability of certain problems, is, roughly speaking, a Turing\nmachine that is able to compute what any other Turing machine\ncomputes. Assuming that the Turing machine notion fully captures\ncomputability (and so that Turing\u2019s thesis is valid), it is\nimplied that anything which can be \u201ccomputed\u201d, can also be\ncomputed by that one universal machine. Conversely, any problem that\nis not computable by the universal machine is considered to be\nuncomputable.\n\nThis is the rhetorical and theoretical power of the universal machine\nconcept, viz. that one relatively simple formal device captures all\n\u201cthe possible processes which can be carried out in\ncomputing a number\u201d (Turing 1936\u20137). It is also one\nof the main reasons why Turing has been retrospectively\nidentified as one of the founding fathers of computer science (see\n Section 5).\n\nSo how to construct a universal machine U out of the set of\nbasic operations we have at our disposal? Turing\u2019s approach is\nthe construction of a machine U which is able to (1)\n\u2018understand\u2019 the program of any other machine\n\\(T_{n}\\) and, based on that \u201cunderstanding\u201d, (2)\n\u2018mimic\u2019 the behavior of \\(T_{n}\\). To this end, a method\nis needed which allows to treat the program and the behavior of\n\\(T_n\\) interchangeably since both aspects are manipulated on the same\ntape and by the same machine. This is achieved by Turing in two basic\nsteps: the development of (1) a notational method (2) a set of\nelementary functions which treats that notation\u2014independent of\nwhether it is formalizing the program or the behavior of\n\\(T_n\\)\u2014as text to be compared, copied down, erased, etc. In\nother words, Turing develops a technique that allows to treat program\nand behavior on the same level.\n2.3.1 Interchangeability of program and behavior: a notation\n\nGiven some machine \\(T_n\\), Turing\u2019s basic idea is to construct\na machine \\(T_n'\\) which, rather than directly printing the output\nof \\(T_n\\), prints out the successive complete configurations or\ninstantaneous descriptions of \\(T_n\\). In order to achieve this,\n\\(T_n'\\):\n\n\n[\u2026] could be made to depend on having the rules of operation\n[\u2026] of [\\(T_n\\)] written somewhere within itself [\u2026]\neach step could be carried out by referring to these rules. (Turing\n1936\u20137: 242)\n\n\nIn other words, \\(T_n'\\) prints out the successive complete\nconfigurations of \\(T_n\\) by having the program of \\(T_n\\) written on\nits tape. Thus, Turing needs a notational method which makes it\npossible to \u2018capture\u2019 two different aspects of a Turing\nmachine on one and the same tape in such a way they can be treated\nby the same machine, viz.:\n\n(1) its description in\nterms of what it should do\u2014the quintuple\nnotation\n(2) its description in\nterms of what it is doing\u2014the complete configuration\nnotation\n\n\nThus, a first and perhaps most essential step, in the construction of\nU are the quintuple and complete configuration notation and\nthe idea of putting them on the same tape. More particularly, the tape\nis divided into two regions which we will call the A and\nB region here. The A region contains a notation of the\n\u2018program\u2019 of \\(T_n\\) and the B region a notation\nfor the successive complete configurations of \\(T_n\\). In\nTuring\u2019s paper they are separated by an additional symbol\n\u201c::\u201d.\n\nTo simplify the construction of U and in order to encode any\nTuring machine as a unique number, Turing develops a third notation\nwhich permits to express the quintuples and complete configurations\nwith letters only. This is determined by [Note that we use\nTuring\u2019s original encoding. Of course, there is a broad variety\nof possible encodings, including binary encodings]:\n\nReplacing each state \\(q_i\\) in a quintuple of \\(T_n\\) by \\[D\\underbrace{A\\ldots A}_i,\\] so, for instance \\(q_3\\) becomes \\(DAAA\\).\nReplacing each symbol \\(S_{j}\\) in a quintuple of \\(T_n\\) by \\[D\\underbrace{C\\ldots C}_j,\\] so, for instance, \\(S_1\\) becomes \\(DC\\).\n\n\nUsing this method, each quintuple of some Turing machine \\(T_n\\) can\nbe expressed in terms of a sequence of capital letters and so the\n\u2018program\u2019 of any machine \\(T_{n}\\) can be expressed by the\nset of symbols A, C, D, R, L, N and ;. This is the so-called\nStandard Description (S.D.) of a Turing machine. Thus, for\ninstance, the S.D. of \\(T_{\\textrm{Simple}}\\) is:  \n\n;DADDRDAA;DADCDRDAA;DAADDCRDA;DAADCDCRDA\n\n\nThis is, essentially, Turing\u2019s version of\n G\u00f6del numbering.\n Indeed, as Turing shows, one can easily get a numerical description\nrepresentation or Description Number (D.N.) of a Turing\nmachine \\(T_{n}\\) by replacing:\n\n\u201cA\u201d by \u201c1\u201d\n\u201cC\u201d by \u201c2\u201d\n\u201cD\u201d by \u201c3\u201d\n\u201cL\u201d by \u201c4\u201d\n\u201cR\u201d by \u201c5\u201d\n\u201cN\u201d by \u201c6\u201d\n\u201c;\u201d by \u201c7\u201d\n\n\nThus, the D.N. of \\(T_{\\textrm{Simple}}\\) is: \n\n7313353117313135311731133153173113131531\n\n\nNote that every machine \\(T_n\\) has a unique D.N.; a D.N. represents\none and one machine only.\n\nClearly, the method used to determine the \\(S.D.\\) of some machine\n\\(T_n\\) can also be used to write out the successive complete\nconfigurations of \\(T_n\\). Using \u201c:\u201d as a separator\nbetween successive complete configurations, the first few complete\nconfigurations of \\(T_{\\textrm{Simple}}\\) are:  \n\n:DAD:DDAAD:DDCDAD:DDCDDAAD:DDCDDCDAD\n\n2.3.2 Interchangeability of program and behavior: a basic set of functions\n\nHaving a notational method to write the program and successive\ncomplete configurations of some machine \\(T_n\\) on one and the same\ntape of some other machine \\(T_n'\\) is the first step in\nTuring\u2019s construction of U. However, U should also\nbe able to \u201cemulate\u201d the program of \\(T_n\\) as written in\nregion A so that it can actually write out its successive\ncomplete configurations in region B. Moreover it should be\npossible to \u201ctake out and exchange[\u2026] [the rules of operations of some Turing machine] for\nothers\u201d (Turing 1936\u20137: 242). Viz.,\nit should be able not just to calculate but also to compute, an issue\nthat was also dealt with by others such as Church, G\u00f6del and Post\nusing their own formal devices. It should, for instance, be able to\n\u201crecognize\u201d whether it is in region A or B\nand it should be able to determine whether or not a certain sequence\nof symbols is the next state \\(q_i\\) which needs to be executed.\n\nThis is achieved by Turing through the construction of a sequence of\nTuring computable problems such as:\n\nFinding the leftmost or rightmost occurrence of a sequence of\nsymbols\nMarking a sequence of symbols by some symbol a (remember\nthat Turing uses two kinds of alternating squares)\nComparing two symbol sequences\nCopying a symbol sequence\n\n\nTuring develops a notational technique, called skeleton\ntables, for these functions which serves as a kind of shorthand\nnotation for a complete Turing machine table but can be easily used to\nconstruct more complicated machines from previous ones. The technique\nis quite reminiscent of the recursive technique of composition (see:\n recursive functions).\n\nTo illustrate how such functions are Turing computable, we discuss one\nsuch function in more detail, viz. the compare function. It is\nconstructed on the basis of a number of other Turing computable\nfunctions which are built on top of each other. In order to understand\nhow these functions work, remember that Turing used a system of\nalternating F and E-squares where the F-squares\ncontain the actual quintuples and complete configurations and the\nE-squares are used as a way to mark off certain parts of the\nmachine tape. For the comparing of two sequences \\(S_1\\) and \\(S_2\\),\neach symbol of \\(S_1\\) will be marked by some symbol a and each\nsymbol of \\(S_2\\) will be marked by some symbol b.\n\nTuring defined nine different functions to show how the compare\nfunction can be computed with Turing machines:\n\nFIND\\((q_{i}, q_{j},a)\\): this machine function searches for the\nleftmost occurrence of a. If a is found, the machine\nmoves to state \\(q_{i}\\) else it moves to state \\(q_{j}\\). This is\nachieved by having the machine first move to the beginning of the tape\n(indicated by a special mark) and then to have it move right until it\nfinds a or reaches the rightmost symbol on the tape.\nFINDL\\((q_{i}, q_{j},a)\\): the same as FIND but after a has\nbeen found, the machine moves one square to the left. This is used in\nfunctions which need to compute on the symbols in F-squares\nwhich are marked by symbols a in the E-squares.\nERASE\\((q_{i},q_{j},a)\\): the machine computes FIND. If a is\nfound, it erases a and goes to state \\(q_{i}\\) else it goes to\nstate \\(q_{j}\\)\nERASE_ALL\\((q_j,a) = \\textrm{ERASE}(\\textrm{ERASE}\\_\\textrm{ALL},\nq_j,a)\\): the machines computes ERASE on a repeatedly until all\na\u2019s have been erased. Then it moves to \\(q_{j}\\).\nEQUAL\\((q_i,q_j,a)\\): the machine checks whether or not the\ncurrent symbol is a. If yes, it moves to state \\(q_i\\) else it\nmoves to state \\(q_j\\)\nCMP_XY\\((q_i,q_j,b) = \\textrm{FINDL(EQUAL}(q_i,q_j,x), q_j, b)\\):\nwhatever the current symbol x, the machine computes FINDL on\nb (and so looks for the symbol marked by b). If there is\na symbol y marked with b, the machine computes\n\\(\\textrm{EQUAL}\\) on x and y, else, the machine goes to\nstate \\(q_j\\). In other words, CMP_XY\\((q_i,q_j,b)\\) compares whether\nthe current symbol is the same as the leftmost symbol marked\nb.\nCOMPARE_MARKED\\((q_i,q_j,q_n,a,b)\\): the machine checks whether\nthe leftmost symbols marked a and b respectively are the\nsame. If there is no symbol marked a nor b, the machine\ngoes to state \\(q_{n}\\); if there is a symbol marked a and one\nmarked b and they are the same, the machine goes to state\n\\(q_i\\), else the machine goes to state \\(q_j\\). The function is\ncomputed as \\(\\textrm{FINDL(CMP}\\_XY(q_i,q_j,b),\n\\textrm{FIND}(q_j,q_n,b),a)\\)\n\\(\\textrm{COMPARE}\\_\\textrm{ERASE}(q_iq_j,q_n,a,b)\\): the same as\nCOMPARE_MARKED but when the symbols marked a and b are the same,\nthe marks a and b are erased. This is achieved by\ncomputing \\(\\textrm{ERASE}\\) first on a and then on\nb.\n\n\n\\(\\textrm{COMPARE}\\_\\textrm{ALL}(q_j,q_n,a,b)\\) The machine compares\nthe sequences A and B marked with a and b\nrespectively. This is done by repeatedly computing COMPARE_ERASE on a and\nb. If A and B are equal, all a\u2019s and\nb\u2019s will have been erased and the machine moves to state\n\\(q_j\\), else, it will move to state \\(q_n\\). It is computed by\n\n\\[\\textrm{COMPARE}\\_\\textrm{ERASE}(\\textrm{COMPARE}\\_\\textrm{ALL}(q_j,q_n,a,b),q_j,q_n,a,b)\\]\n\n and so by recursively calling\n\\(\\textrm{COMPARE}\\_\\textrm{ALL}\\).\n\n\nIn a similar manner, Turing defines the following functions:\n\n\\(\\textrm{COPY}(q_i,a)\\): copy the sequence of symbols marked with\na\u2019s to the right of the last complete configuration and\nerase the marks.\n\\(\\textrm{COPY}_{n}(q_i, a_1,a_2,\\ldots ,a_n)\\): copy down the\nsequences marked \\(a_1\\) to \\(a_n\\) to the right of the last complete\nconfiguration and erase all marks \\(a_i\\).\n\\(\\textrm{REPLACE}(q_i, a,b)\\): replace all letters a by\nb\n\\(\\textrm{MARK_NEXT_CONFIG}(q_i,a)\\): mark the first configuration\n\\(q_iS_j\\) to the right of the machine\u2019s head with the letter\na.\n\\(\\textrm{FIND}\\_\\textrm{RIGHT}(q_i,a)\\): find the rightmost\nsymbol a.\n\n\nUsing the basic functions COPY, REPLACE and COMPARE, Turing constructs\na universal Turing machine.\n\nBelow is an outline of the universal Turing machine indicating how\nthese basic functions indeed make possible universal computation. It\nis assumed that upon initialization, U has on its tape the S.D.\nof some Turing machine \\(T_n\\). Remember that Turing uses the system\nof alternating F and E-squares and so, for instance, the\nS.D. of \\(T_{\\textrm{Simple}}\\) will be written on the tape of\nU as: \n\n;_D_A_D_D_R_D_A_A_;_D_A_D_C_D_R_D_A_A_;_D_A_A_D_D_C_R_D_A_;_D_A_A_D_C_D_C_R_D_A_\n\n\nwhere \u201c_\u201d indicates an unmarked E-square.\n\nINIT: To the right of the rightmost quintuple of\nT_n, U prints ::_:_D_A_, where _\nindicates an unmarked E-square.\n\n\nFIND_NEXT_STATE: The machine first marks (1) with y the\nconfiguration \\(q_{CC,i}S_{CC,j}\\) of the rightmost (and so last)\ncomplete configuration computed by U in the B part of\nthe tape and (2) with x the configuration \\(q_{q,m}S_{q,n}\\) of\nthe leftmost quintuple which is not preceded by a marked (with the\nletter z) semicolon in the A part of the tape. The two\nconfigurations are compared. If they are identical, the machine moves\nto MARK_OPERATIONS, if not, it marks the semicolon preceding\n\\(q_{q,m}S_{q,n}\\) with z and goes to FIND_NEXT_STATE. This is\neasily achieved using the function COMPARE_ALL which means that,\nwhatever the outcome of the comparison, the marks x and\ny will be erased. For instance, suppose that \\(T_n =\nT_{\\textrm{Simple}}\\) and that the last complete configuration of\n\\(T_{\\textrm{Simple}}\\) as computed by U is:  \n\n\\[\\tag{1}\n\\label{CC_univ}\n:\\_\\underbrace{D\\_}_{S_0}\\underbrace{D\\_C\\_}_{S_1}\\underbrace{D\\_}_{S_0}\\textcolor{orange}{\\underbrace{D\\_A\\_A\\_}_{q_{2}}\\underbrace{D\\_}_{S_0}}\n\\]\n\n\nThen U will move to region A and determine that the\ncorresponding quintuple is:  \n\n\\[\\tag{2}\\label{quint_univ}\n\\textcolor{orange}{\\underbrace{D\\_A\\_A\\_}_{q_{2}}\\underbrace{D\\_}_{S_{0}}}\\underbrace{D\\_C\\_}_{S_1}\\underbrace{R\\_}\\underbrace{D\\_A\\_}_{q_1}\\]\n\n \n\n\nMARK_OPERATIONS: The machine U marks the operations that it\nneeds to execute in order to compute the next complete configuration\nof \\(T_n\\). The printing and move (L,R, N) operations are marked with\nu and the next state with y. All marks z are\nerased. Continuing with our example, U will mark\n\\(\\eqref{quint_univ}\\) as follows:  \n\n\\[D\\_A\\_A\\_D\\_\\textcolor{magenta}{DuCuRu}\\textcolor{green}{DyAy}\\]\n\n \n\n\nMARK_COMPCONFIG: The last complete configuration of \\(T_n\\) as\ncomputed by U is marked into four regions: the configuration\n\\(q_{CC,i}S_{CC,j}\\) itself is left unmarked; the symbol just\npreceding it is marked with an x and the remaining symbols to\nthe left or marked with v. Finally, all symbols to the right,\nif any, are marked with w and a \u201c:\u201d is printed to\nthe right of the rightmost symbol in order to indicate the beginning\nof the next complete configuration of \\(T_n\\) to be computed by\nU. Continuing with our example, \\(\\eqref{CC_univ}\\) will be\nmarked as follows by U:  \n\n\\[\\textcolor{red}{\\underbrace{Dv}_{S_0}\\underbrace{DvCv}_{S_1}}\\textcolor{blue}{\\underbrace{Dx}_{S_0}}\\underbrace{D\\_A\\_A\\_}_{q_2}\\underbrace{D\\_}_{S_0}:\\_\\]\n\n\nU then goes to PRINT\nPRINT. It is determined if, in the instructions that have been\nmarked in MARK_OPERATIONS, there is an operation Print 0 or Print 1.\nIf that is the case, \\(0:\\) respectively \\(1:\\) is printed to the\nright of the last complete configuration. This is not a necessary\nfunction but Turing insisted on having U print out not just the\n(coded) complete configurations computed by \\(T_n\\) but also the\nactual (binary) real number computed by \\(T_n\\).\n\n\nPRINT_COMPLETE_CONFIGURATION. U prints the next complete\nconfiguration and erases all marks u, v, w, x, y. It then\nreturns to FIND_NEXT_STATE. U first searches for the rightmost\nletter u, to check which move is needed (R, L, N) and\nerases the mark u for R, L, N. Depending on the value\nL, R or N will then write down the next complete\nconfiguration by applying COPY\\(_5\\) to u, v, w, x, y. The move\noperation (L, R, N) is accounted for by the particular\ncombination of u, v, w, x, y:  \n\n\\[\\begin{array}{ll}\n\\textrm{When ~} L: &\n\\textrm{COPY}_5(\\textrm{FIND}\\_\\textrm{NEXT}\\_\\textrm{STATE},\n\\textcolor{red}{v},\\textcolor{green}{y},\\textcolor{blue}{x},\\textcolor{magenta}{u},\\textcolor{RawSienna}{w})\\\\\n\\textrm{When ~} R: &\n\\textrm{COPY}_5(\\textrm{FIND}\\_\\textrm{NEXT}\\_\\textrm{STATE},\n\\textcolor{red}{v},\\textcolor{blue}{x},\\textcolor{magenta}{u},\\textcolor{green}{y},\\textcolor{RawSienna}{w})\\\\\n\\textrm{When ~} N: &\n\\textrm{COPY}_5(\\textrm{FIND}\\_\\textrm{NEXT}\\_\\textrm{STATE},\n\\textcolor{red}{v},\\textcolor{blue}{x},\\textcolor{green}{y},\\textcolor{magenta}{u},\\textcolor{RawSienna}{w})\n\\end{array}\\] \n\nFollowing our example, since \\(T_{\\textrm{Simple}}\\)\nneeds to move right, the new rightmost complete configursiation of\n\\(T_{\\textrm{Simple}}\\) written on the tape of U is: \n\n\\[\\textcolor{red}{\\underbrace{D\\_}_{S_0}\\underbrace{D\\_C\\_}_{S_1}}\\textcolor{blue}{\\underbrace{D\\_}_{S_0}}\\textcolor{magenta}{\\underbrace{D\\_C\\_}_{S_1}}\\textcolor{green}{\\underbrace{D\\_A\\_}_{q_1}}\n\\]\n\n\nSince we have that for this complete configuration the square being\nscanned by \\(T_{\\textrm{Simple}}\\) is one that was not included in the\nprevious complete configuration (viz. \\(T_{\\textrm{Simple}}\\) has\nreached beyond the rightmost previous point) the complete\nconfiguration as written out by U is in fact incomplete. This\nsmall defect was corrected by Post (Post 1947) by including an additional instruction in the function\nused to mark the complete configuration in the next round.\n\n\nAs is clear, Turing\u2019s universal machine indeed requires that\nprogram and \u2018data\u2019 produced by that program are\nmanipulated interchangeably, viz. the program and its productions are\nput next to each other and treated in the same manner, as sequences of\nletters to be copied, marked, erased and compared.\n\nTuring\u2019s particular construction is quite intricate with its\nreliance on the F and E-squares, the use of a rather\nlarge set of symbols and a rather arcane notation used to describe the\ndifferent functions discussed above. Since 1936 several modifications\nand simplifications have been implemented. The removal of the\ndifference between F and E-squares was already discussed\nin\n Section 1.2\n and it was proven by Shannon that any Turing machine, including the\nuniversal machine, can be reduced to a binary Turing machine (Shannon\n1956). Since the 1950s, there has been quite some research on what\ncould be the smallest possible universal devices (with respect to the\nnumber of states and symbols) and quite some \u201csmall\u201d\nuniversal Turing machines have been found. These results are usually\nachieved by relying on other equivalent models of computability such\nas, for instance, tag systems. For a survey on research into small\nuniversal devices (see Margenstern 2000; Woods & Neary 2009).\n2.4 The Halting Problem and the Entscheidungsproblem\n\nAs explained, the purpose of Turing\u2019s paper was to show that the\nEntscheidungsproblem for first-order logic is not computable. The same\nresult was achieved independently by Church (1936a, 1936b) using a different kind of formal device which is logically\nequivalent to a Turing machine (see\n Sec. 4).\n The result went very much against what Hilbert had hoped to achieve\nwith his finitary and formalist program. Indeed, next to\nG\u00f6del\u2019s incompleteness results, they broke much of\nHilbert\u2019s dream of making mathematics void of\nIgnorabimus and which was explicitly expressed in the\nfollowing words of Hilbert:\n\n\nThe true reason why Comte could not find an unsolvable problem, lies\nin my opinion in the assertion that there exists no unsolvable\nproblem. Instead of the stupid Ignorabimus, our solution should be: We\nmust know. We shall know. (1930: 963) [translation by the author] \n\n\nNote that the solvability Hilbert is referring to here concerns\nsolvability of mathematical problems in general and not just\nmechanically solvable. It is shown however in Mancosu et al. 2009 (p.\n94), that this general aim of solving every mathematical problem,\nunderpins two particular convictions of Hilbert namely that (1) the\naxioms of number theory are complete and (2) that there are no\nundecidable problems in mathematics.\n2.4.1 Direct and indirect proofs of uncomputable decision problems\n\nSo, how can one show, for a particular decision problem\n\\(\\textrm{D}_i\\), that it is not computable? There are two main\nmethods:\n\nIndirect proof: take some problem\n\\(\\textrm{D}_{\\textrm{uncomp}}\\) which is already known to be\nuncomputable and show that the problem \u201creduces\u201d to\n\\(\\textrm{D}_{i}\\).\nDirect proof: prove the uncomputability of\n\\(\\textrm{D}_{i}\\) directly by assuming some version of the\nChurch-Turing thesis.\n\n\nToday, one usually relies on the first method while it is evident that\nin the absence of a problem \\(\\textrm{D}_{\\textrm{uncomp}}\\), Turing\nbut also Church and Post (see\n Sec. 4)\n had to rely on the direct approach.\n\nThe notion of reducibility has its origins in the work of Turing and\nPost who considered several variants of computability (Post 1947;\nTuring 1939). The concept was later appropriated in the context of\ncomputational complexity theory and is today one of the basic concepts\nof both computability and computational complexity theory (Odifreddi\n1989; Sipser 1996). Roughly speaking, a reduction of a problem \\(D_i\\)\nto a problem \\(D_j\\) comes down to providing an effective procedure\nfor translating every instance \\(d_{i,m}\\) of the problem \\(D_i\\) to\nan instance \\(d_{j,n}\\) of \\(D_j\\) in such a way that an effective\nprocedure for solving \\(d_{j,n}\\) also yields an effective procedure\nfor solving \\(d_{i,m}\\). In other words, if \\(D_i\\) reduces to \\(D_j\\)\nthen, if \\(D_i\\) is uncomputable so is \\(D_j\\). Note that the\nreduction of one problem to another can also be used in decidability\nproofs: if \\(D_i\\) reduces to \\(D_j\\) and \\(D_j\\) is known to be\ncomputable then so is \\(D_i\\).\n\nIn the absence of D\\(_{\\textrm{uncomp}}\\) a very\ndifferent approach was required and Church, Post and Turing each used\nmore or less the same approach to this end (Gandy 1988). First of all,\none needs a formalism which captures the notion of computability.\nTuring proposed the Turing machine formalism to this end. A second\nstep is to show that there are problems that are not computable within\nthe formalism. To achieve this, a uniform process U\nneeds to be set-up relative to the formalism which is able to compute\nevery computable number. One can then use (some form of)\ndiagonalization in combination with U to derive a\ncontradiction. Diagonalization was introduced by Cantor to show that\nthe set of real numbers is \u201cuncountable\u201d or not\ndenumerable. A variant of the method was used also by G\u00f6del in\nthe proof of his\n first incompleteness theorem.\n2.4.2 Turing\u2019s basic problem CIRC?, PRINT? and the Entscheidungsproblem\n\nRecall that in Turing\u2019s original version of the Turing machine,\nthe machines are computing real numbers. This implied that a\n\u201cwell-behaving\u201d Turing machine should in fact never halt\nand print out an infinite sequence of figures. Such machines were\nidentified by Turing as circle-free. All other machines are\ncalled circular machines. A number n which is the D.N.\nof a circle-free machine is called satisfactory.\n\nThis basic difference is used in Turing\u2019s proof of the\nuncomputability of:\n\n\nCIRC? The problem to decide for every number n\nwhether or not it is satisfactory\n\n\nThe proof of the uncomputability of CIRC? uses the\nconstruction of a hypothetical and circle-free machine \\(T_{decide}\\)\nwhich computes the diagonal sequence of the set of all computable\nnumbers computed by the circle-free machines. Hence, it relies for its\nconstruction on the universal Turing machine and a hypothetical\nmachine that is able to decide CIRC? for each number\nn given to it. It is shown that the machine \\(T_{decide}\\)\nbecomes a circular machine when it is provided with its own\ndescription number, hence the assumption of a machine which is capable\nof solving CIRC? must be false.\n\nBased on the uncomputability of CIRC?, Turing then\nshows that also PRINT? is not computable. More\nparticularly he shows that if PRINT? were to be\ncomputable, also CIRC? would be decidable, viz. he\nrephrases PRINT? in such a way that it becomes the\nproblem to decide for any machine whether or not it will print an\ninfinity of symbols which would amount to deciding\nCIRC?.\n\nFinally, based on the uncomputability of PRINT?\nTuring shows that the Entscheidungsproblem is not decidable. This is\nachieved by showing:\n\nhow for each Turing machine T, it is possible to construct\na corresponding formula T in first-order logic\nand\nif there is a general method for determining whether\nT is provable, then there is a general method for\nproving that T will ever print 0. This is the problem\nPRINT? and so cannot be decidable (provided we accept\nTuring\u2019s thesis).\n\n\nIt thus follows from the uncomputability of PRINT?,\nthat the Entscheidungsproblem is not computable.\n2.4.3 The halting problem\n\nGiven Turing\u2019s focus on computable real numbers, his base\ndecision problem is about determining whether or not some Turing\nmachine will not halt and so is not quite the same as the\nmore well-known halting problem:\n\n\nHALT? The problem to decide for every Turing\nmachine T whether or not T will halt.\n\n\n\nTuring\u2019s problem PRINT? is in fact very close\nto HALT? (see Davis 1958: Chapter 5, Theorem\n2.3).\n\nA popular proof of HALT? goes as follows. Assume that\nHALT? is computable. Then it should be possible to\nconstruct a Turing machine which decides, for each machine \\(T_i\\) and\nsome input w for \\(T_i\\) whether or not \\(T_i\\) will halt on\nw. Let us call this machine \\(T_{H}\\). More particularly, we\nhave: \n\n\\[\nT_H(T_i,w) = \\left\\{ \n \\begin{array}{ll} \n \\textrm{HALT} & \\textrm{if \\(T_i\\) halts on } w\\\\\n \\textrm{LOOP} & \\textrm{if \\(T_i\\) loops on } w\n \\end{array} \\right.\n\\]\n\n\nWe now define a second machine \\(T_D\\) which relies on the assumption\nthat the machine \\(T_H\\) can be constructed. More particularly, we\nhave:  \n\n\\[\nT_D(T_i,D.N.~of~ T_i) = \\left\\{ \n\\begin{array}{ll} \n \\textrm{HALT} & \\textrm{if \\(T_i\\) does not halt on its own} \\\\\n               & \\qquad \\textrm{description number}\\\\ \n\\textrm{LOOP} & \\textrm{if \\(T_i\\) halts on its own} \\\\\n               & \\qquad \\textrm{description number}\\\\ \n \\end{array} \n\\right.\n\\]\n\n\nIf we now set \\(T_i\\) to \\(T_D\\) we end up with a contradiction: if\n\\(T_D\\) halts it means that \\(T_D\\) does not halt and vice versa. A\npopular but quite informal variant of this proof was given by\nChristopher Strachey in the context of programming (Strachey\n1965).\n2.5 Variations on the Turing machine\n\nAs is clear from\n Sections 1.1\n and\n 1.2,\n there is a variety of definitions of the Turing machine. One can use\na quintuple or quadruple notation; one can have different types of\nsymbols or just one; one can have a two-way infinite or a one-way\ninfinite tape; etc. Several other less obvious modifications have been\nconsidered and used in the past. These modifications can be of two\nkinds: generalizations or restrictions. These do not result in\n\u201cstronger\u201d or \u201cweaker\u201d models. Viz. these\nmodified machines compute no more and no less than the Turing\ncomputable functions. This adds to the robustness of the Turing\nmachine definition.\nBinary machines\n\nIn his short 1936 note Post considers machines that either mark or unmark a square which\nmeans we have only two symbols \\(S_0\\) and \\(S_1\\) but he did not\nprove that this formulation captures exactly the Turing computable\nfunctions. It was Shannon who proved that for any Turing machine\nT with n symbols there is a Turing machine with two\nsymbols that simulates T (Shannon 1956). He also showed that\nfor any Turing machine with m states, there is a Turing machine\nwith only two states that simulates it.\nNon-erasing machines\n\nNon-erasing machines are machines that can only overprint \\(S_0\\). In\nMoore 1952, it was mentioned that Shannon proved that non-erasing\nmachines can compute what any Turing machine computes. This result was\ngiven in a context of actual digital computers of the 50s which relied\non punched tape (and so, for which, one cannot erase). Shannon\u2019s\nresult however remained unpublished. It was Wang who published the\nresult (Wang 1957).\nNon-writing machines\n\nIt was shown by Minsky that for every Turing machine there is a\nnon-writing Turing machine with two tapes that simulates it.\nMultiple tapes\n\nInstead of one tape one can consider a Turing machine with multiple\ntapes. This turned out the be very useful in several different\ncontexts. For instance, Minsky, used two-tape non-writing Turing machines to prove that a certain decision problem defined by Post (the decision problem for tag systems) is\nnon-Turing computable (Minsky 1961). Hartmanis and Stearns then,\nin their founding paper for computational complexity theory, proved\nthat any n-tape Turing machine reduces to a single tape Turing\nmachine and so anything that can be computed by an n-tape or\nmultitape Turing machine can also be computed by a single tape Turing\nmachine, and conversely (Hartmanis & Stearns 1965). They used\nmultitape machines because they were considered to be closer to actual\ndigital computers.\nn-dimensional Turing machines\n\nAnother variant is to consider Turing machines where the tape is not\none-dimensional but n-dimensional. This variant too reduces to\nthe one-dimensional variant.\nNon-deterministic machines\n\nAn apparently more radical reformulation of the notion of Turing\nmachine is that of non-deterministic Turing machines. As explained in\n 1.1,\n one fundamental condition of Turing\u2019s machines is the so-called\ndeterminacy condition, viz. the idea that at any given moment, the\nmachine\u2019s behavior is completely determined by the configuration\nor state it is in and the symbol it is scanning. Next to these, Turing\nalso mentions the idea of choice machines for which the next state is\nnot completely determined by the state and symbol pair. Instead, some\nexternal device makes a random choice of what to do next.\nNon-deterministic Turing machines are a kind of choice machines: for\neach state and symbol pair, the non-deterministic machine makes an\narbitrary choice between a finite (possibly zero) number of states.\nThus, unlike the computation of a deterministic Turing machine, the\ncomputation of a non-deterministic machine is a tree of possible\nconfiguration paths. One way to visualize the computation of a\nnon-deterministic Turing machine is that the machine spawns an exact\ncopy of itself and the tape for each alternative available transition,\nand each machine continues the computation. If any of the machines\nterminates successfully, then the entire computation terminates and\ninherits that machine\u2019s resulting tape. Notice the word\nsuccessfully in the preceding sentence. In this formulation, some\nstates are designated as accepting states and when the\nmachine terminates in one of these states, then the computation is\nsuccessful, otherwise the computation is unsuccessful and any other\nmachines continue in their search for a successful outcome. The\naddition of non-determinism to Turing machines does not alter the\nextent of Turing-computability. Non-determinism was introduced for\nfinite automata in the paper, Rabin & Scott 1959, where it is also\nshown that adding non-determinism does not result in more powerful\nautomata. Non-deterministic Turing machines are an important model in\nthe context of\n computational complexity theory.\nWeak and semi-weak machines\n\nWeak Turing machines are machines where some word over the alphabet is\nrepeated infinitely often to the left and right of the input.\nSemi-weak machines are machines where some word is repeated infinitely\noften either to the left or right of the input. These machines are\ngeneralizations of the standard model in which the initial tape\ncontains some finite word (possibly nil). They were introduced to\ndetermine smaller universal machines. Watanabe was the first to define\na universal semi-weak machine with six states and five symbols\n(Watanabe 1961). Recently, a number of researchers have determined\nseveral small weak and semi-weak universal Turing machines (e.g.,\nWoods & Neary 2007; Cook 2004)\n\nBesides these variants on the Turing machine model, there are also\nvariants that result in models which capture, in some well-defined\nsense, more than the (Turing)-computable functions. Examples of such\nmodels are oracle machines (Turing 1939), infinite-time Turing\nmachines (Hamkins & Lewis 2008) and accelerating Turing machines\n(Copeland 2002). There are various reasons for introducing such\nstronger models. Some are well-known models of computability or\nrecursion theory and are used in the theory of higher-order recursion\nand relative computability (oracle machines); others, like the\naccelerating machines, were introduced in the context of\n supertasks\n and the idea of providing physical models that \u201ccompute\u201d\nfunctions which are not Turing-computable.\n3. Philosophical Issues Related to Turing Machines\n3.1 Human and Machine Computations\n\nIn its original context, Turing\u2019s identification between the\ncomputable numbers and Turing machines was aimed at proving that the\nEntscheidungsproblem is not a computable problem and so not a\nso-called \u201cgeneral process\u201d problem (Turing 1936\u20137:\n248). The basic assumption to be made for this result is that our\n\u201cintuitive\u201d notion of computability can be formally\ndefined as Turing computability and so that there are no\n\u201ccomputable\u201d problems that are not Turing computable. But\nwhat was Turing\u2019s \u201cintuitive\u201d notion of\ncomputability and how can we be sure that it really covers all\ncomputable problems, and, more generally, all kinds of computations?\nThis is a very basic question in the\n philosophy of computer science.\n\nAt the time Turing was writing his paper, the modern computer was not\ndeveloped yet and so rephrasings of Turing\u2019s thesis which\nidentify Turing computability with computability by a modern computer\nare interpretations rather than historically correct statements of\nTuring\u2019s thesis. The existing computing machines at the time\nTuring wrote his paper, such as the differential analyzer or desk\ncalculators, were quite restricted in what they could compute and were\nused in a context of human computational practices (Grier 2007). It is\nthus not surprising that Turing did not attempt to formalize machine\ncomputation but rather human computation and so computable problems in\nTuring\u2019s paper become computable by human means. This is very\nexplicit in Section 9 of Turing 1936\u20137 where he shows that\nTuring machines are a \u2018natural\u2019 model of (human)\ncomputation by analyzing the process of human computation. The\nanalysis results in a kind of abstract human \u2018computor\u2019\nwho fulfills a set of different conditions that are rooted in\nTuring\u2019s recognition of a set of human limitations which\nrestrict what we can compute (of our sensory apparatus but also of our\nmental apparatus). This \u2018computor\u2019 computes (real) numbers\non an infinite one-dimensional tape divided into squares [Note: Turing\nassumed that the reduction of the 2-dimensional character of the paper\na human mathematician usually works on \u201cis not essential of\ncomputation\u201d (Turing 1936\u20137: 249)]. It has the following\nrestrictions (Gandy 1988; Sieg 1994):\n\nDeterminacy condition D \u201cThe behaviour of\nthe computer at any moment is determined by the symbols which he is\nobserving and his \u2018state of mind\u2019 at that moment.\u201d\n(Turing 1936\u20137: 250)\nBoundedness condition B1 \u201cthere is a bound\nB to the number of symbols or squares which the computer can observe\nat one moment. If he wishes to observe more, he must use successive\nobservations.\u201d (Turing 1936\u20137: 250)\nBoundedness condition B2 \u201cthe number of\nstates of mind which need be taken into account is finite\u201d\n(Turing 1936\u20137: 250)\nLocality condition L1 \u201cWe may [\u2026]\nassume that the squares whose symbols are changed are always\n\u2018observed\u2019 squares.\u201d (Turing 1936\u20137: 250)\nLocality condition L2 \u201ceach of the new\nobserved squares is within L squares of an immediately\npreviously observed square.\u201d (Turing 1936\u20137: 250)\n\n\nIt is this so-called \u201cdirect appeal to intuition\u201d\n(1936\u20137: 249) of Turing\u2019s analysis and resulting model\nthat explain why the Turing machine is today considered by many as the\nbest standard model of computability (for a strong statement of this\npoint of view, see Soare 1996). Indeed, from the above set of\nconditions one can quite easily derive Turing\u2019s machines. This\nis achieved basically by analyzing the restrictive conditions into\n\u201c\u2018simple operations\u2019 which are so elementary that it\nis not easy to imagine them further divided\u201d (Turing\n1936\u20137: 250).\n\nNote that while Turing\u2019s analysis focuses on human computation,\nthe application of his identification between (human) computation and\nTuring machine computation to the Entscheidungsproblem suggests that\nhe did not consider the possibility of a model of computation\nthat somehow goes \u201cbeyond\u201d human computation and is\ncapable of providing an effective and general procedure which solves\nthe Entscheidungsproblem. If that would have been the case, he would\nnot have considered the Entscheidungsproblem to be uncomputable.\n\nThe focus on human computation in Turing\u2019s analysis of\ncomputation, has led researchers to extend Turing\u2019s analysis to\ncomputation by physical devices. This results in (versions of) the\nphysical Church-Turing thesis. Robin Gandy focused on extending\nTuring\u2019s analysis to discrete mechanical devices (note that he\ndid not consider analog machines). More particularly, like Turing,\nGandy starts from a basic set of restrictions of computation by\ndiscrete mechanical devices and, on that basis, develops a new model\nwhich he proved to be reducible to the Turing machine model. This work\nis continued by Wilfried Sieg who proposed the framework of Computable\nDynamical Systems (Sieg 2008). Others have considered the possibility\nof \u201creasonable\u201d models from physics which\n\u201ccompute\u201d something that is not Turing computable. See for\ninstance Aaronson, Bavarian, & Gueltrini 2016 (Other Internet\nResources) in which it is shown that if closed timelike curves\nwould exist, the halting problem would become solvable with finite\nresources. Others have proposed alternative models for computation\nwhich are inspired by the Turing machine model but capture specific\naspects of current computing practices for which the Turing machine\nmodel is considered less suited. One example here are the persistent\nTuring machines intended to capture interactive processes. Note\nhowever that these results do not show that there are\n\u201ccomputable\u201d problems that are not Turing\ncomputable. These and other related proposals have been considered by\nsome authors as reasonable models of computation that somehow compute\nmore than Turing machines. It is the latter kind of statements that\nbecame affiliated with research on so-called hypercomputation\nresulting in the early 2000s in a rather fierce debate in the computer\nscience community, see, e.g., Teuscher 2004 for various positions.\n3.2 Thesis, Definition, Axioms or Theorem\n\nAs is clear, strictly speaking, Turing\u2019s thesis is not provable,\nsince, in its original form, it is a claim about the relationship\nbetween a formal and a vague or intuitive concept. By consequence,\nmany consider it as a thesis or a definition. The thesis would be\nrefuted if one would be able to provide an intuitively acceptable\neffective procedure for a task that is not Turing-computable. This\nfar, no such counterexample has been found. Other independently\ndefined notions of computability based on alternative foundations,\nsuch as\n recursive functions\n and abacus machines have also been shown to be equivalent to Turing\ncomputability. These equivalences between quite different formulations\nindicate that there is a natural and robust notion of computability\nunderlying our understanding. Given this apparent robustness of our\nnotion of computability, some have proposed to avoid the notion of a\nthesis altogether and instead propose a set of axioms used to sharpen\nthe informal notion. There are several approaches, most notably, an\napproach of structural axiomatization where computability itself is\naxiomatized (Sieg 2008) and one whereby an axiomatization is given\nfrom which the Church-Turing thesis can be derived (Dershowitz &\nGurevich 2008).\n4. Alternative Historical Models of Computability\n\nBesides the Turing machine, several other models were introduced\nindependently of Turing in the context of research into the foundation\nof mathematics which resulted in theses that are logically equivalent\nto Turing\u2019s thesis. For each of these models it was proven that\nthey capture the Turing computable functions. Note that the\ndevelopment of the modern computer stimulated the development of other\nmodels such as register machines or Markov algorithms. More recently,\ncomputational approaches in disciplines such as biology or physics,\nresulted in bio-inspired and physics-inspired models such as Petri\nnets or quantum Turing machines. A discussion of such models, however,\nlies beyond the scope of this entry.\n4.1 General Recursive Functions\n\nThe original formulation of general\n recursive functions can be\n found in G\u00f6del 1934, which built on a suggestion by Herbrand. In\n Kleene 1936 a simpler definition was given and in Kleene 1943 the\n standard form which uses the so-called minimization or\n \\(\\mu\\)-operator was introduced. For more information, see the entry\n on\n recursive functions.\n\nChurch used the definition of general recursive functions to state his\nthesis:\n\n\nChurch\u2019s thesis Every effectively calculable\nfunction is general recursive\n\n\nIn the context of recursive function one uses the notion of recursive\nsolvability and unsolvability rather than Turing computability and\nuncomputability. This terminology is due to Post (1944).\n4.2 \u03bb-Definability\n\nChurch\u2019s \u03bb-calculus has its origin in the papers (Church\n1932, 1933) and which were intended as a logical foundation for\nmathematics. It was Church\u2019s conviction at that time that this\ndifferent formal approach might avoid G\u00f6del incompleteness (Sieg\n1997: 177). However, the logical system proposed by Church was proven\ninconsistent by his two PhD students Stephen C. Kleene and Barkley\nRosser and so they started to focus on a subpart of that logic which\nwas basically the \u03bb-calculus. Church, Kleene and Rosser started\nto \u03bb-define any calculable function they could think of and\nquite soon Church proposed to define effective calculability in terms\nof \u03bb-definability. However, it was only after Church, Kleene\nand Rosser had established that general recursiveness and\n\u03bb-definability are equivalent that Church announced his thesis\npublicly and in terms of general recursive functions rather than\n\u03bb-definability (Davis 1982; Sieg 1997).\n\nIn \u03bb-calculus there are only two types of symbols. The three\nprimitive symbols \u03bb, (, ) also called the improper symbols, and\nan infinite list of variables. There are three rules to define the\nwell-formed formulas of \u03bb-calculus, called\n\u03bb-formulas.\n\nThe \u03bb-formulas are first of all the variables\nthemselves.\nIf P is a \u03bb-formula containing x as\na free variable then \\(\\lambda x[\\textbf{P}]\\) is also a\n\u03bb-formula. The \u03bb-operator is used to bind variables and\nit thus converts an expression containing free variables into one that\ndenotes a function\nIf M and N are \u03bb-formulas\nthen so is {M}(N), where\n{M}(N) is to be understood as the\napplication of the function M to\nN.\n\n\nThe \u03bb-formulas, or well-formed formulas of \u03bb-calculus\nare all and only those formulas that result from (repeated)\napplication of these three rules.\n\nThere are three operations or rules of conversion. Let us define\n\\(\\textrm{S}_{\\mathbf{N}}^{x}\\mathbf{M}|\\) as standing for the formula\nthat results by substitution of N for x in\nM.\n\nReduction. To replace any part \\(\\{\\lambda x\n\\mathbf{[M]}\\} (\\mathbf{N})\\) of a formula by\n\\(\\textrm{S}_{\\mathbf{N}}^{x}\\mathbf{M}|\\) provided that the bound\nvariables of M are distinct both from x and\nfrom the free variables of N. For example \\(\\{\\lambda\nx [x^{2}]\\}(2)\\) reduces to \\(2^{2}\\)\nExpansion To replace any part\n\\(\\textrm{S}_{\\mathbf{N}}^{x}\\mathbf{M}|\\) of a formula by \\(\\{\\lambda\nx \\mathbf{[M]}\\} (\\mathbf{N})\\) provided that \\(((\\lambda x\n\\mathbf{M}) \\mathbf{N})\\) is well-formed and the bound variables of\nM are distinct both from x and from the free\nvariables in N. For example, \\(2^{2}\\) can be\nexpanded to \\(\\{\\lambda x [x^{2}]\\}(2)\\)\nChange of bound variable To replace any part\nM of a formula by\n\\(\\textrm{S}_{\\textrm{y}}^{x}\\mathbf{M}|\\) provided that x is\nnot a free variable of M and y does not occur\nin M. For example changing \\(\\{\\lambda x [x^{2}]\\}\\)\nto \\(\\{\\lambda y [y^{2}]\\}\\)\n\n\nChurch introduces the following abbreviations to define the natural\nnumbers in \u03bb-calculus:  \n\n\\[\\begin{array}{l}\n1 \\rightarrow \\lambda yx.yx,\\\\\n2 \\rightarrow \\lambda yx.y(yx),\\\\\n3 \\rightarrow \\lambda yx.y(y(yx)),\\\\\n\\ldots \n\\end{array}\\]\n\n\nUsing this definition, it is possible to \u03bb-define\nfunctions over the positive integers. A function F of one\npositive integer is \u03bb-definable if we can find a\n\u03bb-formula F, such that if \\(F(m) = n\\) and\nm and n are \u03bb-formulas\nstanding for the integers m and n, then the\n\u03bb-formula \\(\\{\\mathbf{F}\\} (\\mathbf{m})\\) can be\nconverted to n by applying the conversion\nrules of \u03bb-calculus. Thus, for example, the successor function\nS, first introduced by Church, can be \u03bb-defined as\nfollows:  \n\n\\[S \\rightarrow \\lambda abc. b(abc)\\]\n\n\nTo give an example, applying S to the \u03bb-formula standing\nfor 2, we get:  \n\n\\[\\begin{align}\n\\big(\\lambda abc. b(abc)\\big ) \\big(\\lambda yx. y(yx)\\big) \\\\ \n\\rightarrow \\lambda bc. b\\big( \\big(\\lambda yx. y(yx)\\big) bc\\big)\\\\ \n\\rightarrow \\lambda bc. b\\big( \\big(\\lambda x. b(bx)\\big) c\\big)\\\\ \n\\rightarrow \\lambda bc. b (b(bc))\n\\end{align}\\]\n\n\nToday, \u03bb-calculus is considered to be a basic model in the\ntheory of programming.\n4.3 Post Production Systems\n\nAround 1920\u201321 Emil Post developed different but related types\nof production systems in order to develop a syntactical form which\nwould allow him to tackle the decision problem for first-order logic.\nOne of these forms are Post canonical systems C which became\nlater known as Post production systems.\n\nA canonical system consists of a finite alphabet \\(\\Sigma\\), a finite\nset of initial words \\(W_{0,0}\\), \\(W_{0,1}\\),\u2026, \\(W_{0,n}\\)\nand a finite set of production rules of the following form:\n\n\\[\n\\begin{array}{c}\ng_{11}P_{i_{1}^{1}}g_{12}P_{i_{2}^{1}} \\ldots g_{1m_{1}}P_{i^{1}_{m_{1}}}g_{1 {(m_{1} + 1)}}\\\\\ng_{21}P_{i_{1}^{2}}g_{22}P_{i_{2}^{2}} \\ldots g_{2m_{2}}P_{i^{2}_{m_{2}}}g_{2 {(m_{2} + 1)}}\\\\\n\u2026\u2026\u2026\u2026\u2026\u2026\u2026\u2026\u2026\u2026\u2026\\\\\ng_{k1}P_{i_{1}^{k}}g_{k2}P_{i_{2}^{k}} \\ldots g_{km_{k}}P_{i^{k}_{m_{k}}}g_{k {(m_{k} + 1)}}\\\\\n\\textit{produce}\\\\\ng_{1}P_{i_{1}}g_{2}P_{i_{2}} \\ldots g_{m}P_{i_{m}}g_{(m + 1)}\\\\\n\\end{array}\n\\]\n\n\nThe symbols g are a kind of metasymbols: they correspond to\nactual sequences of letters in actual productions. The symbols\nP are the operational variables and so can represent any\nsequence of letters in a production. So, for instance, consider a\nproduction system over the alphabet \\(\\Sigma = \\{a,b\\}\\) with initial\nword:  \n\n\\[W_0 =  ababaaabbaabbaabbaba\\]\n\n\nand the following production rule: \n\n\\[\n\\begin{array}{c}\nP_{1,1}bbP_{1,2}\\\\\n\\textit{produces}\\\\\nP_{1,3}aaP_{1,4}\\\\\n\\end{array}\n\\]\n\n\nThen, starting with \\(W_0\\), there are three possible ways to apply\nthe production rule and in each application the variables \\(P_{1,i}\\)\nwill have different values but the values of the g\u2019s are fixed.\nAny set of finite sequences of words that can be produced by a\ncanonical system is called a canonical set.\n\nA special class of canonical forms defined by Post are normal systems.\nA normal system N consists of a finite alphabet \\(\\Sigma\\), one\ninitial word \\(W_0 \\in \\Sigma^{\\ast}\\) and a finite set of production\nrules, each of the following form: \n\n\\[\n\\begin{array}{c}\ng_iP\\\\\n\\textit{produces}\\\\\nPg_i'\\\\\n\\end{array}\n\\]\n\n\nAny set of finite sequences of words that can be produced by a normal\nsystem is called a normal set. Post was able to show that for\nany canonical set C over some alphabet \\(\\Sigma\\) there is a\nnormal set N over an alphabet \\(\\Delta\\) with \\(\\Sigma\n\\subseteq \\Delta\\) such that \\(C = N \\cap \\Sigma^{\\ast}\\). It was his\nconviction that (1) any set of finite sequences that can be generated\nby finite means can be generated by canonical systems and (2) the\nproof that for every canonical set there is a normal set which\ncontains it, which resulted in Post\u2019s thesis I:\n\n\nPost\u2019s thesis I (Davis 1982) Every set of\nfinite sequences of letters that can be generated by finite processes\ncan also be generated by normal systems. More particularly, any set of\nwords on an alphabet \\(\\Sigma\\) which can be generated by a finite\nprocess is of the form \\(N \\cap \\Sigma^{\\ast}\\), with N a\nnormal set.\n\n\nPost realized that \u201c[for the thesis to obtain its full\ngenerality] a complete analysis would have to be made of all the\npossible ways in which the human mind could set up finite processes\nfor generating sequences\u201d (Post 1965: 408) and it is quite\nprobable that the formulation 1 given in Post 1936 and which is almost\nidentical to Turing\u2019s machines is the result of such an\nanalysis.\n\nPost production systems became important formal devices in computer\nscience and, more particularly, formal language theory (Davis 1989;\nPullum 2011).\n4.4 Formulation 1\n\nIn 1936 Post published a short note from which one can derive\nPost\u2019s second thesis (De Mol 2013):\n\n\nPost\u2019s thesis II Solvability of a\nproblem in the intuitive sense coincides with solvability by\nformulation 1\n\n\nFormulation 1 is very similar to Turing machines but the\n\u2018program\u2019 is given as a list of directions which a human\nworker needs to follow. Instead of a one-way infinite tape,\nPost\u2019s \u2018machine\u2019 consists of a two-way infinite\nsymbol space divided into boxes. The idea is that a worker is working\nin this symbol space, being capable of a set of five primitive acts\n(\\(O_{1}\\) mark a box, \\(O_{2}\\) unmark a box, \\(O_{3}\\) move one box\nto the left, \\(O_{4}\\) move one box to the right, \\(O_{5}\\)\ndetermining whether the box he is in is marked or unmarked), following\na finite set of directions \\(d_{1}\\),\u2026, \\(d_{n}\\) where each\ndirection \\(d_{i}\\) always has one of the following forms:\n\nPerform one of the operations (\\(O_{1}\\)\u2013\\(O_4\\)) and go to\ninstruction \\(d_{j}\\)\nPerform operation \\(O_{5}\\) and according as the box the worker is\nin is marked or unmarked follow direction \\(d_{j'}\\) or\n\\(d_{j''}\\).\nStop.\n\n\nPost also defined a specific terminology for his formulation 1 in\norder to define the solvability of a problem in terms of formulation\n1. These notions are applicability, finite-1-process, 1-solution and\n1-given. Roughly speaking these notions assure that a decision problem\nis solvable with formulation 1 on the condition that the solution\ngiven in the formalism always terminates with a correct solution.\n5. Impact of Turing Machines on Computer Science\n\nTuring is today one of the most celebrated figures of computer\nscience. Many consider him as the father of computer science and the\nfact that the main award in the computer science community is called\nthe Turing award is a clear indication of that (Daylight 2015). This\nwas strengthened by the Turing centenary celebrations from 2012, which\nwere largely coordinated by S. Barry Cooper. This resulted not only in\nan enormous number of scientific events around Turing but also a\nnumber of initiatives that brought the idea of Turing as the father of\ncomputer science also to the broader public (Bullynck, Daylight, &\nDe Mol 2015). Amongst Turing\u2019s contributions which are today\nconsidered as pioneering, the 1936 paper on Turing machines stands out\nas the one which has the largest impact on computer science. However,\nrecent historical research shows also that one should treat the impact\nof Turing machines with great care and that one should be careful in\nretrofitting the past into the present.\n5.1 Impact on Theoretical Computer Science\n\nToday, the Turing machine and its theory are part of the theoretical\nfoundations of computer science. It is a standard reference in\nresearch on foundational questions such as:\n\nWhat is an algorithm?\nWhat is a computation?\nWhat is a physical computation?\nWhat is an efficient computation?\netc.\n\n\nIt is also one of the main models for research into a broad range of\nsubdisciplines in theoretical computer science such as: variant and\nminimal models of computability, higher-order computability,\n computational complexity theory,\n algorithmic information theory, etc. This significance of the Turing\nmachine model for theoretical computer science has at least two\nhistorical roots.\n\nFirst of all, there is the continuation of the work in mathematical\nlogic from the 1920s and 1930s by people like Martin Davis\u2014who\nis a student of Post and Church\u2014and Kleene. Within that\ntradition, Turing\u2019s work was of course well-known and the Turing\nmachine was considered as the best model of computability given. Both\nDavis and Kleene published a book in the 1950s on these topics (Kleene\n1952; Davis 1958) which soon became standard references not just for\nearly computability theory but also for more theoretical reflections\nin the late 1950s and 1960s on computing.\n\nSecondly, one sees that in the 1950s there is a need for theoretical\nmodels to reflect on the new computing machines, their abilities and\nlimitations and this in a more systematic manner. It is in that\ncontext that the theoretical work already done was picked up. One\nimportant development is automata theory in which one can situate,\namongst others, the development of other machine models like the\nregister machine model or the Wang B machine model which are,\nultimately, rooted in Turing\u2019s and Post\u2019s machines; there\nare the minimal machine designs discussed in\n Section 5.2;\n and there is the use of Turing machines in the context of what would\nbecome the origins of formal language theory, viz the study of\ndifferent classes of machines with respect to the different\n\u201clanguages\u201d they can recognize and so also their\nlimitations and strengths. It are these more theoretical developments\nthat contributed to the establishment of\n computational complexity theory\n in the 1960s. Of course, besides Turing machines, other models also\nplayed and play an important role in these developments. Still, within\ntheoretical computer science it is mostly the Turing machine which\nremains the model, even today. Indeed, when in 1965 one of the\nfounding papers of computational complexity theory (Hartmanis &\nStearns 1965) is published, it is the multitape Turing machine which\nis introduced as the standard model for the computer.\n5.2 Turing Machines and the Modern Computer\n\nIn several accounts, Turing has been identified not just as the father\nof computer science but as the father of the modern computer. The\nclassical story for this more or less goes as follows: the blueprint\nof the modern computer can be found in von Neumann\u2019s EDVAC\ndesign and today classical computers are usually described as having a\nso-called von Neumann architecture. One fundamental idea of the EDVAC\ndesign is the so-called stored-program idea. Roughly speaking this\nmeans the storage of instructions and data in the same memory allowing\nthe manipulation of programs as data. There are good reasons for\nassuming that von Neumann knew the main results of Turing\u2019s\npaper (Davis 1988). Thus, one could argue that the stored-program\nconcept originates in Turing\u2019s notion of the universal Turing\nmachine and, singling this out as the defining feature of the modern\ncomputer, some might claim that Turing is the father of the modern\ncomputer. Another related argument is that Turing was the first who\n\u201ccaptured\u201d the idea of a general-purpose machine through\nhis notion of the universal machine and that in this sense he also\n\u201cinvented\u201d the modern computer (Copeland & Proudfoot\n2011). This argument is then strengthened by the fact that Turing was\nalso involved with the construction of an important class of computing\ndevices (the Bombe) used for decrypting the German Enigma code and\nlater proposed the design of the ACE (Automatic Computing Engine)\nwhich was explicitly identified as a kind of physical realization of\nthe universal machine by Turing himself:\n\n\nSome years ago I was researching on what might now be described as an\ninvestigation of the theoretical possibilities and limitations of\ndigital computing machines. [\u2026] Machines such as the ACE may be\nregarded as practical versions of this same type of machine. (Turing\n1947)\n\n\nNote however that Turing already knew the ENIAC and EDVAC designs and\nproposed the ACE as a kind of improvement on that design (amongst\nothers, it had a simpler hardware architecture).\n\nThese claims about Turing as the inventor and/or father of the\ncomputer have been scrutinized by some historians of computing\n(Daylight 2014; Haigh 2013; Haigh 2014; Mounier-Kuhn 2012), mostly in the wake of the Turing centenary and\nthis from several perspectives. Based on that research it is clear\nthat claims about Turing being the inventor of the modern computer\ngive a distorted and biased picture of the development of the modern\ncomputer. At best, he is one of the many who made a contribution to\none of the several historical developments (scientific, political,\ntechnological, social and industrial) which resulted, ultimately, in\n(our concept of) the modern computer. Indeed, the \u201cfirst\u201d\ncomputers are the result of a wide number of innovations and so are\nrooted in the work of not just one but several people with diverse\nbackgrounds and viewpoints.\n\nIn the 1950s then the (universal) Turing machine starts to become an\naccepted model in relation to actual computers and is used as a tool\nto reflect on the limits and potentials of general-purpose computers\nby both engineers, mathematicians and logicians. More particularly,\nwith respect to machine designs, it was the insight that only a few\nnumber of operations were required to built a general-purpose machine\nwhich inspired in the 1950s reflections on minimal machine\narchitectures. Frankel, who (partially) constructed the MINAC stated\nthis as follows:\n\n\nOne remarkable result of Turing\u2019s investigation is that he was\nable to describe a single computer which is able to compute\nany computable number. He called this machine a universal\ncomputer. It is thus the \u201cbest possible\u201d computer\nmentioned.\n\n[\u2026] This surprising result shows that in examining the question\nof what problems are, in principle, solvable by computing machines, we\ndo not need to consider an infinite series of computers of greater and\ngreater complexity but may think only of a single machine. \n\nEven more surprising than the theoretical possibility of such a\n\u201cbest possible\u201d computer is the fact that it need not be\nvery complex. The description given by Turing of a universal computer\nis not unique. Many computers, some of quite modest complexity,\nsatisfy the requirements for a universal computer. (Frankel 1956:\n635)\n\n\nThe result was a series of experimental machines such as the MINAC,\nTX-0 (Lincoln Lab) or the ZERO machine (van der Poel) which in their\nturn became predecessors of a number of commercial machines. It is\nworth pointing out that also Turing\u2019s ACE machine design fits\ninto this philosophy. It was also commercialized as the BENDIX G15\nmachine (De Mol, Bullynck, & Daylight 2018).\n\nOf course, by minimizing the machine instructions, coding or\nprogramming became a much more complicated task. To put it in\nTuring\u2019s words who clearly realized this trade-off between code\nand (hard-wired) instructions when designing the ACE: \u201c[W]e have\noften simplified the circuit at the expense of the code\u201d (Turing\n1947).\nAnd indeed, one sees that with these early minimal designs, much\neffort goes into developing more efficient coding strategies. It is\nhere that one can also situate one historical root of making the\nconnection between the universal Turing machine and the important\nprinciple of the interchangeability between hardware and programs.\n\nToday, the universal Turing machine is by many still considered as the\nmain theoretical model of the modern computer especially in relation\nto the so-called von Neumann architecture. Of course, other models\nhave been introduced for other architectures such as the Bulk\nsynchronous parallel model for parallel machines or the persistent\nTuring machine for modeling interactive problems.\n5.3 Theories of Programming\n\nThe idea that any general-purpose machine can, in principle, be\nmodeled as a universal Turing machine also became an important\nprinciple in the context of automatic programming in the 1950s\n(Daylight 2015). In the machine design context it was the minimizing\nof the machine instructions that was the most important consequence of\nthat viewpoint. In the programming context then it was about the idea\nthat one can built a machine that is able to\n\u2018mimic\u2019\u2019 the behavior of any other machine and so,\nultimately, the interchangeability between machine hardware and\nlanguage implementations. This is introduced in several forms in the\n1950s by people like John W. Carr III and Saul Gorn\u2014who were\nalso actively involved in the shaping of the Association for\nComputing Machinery (ACM)\u2014as the unifying theoretical idea\nfor automatic programming which indeed is about the (automatic)\n\u201ctranslation\u201d of higher-order to lower-level, and,\nultimately, machine code. Thus, also in the context of programming,\nthe universal Turing machine starts to take on its foundational role\nin the 1950s (Daylight 2015).\n\nWhereas the Turing machine is and was a fundamental theoretical model\ndelimiting what is possible and not on the general level, it did not\nhave a real impact on the syntax and semantics of programming\nlanguages. In that context it were rather \u03bb-calculus and Post\nproduction systems that had an effect (though also here one should be\ncareful in overstating the influence of a formal model on a\nprogramming practice). In fact, Turing machines were often regarded as\nmachine models rather than as a model for programming:\n\n\nTuring machines are not conceptually different from the automatic\ncomputers in general use, but they are very poor in their control\nstructure. [\u2026] Of course, most of the theory of computability\ndeals with questions which are not concerned with the particular ways\ncomputations are represented. It is sufficient that computable\nfunctions be represented somehow by symbolic expressions, e.g.,\nnumbers, and that functions computable in terms of given functions be\nsomehow represented by expressions computable in terms of the\nexpressions representing the original functions. However, a practical\ntheory of computation must be applicable to particular algorithms.\n(McCarthy 1963: 37)\n\n\nThus one sees that the role of the Turing machine for computer science\nshould be situated rather on the theoretical level: the universal\nmachine is today by many still considered as the model for the modern\ncomputer while its ability to mimic machines through its manipulation\nof programs-as-data is one of the basic principles of modern\ncomputing. Moreover, its robustness and naturalness as a model of\ncomputability have made it the main model to challenge if one is\nattacking versions of the so-called (physical) Church-Turing\nthesis.",
    "section_title": "2.3 Turing\u2019s Universal Machine",
    "entry_title": "Turing Machines",
    "hierarchy_title": "Turing Machines || Computing with Turing Machines || Turing\u2019s Universal Machine",
    "tokenized_text": [
        "computing",
        "turing",
        "machine",
        "turing",
        "universal",
        "machine",
        "turing",
        "universal",
        "machine",
        "universal",
        "turing",
        "machine",
        "constructed",
        "prove",
        "uncomputability",
        "certain",
        "problem",
        "roughly",
        "speaking",
        "turing",
        "machine",
        "able",
        "compute",
        "turing",
        "machine",
        "computes",
        "assuming",
        "turing",
        "machine",
        "notion",
        "fully",
        "capture",
        "computability",
        "turing",
        "thesis",
        "valid",
        "implied",
        "anything",
        "computed",
        "also",
        "computed",
        "one",
        "universal",
        "machine",
        "conversely",
        "problem",
        "computable",
        "universal",
        "machine",
        "considered",
        "uncomputable",
        "rhetorical",
        "theoretical",
        "power",
        "universal",
        "machine",
        "concept",
        "viz",
        "one",
        "relatively",
        "simple",
        "formal",
        "device",
        "capture",
        "possible",
        "process",
        "carried",
        "computing",
        "number",
        "turing",
        "also",
        "one",
        "main",
        "reason",
        "turing",
        "retrospectively",
        "identified",
        "one",
        "founding",
        "father",
        "computer",
        "science",
        "see",
        "section",
        "construct",
        "universal",
        "machine",
        "u",
        "set",
        "basic",
        "operation",
        "disposal",
        "turing",
        "approach",
        "construction",
        "machine",
        "u",
        "able",
        "understand",
        "program",
        "machine",
        "t_",
        "n",
        "based",
        "understanding",
        "mimic",
        "behavior",
        "t_",
        "n",
        "end",
        "method",
        "needed",
        "allows",
        "treat",
        "program",
        "behavior",
        "t_n",
        "interchangeably",
        "since",
        "aspect",
        "manipulated",
        "tape",
        "machine",
        "achieved",
        "turing",
        "two",
        "basic",
        "step",
        "development",
        "notational",
        "method",
        "set",
        "elementary",
        "function",
        "treat",
        "notationindependent",
        "whether",
        "formalizing",
        "program",
        "behavior",
        "t_n",
        "as",
        "text",
        "compared",
        "copied",
        "erased",
        "etc",
        "word",
        "turing",
        "develops",
        "technique",
        "allows",
        "treat",
        "program",
        "behavior",
        "level",
        "interchangeability",
        "program",
        "behavior",
        "notation",
        "given",
        "machine",
        "t_n",
        "turing",
        "basic",
        "idea",
        "construct",
        "machine",
        "t_n",
        "rather",
        "directly",
        "printing",
        "output",
        "t_n",
        "print",
        "successive",
        "complete",
        "configuration",
        "instantaneous",
        "description",
        "t_n",
        "order",
        "achieve",
        "t_n",
        "could",
        "made",
        "depend",
        "rule",
        "operation",
        "t_n",
        "written",
        "somewhere",
        "within",
        "step",
        "could",
        "carried",
        "referring",
        "rule",
        "turing",
        "word",
        "t_n",
        "print",
        "successive",
        "complete",
        "configuration",
        "t_n",
        "program",
        "t_n",
        "written",
        "tape",
        "thus",
        "turing",
        "need",
        "notational",
        "method",
        "make",
        "possible",
        "capture",
        "two",
        "different",
        "aspect",
        "turing",
        "machine",
        "one",
        "tape",
        "way",
        "treated",
        "machine",
        "viz",
        "description",
        "term",
        "dothe",
        "quintuple",
        "notation",
        "description",
        "term",
        "doingthe",
        "complete",
        "configuration",
        "notation",
        "thus",
        "first",
        "perhaps",
        "essential",
        "step",
        "construction",
        "u",
        "quintuple",
        "complete",
        "configuration",
        "notation",
        "idea",
        "putting",
        "tape",
        "particularly",
        "tape",
        "divided",
        "two",
        "region",
        "call",
        "b",
        "region",
        "region",
        "contains",
        "notation",
        "program",
        "t_n",
        "b",
        "region",
        "notation",
        "successive",
        "complete",
        "configuration",
        "t_n",
        "turing",
        "paper",
        "separated",
        "additional",
        "symbol",
        "simplify",
        "construction",
        "u",
        "order",
        "encode",
        "turing",
        "machine",
        "unique",
        "number",
        "turing",
        "develops",
        "third",
        "notation",
        "permit",
        "express",
        "quintuple",
        "complete",
        "configuration",
        "letter",
        "determined",
        "note",
        "use",
        "turing",
        "original",
        "encoding",
        "course",
        "broad",
        "variety",
        "possible",
        "encoding",
        "including",
        "binary",
        "encoding",
        "replacing",
        "state",
        "q_i",
        "quintuple",
        "t_n",
        "dunderbrace",
        "aldots",
        "_i",
        "instance",
        "q_",
        "becomes",
        "daaa",
        "replacing",
        "symbol",
        "s_",
        "j",
        "quintuple",
        "t_n",
        "dunderbrace",
        "cldots",
        "c",
        "_j",
        "instance",
        "s_",
        "becomes",
        "dc",
        "using",
        "method",
        "quintuple",
        "turing",
        "machine",
        "t_n",
        "expressed",
        "term",
        "sequence",
        "capital",
        "letter",
        "program",
        "machine",
        "t_",
        "n",
        "expressed",
        "set",
        "symbol",
        "c",
        "r",
        "l",
        "n",
        "socalled",
        "standard",
        "description",
        "sd",
        "turing",
        "machine",
        "thus",
        "instance",
        "sd",
        "t_",
        "textrm",
        "simple",
        "daddrdaa",
        "dadcdrdaa",
        "daaddcrda",
        "daadcdcrda",
        "essentially",
        "turing",
        "version",
        "g\u00f6del",
        "numbering",
        "indeed",
        "turing",
        "show",
        "one",
        "easily",
        "get",
        "numerical",
        "description",
        "representation",
        "description",
        "number",
        "dn",
        "turing",
        "machine",
        "t_",
        "n",
        "replacing",
        "c",
        "l",
        "r",
        "n",
        "thus",
        "dn",
        "t_",
        "textrm",
        "simple",
        "note",
        "every",
        "machine",
        "t_n",
        "unique",
        "dn",
        "dn",
        "represents",
        "one",
        "one",
        "machine",
        "clearly",
        "method",
        "used",
        "determine",
        "sd",
        "machine",
        "t_n",
        "also",
        "used",
        "write",
        "successive",
        "complete",
        "configuration",
        "t_n",
        "using",
        "separator",
        "successive",
        "complete",
        "configuration",
        "first",
        "complete",
        "configuration",
        "t_",
        "textrm",
        "simple",
        "dad",
        "ddaad",
        "ddcdad",
        "ddcddaad",
        "ddcddcdad",
        "interchangeability",
        "program",
        "behavior",
        "basic",
        "set",
        "function",
        "notational",
        "method",
        "write",
        "program",
        "successive",
        "complete",
        "configuration",
        "machine",
        "t_n",
        "one",
        "tape",
        "machine",
        "t_n",
        "first",
        "step",
        "turing",
        "construction",
        "u",
        "however",
        "u",
        "also",
        "able",
        "emulate",
        "program",
        "t_n",
        "written",
        "region",
        "actually",
        "write",
        "successive",
        "complete",
        "configuration",
        "region",
        "b",
        "moreover",
        "possible",
        "take",
        "exchange",
        "rule",
        "operation",
        "turing",
        "machine",
        "others",
        "turing",
        "viz",
        "able",
        "calculate",
        "also",
        "compute",
        "issue",
        "also",
        "dealt",
        "others",
        "church",
        "g\u00f6del",
        "post",
        "using",
        "formal",
        "device",
        "instance",
        "able",
        "recognize",
        "whether",
        "region",
        "b",
        "able",
        "determine",
        "whether",
        "certain",
        "sequence",
        "symbol",
        "next",
        "state",
        "q_i",
        "need",
        "executed",
        "achieved",
        "turing",
        "construction",
        "sequence",
        "turing",
        "computable",
        "problem",
        "finding",
        "leftmost",
        "rightmost",
        "occurrence",
        "sequence",
        "symbol",
        "marking",
        "sequence",
        "symbol",
        "symbol",
        "remember",
        "turing",
        "us",
        "two",
        "kind",
        "alternating",
        "square",
        "comparing",
        "two",
        "symbol",
        "sequence",
        "copying",
        "symbol",
        "sequence",
        "turing",
        "develops",
        "notational",
        "technique",
        "called",
        "skeleton",
        "table",
        "function",
        "serf",
        "kind",
        "shorthand",
        "notation",
        "complete",
        "turing",
        "machine",
        "table",
        "easily",
        "used",
        "construct",
        "complicated",
        "machine",
        "previous",
        "one",
        "technique",
        "quite",
        "reminiscent",
        "recursive",
        "technique",
        "composition",
        "see",
        "recursive",
        "function",
        "illustrate",
        "function",
        "turing",
        "computable",
        "discus",
        "one",
        "function",
        "detail",
        "viz",
        "compare",
        "function",
        "constructed",
        "basis",
        "number",
        "turing",
        "computable",
        "function",
        "built",
        "top",
        "order",
        "understand",
        "function",
        "work",
        "remember",
        "turing",
        "used",
        "system",
        "alternating",
        "f",
        "esquares",
        "fsquares",
        "contain",
        "actual",
        "quintuple",
        "complete",
        "configuration",
        "esquares",
        "used",
        "way",
        "mark",
        "certain",
        "part",
        "machine",
        "tape",
        "comparing",
        "two",
        "sequence",
        "s_",
        "s_",
        "symbol",
        "s_",
        "marked",
        "symbol",
        "symbol",
        "s_",
        "marked",
        "symbol",
        "b",
        "turing",
        "defined",
        "nine",
        "different",
        "function",
        "show",
        "compare",
        "function",
        "computed",
        "turing",
        "machine",
        "find",
        "q_",
        "q_",
        "j",
        "machine",
        "function",
        "search",
        "leftmost",
        "occurrence",
        "a",
        "found",
        "machine",
        "move",
        "state",
        "q_",
        "else",
        "move",
        "state",
        "q_",
        "j",
        "achieved",
        "machine",
        "first",
        "move",
        "beginning",
        "tape",
        "indicated",
        "special",
        "mark",
        "move",
        "right",
        "find",
        "reach",
        "rightmost",
        "symbol",
        "tape",
        "findl",
        "q_",
        "q_",
        "j",
        "find",
        "found",
        "machine",
        "move",
        "one",
        "square",
        "left",
        "used",
        "function",
        "need",
        "compute",
        "symbol",
        "fsquares",
        "marked",
        "symbol",
        "esquares",
        "erase",
        "q_",
        "q_",
        "j",
        "machine",
        "computes",
        "find",
        "found",
        "era",
        "go",
        "state",
        "q_",
        "else",
        "go",
        "state",
        "q_",
        "j",
        "erase_all",
        "q_j",
        "textrm",
        "erase",
        "textrm",
        "erase",
        "_textrm",
        "q_j",
        "machine",
        "computes",
        "erase",
        "repeatedly",
        "erased",
        "move",
        "q_",
        "j",
        "equal",
        "q_i",
        "q_j",
        "machine",
        "check",
        "whether",
        "current",
        "symbol",
        "a",
        "yes",
        "move",
        "state",
        "q_i",
        "else",
        "move",
        "state",
        "q_j",
        "cmp_xy",
        "q_i",
        "q_j",
        "b",
        "textrm",
        "findl",
        "equal",
        "q_i",
        "q_j",
        "x",
        "q_j",
        "b",
        "whatever",
        "current",
        "symbol",
        "x",
        "machine",
        "computes",
        "findl",
        "b",
        "look",
        "symbol",
        "marked",
        "b",
        "symbol",
        "marked",
        "b",
        "machine",
        "computes",
        "textrm",
        "equal",
        "x",
        "else",
        "machine",
        "go",
        "state",
        "q_j",
        "word",
        "cmp_xy",
        "q_i",
        "q_j",
        "b",
        "compare",
        "whether",
        "current",
        "symbol",
        "leftmost",
        "symbol",
        "marked",
        "b",
        "compare_marked",
        "q_i",
        "q_j",
        "q_n",
        "b",
        "machine",
        "check",
        "whether",
        "leftmost",
        "symbol",
        "marked",
        "b",
        "respectively",
        "symbol",
        "marked",
        "b",
        "machine",
        "go",
        "state",
        "q_",
        "n",
        "symbol",
        "marked",
        "one",
        "marked",
        "b",
        "machine",
        "go",
        "state",
        "q_i",
        "else",
        "machine",
        "go",
        "state",
        "q_j",
        "function",
        "computed",
        "textrm",
        "findl",
        "cmp",
        "_xy",
        "q_i",
        "q_j",
        "b",
        "textrm",
        "find",
        "q_j",
        "q_n",
        "b",
        "textrm",
        "compare",
        "_textrm",
        "erase",
        "q_iq_j",
        "q_n",
        "b",
        "compare_marked",
        "symbol",
        "marked",
        "b",
        "mark",
        "b",
        "erased",
        "achieved",
        "computing",
        "textrm",
        "erase",
        "first",
        "b",
        "textrm",
        "compare",
        "_textrm",
        "q_j",
        "q_n",
        "b",
        "machine",
        "compare",
        "sequence",
        "b",
        "marked",
        "b",
        "respectively",
        "done",
        "repeatedly",
        "computing",
        "compare_erase",
        "b",
        "b",
        "equal",
        "b",
        "erased",
        "machine",
        "move",
        "state",
        "q_j",
        "else",
        "move",
        "state",
        "q_n",
        "computed",
        "textrm",
        "compare",
        "_textrm",
        "erase",
        "textrm",
        "compare",
        "_textrm",
        "q_j",
        "q_n",
        "b",
        "q_j",
        "q_n",
        "b",
        "recursively",
        "calling",
        "textrm",
        "compare",
        "_textrm",
        "similar",
        "manner",
        "turing",
        "defines",
        "following",
        "function",
        "textrm",
        "copy",
        "q_i",
        "copy",
        "sequence",
        "symbol",
        "marked",
        "right",
        "last",
        "complete",
        "configuration",
        "erase",
        "mark",
        "textrm",
        "copy",
        "_",
        "n",
        "q_i",
        "a_",
        "a_",
        "ldots",
        "a_n",
        "copy",
        "sequence",
        "marked",
        "a_",
        "a_n",
        "right",
        "last",
        "complete",
        "configuration",
        "erase",
        "mark",
        "a_i",
        "textrm",
        "replace",
        "q_i",
        "b",
        "replace",
        "letter",
        "b",
        "textrm",
        "mark_next_config",
        "q_i",
        "mark",
        "first",
        "configuration",
        "q_is_j",
        "right",
        "machine",
        "head",
        "letter",
        "textrm",
        "find",
        "_textrm",
        "right",
        "q_i",
        "find",
        "rightmost",
        "symbol",
        "a",
        "using",
        "basic",
        "function",
        "copy",
        "replace",
        "compare",
        "turing",
        "construct",
        "universal",
        "turing",
        "machine",
        "outline",
        "universal",
        "turing",
        "machine",
        "indicating",
        "basic",
        "function",
        "indeed",
        "make",
        "possible",
        "universal",
        "computation",
        "assumed",
        "upon",
        "initialization",
        "u",
        "tape",
        "sd",
        "turing",
        "machine",
        "t_n",
        "remember",
        "turing",
        "us",
        "system",
        "alternating",
        "f",
        "esquares",
        "instance",
        "sd",
        "t_",
        "textrm",
        "simple",
        "written",
        "tape",
        "u",
        "_d_a_d_d_r_d_a_a_",
        "_d_a_d_c_d_r_d_a_a_",
        "_d_a_a_d_d_c_r_d_a_",
        "_d_a_a_d_c_d_c_r_d_a_",
        "_",
        "indicates",
        "unmarked",
        "esquare",
        "init",
        "right",
        "rightmost",
        "quintuple",
        "t_n",
        "u",
        "print",
        "_",
        "_d_a_",
        "_",
        "indicates",
        "unmarked",
        "esquare",
        "find_next_state",
        "machine",
        "first",
        "mark",
        "configuration",
        "q_",
        "cc",
        "s_",
        "cc",
        "j",
        "rightmost",
        "last",
        "complete",
        "configuration",
        "computed",
        "u",
        "b",
        "part",
        "tape",
        "x",
        "configuration",
        "q_",
        "q",
        "s_",
        "q",
        "n",
        "leftmost",
        "quintuple",
        "preceded",
        "marked",
        "letter",
        "z",
        "semicolon",
        "part",
        "tape",
        "two",
        "configuration",
        "compared",
        "identical",
        "machine",
        "move",
        "mark_operations",
        "mark",
        "semicolon",
        "preceding",
        "q_",
        "q",
        "s_",
        "q",
        "n",
        "z",
        "go",
        "find_next_state",
        "easily",
        "achieved",
        "using",
        "function",
        "compare_all",
        "mean",
        "whatever",
        "outcome",
        "comparison",
        "mark",
        "x",
        "erased",
        "instance",
        "suppose",
        "t_n",
        "t_",
        "textrm",
        "simple",
        "last",
        "complete",
        "configuration",
        "t_",
        "textrm",
        "simple",
        "computed",
        "u",
        "tag",
        "label",
        "cc_univ",
        "_underbrace",
        "d_",
        "_",
        "s_",
        "underbrace",
        "d_c_",
        "_",
        "s_",
        "underbrace",
        "d_",
        "_",
        "s_",
        "textcolor",
        "orange",
        "underbrace",
        "d_a_a_",
        "_",
        "q_",
        "underbrace",
        "d_",
        "_",
        "s_",
        "u",
        "move",
        "region",
        "determine",
        "corresponding",
        "quintuple",
        "tag",
        "label",
        "quint_univ",
        "textcolor",
        "orange",
        "underbrace",
        "d_a_a_",
        "_",
        "q_",
        "underbrace",
        "d_",
        "_",
        "s_",
        "underbrace",
        "d_c_",
        "_",
        "s_",
        "underbrace",
        "r_",
        "underbrace",
        "d_a_",
        "_",
        "q_",
        "mark_operations",
        "machine",
        "u",
        "mark",
        "operation",
        "need",
        "execute",
        "order",
        "compute",
        "next",
        "complete",
        "configuration",
        "t_n",
        "printing",
        "move",
        "l",
        "r",
        "n",
        "operation",
        "marked",
        "u",
        "next",
        "state",
        "y",
        "mark",
        "z",
        "erased",
        "continuing",
        "example",
        "u",
        "mark",
        "eqref",
        "quint_univ",
        "follows",
        "d_a_a_d_textcolor",
        "magenta",
        "ducuru",
        "textcolor",
        "green",
        "dyay",
        "mark_compconfig",
        "last",
        "complete",
        "configuration",
        "t_n",
        "computed",
        "u",
        "marked",
        "four",
        "region",
        "configuration",
        "q_",
        "cc",
        "s_",
        "cc",
        "j",
        "left",
        "unmarked",
        "symbol",
        "preceding",
        "marked",
        "x",
        "remaining",
        "symbol",
        "left",
        "marked",
        "v",
        "finally",
        "symbol",
        "right",
        "marked",
        "w",
        "printed",
        "right",
        "rightmost",
        "symbol",
        "order",
        "indicate",
        "beginning",
        "next",
        "complete",
        "configuration",
        "t_n",
        "computed",
        "u",
        "continuing",
        "example",
        "eqref",
        "cc_univ",
        "marked",
        "follows",
        "u",
        "textcolor",
        "red",
        "underbrace",
        "dv",
        "_",
        "s_",
        "underbrace",
        "dvcv",
        "_",
        "s_",
        "textcolor",
        "blue",
        "underbrace",
        "dx",
        "_",
        "s_",
        "underbrace",
        "d_a_a_",
        "_",
        "q_",
        "underbrace",
        "d_",
        "_",
        "s_",
        "_",
        "u",
        "go",
        "print",
        "print",
        "determined",
        "instruction",
        "marked",
        "mark_operations",
        "operation",
        "print",
        "print",
        "case",
        "respectively",
        "printed",
        "right",
        "last",
        "complete",
        "configuration",
        "necessary",
        "function",
        "turing",
        "insisted",
        "u",
        "print",
        "coded",
        "complete",
        "configuration",
        "computed",
        "t_n",
        "also",
        "actual",
        "binary",
        "real",
        "number",
        "computed",
        "t_n",
        "print_complete_configuration",
        "u",
        "print",
        "next",
        "complete",
        "configuration",
        "era",
        "mark",
        "u",
        "v",
        "w",
        "x",
        "y",
        "return",
        "find_next_state",
        "u",
        "first",
        "search",
        "rightmost",
        "letter",
        "u",
        "check",
        "move",
        "needed",
        "r",
        "l",
        "n",
        "era",
        "mark",
        "u",
        "r",
        "l",
        "n",
        "depending",
        "value",
        "l",
        "r",
        "n",
        "write",
        "next",
        "complete",
        "configuration",
        "applying",
        "copy",
        "_",
        "u",
        "v",
        "w",
        "x",
        "y",
        "move",
        "operation",
        "l",
        "r",
        "n",
        "accounted",
        "particular",
        "combination",
        "u",
        "v",
        "w",
        "x",
        "begin",
        "array",
        "textrm",
        "l",
        "textrm",
        "copy",
        "_",
        "textrm",
        "find",
        "_textrm",
        "next",
        "_textrm",
        "state",
        "textcolor",
        "red",
        "v",
        "textcolor",
        "green",
        "textcolor",
        "blue",
        "x",
        "textcolor",
        "magenta",
        "u",
        "textcolor",
        "rawsienna",
        "w",
        "textrm",
        "r",
        "textrm",
        "copy",
        "_",
        "textrm",
        "find",
        "_textrm",
        "next",
        "_textrm",
        "state",
        "textcolor",
        "red",
        "v",
        "textcolor",
        "blue",
        "x",
        "textcolor",
        "magenta",
        "u",
        "textcolor",
        "green",
        "textcolor",
        "rawsienna",
        "w",
        "textrm",
        "n",
        "textrm",
        "copy",
        "_",
        "textrm",
        "find",
        "_textrm",
        "next",
        "_textrm",
        "state",
        "textcolor",
        "red",
        "v",
        "textcolor",
        "blue",
        "x",
        "textcolor",
        "green",
        "textcolor",
        "magenta",
        "u",
        "textcolor",
        "rawsienna",
        "w",
        "end",
        "array",
        "following",
        "example",
        "since",
        "t_",
        "textrm",
        "simple",
        "need",
        "move",
        "right",
        "new",
        "rightmost",
        "complete",
        "configursiation",
        "t_",
        "textrm",
        "simple",
        "written",
        "tape",
        "u",
        "textcolor",
        "red",
        "underbrace",
        "d_",
        "_",
        "s_",
        "underbrace",
        "d_c_",
        "_",
        "s_",
        "textcolor",
        "blue",
        "underbrace",
        "d_",
        "_",
        "s_",
        "textcolor",
        "magenta",
        "underbrace",
        "d_c_",
        "_",
        "s_",
        "textcolor",
        "green",
        "underbrace",
        "d_a_",
        "_",
        "q_",
        "since",
        "complete",
        "configuration",
        "square",
        "scanned",
        "t_",
        "textrm",
        "simple",
        "one",
        "included",
        "previous",
        "complete",
        "configuration",
        "viz",
        "t_",
        "textrm",
        "simple",
        "reached",
        "beyond",
        "rightmost",
        "previous",
        "point",
        "complete",
        "configuration",
        "written",
        "u",
        "fact",
        "incomplete",
        "small",
        "defect",
        "corrected",
        "post",
        "post",
        "including",
        "additional",
        "instruction",
        "function",
        "used",
        "mark",
        "complete",
        "configuration",
        "next",
        "round",
        "clear",
        "turing",
        "universal",
        "machine",
        "indeed",
        "requires",
        "program",
        "data",
        "produced",
        "program",
        "manipulated",
        "interchangeably",
        "viz",
        "program",
        "production",
        "put",
        "next",
        "treated",
        "manner",
        "sequence",
        "letter",
        "copied",
        "marked",
        "erased",
        "compared",
        "turing",
        "particular",
        "construction",
        "quite",
        "intricate",
        "reliance",
        "f",
        "esquares",
        "use",
        "rather",
        "large",
        "set",
        "symbol",
        "rather",
        "arcane",
        "notation",
        "used",
        "describe",
        "different",
        "function",
        "discussed",
        "since",
        "several",
        "modification",
        "simplification",
        "implemented",
        "removal",
        "difference",
        "f",
        "esquares",
        "already",
        "discussed",
        "section",
        "proven",
        "shannon",
        "turing",
        "machine",
        "including",
        "universal",
        "machine",
        "reduced",
        "binary",
        "turing",
        "machine",
        "shannon",
        "since",
        "s",
        "quite",
        "research",
        "could",
        "smallest",
        "possible",
        "universal",
        "device",
        "respect",
        "number",
        "state",
        "symbol",
        "quite",
        "small",
        "universal",
        "turing",
        "machine",
        "found",
        "result",
        "usually",
        "achieved",
        "relying",
        "equivalent",
        "model",
        "computability",
        "instance",
        "tag",
        "system",
        "survey",
        "research",
        "small",
        "universal",
        "device",
        "see",
        "margenstern",
        "wood",
        "neary",
        "halting",
        "problem",
        "entscheidungsproblem",
        "explained",
        "purpose",
        "turing",
        "paper",
        "show",
        "entscheidungsproblem",
        "firstorder",
        "logic",
        "computable",
        "result",
        "achieved",
        "independently",
        "church",
        "a",
        "b",
        "using",
        "different",
        "kind",
        "formal",
        "device",
        "logically",
        "equivalent",
        "turing",
        "machine",
        "see",
        "sec",
        "result",
        "went",
        "much",
        "hilbert",
        "hoped",
        "achieve",
        "finitary",
        "formalist",
        "program",
        "indeed",
        "next",
        "g\u00f6del",
        "incompleteness",
        "result",
        "broke",
        "much",
        "hilbert",
        "dream",
        "making",
        "mathematics",
        "void",
        "ignorabimus",
        "explicitly",
        "expressed",
        "following",
        "word",
        "hilbert",
        "true",
        "reason",
        "comte",
        "could",
        "find",
        "unsolvable",
        "problem",
        "lie",
        "opinion",
        "assertion",
        "exists",
        "unsolvable",
        "problem",
        "instead",
        "stupid",
        "ignorabimus",
        "solution",
        "must",
        "know",
        "shall",
        "know",
        "translation",
        "author",
        "note",
        "solvability",
        "hilbert",
        "referring",
        "concern",
        "solvability",
        "mathematical",
        "problem",
        "general",
        "mechanically",
        "solvable",
        "shown",
        "however",
        "mancosu",
        "et",
        "al",
        "p",
        "general",
        "aim",
        "solving",
        "every",
        "mathematical",
        "problem",
        "underpins",
        "two",
        "particular",
        "conviction",
        "hilbert",
        "namely",
        "axiom",
        "number",
        "theory",
        "complete",
        "undecidable",
        "problem",
        "mathematics",
        "direct",
        "indirect",
        "proof",
        "uncomputable",
        "decision",
        "problem",
        "one",
        "show",
        "particular",
        "decision",
        "problem",
        "textrm",
        "_i",
        "computable",
        "two",
        "main",
        "method",
        "indirect",
        "proof",
        "take",
        "problem",
        "textrm",
        "_",
        "textrm",
        "uncomp",
        "already",
        "known",
        "uncomputable",
        "show",
        "problem",
        "reduces",
        "textrm",
        "_",
        "direct",
        "proof",
        "prove",
        "uncomputability",
        "textrm",
        "_",
        "directly",
        "assuming",
        "version",
        "churchturing",
        "thesis",
        "today",
        "one",
        "usually",
        "relies",
        "first",
        "method",
        "evident",
        "absence",
        "problem",
        "textrm",
        "_",
        "textrm",
        "uncomp",
        "turing",
        "also",
        "church",
        "post",
        "see",
        "sec",
        "rely",
        "direct",
        "approach",
        "notion",
        "reducibility",
        "origin",
        "work",
        "turing",
        "post",
        "considered",
        "several",
        "variant",
        "computability",
        "post",
        "turing",
        "concept",
        "later",
        "appropriated",
        "context",
        "computational",
        "complexity",
        "theory",
        "today",
        "one",
        "basic",
        "concept",
        "computability",
        "computational",
        "complexity",
        "theory",
        "odifreddi",
        "sipser",
        "roughly",
        "speaking",
        "reduction",
        "problem",
        "d_i",
        "problem",
        "d_j",
        "come",
        "providing",
        "effective",
        "procedure",
        "translating",
        "every",
        "instance",
        "d_",
        "problem",
        "d_i",
        "instance",
        "d_",
        "j",
        "n",
        "d_j",
        "way",
        "effective",
        "procedure",
        "solving",
        "d_",
        "j",
        "n",
        "also",
        "yield",
        "effective",
        "procedure",
        "solving",
        "d_",
        "word",
        "d_i",
        "reduces",
        "d_j",
        "d_i",
        "uncomputable",
        "d_j",
        "note",
        "reduction",
        "one",
        "problem",
        "another",
        "also",
        "used",
        "decidability",
        "proof",
        "d_i",
        "reduces",
        "d_j",
        "d_j",
        "known",
        "computable",
        "d_i",
        "absence",
        "d",
        "_",
        "textrm",
        "uncomp",
        "different",
        "approach",
        "required",
        "church",
        "post",
        "turing",
        "used",
        "le",
        "approach",
        "end",
        "gandy",
        "first",
        "one",
        "need",
        "formalism",
        "capture",
        "notion",
        "computability",
        "turing",
        "proposed",
        "turing",
        "machine",
        "formalism",
        "end",
        "second",
        "step",
        "show",
        "problem",
        "computable",
        "within",
        "formalism",
        "achieve",
        "uniform",
        "process",
        "u",
        "need",
        "setup",
        "relative",
        "formalism",
        "able",
        "compute",
        "every",
        "computable",
        "number",
        "one",
        "use",
        "form",
        "diagonalization",
        "combination",
        "u",
        "derive",
        "contradiction",
        "diagonalization",
        "introduced",
        "cantor",
        "show",
        "set",
        "real",
        "number",
        "uncountable",
        "denumerable",
        "variant",
        "method",
        "used",
        "also",
        "g\u00f6del",
        "proof",
        "first",
        "incompleteness",
        "theorem",
        "turing",
        "basic",
        "problem",
        "circ",
        "print",
        "entscheidungsproblem",
        "recall",
        "turing",
        "original",
        "version",
        "turing",
        "machine",
        "machine",
        "computing",
        "real",
        "number",
        "implied",
        "wellbehaving",
        "turing",
        "machine",
        "fact",
        "never",
        "halt",
        "print",
        "infinite",
        "sequence",
        "figure",
        "machine",
        "identified",
        "turing",
        "circlefree",
        "machine",
        "called",
        "circular",
        "machine",
        "number",
        "n",
        "dn",
        "circlefree",
        "machine",
        "called",
        "satisfactory",
        "basic",
        "difference",
        "used",
        "turing",
        "proof",
        "uncomputability",
        "circ",
        "problem",
        "decide",
        "every",
        "number",
        "n",
        "whether",
        "satisfactory",
        "proof",
        "uncomputability",
        "circ",
        "us",
        "construction",
        "hypothetical",
        "circlefree",
        "machine",
        "t_",
        "decide",
        "computes",
        "diagonal",
        "sequence",
        "set",
        "computable",
        "number",
        "computed",
        "circlefree",
        "machine",
        "hence",
        "relies",
        "construction",
        "universal",
        "turing",
        "machine",
        "hypothetical",
        "machine",
        "able",
        "decide",
        "circ",
        "number",
        "n",
        "given",
        "shown",
        "machine",
        "t_",
        "decide",
        "becomes",
        "circular",
        "machine",
        "provided",
        "description",
        "number",
        "hence",
        "assumption",
        "machine",
        "capable",
        "solving",
        "circ",
        "must",
        "false",
        "based",
        "uncomputability",
        "circ",
        "turing",
        "show",
        "also",
        "print",
        "computable",
        "particularly",
        "show",
        "print",
        "computable",
        "also",
        "circ",
        "would",
        "decidable",
        "viz",
        "rephrases",
        "print",
        "way",
        "becomes",
        "problem",
        "decide",
        "machine",
        "whether",
        "print",
        "infinity",
        "symbol",
        "would",
        "amount",
        "deciding",
        "circ",
        "finally",
        "based",
        "uncomputability",
        "print",
        "turing",
        "show",
        "entscheidungsproblem",
        "decidable",
        "achieved",
        "showing",
        "turing",
        "machine",
        "possible",
        "construct",
        "corresponding",
        "formula",
        "firstorder",
        "logic",
        "general",
        "method",
        "determining",
        "whether",
        "provable",
        "general",
        "method",
        "proving",
        "ever",
        "print",
        "problem",
        "print",
        "decidable",
        "provided",
        "accept",
        "turing",
        "thesis",
        "thus",
        "follows",
        "uncomputability",
        "print",
        "entscheidungsproblem",
        "computable",
        "halting",
        "problem",
        "given",
        "turing",
        "focus",
        "computable",
        "real",
        "number",
        "base",
        "decision",
        "problem",
        "determining",
        "whether",
        "turing",
        "machine",
        "halt",
        "quite",
        "wellknown",
        "halting",
        "problem",
        "halt",
        "problem",
        "decide",
        "every",
        "turing",
        "machine",
        "whether",
        "halt",
        "turing",
        "problem",
        "print",
        "fact",
        "close",
        "halt",
        "see",
        "davis",
        "chapter",
        "theorem",
        "popular",
        "proof",
        "halt",
        "go",
        "follows",
        "assume",
        "halt",
        "computable",
        "possible",
        "construct",
        "turing",
        "machine",
        "decides",
        "machine",
        "t_i",
        "input",
        "w",
        "t_i",
        "whether",
        "t_i",
        "halt",
        "w",
        "let",
        "u",
        "call",
        "machine",
        "t_",
        "h",
        "particularly",
        "t_h",
        "t_i",
        "w",
        "left",
        "begin",
        "array",
        "textrm",
        "halt",
        "textrm",
        "t_i",
        "halt",
        "w",
        "textrm",
        "loop",
        "textrm",
        "t_i",
        "loop",
        "w",
        "end",
        "array",
        "right",
        "define",
        "second",
        "machine",
        "t_d",
        "relies",
        "assumption",
        "machine",
        "t_h",
        "constructed",
        "particularly",
        "t_d",
        "t_i",
        "dnof",
        "t_i",
        "left",
        "begin",
        "array",
        "textrm",
        "halt",
        "textrm",
        "t_i",
        "halt",
        "qquad",
        "textrm",
        "description",
        "number",
        "textrm",
        "loop",
        "textrm",
        "t_i",
        "halt",
        "qquad",
        "textrm",
        "description",
        "number",
        "end",
        "array",
        "right",
        "set",
        "t_i",
        "t_d",
        "end",
        "contradiction",
        "t_d",
        "halt",
        "mean",
        "t_d",
        "halt",
        "vice",
        "versa",
        "popular",
        "quite",
        "informal",
        "variant",
        "proof",
        "given",
        "christopher",
        "strachey",
        "context",
        "programming",
        "strachey",
        "variation",
        "turing",
        "machine",
        "clear",
        "section",
        "variety",
        "definition",
        "turing",
        "machine",
        "one",
        "use",
        "quintuple",
        "quadruple",
        "notation",
        "one",
        "different",
        "type",
        "symbol",
        "one",
        "one",
        "twoway",
        "infinite",
        "oneway",
        "infinite",
        "tape",
        "etc",
        "several",
        "le",
        "obvious",
        "modification",
        "considered",
        "used",
        "past",
        "modification",
        "two",
        "kind",
        "generalization",
        "restriction",
        "result",
        "stronger",
        "weaker",
        "model",
        "viz",
        "modified",
        "machine",
        "compute",
        "le",
        "turing",
        "computable",
        "function",
        "add",
        "robustness",
        "turing",
        "machine",
        "definition",
        "binary",
        "machine",
        "short",
        "note",
        "post",
        "considers",
        "machine",
        "either",
        "mark",
        "unmark",
        "square",
        "mean",
        "two",
        "symbol",
        "s_",
        "s_",
        "prove",
        "formulation",
        "capture",
        "exactly",
        "turing",
        "computable",
        "function",
        "shannon",
        "proved",
        "turing",
        "machine",
        "n",
        "symbol",
        "turing",
        "machine",
        "two",
        "symbol",
        "simulates",
        "shannon",
        "also",
        "showed",
        "turing",
        "machine",
        "state",
        "turing",
        "machine",
        "two",
        "state",
        "simulates",
        "nonerasing",
        "machine",
        "nonerasing",
        "machine",
        "machine",
        "overprint",
        "s_",
        "moore",
        "mentioned",
        "shannon",
        "proved",
        "nonerasing",
        "machine",
        "compute",
        "turing",
        "machine",
        "computes",
        "result",
        "given",
        "context",
        "actual",
        "digital",
        "computer",
        "relied",
        "punched",
        "tape",
        "one",
        "erase",
        "shannon",
        "result",
        "however",
        "remained",
        "unpublished",
        "wang",
        "published",
        "result",
        "wang",
        "nonwriting",
        "machine",
        "shown",
        "minsky",
        "every",
        "turing",
        "machine",
        "nonwriting",
        "turing",
        "machine",
        "two",
        "tape",
        "simulates",
        "multiple",
        "tape",
        "instead",
        "one",
        "tape",
        "one",
        "consider",
        "turing",
        "machine",
        "multiple",
        "tape",
        "turned",
        "useful",
        "several",
        "different",
        "context",
        "instance",
        "minsky",
        "used",
        "twotape",
        "nonwriting",
        "turing",
        "machine",
        "prove",
        "certain",
        "decision",
        "problem",
        "defined",
        "post",
        "decision",
        "problem",
        "tag",
        "system",
        "nonturing",
        "computable",
        "minsky",
        "hartmanis",
        "stearns",
        "founding",
        "paper",
        "computational",
        "complexity",
        "theory",
        "proved",
        "ntape",
        "turing",
        "machine",
        "reduces",
        "single",
        "tape",
        "turing",
        "machine",
        "anything",
        "computed",
        "ntape",
        "multitape",
        "turing",
        "machine",
        "also",
        "computed",
        "single",
        "tape",
        "turing",
        "machine",
        "conversely",
        "hartmanis",
        "stearns",
        "used",
        "multitape",
        "machine",
        "considered",
        "closer",
        "actual",
        "digital",
        "computer",
        "ndimensional",
        "turing",
        "machine",
        "another",
        "variant",
        "consider",
        "turing",
        "machine",
        "tape",
        "onedimensional",
        "ndimensional",
        "variant",
        "reduces",
        "onedimensional",
        "variant",
        "nondeterministic",
        "machine",
        "apparently",
        "radical",
        "reformulation",
        "notion",
        "turing",
        "machine",
        "nondeterministic",
        "turing",
        "machine",
        "explained",
        "one",
        "fundamental",
        "condition",
        "turing",
        "machine",
        "socalled",
        "determinacy",
        "condition",
        "viz",
        "idea",
        "given",
        "moment",
        "machine",
        "behavior",
        "completely",
        "determined",
        "configuration",
        "state",
        "symbol",
        "scanning",
        "next",
        "turing",
        "also",
        "mention",
        "idea",
        "choice",
        "machine",
        "next",
        "state",
        "completely",
        "determined",
        "state",
        "symbol",
        "pair",
        "instead",
        "external",
        "device",
        "make",
        "random",
        "choice",
        "next",
        "nondeterministic",
        "turing",
        "machine",
        "kind",
        "choice",
        "machine",
        "state",
        "symbol",
        "pair",
        "nondeterministic",
        "machine",
        "make",
        "arbitrary",
        "choice",
        "finite",
        "possibly",
        "zero",
        "number",
        "state",
        "thus",
        "unlike",
        "computation",
        "deterministic",
        "turing",
        "machine",
        "computation",
        "nondeterministic",
        "machine",
        "tree",
        "possible",
        "configuration",
        "path",
        "one",
        "way",
        "visualize",
        "computation",
        "nondeterministic",
        "turing",
        "machine",
        "machine",
        "spawn",
        "exact",
        "copy",
        "tape",
        "alternative",
        "available",
        "transition",
        "machine",
        "continues",
        "computation",
        "machine",
        "terminates",
        "successfully",
        "entire",
        "computation",
        "terminates",
        "inherits",
        "machine",
        "resulting",
        "tape",
        "notice",
        "word",
        "successfully",
        "preceding",
        "sentence",
        "formulation",
        "state",
        "designated",
        "accepting",
        "state",
        "machine",
        "terminates",
        "one",
        "state",
        "computation",
        "successful",
        "otherwise",
        "computation",
        "unsuccessful",
        "machine",
        "continue",
        "search",
        "successful",
        "outcome",
        "addition",
        "nondeterminism",
        "turing",
        "machine",
        "alter",
        "extent",
        "turingcomputability",
        "nondeterminism",
        "introduced",
        "finite",
        "automaton",
        "paper",
        "rabin",
        "scott",
        "also",
        "shown",
        "adding",
        "nondeterminism",
        "result",
        "powerful",
        "automaton",
        "nondeterministic",
        "turing",
        "machine",
        "important",
        "model",
        "context",
        "computational",
        "complexity",
        "theory",
        "weak",
        "semiweak",
        "machine",
        "weak",
        "turing",
        "machine",
        "machine",
        "word",
        "alphabet",
        "repeated",
        "infinitely",
        "often",
        "left",
        "right",
        "input",
        "semiweak",
        "machine",
        "machine",
        "word",
        "repeated",
        "infinitely",
        "often",
        "either",
        "left",
        "right",
        "input",
        "machine",
        "generalization",
        "standard",
        "model",
        "initial",
        "tape",
        "contains",
        "finite",
        "word",
        "possibly",
        "nil",
        "introduced",
        "determine",
        "smaller",
        "universal",
        "machine",
        "watanabe",
        "first",
        "define",
        "universal",
        "semiweak",
        "machine",
        "six",
        "state",
        "five",
        "symbol",
        "watanabe",
        "recently",
        "number",
        "researcher",
        "determined",
        "several",
        "small",
        "weak",
        "semiweak",
        "universal",
        "turing",
        "machine",
        "eg",
        "wood",
        "neary",
        "cook",
        "besides",
        "variant",
        "turing",
        "machine",
        "model",
        "also",
        "variant",
        "result",
        "model",
        "capture",
        "welldefined",
        "sense",
        "turing",
        "computable",
        "function",
        "example",
        "model",
        "oracle",
        "machine",
        "turing",
        "infinitetime",
        "turing",
        "machine",
        "hamkins",
        "lewis",
        "accelerating",
        "turing",
        "machine",
        "copeland",
        "various",
        "reason",
        "introducing",
        "stronger",
        "model",
        "wellknown",
        "model",
        "computability",
        "recursion",
        "theory",
        "used",
        "theory",
        "higherorder",
        "recursion",
        "relative",
        "computability",
        "oracle",
        "machine",
        "others",
        "like",
        "accelerating",
        "machine",
        "introduced",
        "context",
        "supertasks",
        "idea",
        "providing",
        "physical",
        "model",
        "compute",
        "function",
        "turingcomputable",
        "philosophical",
        "issue",
        "related",
        "turing",
        "machine",
        "human",
        "machine",
        "computation",
        "original",
        "context",
        "turing",
        "identification",
        "computable",
        "number",
        "turing",
        "machine",
        "aimed",
        "proving",
        "entscheidungsproblem",
        "computable",
        "problem",
        "socalled",
        "general",
        "process",
        "problem",
        "turing",
        "basic",
        "assumption",
        "made",
        "result",
        "intuitive",
        "notion",
        "computability",
        "formally",
        "defined",
        "turing",
        "computability",
        "computable",
        "problem",
        "turing",
        "computable",
        "turing",
        "intuitive",
        "notion",
        "computability",
        "sure",
        "really",
        "cover",
        "computable",
        "problem",
        "generally",
        "kind",
        "computation",
        "basic",
        "question",
        "philosophy",
        "computer",
        "science",
        "time",
        "turing",
        "writing",
        "paper",
        "modern",
        "computer",
        "developed",
        "yet",
        "rephrasing",
        "turing",
        "thesis",
        "identify",
        "turing",
        "computability",
        "computability",
        "modern",
        "computer",
        "interpretation",
        "rather",
        "historically",
        "correct",
        "statement",
        "turing",
        "thesis",
        "existing",
        "computing",
        "machine",
        "time",
        "turing",
        "wrote",
        "paper",
        "differential",
        "analyzer",
        "desk",
        "calculator",
        "quite",
        "restricted",
        "could",
        "compute",
        "used",
        "context",
        "human",
        "computational",
        "practice",
        "grier",
        "thus",
        "surprising",
        "turing",
        "attempt",
        "formalize",
        "machine",
        "computation",
        "rather",
        "human",
        "computation",
        "computable",
        "problem",
        "turing",
        "paper",
        "become",
        "computable",
        "human",
        "mean",
        "explicit",
        "section",
        "turing",
        "show",
        "turing",
        "machine",
        "natural",
        "model",
        "human",
        "computation",
        "analyzing",
        "process",
        "human",
        "computation",
        "analysis",
        "result",
        "kind",
        "abstract",
        "human",
        "computor",
        "fulfills",
        "set",
        "different",
        "condition",
        "rooted",
        "turing",
        "recognition",
        "set",
        "human",
        "limitation",
        "restrict",
        "compute",
        "sensory",
        "apparatus",
        "also",
        "mental",
        "apparatus",
        "computor",
        "computes",
        "real",
        "number",
        "infinite",
        "onedimensional",
        "tape",
        "divided",
        "square",
        "note",
        "turing",
        "assumed",
        "reduction",
        "dimensional",
        "character",
        "paper",
        "human",
        "mathematician",
        "usually",
        "work",
        "essential",
        "computation",
        "turing",
        "following",
        "restriction",
        "gandy",
        "sieg",
        "determinacy",
        "condition",
        "behaviour",
        "computer",
        "moment",
        "determined",
        "symbol",
        "observing",
        "state",
        "mind",
        "moment",
        "turing",
        "boundedness",
        "condition",
        "b",
        "bound",
        "b",
        "number",
        "symbol",
        "square",
        "computer",
        "observe",
        "one",
        "moment",
        "wish",
        "observe",
        "must",
        "use",
        "successive",
        "observations",
        "turing",
        "boundedness",
        "condition",
        "b",
        "number",
        "state",
        "mind",
        "need",
        "taken",
        "account",
        "finite",
        "turing",
        "locality",
        "condition",
        "l",
        "may",
        "assume",
        "square",
        "whose",
        "symbol",
        "changed",
        "always",
        "observed",
        "squares",
        "turing",
        "locality",
        "condition",
        "l",
        "new",
        "observed",
        "square",
        "within",
        "l",
        "square",
        "immediately",
        "previously",
        "observed",
        "square",
        "turing",
        "socalled",
        "direct",
        "appeal",
        "intuition",
        "turing",
        "analysis",
        "resulting",
        "model",
        "explain",
        "turing",
        "machine",
        "today",
        "considered",
        "many",
        "best",
        "standard",
        "model",
        "computability",
        "strong",
        "statement",
        "point",
        "view",
        "see",
        "soare",
        "indeed",
        "set",
        "condition",
        "one",
        "quite",
        "easily",
        "derive",
        "turing",
        "machine",
        "achieved",
        "basically",
        "analyzing",
        "restrictive",
        "condition",
        "simple",
        "operation",
        "elementary",
        "easy",
        "imagine",
        "divided",
        "turing",
        "note",
        "turing",
        "analysis",
        "focus",
        "human",
        "computation",
        "application",
        "identification",
        "human",
        "computation",
        "turing",
        "machine",
        "computation",
        "entscheidungsproblem",
        "suggests",
        "consider",
        "possibility",
        "model",
        "computation",
        "somehow",
        "go",
        "beyond",
        "human",
        "computation",
        "capable",
        "providing",
        "effective",
        "general",
        "procedure",
        "solves",
        "entscheidungsproblem",
        "would",
        "case",
        "would",
        "considered",
        "entscheidungsproblem",
        "uncomputable",
        "focus",
        "human",
        "computation",
        "turing",
        "analysis",
        "computation",
        "led",
        "researcher",
        "extend",
        "turing",
        "analysis",
        "computation",
        "physical",
        "device",
        "result",
        "version",
        "physical",
        "churchturing",
        "thesis",
        "robin",
        "gandy",
        "focused",
        "extending",
        "turing",
        "analysis",
        "discrete",
        "mechanical",
        "device",
        "note",
        "consider",
        "analog",
        "machine",
        "particularly",
        "like",
        "turing",
        "gandy",
        "start",
        "basic",
        "set",
        "restriction",
        "computation",
        "discrete",
        "mechanical",
        "device",
        "basis",
        "develops",
        "new",
        "model",
        "proved",
        "reducible",
        "turing",
        "machine",
        "model",
        "work",
        "continued",
        "wilfried",
        "sieg",
        "proposed",
        "framework",
        "computable",
        "dynamical",
        "system",
        "sieg",
        "others",
        "considered",
        "possibility",
        "reasonable",
        "model",
        "physic",
        "compute",
        "something",
        "turing",
        "computable",
        "see",
        "instance",
        "aaronson",
        "bavarian",
        "gueltrini",
        "internet",
        "resource",
        "shown",
        "closed",
        "timelike",
        "curve",
        "would",
        "exist",
        "halting",
        "problem",
        "would",
        "become",
        "solvable",
        "finite",
        "resource",
        "others",
        "proposed",
        "alternative",
        "model",
        "computation",
        "inspired",
        "turing",
        "machine",
        "model",
        "capture",
        "specific",
        "aspect",
        "current",
        "computing",
        "practice",
        "turing",
        "machine",
        "model",
        "considered",
        "le",
        "suited",
        "one",
        "example",
        "persistent",
        "turing",
        "machine",
        "intended",
        "capture",
        "interactive",
        "process",
        "note",
        "however",
        "result",
        "show",
        "computable",
        "problem",
        "turing",
        "computable",
        "related",
        "proposal",
        "considered",
        "author",
        "reasonable",
        "model",
        "computation",
        "somehow",
        "compute",
        "turing",
        "machine",
        "latter",
        "kind",
        "statement",
        "became",
        "affiliated",
        "research",
        "socalled",
        "hypercomputation",
        "resulting",
        "early",
        "s",
        "rather",
        "fierce",
        "debate",
        "computer",
        "science",
        "community",
        "see",
        "eg",
        "teuscher",
        "various",
        "position",
        "thesis",
        "definition",
        "axiom",
        "theorem",
        "clear",
        "strictly",
        "speaking",
        "turing",
        "thesis",
        "provable",
        "since",
        "original",
        "form",
        "claim",
        "relationship",
        "formal",
        "vague",
        "intuitive",
        "concept",
        "consequence",
        "many",
        "consider",
        "thesis",
        "definition",
        "thesis",
        "would",
        "refuted",
        "one",
        "would",
        "able",
        "provide",
        "intuitively",
        "acceptable",
        "effective",
        "procedure",
        "task",
        "turingcomputable",
        "far",
        "counterexample",
        "found",
        "independently",
        "defined",
        "notion",
        "computability",
        "based",
        "alternative",
        "foundation",
        "recursive",
        "function",
        "abacus",
        "machine",
        "also",
        "shown",
        "equivalent",
        "turing",
        "computability",
        "equivalence",
        "quite",
        "different",
        "formulation",
        "indicate",
        "natural",
        "robust",
        "notion",
        "computability",
        "underlying",
        "understanding",
        "given",
        "apparent",
        "robustness",
        "notion",
        "computability",
        "proposed",
        "avoid",
        "notion",
        "thesis",
        "altogether",
        "instead",
        "propose",
        "set",
        "axiom",
        "used",
        "sharpen",
        "informal",
        "notion",
        "several",
        "approach",
        "notably",
        "approach",
        "structural",
        "axiomatization",
        "computability",
        "axiomatized",
        "sieg",
        "one",
        "whereby",
        "axiomatization",
        "given",
        "churchturing",
        "thesis",
        "derived",
        "dershowitz",
        "gurevich",
        "alternative",
        "historical",
        "model",
        "computability",
        "besides",
        "turing",
        "machine",
        "several",
        "model",
        "introduced",
        "independently",
        "turing",
        "context",
        "research",
        "foundation",
        "mathematics",
        "resulted",
        "thesis",
        "logically",
        "equivalent",
        "turing",
        "thesis",
        "model",
        "proven",
        "capture",
        "turing",
        "computable",
        "function",
        "note",
        "development",
        "modern",
        "computer",
        "stimulated",
        "development",
        "model",
        "register",
        "machine",
        "markov",
        "algorithm",
        "recently",
        "computational",
        "approach",
        "discipline",
        "biology",
        "physic",
        "resulted",
        "bioinspired",
        "physicsinspired",
        "model",
        "petri",
        "net",
        "quantum",
        "turing",
        "machine",
        "discussion",
        "model",
        "however",
        "lie",
        "beyond",
        "scope",
        "entry",
        "general",
        "recursive",
        "function",
        "original",
        "formulation",
        "general",
        "recursive",
        "function",
        "found",
        "g\u00f6del",
        "built",
        "suggestion",
        "herbrand",
        "kleene",
        "simpler",
        "definition",
        "given",
        "kleene",
        "standard",
        "form",
        "us",
        "socalled",
        "minimization",
        "mu",
        "operator",
        "introduced",
        "information",
        "see",
        "entry",
        "recursive",
        "function",
        "church",
        "used",
        "definition",
        "general",
        "recursive",
        "function",
        "state",
        "thesis",
        "church",
        "thesis",
        "every",
        "effectively",
        "calculable",
        "function",
        "general",
        "recursive",
        "context",
        "recursive",
        "function",
        "one",
        "us",
        "notion",
        "recursive",
        "solvability",
        "unsolvability",
        "rather",
        "turing",
        "computability",
        "uncomputability",
        "terminology",
        "due",
        "post",
        "\u03bbdefinability",
        "church",
        "\u03bbcalculus",
        "origin",
        "paper",
        "church",
        "intended",
        "logical",
        "foundation",
        "mathematics",
        "church",
        "conviction",
        "time",
        "different",
        "formal",
        "approach",
        "might",
        "avoid",
        "g\u00f6del",
        "incompleteness",
        "sieg",
        "however",
        "logical",
        "system",
        "proposed",
        "church",
        "proven",
        "inconsistent",
        "two",
        "phd",
        "student",
        "stephen",
        "c",
        "kleene",
        "barkley",
        "rosser",
        "started",
        "focus",
        "subpart",
        "logic",
        "basically",
        "\u03bbcalculus",
        "church",
        "kleene",
        "rosser",
        "started",
        "\u03bbdefine",
        "calculable",
        "function",
        "could",
        "think",
        "quite",
        "soon",
        "church",
        "proposed",
        "define",
        "effective",
        "calculability",
        "term",
        "\u03bbdefinability",
        "however",
        "church",
        "kleene",
        "rosser",
        "established",
        "general",
        "recursiveness",
        "\u03bbdefinability",
        "equivalent",
        "church",
        "announced",
        "thesis",
        "publicly",
        "term",
        "general",
        "recursive",
        "function",
        "rather",
        "\u03bbdefinability",
        "davis",
        "sieg",
        "\u03bbcalculus",
        "two",
        "type",
        "symbol",
        "three",
        "primitive",
        "symbol",
        "\u03bb",
        "also",
        "called",
        "improper",
        "symbol",
        "infinite",
        "list",
        "variable",
        "three",
        "rule",
        "define",
        "wellformed",
        "formula",
        "\u03bbcalculus",
        "called",
        "\u03bbformulas",
        "\u03bbformulas",
        "first",
        "variable",
        "p",
        "\u03bbformula",
        "containing",
        "x",
        "free",
        "variable",
        "lambda",
        "x",
        "textbf",
        "p",
        "also",
        "\u03bbformula",
        "\u03bboperator",
        "used",
        "bind",
        "variable",
        "thus",
        "convert",
        "expression",
        "containing",
        "free",
        "variable",
        "one",
        "denotes",
        "function",
        "n",
        "\u03bbformulas",
        "n",
        "n",
        "understood",
        "application",
        "function",
        "n",
        "\u03bbformulas",
        "wellformed",
        "formula",
        "\u03bbcalculus",
        "formula",
        "result",
        "repeated",
        "application",
        "three",
        "rule",
        "three",
        "operation",
        "rule",
        "conversion",
        "let",
        "u",
        "define",
        "textrm",
        "_",
        "mathbf",
        "n",
        "x",
        "mathbf",
        "standing",
        "formula",
        "result",
        "substitution",
        "n",
        "x",
        "m",
        "reduction",
        "replace",
        "part",
        "lambda",
        "x",
        "mathbf",
        "mathbf",
        "n",
        "formula",
        "textrm",
        "_",
        "mathbf",
        "n",
        "x",
        "mathbf",
        "provided",
        "bound",
        "variable",
        "distinct",
        "x",
        "free",
        "variable",
        "n",
        "example",
        "lambda",
        "x",
        "x",
        "reduces",
        "expansion",
        "replace",
        "part",
        "textrm",
        "_",
        "mathbf",
        "n",
        "x",
        "mathbf",
        "formula",
        "lambda",
        "x",
        "mathbf",
        "mathbf",
        "n",
        "provided",
        "lambda",
        "x",
        "mathbf",
        "mathbf",
        "n",
        "wellformed",
        "bound",
        "variable",
        "distinct",
        "x",
        "free",
        "variable",
        "n",
        "example",
        "expanded",
        "lambda",
        "x",
        "x",
        "change",
        "bound",
        "variable",
        "replace",
        "part",
        "formula",
        "textrm",
        "_",
        "textrm",
        "x",
        "mathbf",
        "provided",
        "x",
        "free",
        "variable",
        "occur",
        "m",
        "example",
        "changing",
        "lambda",
        "x",
        "x",
        "lambda",
        "y",
        "church",
        "introduces",
        "following",
        "abbreviation",
        "define",
        "natural",
        "number",
        "\u03bbcalculus",
        "begin",
        "array",
        "l",
        "rightarrow",
        "lambda",
        "yxyx",
        "rightarrow",
        "lambda",
        "yxy",
        "yx",
        "rightarrow",
        "lambda",
        "yxy",
        "yx",
        "ldots",
        "end",
        "array",
        "using",
        "definition",
        "possible",
        "\u03bbdefine",
        "function",
        "positive",
        "integer",
        "function",
        "f",
        "one",
        "positive",
        "integer",
        "\u03bbdefinable",
        "find",
        "\u03bbformula",
        "f",
        "f",
        "n",
        "n",
        "\u03bbformulas",
        "standing",
        "integer",
        "n",
        "\u03bbformula",
        "mathbf",
        "f",
        "mathbf",
        "converted",
        "n",
        "applying",
        "conversion",
        "rule",
        "\u03bbcalculus",
        "thus",
        "example",
        "successor",
        "function",
        "first",
        "introduced",
        "church",
        "\u03bbdefined",
        "follows",
        "rightarrow",
        "lambda",
        "abc",
        "b",
        "abc",
        "give",
        "example",
        "applying",
        "\u03bbformula",
        "standing",
        "get",
        "begin",
        "align",
        "big",
        "lambda",
        "abc",
        "b",
        "abc",
        "big",
        "big",
        "lambda",
        "yx",
        "yx",
        "big",
        "rightarrow",
        "lambda",
        "bc",
        "bbig",
        "big",
        "lambda",
        "yx",
        "yx",
        "big",
        "bcbig",
        "rightarrow",
        "lambda",
        "bc",
        "bbig",
        "big",
        "lambda",
        "x",
        "b",
        "bx",
        "big",
        "cbig",
        "rightarrow",
        "lambda",
        "bc",
        "b",
        "b",
        "bc",
        "end",
        "align",
        "today",
        "\u03bbcalculus",
        "considered",
        "basic",
        "model",
        "theory",
        "programming",
        "post",
        "production",
        "system",
        "around",
        "emil",
        "post",
        "developed",
        "different",
        "related",
        "type",
        "production",
        "system",
        "order",
        "develop",
        "syntactical",
        "form",
        "would",
        "allow",
        "tackle",
        "decision",
        "problem",
        "firstorder",
        "logic",
        "one",
        "form",
        "post",
        "canonical",
        "system",
        "c",
        "became",
        "later",
        "known",
        "post",
        "production",
        "system",
        "canonical",
        "system",
        "consists",
        "finite",
        "alphabet",
        "sigma",
        "finite",
        "set",
        "initial",
        "word",
        "w_",
        "w_",
        "w_",
        "n",
        "finite",
        "set",
        "production",
        "rule",
        "following",
        "form",
        "begin",
        "array",
        "c",
        "g_",
        "p_",
        "i_",
        "g_",
        "p_",
        "i_",
        "ldots",
        "g_",
        "m_",
        "p_",
        "i",
        "_",
        "m_",
        "g_",
        "m_",
        "g_",
        "p_",
        "i_",
        "g_",
        "p_",
        "i_",
        "ldots",
        "g_",
        "m_",
        "p_",
        "i",
        "_",
        "m_",
        "g_",
        "m_",
        "g_",
        "k",
        "p_",
        "i_",
        "k",
        "g_",
        "k",
        "p_",
        "i_",
        "k",
        "ldots",
        "g_",
        "km_",
        "k",
        "p_",
        "i",
        "k",
        "_",
        "m_",
        "k",
        "g_",
        "k",
        "m_",
        "k",
        "textit",
        "produce",
        "g_",
        "p_",
        "i_",
        "g_",
        "p_",
        "i_",
        "ldots",
        "g_",
        "p_",
        "i_",
        "g_",
        "end",
        "array",
        "symbol",
        "g",
        "kind",
        "metasymbols",
        "correspond",
        "actual",
        "sequence",
        "letter",
        "actual",
        "production",
        "symbol",
        "p",
        "operational",
        "variable",
        "represent",
        "sequence",
        "letter",
        "production",
        "instance",
        "consider",
        "production",
        "system",
        "alphabet",
        "sigma",
        "b",
        "initial",
        "word",
        "w_",
        "ababaaabbaabbaabbaba",
        "following",
        "production",
        "rule",
        "begin",
        "array",
        "c",
        "p_",
        "bbp_",
        "textit",
        "produce",
        "p_",
        "aap_",
        "end",
        "array",
        "starting",
        "w_",
        "three",
        "possible",
        "way",
        "apply",
        "production",
        "rule",
        "application",
        "variable",
        "p_",
        "different",
        "value",
        "value",
        "g",
        "fixed",
        "set",
        "finite",
        "sequence",
        "word",
        "produced",
        "canonical",
        "system",
        "called",
        "canonical",
        "set",
        "special",
        "class",
        "canonical",
        "form",
        "defined",
        "post",
        "normal",
        "system",
        "normal",
        "system",
        "n",
        "consists",
        "finite",
        "alphabet",
        "sigma",
        "one",
        "initial",
        "word",
        "w_",
        "in",
        "sigma",
        "ast",
        "finite",
        "set",
        "production",
        "rule",
        "following",
        "form",
        "begin",
        "array",
        "c",
        "g_ip",
        "textit",
        "produce",
        "pg_i",
        "end",
        "array",
        "set",
        "finite",
        "sequence",
        "word",
        "produced",
        "normal",
        "system",
        "called",
        "normal",
        "set",
        "post",
        "able",
        "show",
        "canonical",
        "set",
        "c",
        "alphabet",
        "sigma",
        "normal",
        "set",
        "n",
        "alphabet",
        "delta",
        "sigma",
        "subseteq",
        "delta",
        "c",
        "n",
        "cap",
        "sigma",
        "ast",
        "conviction",
        "set",
        "finite",
        "sequence",
        "generated",
        "finite",
        "mean",
        "generated",
        "canonical",
        "system",
        "proof",
        "every",
        "canonical",
        "set",
        "normal",
        "set",
        "contains",
        "resulted",
        "post",
        "thesis",
        "post",
        "thesis",
        "davis",
        "every",
        "set",
        "finite",
        "sequence",
        "letter",
        "generated",
        "finite",
        "process",
        "also",
        "generated",
        "normal",
        "system",
        "particularly",
        "set",
        "word",
        "alphabet",
        "sigma",
        "generated",
        "finite",
        "process",
        "form",
        "n",
        "cap",
        "sigma",
        "ast",
        "n",
        "normal",
        "set",
        "post",
        "realized",
        "thesis",
        "obtain",
        "full",
        "generality",
        "complete",
        "analysis",
        "would",
        "made",
        "possible",
        "way",
        "human",
        "mind",
        "could",
        "set",
        "finite",
        "process",
        "generating",
        "sequence",
        "post",
        "quite",
        "probable",
        "formulation",
        "given",
        "post",
        "almost",
        "identical",
        "turing",
        "machine",
        "result",
        "analysis",
        "post",
        "production",
        "system",
        "became",
        "important",
        "formal",
        "device",
        "computer",
        "science",
        "particularly",
        "formal",
        "language",
        "theory",
        "davis",
        "pullum",
        "formulation",
        "post",
        "published",
        "short",
        "note",
        "one",
        "derive",
        "post",
        "second",
        "thesis",
        "de",
        "mol",
        "post",
        "thesis",
        "ii",
        "solvability",
        "problem",
        "intuitive",
        "sense",
        "coincides",
        "solvability",
        "formulation",
        "formulation",
        "similar",
        "turing",
        "machine",
        "program",
        "given",
        "list",
        "direction",
        "human",
        "worker",
        "need",
        "follow",
        "instead",
        "oneway",
        "infinite",
        "tape",
        "post",
        "machine",
        "consists",
        "twoway",
        "infinite",
        "symbol",
        "space",
        "divided",
        "box",
        "idea",
        "worker",
        "working",
        "symbol",
        "space",
        "capable",
        "set",
        "five",
        "primitive",
        "act",
        "o_",
        "mark",
        "box",
        "o_",
        "unmark",
        "box",
        "o_",
        "move",
        "one",
        "box",
        "left",
        "o_",
        "move",
        "one",
        "box",
        "right",
        "o_",
        "determining",
        "whether",
        "box",
        "marked",
        "unmarked",
        "following",
        "finite",
        "set",
        "direction",
        "d_",
        "d_",
        "n",
        "direction",
        "d_",
        "always",
        "one",
        "following",
        "form",
        "perform",
        "one",
        "operation",
        "o_",
        "o_",
        "go",
        "instruction",
        "d_",
        "j",
        "perform",
        "operation",
        "o_",
        "according",
        "box",
        "worker",
        "marked",
        "unmarked",
        "follow",
        "direction",
        "d_",
        "j",
        "d_",
        "j",
        "stop",
        "post",
        "also",
        "defined",
        "specific",
        "terminology",
        "formulation",
        "order",
        "define",
        "solvability",
        "problem",
        "term",
        "formulation",
        "notion",
        "applicability",
        "finiteprocess",
        "solution",
        "given",
        "roughly",
        "speaking",
        "notion",
        "assure",
        "decision",
        "problem",
        "solvable",
        "formulation",
        "condition",
        "solution",
        "given",
        "formalism",
        "always",
        "terminates",
        "correct",
        "solution",
        "impact",
        "turing",
        "machine",
        "computer",
        "science",
        "turing",
        "today",
        "one",
        "celebrated",
        "figure",
        "computer",
        "science",
        "many",
        "consider",
        "father",
        "computer",
        "science",
        "fact",
        "main",
        "award",
        "computer",
        "science",
        "community",
        "called",
        "turing",
        "award",
        "clear",
        "indication",
        "daylight",
        "strengthened",
        "turing",
        "centenary",
        "celebration",
        "largely",
        "coordinated",
        "s",
        "barry",
        "cooper",
        "resulted",
        "enormous",
        "number",
        "scientific",
        "event",
        "around",
        "turing",
        "also",
        "number",
        "initiative",
        "brought",
        "idea",
        "turing",
        "father",
        "computer",
        "science",
        "also",
        "broader",
        "public",
        "bullynck",
        "daylight",
        "de",
        "mol",
        "amongst",
        "turing",
        "contribution",
        "today",
        "considered",
        "pioneering",
        "paper",
        "turing",
        "machine",
        "stand",
        "one",
        "largest",
        "impact",
        "computer",
        "science",
        "however",
        "recent",
        "historical",
        "research",
        "show",
        "also",
        "one",
        "treat",
        "impact",
        "turing",
        "machine",
        "great",
        "care",
        "one",
        "careful",
        "retrofitting",
        "past",
        "present",
        "impact",
        "theoretical",
        "computer",
        "science",
        "today",
        "turing",
        "machine",
        "theory",
        "part",
        "theoretical",
        "foundation",
        "computer",
        "science",
        "standard",
        "reference",
        "research",
        "foundational",
        "question",
        "algorithm",
        "computation",
        "physical",
        "computation",
        "efficient",
        "computation",
        "etc",
        "also",
        "one",
        "main",
        "model",
        "research",
        "broad",
        "range",
        "subdisciplines",
        "theoretical",
        "computer",
        "science",
        "variant",
        "minimal",
        "model",
        "computability",
        "higherorder",
        "computability",
        "computational",
        "complexity",
        "theory",
        "algorithmic",
        "information",
        "theory",
        "etc",
        "significance",
        "turing",
        "machine",
        "model",
        "theoretical",
        "computer",
        "science",
        "least",
        "two",
        "historical",
        "root",
        "first",
        "continuation",
        "work",
        "mathematical",
        "logic",
        "s",
        "s",
        "people",
        "like",
        "martin",
        "daviswho",
        "student",
        "post",
        "churchand",
        "kleene",
        "within",
        "tradition",
        "turing",
        "work",
        "course",
        "wellknown",
        "turing",
        "machine",
        "considered",
        "best",
        "model",
        "computability",
        "given",
        "davis",
        "kleene",
        "published",
        "book",
        "s",
        "topic",
        "kleene",
        "davis",
        "soon",
        "became",
        "standard",
        "reference",
        "early",
        "computability",
        "theory",
        "also",
        "theoretical",
        "reflection",
        "late",
        "s",
        "s",
        "computing",
        "secondly",
        "one",
        "see",
        "s",
        "need",
        "theoretical",
        "model",
        "reflect",
        "new",
        "computing",
        "machine",
        "ability",
        "limitation",
        "systematic",
        "manner",
        "context",
        "theoretical",
        "work",
        "already",
        "done",
        "picked",
        "one",
        "important",
        "development",
        "automaton",
        "theory",
        "one",
        "situate",
        "amongst",
        "others",
        "development",
        "machine",
        "model",
        "like",
        "register",
        "machine",
        "model",
        "wang",
        "b",
        "machine",
        "model",
        "ultimately",
        "rooted",
        "turing",
        "post",
        "machine",
        "minimal",
        "machine",
        "design",
        "discussed",
        "section",
        "use",
        "turing",
        "machine",
        "context",
        "would",
        "become",
        "origin",
        "formal",
        "language",
        "theory",
        "viz",
        "study",
        "different",
        "class",
        "machine",
        "respect",
        "different",
        "language",
        "recognize",
        "also",
        "limitation",
        "strength",
        "theoretical",
        "development",
        "contributed",
        "establishment",
        "computational",
        "complexity",
        "theory",
        "s",
        "course",
        "besides",
        "turing",
        "machine",
        "model",
        "also",
        "played",
        "play",
        "important",
        "role",
        "development",
        "still",
        "within",
        "theoretical",
        "computer",
        "science",
        "mostly",
        "turing",
        "machine",
        "remains",
        "model",
        "even",
        "today",
        "indeed",
        "one",
        "founding",
        "paper",
        "computational",
        "complexity",
        "theory",
        "hartmanis",
        "stearns",
        "published",
        "multitape",
        "turing",
        "machine",
        "introduced",
        "standard",
        "model",
        "computer",
        "turing",
        "machine",
        "modern",
        "computer",
        "several",
        "account",
        "turing",
        "identified",
        "father",
        "computer",
        "science",
        "father",
        "modern",
        "computer",
        "classical",
        "story",
        "le",
        "go",
        "follows",
        "blueprint",
        "modern",
        "computer",
        "found",
        "von",
        "neumann",
        "edvac",
        "design",
        "today",
        "classical",
        "computer",
        "usually",
        "described",
        "socalled",
        "von",
        "neumann",
        "architecture",
        "one",
        "fundamental",
        "idea",
        "edvac",
        "design",
        "socalled",
        "storedprogram",
        "idea",
        "roughly",
        "speaking",
        "mean",
        "storage",
        "instruction",
        "data",
        "memory",
        "allowing",
        "manipulation",
        "program",
        "data",
        "good",
        "reason",
        "assuming",
        "von",
        "neumann",
        "knew",
        "main",
        "result",
        "turing",
        "paper",
        "davis",
        "thus",
        "one",
        "could",
        "argue",
        "storedprogram",
        "concept",
        "originates",
        "turing",
        "notion",
        "universal",
        "turing",
        "machine",
        "singling",
        "defining",
        "feature",
        "modern",
        "computer",
        "might",
        "claim",
        "turing",
        "father",
        "modern",
        "computer",
        "another",
        "related",
        "argument",
        "turing",
        "first",
        "captured",
        "idea",
        "generalpurpose",
        "machine",
        "notion",
        "universal",
        "machine",
        "sense",
        "also",
        "invented",
        "modern",
        "computer",
        "copeland",
        "proudfoot",
        "argument",
        "strengthened",
        "fact",
        "turing",
        "also",
        "involved",
        "construction",
        "important",
        "class",
        "computing",
        "device",
        "bombe",
        "used",
        "decrypting",
        "german",
        "enigma",
        "code",
        "later",
        "proposed",
        "design",
        "ace",
        "automatic",
        "computing",
        "engine",
        "explicitly",
        "identified",
        "kind",
        "physical",
        "realization",
        "universal",
        "machine",
        "turing",
        "year",
        "ago",
        "researching",
        "might",
        "described",
        "investigation",
        "theoretical",
        "possibility",
        "limitation",
        "digital",
        "computing",
        "machine",
        "machine",
        "ace",
        "may",
        "regarded",
        "practical",
        "version",
        "type",
        "machine",
        "turing",
        "note",
        "however",
        "turing",
        "already",
        "knew",
        "eniac",
        "edvac",
        "design",
        "proposed",
        "ace",
        "kind",
        "improvement",
        "design",
        "amongst",
        "others",
        "simpler",
        "hardware",
        "architecture",
        "claim",
        "turing",
        "inventor",
        "andor",
        "father",
        "computer",
        "scrutinized",
        "historian",
        "computing",
        "daylight",
        "haigh",
        "haigh",
        "mounierkuhn",
        "mostly",
        "wake",
        "turing",
        "centenary",
        "several",
        "perspective",
        "based",
        "research",
        "clear",
        "claim",
        "turing",
        "inventor",
        "modern",
        "computer",
        "give",
        "distorted",
        "biased",
        "picture",
        "development",
        "modern",
        "computer",
        "best",
        "one",
        "many",
        "made",
        "contribution",
        "one",
        "several",
        "historical",
        "development",
        "scientific",
        "political",
        "technological",
        "social",
        "industrial",
        "resulted",
        "ultimately",
        "concept",
        "modern",
        "computer",
        "indeed",
        "first",
        "computer",
        "result",
        "wide",
        "number",
        "innovation",
        "rooted",
        "work",
        "one",
        "several",
        "people",
        "diverse",
        "background",
        "viewpoint",
        "s",
        "universal",
        "turing",
        "machine",
        "start",
        "become",
        "accepted",
        "model",
        "relation",
        "actual",
        "computer",
        "used",
        "tool",
        "reflect",
        "limit",
        "potential",
        "generalpurpose",
        "computer",
        "engineer",
        "mathematician",
        "logician",
        "particularly",
        "respect",
        "machine",
        "design",
        "insight",
        "number",
        "operation",
        "required",
        "built",
        "generalpurpose",
        "machine",
        "inspired",
        "s",
        "reflection",
        "minimal",
        "machine",
        "architecture",
        "frankel",
        "partially",
        "constructed",
        "minac",
        "stated",
        "follows",
        "one",
        "remarkable",
        "result",
        "turing",
        "investigation",
        "able",
        "describe",
        "single",
        "computer",
        "able",
        "compute",
        "computable",
        "number",
        "called",
        "machine",
        "universal",
        "computer",
        "thus",
        "best",
        "possible",
        "computer",
        "mentioned",
        "surprising",
        "result",
        "show",
        "examining",
        "question",
        "problem",
        "principle",
        "solvable",
        "computing",
        "machine",
        "need",
        "consider",
        "infinite",
        "series",
        "computer",
        "greater",
        "greater",
        "complexity",
        "may",
        "think",
        "single",
        "machine",
        "even",
        "surprising",
        "theoretical",
        "possibility",
        "best",
        "possible",
        "computer",
        "fact",
        "need",
        "complex",
        "description",
        "given",
        "turing",
        "universal",
        "computer",
        "unique",
        "many",
        "computer",
        "quite",
        "modest",
        "complexity",
        "satisfy",
        "requirement",
        "universal",
        "computer",
        "frankel",
        "result",
        "series",
        "experimental",
        "machine",
        "minac",
        "tx",
        "lincoln",
        "lab",
        "zero",
        "machine",
        "van",
        "der",
        "poel",
        "turn",
        "became",
        "predecessor",
        "number",
        "commercial",
        "machine",
        "worth",
        "pointing",
        "also",
        "turing",
        "ace",
        "machine",
        "design",
        "fit",
        "philosophy",
        "also",
        "commercialized",
        "bendix",
        "g",
        "machine",
        "de",
        "mol",
        "bullynck",
        "daylight",
        "course",
        "minimizing",
        "machine",
        "instruction",
        "coding",
        "programming",
        "became",
        "much",
        "complicated",
        "task",
        "put",
        "turing",
        "word",
        "clearly",
        "realized",
        "tradeoff",
        "code",
        "hardwired",
        "instruction",
        "designing",
        "ace",
        "w",
        "e",
        "often",
        "simplified",
        "circuit",
        "expense",
        "code",
        "turing",
        "indeed",
        "one",
        "see",
        "early",
        "minimal",
        "design",
        "much",
        "effort",
        "go",
        "developing",
        "efficient",
        "coding",
        "strategy",
        "one",
        "also",
        "situate",
        "one",
        "historical",
        "root",
        "making",
        "connection",
        "universal",
        "turing",
        "machine",
        "important",
        "principle",
        "interchangeability",
        "hardware",
        "program",
        "today",
        "universal",
        "turing",
        "machine",
        "many",
        "still",
        "considered",
        "main",
        "theoretical",
        "model",
        "modern",
        "computer",
        "especially",
        "relation",
        "socalled",
        "von",
        "neumann",
        "architecture",
        "course",
        "model",
        "introduced",
        "architecture",
        "bulk",
        "synchronous",
        "parallel",
        "model",
        "parallel",
        "machine",
        "persistent",
        "turing",
        "machine",
        "modeling",
        "interactive",
        "problem",
        "theory",
        "programming",
        "idea",
        "generalpurpose",
        "machine",
        "principle",
        "modeled",
        "universal",
        "turing",
        "machine",
        "also",
        "became",
        "important",
        "principle",
        "context",
        "automatic",
        "programming",
        "s",
        "daylight",
        "machine",
        "design",
        "context",
        "minimizing",
        "machine",
        "instruction",
        "important",
        "consequence",
        "viewpoint",
        "programming",
        "context",
        "idea",
        "one",
        "built",
        "machine",
        "able",
        "mimic",
        "behavior",
        "machine",
        "ultimately",
        "interchangeability",
        "machine",
        "hardware",
        "language",
        "implementation",
        "introduced",
        "several",
        "form",
        "s",
        "people",
        "like",
        "john",
        "w",
        "carr",
        "iii",
        "saul",
        "gornwho",
        "also",
        "actively",
        "involved",
        "shaping",
        "association",
        "computing",
        "machinery",
        "acm",
        "as",
        "unifying",
        "theoretical",
        "idea",
        "automatic",
        "programming",
        "indeed",
        "automatic",
        "translation",
        "higherorder",
        "lowerlevel",
        "ultimately",
        "machine",
        "code",
        "thus",
        "also",
        "context",
        "programming",
        "universal",
        "turing",
        "machine",
        "start",
        "take",
        "foundational",
        "role",
        "s",
        "daylight",
        "whereas",
        "turing",
        "machine",
        "fundamental",
        "theoretical",
        "model",
        "delimiting",
        "possible",
        "general",
        "level",
        "real",
        "impact",
        "syntax",
        "semantics",
        "programming",
        "language",
        "context",
        "rather",
        "\u03bbcalculus",
        "post",
        "production",
        "system",
        "effect",
        "though",
        "also",
        "one",
        "careful",
        "overstating",
        "influence",
        "formal",
        "model",
        "programming",
        "practice",
        "fact",
        "turing",
        "machine",
        "often",
        "regarded",
        "machine",
        "model",
        "rather",
        "model",
        "programming",
        "turing",
        "machine",
        "conceptually",
        "different",
        "automatic",
        "computer",
        "general",
        "use",
        "poor",
        "control",
        "structure",
        "course",
        "theory",
        "computability",
        "deal",
        "question",
        "concerned",
        "particular",
        "way",
        "computation",
        "represented",
        "sufficient",
        "computable",
        "function",
        "represented",
        "somehow",
        "symbolic",
        "expression",
        "eg",
        "number",
        "function",
        "computable",
        "term",
        "given",
        "function",
        "somehow",
        "represented",
        "expression",
        "computable",
        "term",
        "expression",
        "representing",
        "original",
        "function",
        "however",
        "practical",
        "theory",
        "computation",
        "must",
        "applicable",
        "particular",
        "algorithm",
        "mccarthy",
        "thus",
        "one",
        "see",
        "role",
        "turing",
        "machine",
        "computer",
        "science",
        "situated",
        "rather",
        "theoretical",
        "level",
        "universal",
        "machine",
        "today",
        "many",
        "still",
        "considered",
        "model",
        "modern",
        "computer",
        "ability",
        "mimic",
        "machine",
        "manipulation",
        "programsasdata",
        "one",
        "basic",
        "principle",
        "modern",
        "computing",
        "moreover",
        "robustness",
        "naturalness",
        "model",
        "computability",
        "made",
        "main",
        "model",
        "challenge",
        "one",
        "attacking",
        "version",
        "socalled",
        "physical",
        "churchturing",
        "thesis"
    ]
}