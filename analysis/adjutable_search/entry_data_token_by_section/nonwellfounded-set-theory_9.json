{
    "main_text": "Using AFA || Bisimulation\n3.1 Bisimulation\n\nThe topic of bisimulation is one of the earliest goals in a\ntreatment of non-wellfounded sets.\n\n\n Let (G,\u2192) be a graph.\n A relation R on\nG is a bisimulation if the following holds:\nwhenever x\u2009R\u2009y, \n\n\nIf x \u2192 x\u2032, then there is some \ny \u2192 y\u2032\nsuch that  x\u2032\u2009R\u2009y\u2032.\n\n\n If  y \u2192 y\u2032, \n then there is some x \u2192 x\u2032\n such that  x\u2032\u2009R\u2009y\u2032.\n\n\n\nThese are sometimes called by the suggestive names\nzig and zag.\n\n\nBisimulation between graphs.\nBefore giving examples, we should clarify some usage.\nAt a few points, we\u2019ll speak of bisimulation between two graphs\nG and H, rather than on a single graph.\n   This can be defined in the same general way.    Note also that one can\n   take the disjoint union G + H\n    of the graphs G and H, and then \n   a bisimulation between G and H would be a \nbisimulation on G + H.\n\n\nReturning to bisimulation on a graph.\n For an example, let\u2019s look at the following graph G:\n\n\n\n\n\nAll of the  3-points have no children. \n(Point 3d is not reached from any other point, but\nthe arrows into a node are of no interest.)\n   So every relation which\nonly relates 3-points is a bisimulation  on G.\nConcretely, \n\n\n{(3a, 3b), (3c, 3a), (3d, 3d)}\n\n\nis easily seen to be a bisimulation.\n\n\nFor that matter, the empty relation is also a bisimulation on G.\n\n\nAnother bisimulation is\n\n{(2a, 2b), \n(2b, 2c), (2c, 2a),\n (3a, 3b), \n (3b, 3c), (3c, 3a)}. \n\n\nLet\u2019s call this relation R.\nIt would take a lot of checking to actually verify\nthat R is a bisimulation.\nHere is just two items of it:  We see that  2b\u2009R\u20092c.\nNow  2c \u2192 2b.  \nThus we need some node\nx so that x\u2009R\u20092b\n and  2b \u2192 x.\nFor this, we take  2a.     For our second point \nof verification, again note that \n 2b\u2009R\u2009 2c .   Since \n 2b \u2192  3b, we need some\n node x so that  2c \u2192 x and  3b\n \u2009R\u2009\n x.\n We take \n x = 3c for this.\n\n\n The largest bisimulation on our graph G is the \n relation that relates\n1\n  to itself, all 2-points to\n all 2-points, and all 3-points\n  to all 3-points.\n Note that this is an equivalence relation:\n reflexive, symmetric, and transitive.\n This is not an accident.\n\n\nProposition  For any graph H, there is a largest\n bisimulation on   H.    This relation is\n an equivalence relation denoted  \u2261b, \n  and it is  characterized by\n\nx  \u2261b\ny \niff  there is a bisimulation on\n H \n  relating x to y.\n\n\n This relation   \u2261b  is\ncalled  bisimilarity.\n\n\nWe can always form the quotient graph \n using the largest bisimulation.\nHere is how this works, using G\n from above\nas an example.    In  G/\u2261b,\nwe would have three nodes, corresponding to the\nthree  equivalence classes under the largest bisimulation;\n let\u2019s call these  classes \n 1, 2 and 3.   We put an arrow between\n two of these  classes if some (every) element of the first has an\n arrow to some element of the second.    In this way, we \n construct the quotient.  \n Here is a picture of  G\n again, along with its \n quotient  G/\u2261b\nunder the largest bisimulation:\n\n \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n \n\n\nThe map from G\n to   G/\u2261b\n takes the 2-points to  the point 2,\nand the 3-points to the point 3.\n\n\nUp until now, we have said what bisimulation is, but we did not describe \nits relation to anything else.    To rectify matters, here is the main result.\n\n\n Theorem\nAssume AFA.   Let G be a graph, let x and y \nbe nodes of G, and let d be the decoration of G.\nThen the following are equivalent:\n\n\n d(x) = d(y).\n\n There is a bisimulation relating x and y.\n\n\n\n\nWe are not going to prove this theorem in full here, but instead here\nare two hints.   To prove that (1) implies (2), check that \nthe kernel relation of d, \n\n\n{(u, v) : d(u) = d(v)}\n\n\nis a bisimulation on G.\n\n\nIn the other direction, the idea is to turn a bisimulation into a graph\nitself, and then extract two decorations of it; by the uniqueness part\nof AFA these must coincide.\nHere is how this is done in a concrete example.  \nWe saw above that \n\n\nR \u2009=\u2009 \n {(2a, 2b), (2b, 2c), (2c, 2a),\n(3a, 3b), (3b, 3c), \n(3c, 3a)}. \n\n\nis a bisimulation.   \nWe make it into a graph by taking the product relation.\nThis gives the following graph which we call H:\n\n\n\n\n\nLet d be a decoration (no, the decoration)\n of G.\nWe get two decorations of H,  k and l defined by\n\n\nk(u, v) = d(u), \nand  l(u, v) = d(v).\n \n\n (It is good to check that these really are decorations of H.)\n But H can have only one decoration.    So k = b.\n And then, corresponding to the fact that  \n  2a\u2009R\u20092c,\n  for example, \n we have\n\n\nd(2a) = k(2a,2b) \n=  l(2a,2b)\n=\n  d(2b).\n \n\n This concludes our sketch.  For more details, see Aczel (1988).\n\n",
    "section_title": "3.1 Bisimulation",
    "entry_title": "Non-wellfounded Set Theory",
    "hierarchy_title": "Non-wellfounded Set Theory || Using AFA || Bisimulation",
    "tokenized_text": [
        "using",
        "afa",
        "bisimulation",
        "bisimulation",
        "topic",
        "bisimulation",
        "one",
        "earliest",
        "goal",
        "treatment",
        "nonwellfounded",
        "set",
        "let",
        "g",
        "graph",
        "relation",
        "r",
        "g",
        "bisimulation",
        "following",
        "hold",
        "whenever",
        "x",
        "r",
        "x",
        "x",
        "y",
        "x",
        "r",
        "y",
        "y",
        "x",
        "x",
        "x",
        "r",
        "y",
        "sometimes",
        "called",
        "suggestive",
        "name",
        "zig",
        "zag",
        "bisimulation",
        "graph",
        "giving",
        "example",
        "clarify",
        "usage",
        "point",
        "speak",
        "bisimulation",
        "two",
        "graph",
        "g",
        "h",
        "rather",
        "single",
        "graph",
        "defined",
        "general",
        "way",
        "note",
        "also",
        "one",
        "take",
        "disjoint",
        "union",
        "g",
        "h",
        "graph",
        "g",
        "h",
        "bisimulation",
        "g",
        "h",
        "would",
        "bisimulation",
        "g",
        "h",
        "returning",
        "bisimulation",
        "graph",
        "example",
        "let",
        "look",
        "following",
        "graph",
        "g",
        "points",
        "child",
        "point",
        "d",
        "reached",
        "point",
        "arrow",
        "node",
        "interest",
        "every",
        "relation",
        "relates",
        "points",
        "bisimulation",
        "g",
        "concretely",
        "a",
        "b",
        "c",
        "a",
        "d",
        "d",
        "easily",
        "seen",
        "bisimulation",
        "matter",
        "empty",
        "relation",
        "also",
        "bisimulation",
        "g",
        "another",
        "bisimulation",
        "a",
        "b",
        "b",
        "c",
        "c",
        "a",
        "a",
        "b",
        "b",
        "c",
        "c",
        "a",
        "let",
        "call",
        "relation",
        "r",
        "would",
        "take",
        "lot",
        "checking",
        "actually",
        "verify",
        "r",
        "bisimulation",
        "two",
        "item",
        "see",
        "b",
        "r",
        "c",
        "c",
        "b",
        "thus",
        "need",
        "node",
        "x",
        "x",
        "r",
        "b",
        "b",
        "x",
        "take",
        "a",
        "second",
        "point",
        "verification",
        "note",
        "b",
        "r",
        "c",
        "since",
        "b",
        "b",
        "need",
        "node",
        "x",
        "c",
        "x",
        "b",
        "r",
        "x",
        "take",
        "x",
        "c",
        "largest",
        "bisimulation",
        "graph",
        "g",
        "relation",
        "relates",
        "points",
        "points",
        "points",
        "points",
        "note",
        "equivalence",
        "relation",
        "reflexive",
        "symmetric",
        "transitive",
        "accident",
        "proposition",
        "graph",
        "h",
        "largest",
        "bisimulation",
        "h",
        "relation",
        "equivalence",
        "relation",
        "denoted",
        "b",
        "characterized",
        "x",
        "b",
        "iff",
        "bisimulation",
        "h",
        "relating",
        "x",
        "y",
        "relation",
        "b",
        "called",
        "bisimilarity",
        "always",
        "form",
        "quotient",
        "graph",
        "using",
        "largest",
        "bisimulation",
        "work",
        "using",
        "g",
        "example",
        "gb",
        "would",
        "three",
        "node",
        "corresponding",
        "three",
        "equivalence",
        "class",
        "largest",
        "bisimulation",
        "let",
        "call",
        "class",
        "put",
        "arrow",
        "two",
        "class",
        "every",
        "element",
        "first",
        "arrow",
        "element",
        "second",
        "way",
        "construct",
        "quotient",
        "picture",
        "g",
        "along",
        "quotient",
        "gb",
        "largest",
        "bisimulation",
        "map",
        "g",
        "gb",
        "take",
        "points",
        "point",
        "points",
        "point",
        "said",
        "bisimulation",
        "describe",
        "relation",
        "anything",
        "else",
        "rectify",
        "matter",
        "main",
        "result",
        "theorem",
        "assume",
        "afa",
        "let",
        "g",
        "graph",
        "let",
        "x",
        "node",
        "g",
        "let",
        "decoration",
        "g",
        "following",
        "equivalent",
        "x",
        "bisimulation",
        "relating",
        "x",
        "y",
        "going",
        "prove",
        "theorem",
        "full",
        "instead",
        "two",
        "hint",
        "prove",
        "implies",
        "check",
        "kernel",
        "relation",
        "u",
        "v",
        "u",
        "v",
        "bisimulation",
        "g",
        "direction",
        "idea",
        "turn",
        "bisimulation",
        "graph",
        "extract",
        "two",
        "decoration",
        "uniqueness",
        "part",
        "afa",
        "must",
        "coincide",
        "done",
        "concrete",
        "example",
        "saw",
        "r",
        "a",
        "b",
        "b",
        "c",
        "c",
        "a",
        "a",
        "b",
        "b",
        "c",
        "c",
        "a",
        "bisimulation",
        "make",
        "graph",
        "taking",
        "product",
        "relation",
        "give",
        "following",
        "graph",
        "call",
        "h",
        "let",
        "decoration",
        "decoration",
        "g",
        "get",
        "two",
        "decoration",
        "h",
        "k",
        "l",
        "defined",
        "k",
        "u",
        "v",
        "u",
        "l",
        "u",
        "v",
        "v",
        "good",
        "check",
        "really",
        "decoration",
        "h",
        "h",
        "one",
        "decoration",
        "k",
        "b",
        "corresponding",
        "fact",
        "a",
        "r",
        "c",
        "example",
        "a",
        "k",
        "ab",
        "l",
        "ab",
        "b",
        "concludes",
        "sketch",
        "detail",
        "see",
        "aczel"
    ]
}