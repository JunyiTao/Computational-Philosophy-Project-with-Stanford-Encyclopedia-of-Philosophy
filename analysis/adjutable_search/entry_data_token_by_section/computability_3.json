{
    "main_text": "Turing Machines || The Halting Problem\n2.2 The Halting Problem\n\n\nBecause they were designed to embody all possible computations,\nTuring machines have an inescapable flaw: some Turing machines on\ncertain inputs never halt. Some Turing machines do not halt for silly\nreasons, for example, we can mis-program a Turing machine so that it\ngets into a tight loop, for example, in state 17 looking at a 1 it\nmight go to state 17, write a 1 and displace its head by 0. Slightly\nless silly, we can reach a blank symbol, having only blank symbols to\nthe right, and yet keep staying in the same state, moving one step to\nthe right, and looking for a \u201c1\u201d. Both of those cases of non-halting\ncould be easily detected and repaired by a decent compiler. However,\nconsider the Turing machine \\(M_{F}\\), which on\ninput \u201c0\u201d, systematically searches for the first counter-example to\nFermat\u2019s last theorem, and upon finding it outputs the counter-example\nand halts. Until Andrew Wiles relatively recently proved Fermat\u2019s Last\nTheorem, all the mathematicians in the world, working for over three\ncenturies, were unable to decide whether or not\n\\(M_{F}\\) on input \u201c0\u201d eventually halts. Now we\nknow that it never does.\n",
    "section_title": "2.2 The Halting Problem",
    "entry_title": "Computability and Complexity",
    "hierarchy_title": "Computability and Complexity || Turing Machines || The Halting Problem",
    "tokenized_text": [
        "turing",
        "machine",
        "halting",
        "problem",
        "halting",
        "problem",
        "designed",
        "embody",
        "possible",
        "computation",
        "turing",
        "machine",
        "inescapable",
        "flaw",
        "turing",
        "machine",
        "certain",
        "input",
        "never",
        "halt",
        "turing",
        "machine",
        "halt",
        "silly",
        "reason",
        "example",
        "misprogram",
        "turing",
        "machine",
        "get",
        "tight",
        "loop",
        "example",
        "state",
        "looking",
        "might",
        "go",
        "state",
        "write",
        "displace",
        "head",
        "slightly",
        "le",
        "silly",
        "reach",
        "blank",
        "symbol",
        "blank",
        "symbol",
        "right",
        "yet",
        "keep",
        "staying",
        "state",
        "moving",
        "one",
        "step",
        "right",
        "looking",
        "case",
        "nonhalting",
        "could",
        "easily",
        "detected",
        "repaired",
        "decent",
        "compiler",
        "however",
        "consider",
        "turing",
        "machine",
        "m_",
        "f",
        "input",
        "systematically",
        "search",
        "first",
        "counterexample",
        "fermat",
        "last",
        "theorem",
        "upon",
        "finding",
        "output",
        "counterexample",
        "halt",
        "andrew",
        "wile",
        "relatively",
        "recently",
        "proved",
        "fermat",
        "last",
        "theorem",
        "mathematician",
        "world",
        "working",
        "three",
        "century",
        "unable",
        "decide",
        "whether",
        "m_",
        "f",
        "input",
        "eventually",
        "halt",
        "know",
        "never"
    ]
}