{
    "main_text": "Correctness || Mathematical Correctness\n7.1 Mathematical Correctness\n\nFormal verification methods grant an a-priori analysis of the\nbehaviors of programs, without requiring the observation of any of\ntheir implementation or considering their execution. In particular,\ntheorem proving allows one to deduce any potential behavior\nof the program under consideration and its behavioral properties from\na suitable axiomatic representation. In the case of model checking,\none knows in advance the behavioural properties displayed by the\nexecution of a program by performing an algorithmic search of the\nformulas valid in a given set-theoretic model. These considerations\nfamously led Hoare (1969) to conclude that program development is an\n\u201cexact science\u201d, which should be characterized by\nmathematical proofs of correctness, epistemologically on a par with\nstandard proofs in mathematical practice.\n\nDe Millo et al. (1979) question Hoare\u2019s thesis: correct\nmathematical proofs are usually elegant and\ngraspable, implying that any (expert) reader can\n\u201csee\u201d that the conclusion follows from the premises (for\nthe notion of elegance in software see also Hill (2018)). What are\noften called Cartesian proofs (Hacking 2014) do not have a\ncounterpart in correctness proofs, typically long and cumbersome,\ndifficult to grasp and not explaining why the conclusion necessarily\nfollows from the premises. Yet, many proofs in mathematics are long\nand complex, but they are in principle surveyable, thanks to\nthe use of lemmas, abstractions and the analytic construction of new\nconcepts leading step by step to the statement to be proved.\nCorrectness proofs, on the contrary, do not involve the creation of\nnew concepts, nor the modularity one typically finds in mathematical\nproofs (Turner, 2018). And yet, proofs that are not surveyable cannot\nbe considered mathematical proofs (Wittgenstein 1956).\n\nA second theoretical difficulty concerning proofs of correctness for\ncomputer programs concerns their complexity and that of the programs\nto be verified. Already Hoare (1981) admitted that while verification\nof correctness is always possible in principle, in practice it is\nhardly achievable. Except for trivial cases, contemporary software is\nmodularly encoded, is required to satisfy a large set of\nspecifications, and it is developed so as to interact with other\nprograms, systems, users. Embedded and reactive software are cases in\npoint. In order to verify such complex software, correctness proofs\nare carried out automatically. Hence, on the one hand, the correctness\nproblem shifts from the program under examination to the program\nperforming the verification, e.g. a theorem prover; on the other hand,\nproofs carried out by a physical process can go wrong, due to\nmechanical mistakes of the machine. Against this infinite regress\nargument, Arkoudas and Bringsjord (2007) argue that one can make use\nof a proof checker which, by being a relatively small program, is\nusually easier to verify.\n\nMost recently, formal methods for checking correctness based on a\ncombination of logical and statistical analysis have given new\nstimulus to this research area: the ability of Separation Logics\n(Reynolds, 2002) to offer a representation of the logical behavior of\nthe physical memory of computational systems, and the possibility of\nconsidering probabilistic distributions of inputs as statistical\nsource of errors, have allowed formal correctness check of large\ninteractive systems like the Facebook platform (see also Pym et\nal. 2019).\n",
    "section_title": "7.1 Mathematical Correctness",
    "entry_title": "The Philosophy of Computer Science",
    "hierarchy_title": "The Philosophy of Computer Science || Correctness || Mathematical Correctness",
    "tokenized_text": [
        "correctness",
        "mathematical",
        "correctness",
        "mathematical",
        "correctness",
        "formal",
        "verification",
        "method",
        "grant",
        "apriori",
        "analysis",
        "behavior",
        "program",
        "without",
        "requiring",
        "observation",
        "implementation",
        "considering",
        "execution",
        "particular",
        "theorem",
        "proving",
        "allows",
        "one",
        "deduce",
        "potential",
        "behavior",
        "program",
        "consideration",
        "behavioral",
        "property",
        "suitable",
        "axiomatic",
        "representation",
        "case",
        "model",
        "checking",
        "one",
        "know",
        "advance",
        "behavioural",
        "property",
        "displayed",
        "execution",
        "program",
        "performing",
        "algorithmic",
        "search",
        "formula",
        "valid",
        "given",
        "settheoretic",
        "model",
        "consideration",
        "famously",
        "led",
        "hoare",
        "conclude",
        "program",
        "development",
        "exact",
        "science",
        "characterized",
        "mathematical",
        "proof",
        "correctness",
        "epistemologically",
        "par",
        "standard",
        "proof",
        "mathematical",
        "practice",
        "de",
        "millo",
        "et",
        "al",
        "question",
        "hoare",
        "thesis",
        "correct",
        "mathematical",
        "proof",
        "usually",
        "elegant",
        "graspable",
        "implying",
        "expert",
        "reader",
        "see",
        "conclusion",
        "follows",
        "premise",
        "notion",
        "elegance",
        "software",
        "see",
        "also",
        "hill",
        "often",
        "called",
        "cartesian",
        "proof",
        "hacking",
        "counterpart",
        "correctness",
        "proof",
        "typically",
        "long",
        "cumbersome",
        "difficult",
        "grasp",
        "explaining",
        "conclusion",
        "necessarily",
        "follows",
        "premise",
        "yet",
        "many",
        "proof",
        "mathematics",
        "long",
        "complex",
        "principle",
        "surveyable",
        "thanks",
        "use",
        "lemma",
        "abstraction",
        "analytic",
        "construction",
        "new",
        "concept",
        "leading",
        "step",
        "step",
        "statement",
        "proved",
        "correctness",
        "proof",
        "contrary",
        "involve",
        "creation",
        "new",
        "concept",
        "modularity",
        "one",
        "typically",
        "find",
        "mathematical",
        "proof",
        "turner",
        "yet",
        "proof",
        "surveyable",
        "considered",
        "mathematical",
        "proof",
        "wittgenstein",
        "second",
        "theoretical",
        "difficulty",
        "concerning",
        "proof",
        "correctness",
        "computer",
        "program",
        "concern",
        "complexity",
        "program",
        "verified",
        "already",
        "hoare",
        "admitted",
        "verification",
        "correctness",
        "always",
        "possible",
        "principle",
        "practice",
        "hardly",
        "achievable",
        "except",
        "trivial",
        "case",
        "contemporary",
        "software",
        "modularly",
        "encoded",
        "required",
        "satisfy",
        "large",
        "set",
        "specification",
        "developed",
        "interact",
        "program",
        "system",
        "user",
        "embedded",
        "reactive",
        "software",
        "case",
        "point",
        "order",
        "verify",
        "complex",
        "software",
        "correctness",
        "proof",
        "carried",
        "automatically",
        "hence",
        "one",
        "hand",
        "correctness",
        "problem",
        "shift",
        "program",
        "examination",
        "program",
        "performing",
        "verification",
        "eg",
        "theorem",
        "prover",
        "hand",
        "proof",
        "carried",
        "physical",
        "process",
        "go",
        "wrong",
        "due",
        "mechanical",
        "mistake",
        "machine",
        "infinite",
        "regress",
        "argument",
        "arkoudas",
        "bringsjord",
        "argue",
        "one",
        "make",
        "use",
        "proof",
        "checker",
        "relatively",
        "small",
        "program",
        "usually",
        "easier",
        "verify",
        "recently",
        "formal",
        "method",
        "checking",
        "correctness",
        "based",
        "combination",
        "logical",
        "statistical",
        "analysis",
        "given",
        "new",
        "stimulus",
        "research",
        "area",
        "ability",
        "separation",
        "logic",
        "reynolds",
        "offer",
        "representation",
        "logical",
        "behavior",
        "physical",
        "memory",
        "computational",
        "system",
        "possibility",
        "considering",
        "probabilistic",
        "distribution",
        "input",
        "statistical",
        "source",
        "error",
        "allowed",
        "formal",
        "correctness",
        "check",
        "large",
        "interactive",
        "system",
        "like",
        "facebook",
        "platform",
        "see",
        "also",
        "pym",
        "et",
        "al"
    ]
}