{
    "main_text": "Correctness || Miscomputations\n7.3 Miscomputations\n\nFrom what has been said so far, it follows that correctness of\nimplemented programs does not automatically establish the\nwell-functioning of a computational system. Turing (1950) already\ndistinguished between errors of functioning and errors of\nconclusion. The former are caused by a faulty implementation\nunable to execute the instructions of some high-level language\nprogram; errors of conclusion characterize correct abstract machines\nthat nonetheless fail to carry out the tasks they were supposed to\naccomplish. This may happen in those cases in which a program\ninstantiates correctly some specifications which do not properly\nexpress the users\u2019 requirements on such a program. In both\ncases, machines implementing correct programs can still be said to\nmiscompute.\n\nTuring\u2019s distinction between errors of functioning and errors of\nconclusion has been expanded into a complete taxonomy of\nmiscomputations (Fresco and Primiero 2013). The classification is\nestablished on the basis of the different LoAs defining computational\nsystems. Errors can be:\n\nconceptual: they violate validity conditions requiring\nconsistency for specifications expressed in propositional conjunctive\nnormal form;\nmaterial: they violate the correctness requirements of\nprograms with respect to the set of their specifications;\nperformable: they arise when physical constraints are\nbreached by some faulty implementing hardware.\n\n\nPerformable errors clearly emerge only at the execution level, and\nthey correspond with Turing\u2019s (1950) error of functioning, also\ncalled operational malfunctions. Conceptual and material\nerrors may arise at any level of abstraction from the intention level\ndown to the physical implementation level. Conceptual errors engender\nmistakes, while material errors induce failures. For\ninstance, a mistake at the intention level consists of an inconsistent\nset of requirements, while at the physical implementation level it may\ncorrespond to an invalid hardware design (such as in the choice of the\nlogic gates for the truth-functional connectives). Failures occurring\nat the specification level may be due to a design that is deemed to be\nincomplete with respect to the set of desired functional requirements,\nwhile a failure at the algorithm level occurs in those frequent cases\nin which the algorithm is found not to fulfill the specifications.\nBeyond mistakes, failures, and operational malfunctions,\nslips are a source of miscomputations at the high-level\nprogramming language instructions level: they may be conceptual or\nmaterial errors due to, respectively, a syntactic or a semantic flaw\nin the program. Conceptual slips appear in all those cases in which\nthe syntactical rules of high-level languages are violated; material\nslips involve the violation of semantic rules of programming\nlanguages, such as when a variable is used but not initialized.\n\nA further distinction has to be made between dysfunctions and\nmisfunctions for software-based computational systems\n(Floridi, Fresco and Primiero 2015). Software can only misfunction but\ncannot ever dysfunction. A software token can dysfunction in case its\nphysical implementation fails to satisfy intentions or specifications.\nDysfunctions only apply to single tokens since a token dysfunctions in\nthat it does not behave as the other tokens of the same type do with\nrespect to the implemented functions. For this reason, dysfunctions do\nnot apply to the intention level and the specification level. On the\ncontrary, both software types and tokens can misfunction, since\nmisfunctions do not depend on comparisons with tokens of the same type\nbeing able to perform some implemented function or not. Misfunction of\ntokens usually depends on the dysfunction of some other component,\nwhile misfunction of types is often due to poor design. A software\ntoken cannot dysfunction, because all tokens of a given type implement\nfunctions specified uniformly at the intention and specification\nlevels. Those functions are implemented at the algorithm\nimplementation level before being performed at the execution level; in\ncase of correct implementation, all tokens will behave correctly at\nthe execution level (provided that no operational malfunction occurs).\nFor the very same reason, software tokens cannot misfunction, since\nthey are implementations of the same intentions and specifications.\nOnly software types can misfunction in case of poor design;\nmisfunctioning software types are able to correctly perform their\nfunctions but may also produce some undesired side-effect. For the\napplication of the notion of malfunctioning to the problem of malware\nclassification, see (Primiero et al. 2019).\n",
    "section_title": "7.3 Miscomputations",
    "entry_title": "The Philosophy of Computer Science",
    "hierarchy_title": "The Philosophy of Computer Science || Correctness || Miscomputations",
    "tokenized_text": [
        "correctness",
        "miscomputations",
        "miscomputations",
        "said",
        "far",
        "follows",
        "correctness",
        "implemented",
        "program",
        "automatically",
        "establish",
        "wellfunctioning",
        "computational",
        "system",
        "turing",
        "already",
        "distinguished",
        "error",
        "functioning",
        "error",
        "conclusion",
        "former",
        "caused",
        "faulty",
        "implementation",
        "unable",
        "execute",
        "instruction",
        "highlevel",
        "language",
        "program",
        "error",
        "conclusion",
        "characterize",
        "correct",
        "abstract",
        "machine",
        "nonetheless",
        "fail",
        "carry",
        "task",
        "supposed",
        "accomplish",
        "may",
        "happen",
        "case",
        "program",
        "instantiates",
        "correctly",
        "specification",
        "properly",
        "express",
        "user",
        "requirement",
        "program",
        "case",
        "machine",
        "implementing",
        "correct",
        "program",
        "still",
        "said",
        "miscompute",
        "turing",
        "distinction",
        "error",
        "functioning",
        "error",
        "conclusion",
        "expanded",
        "complete",
        "taxonomy",
        "miscomputations",
        "fresco",
        "primiero",
        "classification",
        "established",
        "basis",
        "different",
        "loas",
        "defining",
        "computational",
        "system",
        "error",
        "conceptual",
        "violate",
        "validity",
        "condition",
        "requiring",
        "consistency",
        "specification",
        "expressed",
        "propositional",
        "conjunctive",
        "normal",
        "form",
        "material",
        "violate",
        "correctness",
        "requirement",
        "program",
        "respect",
        "set",
        "specification",
        "performable",
        "arise",
        "physical",
        "constraint",
        "breached",
        "faulty",
        "implementing",
        "hardware",
        "performable",
        "error",
        "clearly",
        "emerge",
        "execution",
        "level",
        "correspond",
        "turing",
        "error",
        "functioning",
        "also",
        "called",
        "operational",
        "malfunction",
        "conceptual",
        "material",
        "error",
        "may",
        "arise",
        "level",
        "abstraction",
        "intention",
        "level",
        "physical",
        "implementation",
        "level",
        "conceptual",
        "error",
        "engender",
        "mistake",
        "material",
        "error",
        "induce",
        "failure",
        "instance",
        "mistake",
        "intention",
        "level",
        "consists",
        "inconsistent",
        "set",
        "requirement",
        "physical",
        "implementation",
        "level",
        "may",
        "correspond",
        "invalid",
        "hardware",
        "design",
        "choice",
        "logic",
        "gate",
        "truthfunctional",
        "connective",
        "failure",
        "occurring",
        "specification",
        "level",
        "may",
        "due",
        "design",
        "deemed",
        "incomplete",
        "respect",
        "set",
        "desired",
        "functional",
        "requirement",
        "failure",
        "algorithm",
        "level",
        "occurs",
        "frequent",
        "case",
        "algorithm",
        "found",
        "fulfill",
        "specification",
        "beyond",
        "mistake",
        "failure",
        "operational",
        "malfunction",
        "slip",
        "source",
        "miscomputations",
        "highlevel",
        "programming",
        "language",
        "instruction",
        "level",
        "may",
        "conceptual",
        "material",
        "error",
        "due",
        "respectively",
        "syntactic",
        "semantic",
        "flaw",
        "program",
        "conceptual",
        "slip",
        "appear",
        "case",
        "syntactical",
        "rule",
        "highlevel",
        "language",
        "violated",
        "material",
        "slip",
        "involve",
        "violation",
        "semantic",
        "rule",
        "programming",
        "language",
        "variable",
        "used",
        "initialized",
        "distinction",
        "made",
        "dysfunction",
        "misfunctions",
        "softwarebased",
        "computational",
        "system",
        "floridi",
        "fresco",
        "primiero",
        "software",
        "misfunction",
        "ever",
        "dysfunction",
        "software",
        "token",
        "dysfunction",
        "case",
        "physical",
        "implementation",
        "fails",
        "satisfy",
        "intention",
        "specification",
        "dysfunction",
        "apply",
        "single",
        "token",
        "since",
        "token",
        "dysfunction",
        "behave",
        "token",
        "type",
        "respect",
        "implemented",
        "function",
        "reason",
        "dysfunction",
        "apply",
        "intention",
        "level",
        "specification",
        "level",
        "contrary",
        "software",
        "type",
        "token",
        "misfunction",
        "since",
        "misfunctions",
        "depend",
        "comparison",
        "token",
        "type",
        "able",
        "perform",
        "implemented",
        "function",
        "misfunction",
        "token",
        "usually",
        "depends",
        "dysfunction",
        "component",
        "misfunction",
        "type",
        "often",
        "due",
        "poor",
        "design",
        "software",
        "token",
        "dysfunction",
        "token",
        "given",
        "type",
        "implement",
        "function",
        "specified",
        "uniformly",
        "intention",
        "specification",
        "level",
        "function",
        "implemented",
        "algorithm",
        "implementation",
        "level",
        "performed",
        "execution",
        "level",
        "case",
        "correct",
        "implementation",
        "token",
        "behave",
        "correctly",
        "execution",
        "level",
        "provided",
        "operational",
        "malfunction",
        "occurs",
        "reason",
        "software",
        "token",
        "misfunction",
        "since",
        "implementation",
        "intention",
        "specification",
        "software",
        "type",
        "misfunction",
        "case",
        "poor",
        "design",
        "misfunctioning",
        "software",
        "type",
        "able",
        "correctly",
        "perform",
        "function",
        "may",
        "also",
        "produce",
        "undesired",
        "sideeffect",
        "application",
        "notion",
        "malfunctioning",
        "problem",
        "malware",
        "classification",
        "see",
        "primiero",
        "et",
        "al"
    ]
}