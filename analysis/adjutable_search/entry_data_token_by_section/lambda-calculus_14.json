{
    "main_text": "Semantics of \\(\\lambda\\)-calculus\n7. Semantics of \\(\\lambda\\)-calculus\n\nAs we\u2019ve said at the outset, the \\(\\lambda\\)-calculus is, at\nheart, about functions and their applications. But it is surprisingly\ndifficult to cash this idea out in semantic terms. A natural approach\nwould be to try to associate with every \\(\\lambda\\)-term \\(M\\) a\nfunction \\(f_M\\) over some domain \\(D\\) and to interpret application\nterms \\((MN)\\) using function application as \\(f_M(f_N).\\) But this\nidea quickly runs into difficulties. To begin with, it\u2019s easy to\nsee that, in this context, we can\u2019t use the standard\nset-theoretic concept of functions-as-sets (see section\n 1.2\n of this entry). According to this concept, remember, a function \\(f\\)\nis a set of argument-value pairs, where every argument gets assigned a\nunique value. The problem arises in the context of\nself-applications. Remember from section\n 2.1\n that the untyped \\(\\lambda\\)-calculus allows \\(\\lambda\\)-terms such\nas \\((xx)\\), which intuitively apply \\(x\\) to itself. On the semantic\npicture we\u2019re exploring, we can obtain the associated function\n\\(f_{(xx)}\\) for the term \\((xx)\\) by taking the function \\(f_x\\) for\n\\(x\\) and applying it to itself: \n\\[\nf_{(xx)}=f_x(f_x)\n\\]\n\n\nBut following functions-as-sets, this would mean that the set\n\\(f_x\\) needs to contain an argument-value pair that has \\(f_x\\) as\nits first component and \\(f_{(xx)}\\) as the second:  \n\\[\nf_{x}=\\{\\ldots, (f_{x},f_{(xx)})), \\ldots\\}\n\\]\n\n\nBut this would make \\(f_x\\) a non-well-founded object: defining\n\\(f_x\\) would involve \\(f_x\\) itself. In fact, sets like this are\nexcluded in standard axiomatic set theory by the axiom of foundation\n(also known as the axiom of regularity). \u2014This is further\nsemantic evidence that the concept of a function underlying\nthe \\(\\lambda\\)-calculus can\u2019t be the extensional\nfunctions-as-sets concept. \n\nBut the problem runs even deeper than that. Even when we use a\nnon-extensional notion of a function, such as the functions-as-rules\nconception (see again section\n 1.2),\n we run into difficulties. In the untyped \\(\\lambda\\)-calculus,\neverything can both be function and an argument to functions.\nCorrespondingly, we should want our domain \\(D\\) to include, in some\nsense, the function space \\(D^D\\), which contains all and only the\nfunctions with both arguments and values from \\(D\\). To see this:\n\nEvery element of \\(D\\) can be a function that applies to elements\nof \\(D\\), and what\u2019s returned can then be again be an argument\nfor elements of \\(D\\). So, every element of \\(D\\) intuitively\ncorresponds to a member of \\(D^D\\).\nIf, in turn, we take a member of \\(D^D\\), i.e., a function with\narguments and values from \\(D\\), this is precisely the kind of thing\nwe want to include in our domain \\(D\\). So, intuitively, we want every\nmember of \\(D^D\\) to correspond to a member of \\(D\\).\n\n\nIn short, we want there to be a one-to-one correspondence\nbetween our domain and its own function space, i.e., we want them to\nsatisfy the \u2018equation\u2019 \\(X\\cong X^X\\). But this is\nimpossible since it contradicts Cantor\u2019s theorem.\n\nGiven these difficulties, the question arises whether it\u2019s\npossible to give a set-theoretic model for the \\(\\lambda\\)-calculus in\nthe first place? It turns out that it is. D. Scott was the first to\ndescribe such a model in an unpublished manuscript from 1969. This\nmodel, \\(D_\\infty\\), solves the aforementioned problems with\nCantor\u2019s theorem by suitably restricting the function space\n\\(D^D\\), by only letting some members of \\(D^D\\) correspond\nto members of \\(D\\). Covering Scott\u2019s construction goes beyond\nthe scope of this entry, since it involves advanced tools from algebra\nand topology; see (Meyer 1982), (Barendregt, 1985, chapter 18.2), or\n(Hindley and Seldin, 2008, chapter 16) for details. Instead,\nwe\u2019ll discuss the more general question: What is a\nmodel for the \\(\\lambda\\)-calculus? That is, leaving aside for a\nmoment the question whether sets are functions, rules, or something\naltogether different, we ask what kind of mathematical structure a\nmodel for the \\(\\lambda\\)-calculus is in the first place.\n",
    "section_title": "7. Semantics of \\(\\lambda\\)-calculus",
    "entry_title": "The Lambda Calculus",
    "hierarchy_title": "The Lambda Calculus || Semantics of \\(\\lambda\\)-calculus",
    "tokenized_text": [
        "semantics",
        "lambda",
        "calculus",
        "semantics",
        "lambda",
        "calculus",
        "said",
        "outset",
        "lambda",
        "calculus",
        "heart",
        "function",
        "application",
        "surprisingly",
        "difficult",
        "cash",
        "idea",
        "semantic",
        "term",
        "natural",
        "approach",
        "would",
        "try",
        "associate",
        "every",
        "lambda",
        "term",
        "m",
        "function",
        "f_m",
        "domain",
        "d",
        "interpret",
        "application",
        "term",
        "mn",
        "using",
        "function",
        "application",
        "f_m",
        "f_n",
        "idea",
        "quickly",
        "run",
        "difficulty",
        "begin",
        "easy",
        "see",
        "context",
        "use",
        "standard",
        "settheoretic",
        "concept",
        "functionsassets",
        "see",
        "section",
        "entry",
        "according",
        "concept",
        "remember",
        "function",
        "f",
        "set",
        "argumentvalue",
        "pair",
        "every",
        "argument",
        "get",
        "assigned",
        "unique",
        "value",
        "problem",
        "arises",
        "context",
        "selfapplications",
        "remember",
        "section",
        "untyped",
        "lambda",
        "calculus",
        "allows",
        "lambda",
        "terms",
        "xx",
        "intuitively",
        "apply",
        "x",
        "semantic",
        "picture",
        "exploring",
        "obtain",
        "associated",
        "function",
        "f_",
        "xx",
        "term",
        "xx",
        "taking",
        "function",
        "f_x",
        "x",
        "applying",
        "f_",
        "xx",
        "f_x",
        "f_x",
        "following",
        "functionsassets",
        "would",
        "mean",
        "set",
        "f_x",
        "need",
        "contain",
        "argumentvalue",
        "pair",
        "f_x",
        "first",
        "component",
        "f_",
        "xx",
        "second",
        "f_",
        "x",
        "ldots",
        "f_",
        "x",
        "f_",
        "xx",
        "ldots",
        "would",
        "make",
        "f_x",
        "nonwellfounded",
        "object",
        "defining",
        "f_x",
        "would",
        "involve",
        "f_x",
        "fact",
        "set",
        "like",
        "excluded",
        "standard",
        "axiomatic",
        "set",
        "theory",
        "axiom",
        "foundation",
        "also",
        "known",
        "axiom",
        "regularity",
        "this",
        "semantic",
        "evidence",
        "concept",
        "function",
        "underlying",
        "lambda",
        "calculus",
        "extensional",
        "functionsassets",
        "concept",
        "problem",
        "run",
        "even",
        "deeper",
        "even",
        "use",
        "nonextensional",
        "notion",
        "function",
        "functionsasrules",
        "conception",
        "see",
        "section",
        "run",
        "difficulty",
        "untyped",
        "lambda",
        "calculus",
        "everything",
        "function",
        "argument",
        "function",
        "correspondingly",
        "want",
        "domain",
        "d",
        "include",
        "sense",
        "function",
        "space",
        "dd",
        "contains",
        "function",
        "argument",
        "value",
        "d",
        "see",
        "every",
        "element",
        "d",
        "function",
        "applies",
        "element",
        "d",
        "returned",
        "argument",
        "element",
        "d",
        "every",
        "element",
        "d",
        "intuitively",
        "corresponds",
        "member",
        "dd",
        "turn",
        "take",
        "member",
        "dd",
        "ie",
        "function",
        "argument",
        "value",
        "d",
        "precisely",
        "kind",
        "thing",
        "want",
        "include",
        "domain",
        "d",
        "intuitively",
        "want",
        "every",
        "member",
        "dd",
        "correspond",
        "member",
        "d",
        "short",
        "want",
        "onetoone",
        "correspondence",
        "domain",
        "function",
        "space",
        "ie",
        "want",
        "satisfy",
        "equation",
        "xcong",
        "xx",
        "impossible",
        "since",
        "contradicts",
        "cantor",
        "theorem",
        "given",
        "difficulty",
        "question",
        "arises",
        "whether",
        "possible",
        "give",
        "settheoretic",
        "model",
        "lambda",
        "calculus",
        "first",
        "place",
        "turn",
        "d",
        "scott",
        "first",
        "describe",
        "model",
        "unpublished",
        "manuscript",
        "model",
        "d_infty",
        "solves",
        "aforementioned",
        "problem",
        "cantor",
        "theorem",
        "suitably",
        "restricting",
        "function",
        "space",
        "dd",
        "letting",
        "member",
        "dd",
        "correspond",
        "member",
        "d",
        "covering",
        "scott",
        "construction",
        "go",
        "beyond",
        "scope",
        "entry",
        "since",
        "involves",
        "advanced",
        "tool",
        "algebra",
        "topology",
        "see",
        "meyer",
        "barendregt",
        "chapter",
        "hindley",
        "seldin",
        "chapter",
        "detail",
        "instead",
        "discus",
        "general",
        "question",
        "model",
        "lambda",
        "calculus",
        "leaving",
        "aside",
        "moment",
        "question",
        "whether",
        "set",
        "function",
        "rule",
        "something",
        "altogether",
        "different",
        "ask",
        "kind",
        "mathematical",
        "structure",
        "model",
        "lambda",
        "calculus",
        "first",
        "place"
    ]
}