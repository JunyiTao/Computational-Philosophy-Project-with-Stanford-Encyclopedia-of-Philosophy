{
    "main_text": "Syntax\n2. Syntax\n\nThe official syntax of the \\(\\lambda\\)-calculus is quite simple; it is\ncontained in the next definition.\n\n\nDefinition For the alphabet of the language of the\n\\(\\lambda\\)-calculus we take the left and right parentheses, left and\nright square brackets, the symbol \u2018\\(\\lambda\\)\u2019, and an\ninfinite set of variables. The class of\n\\(\\lambda\\)-terms is defined inductively as\nfollows:\n\nEvery variable is a \\(\\lambda\\)-term.\nIf \\(M\\) and \\(N\\) are \\(\\lambda\\)-terms, then so is\n\\((MN)\\).\nIf \\(M\\) is a \\(\\lambda\\)-term and \\(x\\) is a variable, then\n\\((\\lambda x[M])\\) is a \\(\\lambda\\)-term.\n\n\nBy \u2018term\u2019 we always mean \u2018\\(\\lambda\\)-term\u2019.\nTerms formed according to rule (2) are called application\nterms. Terms formed according to rule (3) are called\nabstraction terms.\n\n\nAs is common when dealing with formal languages that have grouping\nsymbols (the left and right parenthesis, in our case), some\nparentheses will be omitted when it is safe to do so (that is, when\nthey can be reintroduced in only one sensible way). Juxtaposing more\nthan two \\(\\lambda\\)-terms is, strictly speaking, illegal. To avoid\nthe tedium of always writing all needed parentheses, we adopt the\nfollowing convention:\n\nConvention (association to the left): When more than\ntwo terms \\(M_1 M_2 M_3 \\ldots M_n\\) are juxtaposed we can recover the\nmissing parentheses by associating to the\nleft: reading from left to right, group \\(M_1\\) and\n\\(M_2\\) together, yielding \\((M_1 M_2)M_3 \\ldots M_n\\); then group\n\\((M_1 M_2)\\) with \\(M_3\\): \\(((M_1 M_2)M_3)\\ldots M_n\\), and so\nforth.\n\nThe convention thus gives a unique reading to any sequence of\n\\(\\lambda\\)-terms whose length is greater than 2.\n",
    "section_title": "2. Syntax",
    "entry_title": "The Lambda Calculus",
    "hierarchy_title": "The Lambda Calculus || Syntax",
    "tokenized_text": [
        "syntax",
        "syntax",
        "official",
        "syntax",
        "lambda",
        "calculus",
        "quite",
        "simple",
        "contained",
        "next",
        "definition",
        "definition",
        "alphabet",
        "language",
        "lambda",
        "calculus",
        "take",
        "left",
        "right",
        "parenthesis",
        "left",
        "right",
        "square",
        "bracket",
        "symbol",
        "lambda",
        "infinite",
        "set",
        "variable",
        "class",
        "lambda",
        "terms",
        "defined",
        "inductively",
        "follows",
        "every",
        "variable",
        "lambda",
        "term",
        "m",
        "n",
        "lambda",
        "terms",
        "mn",
        "m",
        "lambda",
        "term",
        "x",
        "variable",
        "lambda",
        "x",
        "lambda",
        "term",
        "term",
        "always",
        "mean",
        "lambda",
        "term",
        "term",
        "formed",
        "according",
        "rule",
        "called",
        "application",
        "term",
        "term",
        "formed",
        "according",
        "rule",
        "called",
        "abstraction",
        "term",
        "common",
        "dealing",
        "formal",
        "language",
        "grouping",
        "symbol",
        "left",
        "right",
        "parenthesis",
        "case",
        "parenthesis",
        "omitted",
        "safe",
        "reintroduced",
        "one",
        "sensible",
        "way",
        "juxtaposing",
        "two",
        "lambda",
        "terms",
        "strictly",
        "speaking",
        "illegal",
        "avoid",
        "tedium",
        "always",
        "writing",
        "needed",
        "parenthesis",
        "adopt",
        "following",
        "convention",
        "convention",
        "association",
        "left",
        "two",
        "term",
        "m_",
        "m_",
        "m_",
        "ldots",
        "m_n",
        "juxtaposed",
        "recover",
        "missing",
        "parenthesis",
        "associating",
        "left",
        "reading",
        "left",
        "right",
        "group",
        "m_",
        "m_",
        "together",
        "yielding",
        "m_",
        "m_",
        "m_",
        "ldots",
        "m_n",
        "group",
        "m_",
        "m_",
        "m_",
        "m_",
        "m_",
        "m_",
        "ldots",
        "m_n",
        "forth",
        "convention",
        "thus",
        "give",
        "unique",
        "reading",
        "sequence",
        "lambda",
        "terms",
        "whose",
        "length",
        "greater"
    ]
}