{
    "main_text": "Extensions || Inductive Definitions\n4.5 Inductive Definitions\nThe notion of an inductive definition is fundamental in\nintuitionistic type theory. It is a primitive notion and not, as in\nset theory, a derived notion where an inductively defined set is\ndefined impredicatively as the smallest set closed under some\nrules. However, in intuitionistic type theory inductive definitions\nare considered predicative: they are viewed as being built up from\nbelow.\nThe inductive definability of types is inherent in the meaning\nexplanations of intuitionistic type theory which we shall discuss in\nthe next section. In fact, intuitionistic type theory can be described\nbriefly as a theory of inductive, recursive, and inductive-recursive\ndefinitions based on a framework of lambda calculus with dependent\ntypes.\nWe have already seen the type of natural numbers and the type of\nwell-founded trees as examples of types given by inductive\ndefinitions; the natural numbers is an example of an ordinary finitary\ninductive definition and the well-founded trees of a generalized\npossibly infinitary inductive definition. The introduction rules\ndescribe how elements of these types are inductively generated and the\nelimination and equality rules describe how functions from these types\ncan be defined by structural recursion on the way these elements are\ngenerated. According to the propositions as types principle, the\nelimination rules are simultaneously rules for proof by structural\ninduction on the way the elements are generated.\nThe type formers \\(0, 1, +, \\times, \\rightarrow, \\Sigma,\\) and\n\\(\\Pi\\) which interpret the logical constants for intuitionistic\npredicate logic are examples of degenerate inductive definitions. Even\nthe identity type (in intensional intuitionistic type theory) is\ninductively generated; it is the type of proofs generated by the\nreflexivity axiom. Its elimination rule expresses proof by pattern\nmatching on the proof of reflexivity.\nThe common structure of the rules of the type formers can be\ncaptured by a general schema for inductive definitions (Dybjer\n1991). This general schema has many useful instances, for example, the\ntype \\(\\List(A)\\) of lists with elements of type \\(A\\) has the\nfollowing introduction rules:\n\n\\[\\Gamma \\vdash \\nil {:} \\List(A)\n\\hspace{3em}\n\\frac{\\Gamma \\vdash a {:} A\\hspace{2em}\\Gamma \\vdash as {:} \\List(A)}\n{\\Gamma \\vdash \\cons(a,as) {:} \\List(A)}\\]\n\nOther useful instances are types of binary trees and other trees\nsuch as the infinitely branching trees of the Brouwer ordinals of the\nsecond and higher number classes.\nThe general schema does not only cover inductively defined types,\nbut also inductively defined families of types, such as the identity\nrelation. The above mentioned type \\(A^n\\) of \\(n\\)-tuples of type\n\\(A\\) was defined above by primitive recursion on \\(n\\). It can also\nbe defined as an inductive family with the following introduction\nrules\n\n\\[\\Gamma \\vdash \\nil {:} A^0\n\\hspace{3em}\n\\frac{\\Gamma \\vdash a {:} A\\hspace{2em}\\Gamma \\vdash as {:} A^n}\n{\\Gamma \\vdash \\cons(a,as) {:} A^{\\s(n)}}\\]\n\nThe schema for inductive types and families is a type-theoretic\ngeneralization of a schema for iterated inductive definitions in\npredicate logic (formulated in natural deduction) presented by\nMartin-L\u00f6f (1971b). This paper immediately preceded\nMartin-L\u00f6f\u2019s first version of intuitionistic type\ntheory. It is both conceptually and technically a forerunner to the\ndevelopment of the theory.\nIt is an essential feature of proof assistants such as Agda and Coq\nthat it enables users to define their own inductive types and families\nby listing their introduction rules (the types of their\nconstructors). This is much like in typed functional programming\nlanguages such as Haskell and the different dialects of ML. However,\nunlike in these programming languages the schema for inductive\ndefinitions in intuitionistic type theory enforces a restriction\namounting to well-foundedness of the elements of the defined\ntypes.\n",
    "section_title": "4.5 Inductive Definitions",
    "entry_title": "Intuitionistic Type Theory",
    "hierarchy_title": "Intuitionistic Type Theory || Extensions || Inductive Definitions",
    "tokenized_text": [
        "extension",
        "inductive",
        "definition",
        "inductive",
        "definition",
        "notion",
        "inductive",
        "definition",
        "fundamental",
        "intuitionistic",
        "type",
        "theory",
        "primitive",
        "notion",
        "set",
        "theory",
        "derived",
        "notion",
        "inductively",
        "defined",
        "set",
        "defined",
        "impredicatively",
        "smallest",
        "set",
        "closed",
        "rule",
        "however",
        "intuitionistic",
        "type",
        "theory",
        "inductive",
        "definition",
        "considered",
        "predicative",
        "viewed",
        "built",
        "inductive",
        "definability",
        "type",
        "inherent",
        "meaning",
        "explanation",
        "intuitionistic",
        "type",
        "theory",
        "shall",
        "discus",
        "next",
        "section",
        "fact",
        "intuitionistic",
        "type",
        "theory",
        "described",
        "briefly",
        "theory",
        "inductive",
        "recursive",
        "inductiverecursive",
        "definition",
        "based",
        "framework",
        "lambda",
        "calculus",
        "dependent",
        "type",
        "already",
        "seen",
        "type",
        "natural",
        "number",
        "type",
        "wellfounded",
        "tree",
        "example",
        "type",
        "given",
        "inductive",
        "definition",
        "natural",
        "number",
        "example",
        "ordinary",
        "finitary",
        "inductive",
        "definition",
        "wellfounded",
        "tree",
        "generalized",
        "possibly",
        "infinitary",
        "inductive",
        "definition",
        "introduction",
        "rule",
        "describe",
        "element",
        "type",
        "inductively",
        "generated",
        "elimination",
        "equality",
        "rule",
        "describe",
        "function",
        "type",
        "defined",
        "structural",
        "recursion",
        "way",
        "element",
        "generated",
        "according",
        "proposition",
        "type",
        "principle",
        "elimination",
        "rule",
        "simultaneously",
        "rule",
        "proof",
        "structural",
        "induction",
        "way",
        "element",
        "generated",
        "type",
        "former",
        "times",
        "rightarrow",
        "sigma",
        "pi",
        "interpret",
        "logical",
        "constant",
        "intuitionistic",
        "predicate",
        "logic",
        "example",
        "degenerate",
        "inductive",
        "definition",
        "even",
        "identity",
        "type",
        "intensional",
        "intuitionistic",
        "type",
        "theory",
        "inductively",
        "generated",
        "type",
        "proof",
        "generated",
        "reflexivity",
        "axiom",
        "elimination",
        "rule",
        "express",
        "proof",
        "pattern",
        "matching",
        "proof",
        "reflexivity",
        "common",
        "structure",
        "rule",
        "type",
        "former",
        "captured",
        "general",
        "schema",
        "inductive",
        "definition",
        "dybjer",
        "general",
        "schema",
        "many",
        "useful",
        "instance",
        "example",
        "type",
        "list",
        "list",
        "element",
        "type",
        "a",
        "following",
        "introduction",
        "rule",
        "gamma",
        "vdash",
        "nil",
        "list",
        "hspace",
        "em",
        "frac",
        "gamma",
        "vdash",
        "ahspace",
        "em",
        "gamma",
        "vdash",
        "list",
        "gamma",
        "vdash",
        "cons",
        "list",
        "useful",
        "instance",
        "type",
        "binary",
        "tree",
        "tree",
        "infinitely",
        "branching",
        "tree",
        "brouwer",
        "ordinal",
        "second",
        "higher",
        "number",
        "class",
        "general",
        "schema",
        "cover",
        "inductively",
        "defined",
        "type",
        "also",
        "inductively",
        "defined",
        "family",
        "type",
        "identity",
        "relation",
        "mentioned",
        "type",
        "an",
        "n",
        "tuples",
        "type",
        "a",
        "defined",
        "primitive",
        "recursion",
        "n",
        "also",
        "defined",
        "inductive",
        "family",
        "following",
        "introduction",
        "rule",
        "gamma",
        "vdash",
        "nil",
        "a",
        "hspace",
        "em",
        "frac",
        "gamma",
        "vdash",
        "ahspace",
        "em",
        "gamma",
        "vdash",
        "an",
        "gamma",
        "vdash",
        "cons",
        "a",
        "s",
        "n",
        "schema",
        "inductive",
        "type",
        "family",
        "typetheoretic",
        "generalization",
        "schema",
        "iterated",
        "inductive",
        "definition",
        "predicate",
        "logic",
        "formulated",
        "natural",
        "deduction",
        "presented",
        "martinl\u00f6f",
        "b",
        "paper",
        "immediately",
        "preceded",
        "martinl\u00f6f",
        "first",
        "version",
        "intuitionistic",
        "type",
        "theory",
        "conceptually",
        "technically",
        "forerunner",
        "development",
        "theory",
        "essential",
        "feature",
        "proof",
        "assistant",
        "agda",
        "coq",
        "enables",
        "user",
        "define",
        "inductive",
        "type",
        "family",
        "listing",
        "introduction",
        "rule",
        "type",
        "constructor",
        "much",
        "like",
        "typed",
        "functional",
        "programming",
        "language",
        "haskell",
        "different",
        "dialect",
        "ml",
        "however",
        "unlike",
        "programming",
        "language",
        "schema",
        "inductive",
        "definition",
        "intuitionistic",
        "type",
        "theory",
        "enforces",
        "restriction",
        "amounting",
        "wellfoundedness",
        "element",
        "defined",
        "type"
    ]
}