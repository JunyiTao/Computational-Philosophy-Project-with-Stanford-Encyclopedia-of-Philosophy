{
    "url": "computation-physicalsystems",
    "title": "Computation in Physical Systems",
    "authorship": {
        "year": "Copyright \u00a9 2021",
        "author_text": "Gualtiero Piccinini\n<piccininig@umsl.edu>\nCorey Maley\n<cmaley@ku.edu>",
        "author_links": [
            {
                "http://www.umsl.edu/~piccininig/": "Gualtiero Piccinini"
            },
            {
                "mailto:piccininig%40umsl%2eedu": "piccininig@umsl.edu"
            },
            {
                "mailto:cmaley%40ku%2eedu": "cmaley@ku.edu"
            }
        ],
        "raw_html": "<div id=\"article-copyright\">\n<p>\n<a href=\"../../info.html#c\">Copyright \u00a9 2021</a> by\n\n<br/>\n<a href=\"http://www.umsl.edu/~piccininig/\" target=\"other\">Gualtiero Piccinini</a>\n&lt;<a href=\"mailto:piccininig%40umsl%2eedu\"><em>piccininig<abbr title=\" at \">@</abbr>umsl<abbr title=\" dot \">.</abbr>edu</em></a>&gt;<br/>\nCorey Maley\n&lt;<a href=\"mailto:cmaley%40ku%2eedu\"><em>cmaley<abbr title=\" at \">@</abbr>ku<abbr title=\" dot \">.</abbr>edu</em></a>&gt;\n    </p>\n</div>"
    },
    "pubinfo": [
        "First published Wed Jul 21, 2010",
        "substantive revision Wed Jun 16, 2021"
    ],
    "preamble": "\n\nIn our ordinary discourse, we distinguish between physical systems\nthat perform computations, such as computers and calculators, and\nphysical systems that don\u2019t, such as rocks and raindrops. Among\ncomputing devices, we distinguish between more and less powerful ones.\nThese distinctions are of both practical and theoretical importance: a\nsupercomputer can compute in minutes what would take decades on a\nlaptop, while a calculator cannot do certain things that a laptop can\ndo, even in principle. What grounds these distinctions? What is the\nprincipled difference, if there is one, between a rock and a\ncalculator, or between a calculator and a computer? Answering these\nquestions is more difficult than it may seem.\n\nIn addition to our ordinary discourse, computation is central to many\nsciences. Computer scientists design, build, and program computers.\nBut again, what counts as a computer? If a salesperson sold you an\nordinary rock as a computer, you should probably get your money back.\nAgain, what does the rock lack that a genuine computer has?\n\nHow powerful a computer can you build? Can you build a machine that\ncomputes anything you wish? Although it is often said that modern\ncomputers can compute anything (i.e., any function of natural numbers,\nor equivalently, any function of strings of letters from a finite\nalphabet), this is incorrect. Ordinary computers can compute only a\ntiny subset of these functions. Is it physically possible to do\nbetter? Which functions are physically computable? These questions are\nbound up with the foundations of physics.\n\nComputation is also central to psychology and neuroscience, and\nperhaps other areas of biology. According to the computational theory\nof cognition, cognition is a kind of computation: the behavior of\ncognitive systems is causally explained by the computations they\nperform. In order to test a computational theory of something, we need\nto know what counts as a computation in a physical system. Once again,\nthe nature of computation lies at the foundation of empirical\nscience.\n",
    "toc": [
        {
            "#AbsComConCom": "1. Abstract Computation and Concrete Computation"
        },
        {
            "#AccConCom": "2. Accounts of Concrete Computation"
        },
        {
            "#SimMapAcc": "2.1 The Simple Mapping Account"
        },
        {
            "#CauCouDisAcc": "2.2 Causal, Counterfactual, and Dispositional Accounts"
        },
        {
            "#SemAcc": "2.3 The Semantic Account"
        },
        {
            "#SynAcc": "2.4 The Syntactic Account"
        },
        {
            "#MecAcc": "2.5 The Mechanistic Account"
        },
        {
            "#EvePhySysCom": "3. Is Every Physical System Computational?"
        },
        {
            "#VarPan": "3.1 Varieties of Pancomputationalism"
        },
        {
            "#UnlPan": "3.2 Unlimited Pancomputationalism"
        },
        {
            "#LimPan": "3.3 Limited Pancomputationalism"
        },
        {
            "#UniComSys": "3.4 The Universe as a Computing System"
        },
        {
            "#PhyCom": "4. Physical Computability"
        },
        {
            "#PhyChuTurTheBol": "4.1 The Physical Church-Turing Thesis: Bold"
        },
        {
            "#PhyChuTurTheMod": "4.2 The Physical Church-Turing Thesis: Modest"
        },
        {
            "#Hyp": "4.3 Hypercomputation"
        },
        {
            "#Bib": "Bibliography"
        },
        {
            "#Aca": "Academic Tools"
        },
        {
            "#Oth": "Other Internet Resources"
        },
        {
            "#Rel": "Related Entries"
        }
    ],
    "main_text": "\n1. Abstract Computation and Concrete Computation\n\nComputation may be studied mathematically by formally defining\ncomputational objects, such as algorithms and Turing machines, and\nproving theorems about their properties. The mathematical theory of\ncomputation is a well-established branch of mathematics. It deals with\ncomputation in the abstract, without regard to physical\nimplementation.\n\nBy contrast, most uses of computation in science and ordinary practice\ndeal with concrete computation: computation in physical systems such\nas computers and brains. Concrete computation is closely related to\nabstract computation: we speak of physical systems as running an\nalgorithm or as implementing a Turing machine, for example. But the\nrelationship between concrete computation and abstract computation is\nnot part of the mathematical theory of computation and requires\nfurther investigation (cf. Curtis-Trudel forthcoming-a, for an argument\nthat abstract and concrete computation cannot be given a unified\naccount).  Questions about concrete computation are the main subject\nof this entry. Nevertheless, it is important to bear in mind some\nbasic mathematical results.\n\nThe most important notion of computation is that of digital\ncomputation, which Alan Turing, Kurt G\u00f6del, Alonzo Church,\nEmil Post, and Stephen Kleene formalized in the 1930s. Their work\ninvestigated the foundations of mathematics. One crucial question was\nwhether first order logic is decidable\u2014whether there is\nan algorithm that determines whether any given first order logical\nformula is a theorem.\n\nTuring (1936\u20137) and, separately, Church (1936) proved that the\nanswer is negative: there is no such algorithm. To show this, they\noffered precise characterizations of the informal notion of an\neffectively computable function. Turing did so in terms of so-called\nTuring machines (TMs)\u2014devices that manipulate discrete symbols\nwritten on a tape in accordance with finitely many instructions. Other\nlogicians did the same thing\u2014they formalized the notion of\neffectively computable function\u2014in terms of other notions, such\nas \u03bb-definable functions and general recursive functions.\n\nTo their surprise, all such notions turned out to be extensionally\nequivalent: any function computable within any of these formalisms is\ncomputable within any of the others. They took this as evidence that\ntheir quest for a precise definition of \u201calgorithm\u201d or\n\u201ceffectively computable function\u201d had been successful. The\nresulting view\u2014that TMs and other equivalent formalisms capture\nthe informal notion of algorithm\u2014is now known as the\nChurch-Turing thesis (more on this in Section 4). The study of\ncomputable functions, made possible by the work of Turing et\nal., is part of the mathematical theory of computation.\n\nThe theoretical significance of Turing et al.\u2019s notion of\ncomputation can hardly be overstated. As G\u00f6del pointed out (in a\nlecture following one by Tarski):\n\nTarski has stressed in his lecture (and I think justly) the great\nimportance of the concept of general recursiveness (or Turing\u2019s\ncomputability). It seems to me that this importance is largely due to\nthe fact that with this concept one has for the first time succeeded\nin giving an absolute definition of an interesting epistemological\nnotion, i.e., one not depending on the formalism chosen. (G\u00f6del\n1946, 84)\n\nTuring also showed that there are universal TMs\u2014machines that\ncan compute any function computable by any other TM. Universal\nmachines do this by executing instructions that encode the behavior of\nthe machine they simulate. Assuming the Church-Turing thesis,\nuniversal TMs can compute any function computable by algorithm. This\nresult is significant for computer science: you don\u2019t need to build\ndifferent computers for different functions; one universal computer\nwill suffice to compute any computable function. Modern digital\ncomputers are universal in this sense: digital computers can compute\nany function computable by algorithm for as long as they have time and\nmemory. (Strictly speaking, a universal machine has an unbounded\nmemory, whereas digital computer memories can be extended but not\nindefinitely, so they are not unbounded.)\n\nThe above result should not be confused with the common claim that\ncomputers can compute anything. This claim is false: another\nimportant result of computability theory is that most functions are\nnot computable by TMs (and hence, by digital computers). TMs\ncompute functions defined over denumerable domains, such as strings of\nletters from a finite alphabet. There are uncountably many such\nfunctions. But there are only countably many TMs; you can enumerate\nTMs by listing each TM specification (which is some finite string).\nSince an uncountable infinity is much larger than a countable one, it\nfollows that TMs (and hence digital computers) can compute only a tiny\nportion of all functions (over denumerable domains, such as natural\nnumbers or strings of letters).\n\nTMs and most modern computers are known as (classical) digital\ncomputers, that is, computers that manipulate strings of discrete,\nunambiguously distinguishable states. Digital computers are sometimes\ncontrasted with analog computers, which manipulate\nvariables that can be continuous. Continuous variables are variables\nthat can change their value continuously over time while taking any\nvalue within a certain interval. Analog computers are used primarily\nto solve certain systems of differential equations (Pour-El 1974,\nRubel 1993).\n\nClassical digital computers may also be contrasted with quantum\ncomputers. Quantum computers manipulate quantum states called\nqudits (usually binary qudits, known as qubits). Unlike the\ncomputational states of digital computers, qudits are not\nunambiguously distinguishable from one another in certain important\nrespects. This entry will focus primarily on classical digital\ncomputation. For more on quantum computation, see the entry on quantum\ncomputing.\n\nThe same objects studied in the mathematical theory of\ncomputation\u2014TMs, algorithms, and so on\u2014are typically said\nto be implemented by concrete physical systems. This poses a problem:\nhow can a concrete, physical system perform a computation when\ncomputation is defined by an abstract mathematical formalism? This may\nbe called the problem of computational implementation.\n\nThe problem of computational implementation may be formulated in a\ncouple of different ways. Platonists interpret the formalisms of\ncomputability theory as defining abstract objects. According to\nthis interpretation, TMs, algorithms, and the like are abstract\nobjects. But how can a concrete physical system implement an\nabstract object, and what precisely is this implementation relation?\nAnti-platonists treat the formalisms of computability theory simply as\nabstract computational descriptions. But how can a concrete\nphysical system satisfy an abstract computational description?\nRegardless of how the problem of computational implementation is\nformulated, solving it requires an account of concrete\ncomputation\u2014an account of what it takes for a physical system to\nperform a given computation.\n\nA closely related problem is that of distinguishing between physical\nsystems such as digital computers, which do compute (if anything\ndoes), and physical systems such as rocks, which do not (or so it\nseems). Unlike computers, ordinary rocks are not sold in computer\nstores and are usually not considered computers. Why? What do\ncomputers have that rocks lack such that computers compute but rocks\ndon\u2019t? (If indeed they don\u2019t?) In other words, what kinds of concrete\nsystems can compute at all? Different answers to these questions give\nrise to different accounts of concrete computation.\n\nQuestions about the nature of concrete computation should not be\nconfused with questions about computational modeling. The dynamical\nevolution of many physical systems may be approximated by\ncomputational models\u2014computer programs that simulate or predict\nthe dynamics or kinematics of some system of interest. The behavior of\nrocks\u2014as well as rivers, ecosystems, and planetary systems,\namong many others\u2014may well be modeled computationally. It does\nnot follow that the modeled systems are computing devices\u2014that\nthey themselves perform computations. Prima facie, only relatively few\nand quite special systems compute. Explaining what makes them\nspecial\u2014or explaining away our feeling that they are\nspecial\u2014is the job of an account of concrete computation.\n2. Accounts of Concrete Computation\n\nThe basic problem that any account of concrete computation must solve\ncan be seen via the following diagram. Consider some computational\nsystem C (e.g. an abstract automaton) and a physical system\nP. System C has computational states\ns1 and s2 such that\nC transitions from s1 to s2\naccording to the specification of C. System P has\nphysical states p1 and\np2 such that P transitions from\np1 to p2 according to the\ndynamics of P. The transitions among states of the same\ntype\u2014the arrows in the diagram\u2014are not in need of\nexplanation: they are either stipulated in the case of C, or\nwell-understood physical dynamics in the case of P. However, in\norder for P to count as an implementation of C, the putative\nconnection between the states of one type of system and the states of\nthe other (the dotted lines) must be explained. The following accounts\noffer different ways of characterizing this connection, either by\nmaking precise what the dotted lines represent, by narrowing the\npossible physical states or transitions that could comprise P,\nor both.\n\n\nDiagram\n\n2.1 The Simple Mapping Account\n\nOne of the earliest and most influential accounts of computation is\ndue to Hilary Putnam. To a first approximation, this account says that\nanything that is accurately described by a computational description\nC is a computing system implementing C.\n\nMore precisely, Putnam sketches his earliest account in terms of\nTuring Machines (TMs) only, appealing to the \u201cmachine\ntables\u201d that are a standard way of defining specific TMs. A\nmachine table consists of one column for each of the (finitely many)\ninternal states of the TM and one row for each of the machine\u2019s symbol\ntypes. Each entry in the machine table specifies what the machine does\ngiven the pertinent symbol and internal state. Here is how Putnam\nexplains what it takes for a physical system to be a TM:\n\nA \u2018machine table\u2019 describes a machine if the\nmachine has internal states corresponding to the columns of the table,\nand if it \u2018obeys\u2019 the instruction in the table in the\nfollowing sense: when it is scanning a square on which a symbol\ns1 appears and it is in, say, state B, that\nit carries out the \u2018instruction\u2019 in the appropriate row\nand column of the table (in this case, column B and row\ns1). Any machine that is described by a machine\ntable of the sort just exemplified is a Turing machine. (Putnam\n1960/1975a, 365; cf. also Putnam 1967/1975a, 433\u20134)\n\nThis account relies on several unexplained notions, such as square (of\ntape), symbol, scanning, and carrying out an instruction. Furthermore,\nthe account is specified in terms of TM tables, but there are other\nkinds of computational description. A general account of concrete\ncomputation should cover other computational descriptions besides TM\ntables. Perhaps for these reasons, Putnam\u2014soon followed by many\nothers\u2014abandoned reference to squares, symbols, etc.; he\nsubstituted them with an appeal to a physical description of the\nsystem. The result of that substitution is what Godfrey-Smith (2009)\ndubs the \u201csimple mapping account\u201d of computation.\n\nAccording to the simple mapping account, a physical system S\nperforms a computation defined by description C just in case\n(i) there is a mapping from the states ascribed to S by a\nphysical description to the states defined by computational\ndescription C, such that (ii) the state transitions between the\nphysical states mirror the state transitions between the computational\nstates. Thus, suppose S has states p1 and\np2 that map on states s1 and\ns2 of C (respectively). Clause (ii) requires\nthat, for any computational state transition of the form\ns1 \u2192 s2, S transitions\nfrom p1 to p2 whenever it goes\ninto state s1.\n\nOne difficulty with the formulation above is that ordinary physical\nsystems admit of uncountably many physical states, whereas ordinary\ncomputational descriptions, such as TM tables, consist of countably\nmany states. Thus, there are not enough computational states for the\nphysical states to map onto. One solution to this problem is to\nreverse the direction of the mapping, requiring a mapping of the\ncomputational states onto (a subset of) the physical states. Another,\nmore common solution to this problem\u2014often implicit\u2014is to\nselect either a subset of the physical states or equivalence classes\nof the physical states and map those onto the computational states.\nWhen this is done, clause (i) is replaced by the following: (i\u2032)\nthere is a mapping from a subset of (or equivalence classes\nof) the physical states of S to the states of computational\ndescription C.\n\nThe simple mapping account turns out to be very liberal: it attributes\nmany computations to many systems. In the absence of restrictions on\nwhich mappings are acceptable, such mappings are relatively easy to\ncome by. As a consequence, some have argued that every physical system\nimplements every computation (Putnam 1988, Searle 1992). This thesis,\nwhich trivializes the claim that something is a computing system, will\nbe discussed in Section 3.1. Meanwhile, the desire to avoid this\ntrivialization result is one motivation behind other accounts of\nconcrete computation.\n2.2 Causal, Counterfactual, and Dispositional Accounts\n\nOne way to construct more restrictive accounts of computation is to\nfurther constrain acceptable mappings. As a reminder, the simple\nmapping account has it that, for any computational state transition of\nthe form s1 \u2192 s2, if the\nsystem is in the physical state p1 that maps onto\ns1, it then goes into the physical state\np2 that maps onto s2. The second\npart of (ii) is a material conditional. This account may be\nstrengthened by turning it into a conditional expressing a relation\nthat supports counterfactuals.\n\nIn a pure counterfactual account, clause (ii) is strengthened by\nrequiring that the physical state transitions support certain\ncounterfactuals (Block 1978, Maudlin 1989, Copeland 1996, Rescorla\n2014, Campbell and Yang 2021). In other words, this account requires\nthe mapping between computational and physical descriptions to be such\nthat the counterfactual relations between the physical states are\nisomorphic to the counterfactual relations between the computational\nstates.\n\nDifferent authors formulate the relevant counterfactuals in slightly\ndifferent ways: (a) if the system had been in a physical state that\nmaps onto an arbitrary computational state (specified by the relevant\ncomputational description), it would have gone into a physical state\nthat maps onto the relevant subsequent computational state (Maudlin\n1989, 415); (b) if the system had been in a physical state\np1 that maps onto s1, it would\nhave gone into a physical state p2 that maps onto\ns2 (Copeland 1996, 341); (c) if the system were in a\nphysical state p1 that maps onto\ns1, it would go into a physical state\np2 that maps onto s2 (Chalmers\n1996, 312). Regardless of the exact formulation, none of these\ncounterfactuals are satisfied by the material conditional of clause\n(ii) as it appears in the simple mapping account of computation. Thus,\ncounterfactual accounts are stronger than the simple mapping\naccount.\n\nIn causal accounts, clause (ii) is strengthened by requiring a causal\nrelation between the physical states: for any computational state\ntransition of the form s1 \u2192\ns2, the physical state p1 (which\nmaps onto computational state s1) causes the\nsystem to go into physical state p2 (which maps onto\ncomputational state s2) (Chrisley 1995, Chalmers\n1995, 1996, 2011, Scheutz 1999, 2001).\n\nIn order to avoid unlimited pancomputationalism, (discussed in Section\n3), Chalmers (1995, 1996, 2011) adds the further restriction that a\nphysical implementation of a computational system must divide into\nseparate physical components, each of which maps onto the components\nspecified by the computational formalism. As Godfrey-Smith (2009, 293)\nnotes, this combination of a causal and a localizational\nconstraint goes in the direction of mechanistic explanation (Machamer,\nDarden, and Craver 2000). An account of computation that is explicitly\nbased on mechanistic explanation will be discussed in Section 2.5. For\nnow, the causal account requires only that the mappings between\ncomputational and physical descriptions be such that the causal\nrelations between the physical states are isomorphic to the state\ntransitions specified by the computational description. Thus,\naccording to the causal account, concrete computation is the causal\nstructure of a physical process.\n\nAnother account of concrete computation appeals to dispositional\nrelations, assuming (as most people do) that dispositional relations\nsupport counterfactuals. Appealing to dispositions may have advantages\nover pure counterfactual accounts in blocking unwanted computational\nimplementations (Klein 2008, 145, makes the case for dispositional\nversus counterfactual accounts).\n\nIn a dispositional account, clause (ii) is strengthened by requiring a\ndispositional relation between the physical states: for any\ncomputational state transition of the form s1 \u2192\ns2 (specified by a computational description), if\nthe system is in the physical state p1 that maps\nonto s1, the system manifests a disposition\nwhose manifestation is the transition from p1 to the\nphysical state p2 that maps onto\ns2 (Klein 2008). The physical system is such that\nphysical state p1 (which maps onto computational\nstate s1) manifests the disposition to transition to\nphysical state p2 (which maps onto computational\nstate s2). In other words, the dispositional account\nrequires the mapping between computational and physical descriptions\nto be such that the dispositional relations between the physical\nstates are isomorphic to the state transitions specified by the\ncomputational description. Thus, according to the dispositional\naccount, concrete computation is the dispositional structure of a\nphysical process.\n\nThe difference between the simple mapping account and counterfactual,\ncausal, and dispositional accounts may be seen by looking at an\nexample.\n\nConsider a rock under the sun, early in the morning. During any time\ninterval, the rock\u2019s temperature rises, going from T to\nT+1, to T+2, to T+3. Now consider a NOT gate that\nfeeds its output back to itself. At first, suppose the NOT gate\nreceives \u20180\u2019 as an input; it then returns a\n\u20181\u2019. After the \u20181\u2019 is fed back to the NOT\ngate, the gate returns a \u20180\u2019 again, and so on. The NOT\ngate goes back and forth between outputting a \u20180\u2019 and\noutputting a \u20181\u2019. Now map physical states T and\nT+2 onto \u20180\u2019; then map T+1 and T+3\nonto \u20181\u2019.\n\nAccording to the simple mapping account, the rock implements a NOT\ngate undergoing the computation represented by \u20180101\u2019.\n\nBy contrast, according to the counterfactual account, the rock\u2019s\nputative computational implementation is spurious, because the\nphysical state transitions do not support counterfactuals. If the rock\nwere put in state T, it may or may not transition into\nT+1, depending on whether it is morning or evening and other\nextraneous factors. Since the rock\u2019s physical state transitions that\nmap onto the NOT gate\u2019s computational state transitions do not support\ncounterfactuals, the rock does not implement the NOT gate according to\nthe counterfactual account.\n\nAccording to the causal and dispositional accounts too, this putative\ncomputational implementation is spurious, because the physical state\ntransitions are not due to causal or dispositional properties of the\nrock and its states. T does not cause T+1, nor does the\nrock have a disposition to go into T+1 when it is in T.\nRather, the rock changes its state due to the action of the sun. Since\nthe rock\u2019s physical state transitions that map onto the NOT gate\u2019s\ncomputational state transitions are not grounded in either the causal\nor dispositional properties of the rock and its states, the rock does\nnot implement the NOT gate according to the causal and dispositional\naccounts.\n\nIt is important to note that under all of these mapping accounts,\nthere are mappings between any physical system and at least\nsome computational descriptions. Thus, according to mapping accounts,\neverything performs at least some computations (cf. Section 3.2). This\nstrikes some as overly inclusive. In computer science and cognitive\nscience, there seems to be a distinction between systems that compute\nand systems that do not. To preserve this distinction, one option is\nto move beyond mapping accounts of implementation.\n2.3 The Semantic Account\n\nIn our everyday life, we usually employ computations to process\nmeaningful symbols in order to extract information from them. The\nsemantic account of computation turns this practice into a\nmetaphysical doctrine: computation is the processing of\nrepresentations\u2014or at least, the processing of appropriate\nrepresentations in appropriate ways. Opinions as to which\nrepresentational manipulations constitute computation vary a great\ndeal (Fodor 1975; Cummins 1983; Pylyshyn 1984; Churchland and\nSejnowski 1992; Shagrir 2006, forthcoming). What all versions of the\nsemantic account have in common is that they take seriously the\nreference to symbols in Putnam\u2019s original account of computation:\nthere is \u201cno computation without representation\u201d (Fodor\n1981, 180).\n\nThe semantic account may be seen as imposing a further restriction on\nacceptable mappings. In addition to the causal restriction imposed by\nthe causal account (mutatis mutandis for the counterfactual and\ndispositional accounts), the semantic account imposes a semantic\nrestriction. Only physical states that qualify as representations may\nbe mapped onto computational descriptions, thereby qualifying as\ncomputational states. If a state is not representational, it is not\ncomputational either.\n\nThe semantic account is probably the most popular in the philosophy of\nmind, because it appears to best fit what is required of a\nphilosophical account of cognition. Since minds and digital computers\nare generally assumed to manipulate (the right kind of)\nrepresentations, they turn out to compute. Since most other systems\nare generally assumed not to manipulate (the relevant kind of)\nrepresentations, they do not compute. Thus, the semantic account\nappears to accommodate some common intuitions about what does and does\nnot count as a computing system. It keeps minds and computers in while\nleaving most everything else out, thereby vindicating the\ncomputational theory of cognition as a strong and nontrivial\ntheory.\n\nThe semantic account raises three important questions. First, how are\nrepresentations to be individuated? Second, what counts as a\nrepresentation of the relevant kind? Finally, what gives\nrepresentations their semantic content?\n\nThe main debate regarding the individuation of computational states\ndivides internalists from externalists. According to externalists,\ncomputational vehicles are symbols individuated by their wide\ncognitive contents\u2014paradigmatically, the things that the\nsymbols stand for (Burge 1986, Shapiro 1997, Shagrir 2001). By\ncontrast, most internalists maintain that computational vehicles are\nsymbols individuated by narrow cognitive contents (Segal 1991).\nNarrow contents are, roughly speaking, semantic contents defined in\nterms of intrinsic properties of the system. Cognitive\ncontents, in turn, are contents ascribed to a system by a cognitive\npsychological theory. For instance, the cognitive contents of the\nvisual system are visual contents, whereas the cognitive contents of\nthe auditory system are auditory contents.\n\nTo illustrate the dispute, consider two physically identical cognitive\nsystems A and B. Among the symbols processed by A\nis symbol S. A produces instances of S whenever\nA is in front of bodies of water, when A is thinking of\nwater, when A is forming plans to interact with water, and so\non. In short, symbol S appears to stand for water. Every time\nA processes S, system B processes symbol\nS\u2032, which is physically identical to S. But system\nB lives in an environment different from A\u2019s\nenvironment. Whenever A is surrounded by water, B is\nsurrounded by twin-water, which is a substance superficially\nindistinguishable, yet physically different, from water. Thus, symbol\nS\u2032 appears to stand for twin-water (cf. Putnam 1975b). In\nsummary, A and B live in relevantly different\nenvironments, such that S appears to stand for water while\nS\u2032 appears to stand for twin-water; A processes\nS in the same way that B processes S\u2032; and\nthere is no intrinsic physical difference between A and\nB or between S and S\u2032.\n\nAccording to externalists, when A is processing S and\nB is processing S\u2032, they are in computational\nstates of different types. According to internalists, A\nand B are in computational states of the same type. In\nother words, externalists maintain that computational states are\nindividuated in part by their reference, which is determined at least\nin part by physical properties external to the system. By contrast,\ninternalists maintain that computational states are individuated in a\nway that depends solely on the intrinsic physical properties of\ncognitive systems.\n\nSo far, externalists and internalists agree on one thing:\ncomputational states are individuated by cognitive contents.\nThis requirement can be relaxed without abandoning the semantic\naccount of computation. According to Egan (1999), computational\nvehicles are not individuated by cognitive contents of any kind,\nwhether wide or narrow. Rather, they are individuated by their\nmathematical contents\u2014that is, mathematical functions and\nobjects ascribed as semantic contents to the computational vehicles by\na computational theory of the system. Since mathematical contents are\nthe same across physical duplicates, Egan maintains that her\nmathematical contents are a kind of narrow content\u2014she is a kind\nof internalist.\n\nLet us now turn to what counts as a representation. This debate is\nless clearly delineated. According to some authors, only structures\nthat have a language-like combinatorial syntax, which supports a\ncompositional semantics, count as computational vehicles, and only\nmanipulations that respect the semantic properties of such structures\ncount as computations (Fodor 1975, Pylyshyn 1984). This suggestion\nflies in the face of both computability theory and analog computation\n(Maley forthcoming), neither of which impose any such requirement on\nwhat counts as a computational vehicle.\n\nOther authors are more inclusive on what kinds of manipulations on\nrepresentations count as computations, but they have not been\nespecially successful in drawing the line between computational and\nnon-computational processes. Few would include all manipulations of\nrepresentations\u2014including, say, painting a picture or recording\na speech\u2014as computations, but there is no consensus on where to\ndraw the boundary between representational manipulations that count as\ncomputations and representational manipulations that do not.\n\nA third question is what gives representations their semantic content.\nThere are three families of views. Instrumentalists believe that\nascribing semantic content to things is just heuristically useful for\nprediction and explanation; semantic properties are not real\nproperties of computational states (e.g., Dennett 1987, Egan 2010).\nRealists who are not naturalists believe semantic properties are real\nproperties of computational states, but they are irreducible to\nnon-semantic properties. Finally, realists who are also naturalists\nbelieve semantic properties are both real and reducible to\nnon-semantic properties, though they disagree on exactly how to reduce\nthem (e.g., Fodor 2008, Harman 1987).\n\nThe semantic account of computation is closely related to the common\nview that computation is information processing. This idea is less\nclear than it may seem, because there are several relevant notions of\ninformation. The connection between information processing and\ncomputation is different depending on which notion of information is\nat stake. What follows is a brief disambiguation of the view that\ncomputation is information processing based on four relevant notions\nof information (cf. Piccinini and Scarantino 2011).\n\nInformation in the sense of thermodynamics is closely related to\nthermodynamic entropy. Entropy is a property of every physical\nsystem. Thermodynamic entropy is, roughly, a measure of an observer\u2019s\nuncertainty about the microscopic state of a system after she\nconsiders the observable macroscopic properties of the system. The\nstudy of the thermodynamics of computation is a lively field with many\nimplications in the foundations of physics (Leff and Rex 2003). In\nthis thermodynamic sense of \u201cinformation,\u201d any difference\nbetween two distinguishable states of a system may be said to carry\ninformation. Computation may well be said to be information processing\nin this sense, but this has little to do with semantics properly so\ncalled. However, the connections between thermodynamics, computation,\nand information theory are one possible source of inspiration for the\nview that every physical system is a computing system (see Section\n3.4).\nInformation in the sense of information theory is a measure of the\nlikelihood that a given event occurs, and the mutual information of\ntwo random variables is a measure of the mutual dependence between the\nvariables (Shannon and Weaver 1949). These measures can then be used\nto analyze and design robust communication systems that reliably\ntransfer signals in the presence of noise. Computation may well be\nsaid to be information processing in this sense as well. Again, this\nis not explicitly about semantics. But mutual information can tell us\nhow much information a variable carries about another, so mutual\ninformation may be the basis for a notion of semantic information\ncarried by a variable about another (cf. Isaac 2019).\nInformation in one semantic sense is approximately the same as\n\u201cnatural meaning\u201d (Grice 1957). A signal carries\ninformation in this sense just in case it reliably correlates with a\nsource (Dretske 1981). The view that computation is information\nprocessing in this sense is prima facie implausible, because many\ncomputations\u2014such as arithmetical calculations carried out on\ndigital computers\u2014do not seem to carry any natural meaning.\nNevertheless, this notion of semantic information is relevant here\nbecause it has been used by some theorists to ground an account of\nrepresentation (Dretske 1981, Fodor 2008).\nInformation in another semantic sense is just ordinary semantic\ncontent or \u201cnon-natural meaning\u201d (Grice 1957). This is the\nkind of semantic content that most philosophers discuss. The view that\ncomputation is information processing in this sense is similar to a\ngeneric semantic account of computation.\n\n\nAlthough the semantic account of computation appears to fit the needs\nof philosophers of mind, it appears less suited to make sense of other\nsciences. Most pertinently, representation does not seem to be\npresupposed by the notion of computation employed in at least some\nareas of cognitive science as well as computability theory and\ncomputer science\u2014the very sciences that gave rise to the notion\nof computation and the origin of the computational theory of cognition\n(Fresco 2010). If this is correct, the semantic account may not even\nbe adequate to the needs of philosophers of mind\u2014at least those\nphilosophers of mind who wish to make sense of the analogy between\nminds and the systems designed and studied by computer scientists and\ncomputability theorists. Another criticism of the semantic account is\nthat specifying the kind of representation and representational\nmanipulation that is relevant to computation may require a\nnon-semantic way of individuating computations (Piccinini 2004). These\nconcerns motivate efforts to account for computation in non-semantic\nterms.\n2.4 The Syntactic Account\n\nAs we saw, the semantic account needs to specify which representations\nare relevant to computation. One view is that the relevant\nrepresentations are language-like, that is, they have the kind of\nsyntactic structure exhibited by sentences in a language. Computation,\nthen, is the manipulation of language-like representations in a way\nthat is sensitive to their syntactic structure and preserves their\nsemantic properties (Fodor 1975).\n\nAs discussed in the previous section, however, using the notion of\nrepresentation in an account of computation involves some\ndifficulties. If computation could be accounted for without appealing\nto representation, those difficulties would be avoided. One way to do\nso is to maintain that computation simply is the manipulation of\nlanguage-like structures via the manipulation of their syntactic\nproperties, leaving semantics by the wayside. The structures being\nmanipulated are assumed to be language-like only in that they have\nsyntactic properties\u2014they need not have any semantics. In this\nsyntactic account of computation, the notion of representation is not\nused at all.\n\nThe semantic account attempts to solve the problem of implementation\nby imposing a semantic restriction on acceptable mappings between\nphysical and computational states; only physical states that count as\n(the right sort of) representations may be mapped onto computational\nstates. In contrast, the syntactic account may be seen as replacing\nthis semantic restriction: only physical states that qualify as\nsyntactic may be mapped onto computational states, thereby qualifying\nas computational states. If a state lacks syntactic structure, it is\nnot computational.\n\nWhat remains to be seen is what counts as a syntactic state. An\nimportant account of syntax in the physical world is due to Stephen\nStich (1983, 150\u2013157). Although Stich does not use the term\n\u201ccomputation,\u201d his account of syntax is aimed at grounding\na syntactic account of mental states and processes. Stich\u2019s syntactic\ntheory of mind is, in turn, his interpretation of the computational\ntheories proposed by cognitive scientists\u2014in competition with\nFodor\u2019s semantic interpretation. Since Stich\u2019s account of syntax is\nultimately aimed at grounding computational theories of cognition,\nStich\u2019s account of syntax also provides an (implicit) syntactic\naccount of computation.\n\nAccording to Stich, roughly speaking, a physical system contains\nsyntactically structured objects when two conditions are satisfied.\nFirst, there is a mapping between the behaviorally relevant physical\nstates of the system and a class of syntactic types, which are\nspecified by a grammar that defines how complex syntactic types can be\nformed out of (finitely many) primitive syntactic types. Second, the\nbehavior of the system is explained by a theory whose generalizations\nare formulated in terms of formal relations between the syntactic\ntypes that map onto the physical states of the system.\n\nThe syntactic account of computation is not very popular. A common\nobjection is that it seems difficult to give an account of primitive\nsyntactic types that does not presuppose a prior semantic\nindividuation of the types (Crane 1990, Jacquette 1991, Bontly 1998).\nIn fact, it is common to make sense of syntax by construing it as a\nway to combine symbols, that is, semantically interpreted\nconstituents. If syntax is construed in this way, it presupposes\nsemantics. If so, the syntactic account of computation collapses into\nthe semantic account.\n\nAnother objection is that language-like syntactic structure is not\nnecessary for computation as it is understood in computer science and\ncomputability theory. Although computing systems surely can manipulate\nlanguage-like structures, they don\u2019t have to. They can also manipulate\nsimple sequences of letters, without losing their identity as\ncomputers. (Computability theorists call any set of words from a\nfinite alphabet a language, but that broad notion of language should\nnot be confused with the narrower notion\u2014inspired by grammars in\nlogic and linguistics\u2014that Stich employs in his syntactic\naccount of computation.)\n2.5 The Mechanistic Account\n\nThe mechanistic account (Piccinini 2007, 2015; cf. Kaplan 2011,\nMilkowski 2013, Fresco 2014, Duwell 2017, Coelho Mollo 2018,\nCurtis-Trudel forthcoming-b) avoids appealing to both syntax and\nsemantics. Instead, it accounts for concrete computation in terms of\nthe mechanistic properties of a system. According to the mechanistic\naccount, concrete computing systems are functional mechanisms of a\nspecial kind\u2014mechanisms that perform concrete computations.\n\nA functional mechanism is a system of organized components, each of\nwhich has functions to perform (cf. Craver 2012, Garson 2013). When\nappropriate components and their functions are appropriately organized\nand functioning properly, their combined activities constitute the\ncapacities of the mechanism. Conversely, when we look for an\nexplanation of the capacities of a mechanism, we decompose the\nmechanism into its components and look for their functions and\norganization. The result is a mechanistic explanation of the\nmechanism\u2019s capacities.\n\nThis notion of mechanism is familiar to biologists and engineers. Both\nexplain capacities of the system in question (e.g., digestion or\nrespiration for the biologist, memory access or multiplication for the\ncomputer engineer) in terms of the functions performed by systems of\norganized components (e.g., the digestive system and the respiratory\nsystem, or the memory system and the processor).\n\nAccording to the mechanistic account, a computation in the generic\nsense is the processing of vehicles according to rules that are\nsensitive to certain vehicle properties and, specifically, to\ndifferences between different portions of the vehicles. The processing\nis performed by a functional mechanism, that is, a mechanism whose\ncomponents are functionally organized to perform the computation.\nThus, if the mechanism malfunctions, a miscomputation occurs.\n\nDigital computation, analog computation, etc. turn out to be species\nof generic computation. They are differentiated by more specific\nproperties of the vehicles being processed. If a computing system\nprocesses strings of discrete states, then it performs a digital\ncomputation. If a computing system processes variables that can be\ncontinuous, then it performs an analog computation (but see Maley,\nforthcoming, for an alternative account). If a computing system\nprocesses qubits, then it performs a quantum computation.\n\nWhen we define concrete computations and the vehicles that they\nmanipulate, we need not consider all of their specific physical\nproperties, but only those properties that are relevant to the\ncomputation, according to the rules that define the computation. A\nphysical system can be described more or less abstractly. According to\nthe mechanistic account, an abstract description of a physical system\nis not a description of an abstract object but rather a description of\na concrete system that omits certain details. Descriptions of concrete\ncomputations and their vehicles are sufficiently abstract as to be\ndefined independently of the physical media that implement them in\nparticular cases. Because of this, concrete computations and their\nvehicles are sometimes said to be \u2018medium-independent\u2019 or\n\u2018substrate neutral\u2019.\n\nIn other words, a vehicle is medium-independent just in case the rules\n(i.e., the input-output maps) that define the relevant computation are\nsensitive only to differences between portions of the vehicles along\nspecific dimensions of variation\u2014they are insensitive to any\nmore concrete physical properties of the vehicles. Put yet another\nway, the rules are functions of state variables associated with a set\nof functionally relevant degrees of freedom, which can be implemented\ndifferently in different physical media. Thus, a given computation can\nbe implemented in multiple physical media (e.g., mechanical,\nelectro-mechanical, electronic, magnetic, etc.), provided that the\nmedia possess a sufficient number of dimensions of variation (or\ndegrees of freedom) that can be appropriately accessed and manipulated\nand that the components of the mechanism are functionally organized in\nthe appropriate way.\n\nLike the semantic and syntactic accounts, the mechanistic account aims\nto avoid pancomputationalism. First, physical systems that are not\nfunctional mechanisms are ruled out. Functional mechanisms are complex\nsystems of components that are organized to perform functions. Any\nsystem whose components are not organized to perform functions is not\na computing system because it is not a functional mechanism. Second,\nmechanisms that lack the function of manipulating medium-independent\nvehicles are ruled out. Finally, medium-independent vehicle\nmanipulators whose manipulations fail to accord with appropriate rules\nare ruled out. The second and third constraints appeal to special\nfunctional properties\u2014manipulating medium-independent vehicles,\ndoing so in accordance with rules defined over the vehicles\u2014that\nare possessed only by relatively few physical systems. According to\nthe mechanistic account, those few systems are the genuine computing\nsystems.\n\nAnother feature of the mechanistic account is that it accounts for the\npossibility of miscomputation\u2014a possibility difficult to make\nsense of under other accounts. To illustrate the point, consider an\nordinary computer programmed to compute function f on input\ni. Suppose that the computer malfunctions and produces an\noutput different from f(i). According to the causal\n(semantic) account, the computer just underwent a causal process (a\nmanipulation of representations), which may be given a computational\ndescription and hence counts as computing some function\ng(i), where g \u2260 f. By contrast,\naccording to the mechanistic account, the computer simply failed to\ncompute, or at least it failed to complete its computation correctly.\nGiven the importance of avoiding miscomputations in the design and use\nof computers, the ability of the mechanistic account to make sense of\nmiscomputation may be an advantage over rival accounts (Dewhurst 2018,\nTucker 2018).\n\nA final feature of the mechanistic account is that it precisely\ndistinguishes and characterizes many different kinds of computing\nsystems based on the specific vehicles they manipulate and their\nspecific mechanistic properties. The mechanistic account has been used\nto explicate digital computation, analog computation, computation by\nneural networks, and other important distinctions such as hardwired\nvs. programmable and serial vs. parallel computation (Piccinini\n2015).\n3. Is Every Physical System Computational?\n\nWhich physical systems perform computations? According to\npancomputationalism, they all do. Even rocks, hurricanes, and\nplanetary systems\u2014contrary to appearances\u2014are computing\nsystems. Although it may seem counterintuitive, this view is quite\npopular among some philosophers and physicists.\n3.1 Varieties of Pancomputationalism\n\nVarieties of pancomputationalism vary along two dimensions. First,\nthey vary with respect to how many computations\u2014all,\nmany, a few, or just one\u2014they attribute to each system. We will\ncall this the quantitative dimension. Second, they vary with\nrespect to why these computations are attributable to physical\nsystems. We will call this the source dimension.\n\nThe weakest version of pancomputationalism along the quantitative\ndimension is that every physical system performs at least one\ncomputation (Scheutz 2001). This version may be called limited\npancomputationalism.\n\nThe strongest version of pancomputationalism is that every physical\nsystem performs every computation\u2014or at least, every\nsufficiently complex system implements a very large number of\nnon-equivalent computations (Putnam 1988, Searle 1992). This may be\ncalled unlimited pancomputationalism.\n\nOne purported source of pancomputationalism is that the computation(s)\na system performs is a matter of relatively free interpretation. If\nthe computation a system performs depends solely or primarily on how\nthe system is interpreted, as opposed to objective fact, then it seems\nthat everything computes because everything may be seen as computing\n(Searle 1992). This may be called interpretivist\npancomputationalism.\n\nAnother purported source of pancomputationalism is that computation is\nsimply the causal or dynamical structure of physical processes, as the\ncausal account of computation (Section 2.2) maintains (Chrisley 1995,\nChalmers 1995, 1996, Scheutz 1999, 2001). Assuming that everything has\ncausal structure, it follows that everything performs the computation\nconstituted by its causal structure. This may be called causal\npancomputationalism.\n\nA third purported source of pancomputationalism results from the idea\nthat every physical state carries information, coupled with an\ninformation-based semantics and a liberal version of the semantic view\nof computation. According to the semantic view of computation,\ncomputation is the manipulation of representations. According to\ninformation-based semantics, a representation is anything that carries\ninformation. Assuming that every physical state carries information,\nit follows that every physical system performs the computations\nconstituted by the manipulation of its information-carrying states\n(cf. Shagrir 2006).\n\nThe final purported source of pancomputationalism is that computation\nitself is the nature of the physical universe. According to some\nphysicists, the physical world is computational at its most\nfundamental level; this is sometimes put in slogan form as the\n\u201cit from bit\u201d view (Wheeler 1989). We will discuss this\nview further in Section 3.4.\n3.2 Unlimited Pancomputationalism\n\nArguments for unlimited pancomputationalism go back to Hinckfuss\u2019s\npail, a putative counterexample to computational\nfunctionalism\u2014the view that the mind is the software of the\nbrain. Hinckfuss\u2019s pail is named after its proponent, Ian Hinckfuss,\nbut was first discussed in print by William Lycan. A pail of water\ncontains a huge number of microscopic processes:\n\nNow is all this activity not complex enough that, simply by chance, it\nmight realize a human program for a brief period (given suitable\ncorrelations between certain micro-events and the requisite input-,\noutput-, and state-symbols of the program)? (Lycan 1981, 39)\n\nHinckfuss\u2019s implied answer to this question is that yes, a pail of\nwater might implement a human program (or any arbitrary computation),\nat least for a short time.\n\nOther authors developed more detailed arguments along the lines of\nHinckfuss\u2019s pail. Searle (1992) explicitly argues that whether a\nphysical system implements a computation depends on how an observer\ninterprets the system; therefore, for any sufficiently complex object\nand for any computation, the object can be described as implementing\nthe computation. The first rigorous argument for unlimited\npancomputationalism is due to Putnam (1988), who argues that every\nordinary open system implements every abstract finite automaton\n(without inputs and outputs).\n\nPutnam considers what is essentially a generalization of the example\nof the rock from Section 2.2, which was an example of a simple finite\nautomaton transitioning through a sequence of computational states\nwithout input or output. An arbitrary physical system that undergoes\n(possibly continuous) physical transitions can be discretized such\nthat its physical states map onto the computational states of an\narbitrary automaton, thus mapping physical state transitions to\ncomputational state transitions. Because the physical system and the\nautomaton are arbitrary, every physical system implements every finite\nautomaton.\n\nThis example does not include inputs and outputs (which are presumably\nnecessary for computational explanations), so Putnam introduces a\nsmall change to allow for automata with inputs and outputs. The idea\nis similar, except one must take into account an isomorphic mapping\nbetween physical states (considered as inputs and outputs) and the\ninputs and outputs of the relevant automaton. This restriction result\nin a weaker conclusion: instead of every physical system\nimplementing every finite automaton, any given physical system\nimplements a countably infinite number of finite automata (namely,\nthose that produce the correct input/output pairs). This is because,\nfor any arbitrary input/output pair <i, o>, there\nare countably infinitely many automata that produce output o\nwhen given input i (see Appendix of Putnam 1988 for\ndetails).\n\nIf unlimited pancomputationalism is correct, then the claim that a\nsystem S performs a certain computation becomes trivially true\nand thus vacuous or nearly so; it fails to distinguish S from\nanything else (or perhaps from anything else with the same inputs and\noutputs). Thus, unlimited pancomputationalism threatens the utility of\nthe computational theory of cognition. If cognition is computation\nsimply because cognitive systems, like everything else, may be seen as\nperforming more or less arbitrary computations over the relevant\ninputs, then it appears that the computational theory of cognition is\nboth trivial and vacuous (though see Schweizer 2019 for an attempt to\nresist this conclusion). By the same token, unlimited\npancomputationalism threatens some of the relevance of theoretical\ncomputer science to physical computation. For example, computational\ncomplexity theory classifies computational systems based on the\ncomplexity of their computations; if any physical system can implement\nany computational system regardless of its computational complexity,\nthose results are immaterial to concrete computations. This threat of\ntrivialization is a major motivation behind responses to the arguments\nfor unlimited pancomputationalism.\n\nNotably, arguments for unlimited pancomputationalism rely either\nimplicitly or explicitly on the simple mapping account of computation.\nThey assume that an arbitrary mapping from a computational description\nC to a physical description of a system is sufficient to\nconclude that the system implements C. In fact, avoiding\nunlimited pancomputationalism is a major motivation for rejecting the\nsimple mapping account of computation. By imposing restrictions on\nwhich mappings are legitimate, other accounts of computation aim to\navoid unlimited pancomputationalism.\n\nIn one response to unlimited pancomputationalism, Copeland (1996)\nargues that the mappings the thesis relies on are illegitimate because\nthey are constructed ex post facto\u2014after the computation is\nalready given. In the case of genuine computation\u2014the kind\nnormally used in science\u2014 the work of generating successive\ndescriptions of a system\u2019s physical dynamics is done by a computer\nrunning an appropriate program (e.g., a weather forecasting program);\nthis is the point of using a computer in the first place. If the\nphysical dynamics were already known\u2014which is required for an ex\npost facto computational description\u2014then using a computer would\nbe unnecessary.\n\nIn addition, both Chalmers (1995, 1996) and Copeland (1996) argue that\nthe mappings invoked by unlimited pancomputationalism violate the\ncounterfactual relations between the computational states, which are\nrequired by the counterfactual mapping account, mentioned above.\nConsider again Putnam\u2019s slice-and-aggregate strategy for generating\nmappings. The mappings are constructed based on an arbitrary dynamical\nevolution of an arbitrary physical system. No attempt is made to\nestablish what would happen to the physical system had conditions been\ndifferent. Chalmers and Copeland argue that this is illegitimate, as a\ngenuine implementation must exhibit the same counterfactual relations\nthat obtain between the computational states. This response lends\nsupport to the counterfactual mapping account of computation.\n\nOther responses to unlimited pancomputationalism point out that\ntransitions between physical states are not causal in nature. The\ncomputational description Putnam relies on maps onto a physical\ndescription such that the computational description does not describe\nthe causal structure of the physical system. According to several\nauthors, non-causal mappings are illegitimate (Chrisley 1995, Chalmers\n1995, 1996, 2011, Scheutz 1999, 2001). This type of response lends\nsupport to the causal mapping account of computation.\n\nYet another response to unlimited pancomputationalism is implicitly\ngiven by Godfrey-Smith (2009). Although Godfrey-Smith is primarily\nconcerned with functionalism rather than computation, his argument is\nstill relevant here. Godfrey-Smith argues that for a mapping to\nconstitute a genuine implementation, the microscopic physical states\nthat are clustered together (to correspond to a given computational\nstate) must be physically similar to one another\u2014there\ncannot be arbitrary groupings of arbitrarily different physical\nstates, as in the arguments for unlimited pancomputationalism.\nGodfrey-Smith suggests that his similarity restriction on legitimate\nmappings may be complemented by the kind of causal and localizational\nrestrictions proposed by Chalmers (1996).\n\nThe remaining accounts of computation\u2014the semantic, syntactic,\nand mechanistic accounts\u2014are even more restrictive than the\ncausal and counterfactual accounts; they impose further constraints on\nacceptable mappings. Therefore, like the causal and counterfactual\naccounts, they have resources for avoiding unlimited\npancomputationalism.\n\nFor example, consider the semantic account, according to which\ncomputation requires representation. If being a representation is an\nobjective property possessed by relatively few things, then unlimited\npancomputationalism is ruled out on the grounds that only the few\nitems that constitute representations are genuine computational\nstates. If everything is representational in the relevant way,\nhowever, then everything is computational (cf. Churchland and\nSejnowski 1992, Shagrir 2006). If, in addition, whether something is a\nrepresentation is a matter of interpretation, then the semantic\naccount of computation gives rise to pancomputationalism insofar as\nthe interpretation of those representations is unrestricted. Similar\nconsiderations apply to the syntactic and mechanistic accounts. For\nsuch accounts to avoid unlimited pancomputationalism, they must not\nrely on unrestricted interpretation.\n3.3 Limited Pancomputationalism\n\nLimited pancomputationalism is much weaker than its unlimited cousin.\nIt holds that every physical system performs one (or relatively few)\ncomputations. Which computations are performed by a given system is\ndeemed to depend on objective properties of that system. In fact,\nseveral authors who have mounted detailed responses to unlimited\npancomputationalism explicitly endorse limited pancomputationalism\n(Chalmers 1996, 331, Scheutz 1999, 191).\n\nUnlike unlimited pancomputationalism, limited pancomputationalism does\nnot turn the claim that something is computational into a vacuous one.\nDifferent systems generally have different objective properties; thus,\naccording to limited pancomputationalism, different systems generally\nperform different computations. Nevertheless, it may seem that limited\npancomputationalism still trivializes the claim that a system is\ncomputational. For according to limited pancomputationalism, digital\ncomputers perform computations in the same sense in which rocks,\nhurricanes, and planetary systems do. This seems at odds with computer\nscience and engineering, as well as the computational theory of\ncognition. If every physical process is a computation, computer\nscience would have to include every physical process in its domain of\ninquiry, and the computational theory of cognition\u2014which was\nmotivated in part by the idea that cognition is distinctively\nexplained by computation\u2014loses much of its explanatory\nforce.\n\nAnother objection to limited pancomputationalism begins with the\nobservation that any moderately complex system satisfies indefinitely\nmany objective computational descriptions (Piccinini 2010). This may\nbe seen by considering computational modeling. A computational model\nof a system may be constructed at higher or lower resolutions. For\nexample, cellular automata models of the dynamics of a galaxy or a\nbrain may be described using different state transition rules,\ndifferent time steps, different numbers of states-per-cell that\nrepresent spatial regions of different sizes, etc. Furthermore, an\nindefinite number of other formalisms, such as TMs, can be used to\ncompute the same functions computed by cellular automata. It appears\nthat limited pancomputationalists are committed to the claim that\ngalaxies or brains perform all these computations at once. But that\ndoes not appear to be the sense in which computers (or brains) perform\ncomputations.\n\nIn the face of these objections, limited pancomputationalists are\nlikely to maintain that the explanatory force of computational\nexplanations does not come from the claim that a system is\ncomputational simpliciter. Rather, explanatory force comes from the\nspecific computations that a system is said to perform. Thus,\nwhile a rock and a digital computer both perform computations, the\nfact that they perform radically different computations explains the\ndifference between them. As to the objection that there are still too\nmany computations performed by each system, limited\npancomputationalists have two main options: either to bite the bullet\nand accept that every system implements indefinitely many\ncomputations, or to find a way to single out, among the many\ncomputational descriptions satisfied by each system, the one that is\nontologically privileged\u2014the one that captures the\ncomputation performed by the system. One way to do this is to\npostulate a fundamental physical level, whose most accurate\ncomputational description identifies the (most fundamental)\ncomputation performed by the system. This response is built into the\nview that the physical world is fundamentally computational (explored\nin the next section).\n\nThose who desire to avoid limited pancomputationalism shift to more\nrestrictive accounts of computation, analogously to how the desire to\navoid unlimited pancomputationalism motivates the shift from the\nsimple mapping account to more restrictive accounts of computation,\nsuch as the causal account. The semantic account may be able to\nrestrict genuine computational descriptions to fewer systems than the\ncausal account, provided that representations\u2014which are needed\nfor computation according to the semantic account\u2014are hard to\ncome by. Mutatis mutandis, the same is true of the syntactic and\nmechanistic accounts.\n3.4 The Universe as a Computing System\n\nSome authors argue that the physical universe is fundamentally\ncomputational. The universe itself is a computing system; therefore,\neverything in it is a computing system too (or a part thereof). Unlike\nthe previous versions of pancomputationalism, which originate in\nphilosophy, this ontic pancomputationalism originates in\nphysics. It includes both an empirical claim and a metaphysical one.\nAlthough the two claims are logically independent, supporters of ontic\npancomputationalism tend to make them both.\n\nThe empirical claim is that all fundamental physical magnitudes and\ntheir state transitions are such as to be exactly described by an\nappropriate computational formalism\u2014without resorting to the\napproximations that are a staple of standard computational modeling.\nThis claim takes different forms depending on which computational\nformalism is taken to describe the universe exactly. The two main\noptions are cellular automata, which are a classical computational\nformalism, and quantum computing, which is non-classical.\n\nThe earliest and best-known version of ontic pancomputationalism is\ndue to Konrad Zuse (1970, 1982) and Edward Fredkin, whose unpublished\nideas on the subject influenced a number of American physicists (e.g.,\nFeynman 1982, Toffoli 1982, Wolfram 2002; see also Wheeler 1982,\nFredkin 1990). According to some of these physicists, the universe\nliterally is a giant cellular automaton. A cellular automaton is a\nlattice of discrete cells; each cell can be in one of finitely many\nstates, and each cell updates its state in discrete steps depending on\nthe state of its neighboring cells. For the universe to be a cellular\nautomaton, all fundamental physical magnitudes must be discrete, i.e.,\nthey must take at most finitely many values. In addition, time and\nspace must be fundamentally discrete or must emerge from the discrete\nprocessing of the cellular automaton. At a fundamental level,\ncontinuity is not a real feature of the world\u2014there are no truly\nreal-valued physical quantities. This flies in the face of most\nmainstream physics, but it is not an obviously false hypothesis. The\nhypothesis is that at a sufficiently small scale, which is currently\nbeyond our observational and experimental reach, (apparent) continuity\ngives way to discreteness. Thus, all values of all fundamental\nvariables, and all state transitions, can be fully and exactly\ncaptured by the states and state transitions of a cellular\nautomaton.\n\nAlthough cellular automata have been shown to describe many aspects of\nfundamental physics, it is difficult to see how to simulate the\nquantum mechanical features of the universe using a classical\nformalism such as cellular automata (Feynman 1982). This concern\nmotivated the development of quantum computing formalisms (Deutsch\n1985, Nielsen and Chuang 2000). Instead of relying on\ndigits\u2014most commonly, binary digits or bits\u2014quantum\ncomputation relies on qudits\u2014most commonly, binary qudits or\nqubits. The main difference between a digit and a qudit is that\nwhereas a digit can take only one out of finitely many states, such as\n0 and 1 (in the case of a bit), a qudit can also take an uncountable\nnumber of states that are a superposition of the basis states in\nvarying degrees, such as superpositions of 0 and 1 (in the case of a\nqubit). Furthermore, unlike a collection of digits, a collection of\nqudits can exhibit quantum entanglement. According to the quantum\nversion of ontic pancomputationalism, the universe is not a classical\ncomputer but a quantum computer\u2014a computer that manipulates\nqubits (Lloyd 2006) or, more generally, qudits.\n\nThe quantum version of ontic pancomputationalism is less radical than\nthe classical version. The classical version eliminates continuity\nfrom the universe, primarily on the grounds that eliminating\ncontinuity allows classical computers to describe the universe exactly\nrather than approximately. Thus, the classical version appears to be\nmotivated not by empirical evidence but by epistemological concerns.\nAlthough there is no direct evidence for classical ontic\npancomputationalism, in principle it is a testable hypothesis (Fredkin\n1990). By contrast, quantum ontic pancomputationalism may be seen as a\nreformulation of quantum mechanics in the language of quantum\ncomputation and quantum information theory (qubits), without changes\nto the empirical content of the theory (e.g., Fuchs 2004, Bub\n2005).\n\nBut ontic pancomputationalists do not limit themselves to making\nempirical claims. They often make an additional metaphysical claim.\nThey claim that computation (or information, in the physical sense\ndescribed in Section 2.3) is what makes up the physical universe. This\npoint is sometimes made by saying that, at the most fundamental\nphysical level, there are brute differences between\nstates\u2014nothing more need or can be said about the nature of the\nstates. This view reverses the traditional conception of the relation\nbetween computation and the physical world.\n\nAccording to the traditional conception, which is presupposed by all\naccounts of computation discussed above, physical computation requires\na physical medium, or substrate. Computation is an aspect of the\norganization and behavior of a physical system; there is no software\nwithout hardware. Thus, according to the traditional conception, if\nthe universe is a cellular automaton, the ultimate constituents of the\nuniverse are the physical cells of the cellular automaton. It is\nlegitimate to ask what kind of physical entity such cells are and how\nthey interact with one another so as to satisfy their cellular\nautomata rules.\n\nBy contrast, according to the metaphysical claim of ontic\npancomputationalism, a physical system is just a system of\ncomputational states. Computation is ontologically prior to physical\nprocesses, as it were. \u201c\u2018Hardware\u2019 [is] made of\n\u2018software\u2019\u201d (Kantor 1982, 526, 534), or\n\u201cit\u201d (the physical) comes from \u201cbit\u201d (the\ncomputational) (Wheeler 1989). According to this non-traditional\nconception, if the universe is a cellular automaton, the cells of the\nautomaton are not concrete, physical structures that causally interact\nwith one another. Rather, they are software\u2014purely\n\u201ccomputational\u201d entities.\n\nSuch a metaphysical claim requires an account of what computation, or\nsoftware, or physical information, is. If computations are not\nconfigurations of physical entities, the most obvious alternative is\nthat computations are abstract, mathematical entities, like numbers\nand sets. As Wheeler (1982, 570) puts it, \u201cthe building element\n[of the universe] is the elementary \u2018yes, no\u2019 quantum\nphenomenon. It is an abstract entity. It is not localized in space and\ntime\u201d. Under this account of computation, the ontological claim\nof ontic pancomputationalism is a version of Pythagoreanism. All is\ncomputation in the same sense in which more traditional versions of\nPythagoreanism maintain that all is number or that all is sets (Quine\n1976).\n\nOntic pancomputationalism may be questioned on both the empirical and\nthe ontological fronts. On the empirical front, there is little\npositive evidence to support ontic pancomputationalism. Supporters\nappear to be motivated by the desire for exact computational models of\nthe world rather than empirical evidence that the models are correct.\nEven someone who shares this desire may well question why we should\nexpect nature to fulfill it. On the metaphysical front, Pythagoreanism\nfaces the objection that the abstract entities it puts at the\nfundamental physical level lack the causal and qualitative properties\nthat we observe in the physical world\u2014or at least, it is\ndifficult to understand how abstract entities could give rise to\nphysical qualities and their causal powers (e.g., Martin 1997).\n4. Physical Computability\n\nAccording to the Church-Turing thesis (CTT), any function that is\nintuitively computable is computable by some TM (i.e.,\nTuring-computable). Alternatively, CTT may be formulated as the thesis\nthat any function \u201cnaturally regarded as computable\u201d\n(Turing 1936\u20137, 135) is Turing-computable. The phrases\n\u201cintuitively computable\u201d and \u201cnaturally regarded as\ncomputable\u201d are somewhat ambiguous. When they are disambiguated,\nCTT takes different forms.\n\nIn one sense, \u201cintuitively computable\u201d means computable by\nfollowing an algorithm or effective procedure. An effective procedure\nis a finite list of clear instructions for generating new symbolic\nstructures out of old symbolic structures; an example would be\ndividing two numbers according to the long division algorithm, using\nonly paper and pencil. When CTT is interpreted in terms of effective\nprocedures, it may be called Mathematical CTT, because the\nrelevant evidence is more logical or mathematical than physical.\nMathematical CTT says that any function computable by an effective\nprocedure is Turing-computable.\n\nThere is compelling evidence for Mathematical CTT (Kleene 1952,\n\u00a762, \u00a767; cf. also Sieg 2006):\n\nThere are no known counterexamples.\nDiagonalization over Turing machines, contrary to what may be\nexpected, does not yield a function that is not\nTuring-computable.\nThe argument from confluence: all the formalisms proposed to\ncapture the intuitive notion of computability by effective\nprocedure\u2014formalisms such as general recursiveness (G\u00f6del\n1934), \u03bb-definability (Church 1932, Kleene 1935),\nTuring-computability (Turing 1936-7), and reckonability (G\u00f6del\n1936)\u2014turn out to capture the same class of functions.\nA Turing machine seems capable of reproducing any operation that a\nhuman being can perform while following an effective procedure (Turing\n1936\u20137\u2019s main argument for CTT).\n\n\nIn another sense, \u201cintuitively computable\u201d means\ncomputable by physical means. When CTT is so interpreted, it may be\ncalled Physical CTT (following Pitowsky 1990), because the\nrelevant evidence is more physical than logical or mathematical.\n4.1 The Physical Church-Turing Thesis: Bold\n\nPhysical CTT is often formulated in very strong forms. To a first\napproximation, Bold Physical CTT holds that any physical\nprocess\u2014anything doable by a physical system\u2014is\ncomputable by some TM.\n\nBold Physical CTT can be made more precise in a number of ways. Here\nis a representative sample, followed by references to where they are\ndiscussed:\n\nAny physical process can be simulated by some TM (e.g., Deutsch\n1985, Wolfram 1985, Pitowsky 2002).\nIf a physical system can be modeled by a certain kind of idealized\ncomputing machine that manipulates real-valued quantities, then that\nphysical system can only compute Turing-computable functions on\ndenumerable domains (Blum et al. 1989 show this to be false).\nAny system of equations describing a physical system gives rise to\ncomputable solutions (cf. Earman 1986, Pour-El 1999). A solution is\nsaid to be computable just in case, given computable real numbers as\ninitial conditions, it returns computable real numbers as values\n(where, following Turing, a real number is said to be computable just\nin case there is a TM whose output produces any desired number of\ndigits of that number).\nFor any physical system S and observable W, there is a\nTuring-computable function f: N\n\u2192 N such that for all times t\n\u2208 N, f(t) = W(t) (Pitowsky 1990).\n\n\nThesis (A) is ambiguous between two notions of simulation. In one\nsense, simulation is the process by which a digital computing system\n(such as a TM) computes the same function as another digital computing\nsystem. This is the sense in which universal TMs can simulate any\nother TM. If (A) is interpreted using this first notion of simulation,\nit entails that everything in the universe is a digital computing\nsystem. This is (a variant of) ontic pancomputationalism (Section\n3.4).\n\nIn another sense, simulation is the process by which the output of a\ndigital computing system represents an approximate description of the\ndynamical evolution of another system. This is the sense in which\ncomputational models of the weather simulate the weather. If (A) is\ninterpreted using this second notion of simulation, then (A) is true\nonly if we do not care how close our computational approximations are.\nIf we want close computational approximations\u2014as we usually\ndo\u2014then (A) turns into the claim that any physical process can\nbe computationally approximated to the degree of accuracy that is\ndesired in any given case. Whether that is true varies from case to\ncase depending on the dynamical properties of the system, how much is\nknown about them, what idealizations and simplifications are adopted\nin the model, what numerical methods are used in the computation, and\nhow many computational resources (such as time, processing speed, and\nmemory) are available (Piccinini 2015, Chap 4).\n\nThesis (B) is straightforwardly and radically false, as shown by Blum\net al. (1989). Blum et al. set up a mathematical theory\nof computation over real-valued quantities, which they see as a\nfruitful extension of ordinary computability theory. Within such a\ntheory, they define idealized \u201ccomputing\u201d machines that\nperform addition, subtraction, multiplication, division, and equality\ntesting as primitive operations on arbitrary real-valued quantities.\nThey easily prove that such machines can compute all sets defined over\ndenumerable domains by encoding their characteristic function as a\nreal-valued constant (ibid., 405). Although they do not discuss this\nresult as a refutation of Physical CTT, their work is often cited in\ndiscussions of physical computability and Physical CTT.\n\nTheses (C) and (D) have interesting counterexamples that are\nconsistent with some physical theories (cf. below and Pour-El 1999).\nThese theoretical counterexamples may or may not occur in our concrete\nphysical universe.\n\nEach of (A)\u2013(D) raises important questions pertaining to the\nfoundations of computer science, physics, and mathematics. It is not\nclear, however, that any of these theses bears an interesting analogy\nto Mathematical CTT. Below are two reasons why.\n\nFirst, (A)\u2013(D) are falsified by processes that cannot be built\nand used as computing devices. The most obvious example is (B). Blum\net al.\u2019s result is equivalent to demonstrating that all\nfunctions over denumerable domains\u2014including the uncountably\nmany functions that are not Turing-computable\u2014are computable by\nBlum et al.\u2019s \u201ccomputing\u201d systems, which are\nallowed to manipulate the exact values of arbitrary real numbers.\nHence, (B) is radically false. But at the same time, this result has\nno direct practical applications, as there is no evidence that\nconcrete physical systems can manipulate arbitrary real-valued\nquantities in the way that Blum et al.\u2019s systems do.\n\nMore generally, formulations (A)\u2013(D) would be falsified by a\nsequence generated by a random (i.e., nondeterministic) physical\nprocess. According to quantum mechanics, some physical\nprocesses\u2014such as atom decay\u2014contain an objectively random\nelement. Hidden variable interpretations dispute this, but the\npossibility of genuine randomness is sufficiently plausible that it\nshould be taken into account.\n\nConsider a random process that produces discrete outputs over an\ninfinite period of time, e.g., the decay of atoms from a radioactive\nsample. Its output at regular time intervals is a string of\ndigits\u2014\u20180\u2019 if no atoms decay during a time interval,\n\u20181\u2019 if one or more atoms decay during a time interval. A\nsimple consideration shows that, with probability one, the sequence\nproduced by our random process is not Turing-computable. There are\nuncountably many infinite strings of digits (even more strongly, there\nare uncountably many infinite strings of digits with any given\nlimiting frequency of \u20180\u2019s and \u20181\u2019s). But there are only\ncountably many Turing-computable infinite strings. Therefore, assuming\nthat each infinite string has the same probability of occurring as a\nresult of a random process, the probability that a random process\nwould generate a Turing-computable string of digits is zero, whereas\nthe probability that the string of digits is not Turing-computable is\none (for the stronger conclusion that no such string of digits is\nTuring-computable, see Calude & Svozil 2008). Thus, simply by\nusing a truly random process to generate a string, we would have the\nphysical means to go beyond what is Turing-computable. As Turing\n(1950, 438\u2013439) pointed out, a machine with a \u201crandom\nelement\u201d can do \u201cmore\u201d than a TM. But doing\nmore is not the same as computing more. Contrary to what is\nsometimes suggested (e.g., Calude 2005, 10), the combination of a TM\nand a random process does not threaten Physical CTT.\n\nRandom processes should not count as computations: unlike\ncomputations properly so called, the values of random processes\ncannot, by definition, be the output of a function. Random processes\ncan be exploited by a computation, of course\u2014there are\nimportant computational techniques that rely on random or\npseudo-random choices at some stages of a computation. If some quantum\nrandom sequences were random in the sense of algorithmic information\ntheory, they may even raise the probability of obtaining correct\nsolutions from computational techniques that rely on random choices\n(Calude 2005, 10). But no computational technique can amount to a mere\nsequence of random choices. So, any thesis, such as Bold Physical CTT,\nthat would be falsified by a sequence generated by a random process is\ntoo strong to capture the notion of physical\ncomputability\u2014the physical analogue of algorithmic\ncomputability. Thus, contrary to what some authors seem to assume,\nBold Physical CTT is too strong to be a physical analogue of\nMathematical CTT.\n\nAnother feature that theses (A)\u2013(D) have in common is that they\nappeal quite freely to arbitrary real-valued quantities. This is\nexplicit in (B). To see why they all appeal to arbitrary real-valued\nquantities, consider that most physical theories assume that many\nphysical magnitudes, including time, can take arbitrary real numbers\nas values. Hence, systems of physical equations, whose simulations,\nsolutions, or observables are appealed to, respectively, by (A), (C),\nand (D), involve arbitrary real numbers. Therefore, all formulations\nof Bold Physical CTT involve, explicitly or implicitly, arbitrary real\nnumbers.\n\nThe expressive power of real numbers may be used to generate a simple\nrecipe to obtain the values of a Turing-uncomputable function.\nConsider that the digital expansion of a real number contains\ncountably many digits. Hence, for any characteristic function (i.e., a\nfunction whose values are \u20180\u2019 or \u20181\u2019) defined\nover a countable domain, including all Turing-uncomputable such\nfunctions, there is a real number whose binary expansion encodes its\nvalues. This is because for all values of a characteristic function,\nthe nth value of the function may be defined to be\nthe nth digit of the binary expansion of a real\nnumber.\n\nSuppose you wish to know the value of a specific Turing-uncomputable\ncharacteristic function, such as the halting function for TMs, for its\nnth argument. Take the real number r whose\ndigital expansion encodes the values of the halting function. Then,\nobtain the value of the nth digit in the binary\nexpansion of r and you have the result you desire. If you can\ndo this, you may obtain any value of any characteristic function\ndefined over strings, including all Turing-uncomputable such\nfunctions.\n\nThe above recipe, if feasible, is a trivial consequence of the\nexpressive power of real numbers. Yet it is discussed in the\nliterature as an example of perhaps possible physical computation\nbeyond the power of TMs (e.g., Copeland 2000)\u2014something that\nwould falsify Physical CTT. There is no reason to believe such a\nrecipe can be implemented, because it requires either the measurement\nor the preparation of a Turing-uncomputable real-valued quantities\nwith unbounded precision. There is no evidence that either is\ndoable.\n\nBy relying quite freely on arbitrary real-valued quantities, many\nversions of Bold Physical CTT make themselves vulnerable to\nfalsification by relatively trivial (though presumably unfeasible)\nrecipes such as the one just mentioned. This casts doubt on the\nassumption\u2014made by some who seek ways to falsify Bold Physical\nCTT\u2014that Bold Physical CTT is actually an interesting physical\nanalogue of Mathematical CTT.\n\n(The point just made does not impugn analog computation in the\nstandard sense of Pour-El (1974). Analog computation does not\nmanipulate exact values of arbitrary real-valued quantities but rather\ncontinuous variables. Although the continuous variables used in\nmost analog computations may be assumed to take any real value within\na relevant interval, concrete analog computation requires only the\nmanipulation and measurement of real variables within some\ndegree of approximation. So, analog computation does not falsify Bold\nPhysical CTT (cf. Rubel 1989).)\n\nSimilar doubts about the alleged analogy between Mathematical CTT and\nBold Physical CTT may be generated by a related observation. Many\ncurrent physical theories assume that nature contains real-valued\nquantities that vary along a continuum. These may include the velocity\nof objects, the coordinates that define the position of their center\nof gravity in the spacetime manifold, and more. If these physical\ntheories are correct, then many properties of many entities take\narbitrary real numbers as their values. And most real numbers in any\ncontinuous interval are Turing-uncomputable (i.e. there are only\ncountably many computable numbers, but any continuous interval\ncontains uncountably many real numbers). Thus, the probability is zero\nthat an arbitrary real-valued quantity is computable. Hence, if our\nphysical theories are correct, most transformations of the relevant\nphysical properties are transformations of Turing-uncomputable\nquantities into one another.\n\nFor instance, an object\u2019s change of speed, or even its simple change\nof spatial location, may be transformations of one Turing-uncomputable\nreal-valued quantity into another. A transformation of one\nTuring-uncomputable value into another Turing-uncomputable value is a\nTuring-uncomputable operation\u2014if nothing else, because no TM can\nwrite down the input and output of such an operation. On this picture,\nthe physical world is chock-full of operations that outstrip the power\nof TMs, thus Bold Physical CTT is falsified.\n\nThere is no reason to believe that we can use the Turing-uncomputable\noperations just mentioned to compute in the epistemological\nsense that motivates our interest in computation in the first\nplace\u2014to solve problems, to generate the values of desired\nfunctions for desired arguments, to understand certain physical\nsystems, and so on. In other words, the operations in question should\nnot count as computations. Bold Physical CTT, which is threatened by\nsuch operations, is not interestingly analogous to Mathematical\nCTT.\n\nTo conclude our discussion of Bold Physical CTT, it may be helpful to\ndistinguish the issue of physical computability proper\u2014the issue\nthat pertains to the physical analogue of Mathematical CTT\u2014from\nother issues that connect computability and physics. Many questions\nabout the relationship between physical processes and computability\ndeserve to be asked. What are the physically computable functions?\nThis is the question that should motivate Physical CTT. What can be\ncomputationally approximated to what degree under what circumstances?\nThis is presumably what (A) is after. As important and interesting as\nthis question is, it is different from the question of what can be\nphysically computed. Yet other questions motivate theses (B)-(D) above\nas well as other versions of Bold Physical CTT to be found in the\nliterature. Many of these questions are interesting and deserve to be\ninvestigated. Nevertheless, they do not properly belong in discussions\nof CTT, because they are different from the computability question\nthat motivates CTT in the first place.\n4.2 The Physical Church-Turing Thesis: Modest\n\nIn the literature on computation in physical systems, there is growing\nconcern that a physical analogue of Mathematical CTT should include\nonly usable physical processes (e.g., N\u00e9meti and\nD\u00e1vid 2006; Ord 2006, Smith 2006a, Beggs and Tucker 2007).\nGiven this concern, an adequate version of Physical CTT ought to be\nmore modest than Bold Physical CTT.\n\nModest Physical CTT is thus formulated in terms of what can be\nphysically computed\u2014more precisely, which functions over a\ndenumerable domain can be physically computed. Prototypical examples\nof physical computation are the processes of ordinary digital\ncomputers and their components, including digital circuits. These\nprocesses can be exhaustively described by effective procedures, which\nare already covered by Mathematical CTT, plus relatively\nuncontroversial mappings between physical states and computational\nstates. Mathematical CTT says that any function computable by an\neffective procedure is computable by a TM. As TMs can be physically\nimplemented (or replaced by a computing human), any process that\nfollows an effective procedure is physically computable.\n\nBut physical computation in the present sense is a broader notion than\ncomputation by effective procedure. A process may count as a physical\ncomputation even if there is no effective procedure for describing the\nprocess, perhaps because there are no finite instantaneous\ndescriptions of the internal states that constitute the process or no\nway to finitely and exactly specify the transition from one\ninstantaneous description to the next. Thus, Modest Physical CTT is\nstronger than Mathematical CTT.\n\nGandy (1980) was one of the first to discuss a version of Modest\nPhysical CTT, arguing that mechanisms with discrete components and\nreasonable physical limitations (a lower bound on the size of\ncomponents, and an upper bound on the speed of their kinematics) can\nonly physically compute Turing-computable functions. However, Modest\nPhysical CTT need not be limited in these ways. In addition to\nphysical processes that follow effective procedures, Modest Physical\nCTT may cover continuous dynamical processes (as in certain kinds of\nneural networks), processes that span large portions of spacetime, and\nquantum processes (as in quantum computing). But physical computation\ndoes not include all physical processes.\n\nIn accordance with this proposal, Modest Physical CTT holds\nthat any function (of a denumerable domain) that is physically\ncomputable is Turing-computable.\n\nFor a process to count as a physical computation, and hence for it to\nbe relevant to Modest Physical CTT, it must be usable by an observer\nto generate the desired values of an independently specified function.\nThis requirement may be spelled out in terms of a number of\nconstraints (Piccinini 2015, Chaps 15 and 16). This list is not\nintended to be exhaustive:\n\nReadable inputs and outputs. The process must take inputs and\nyield outputs that observers can read without error, so that observers\ncan use the outputs as solutions to problems or values of functions\ndefined over the inputs. For that to be possible, presumably the\ninputs and outputs need to be reducible to strings of discrete states,\nlike the inputs and outputs of ordinary digital computers.\nProcess-independent rule. There must be a fixed rule or\nmap\u2014specifiable independently of the physical process\u2014that\nlinks the outputs to the inputs. By defining the problem to be solved\nby the process, this rule tells the user what she is going to learn by\nrunning the process. Since the rule defines a physical computation in\ngeneral, the rule need not be recursive. For instance, it may be the\nrule that defines the halting problem for TMs. But like all recursive\nrules, the rule must be the same for all inputs that belong in the\nsame problem; it cannot change from one input to the next.\nRepeatability. The process must be repeatable, at least in\nprinciple, so as to allow users to obtain the same results multiple\ntimes and to check a computation by repeating it.\nSettability. The system undergoing the process must be settable,\nso that a user can choose which argument of a function the system\ncomputes and set the system to compute the relevant value of the\nfunction.\nPhysical constructibility. The system must be physically\nconstructible.\nReliability. The system must not break down before the process is\ncompleted.\n\n\nIn summary, Modest Physical CTT asserts that every function that can\nbe physically computed, i.e., every usable transformation of input\nstrings into output strings in accordance with a process-independent\nrule defined over the strings, is Turing-computable.\n\nSince Modest Physical CTT is restricted by epistemologically relevant\ncriteria, it doesn\u2019t raise the worries associated with Bold Physical\nCTT\u2014namely, that it\u2019s too easy to falsify and irrelevant to the\nnotion of computability that motivates CTT. And there are good reasons\nto believe Modest Physical CTT. All computing mechanisms that have\nbeen physically built or are in the process of being built to compute\nfunctions of a denumerable domain compute only functions that are\nTuring-computable.\n\nIt is important to understand the exact scope of Modest Physical CTT.\nModest Physical CTT does not entail that every physical process is a\ncomputation, or that every physical system is a computing system. It\nonly says that if something physical computes functions of a\ndenumerable domain, then the functions it computes are\nTuring-computable.\n\nTo fully assess Modest Physical CTT, we should consider whether it is\npossible to build a machine that, like an ordinary digital computer,\ncan be used by human observers, but, unlike an ordinary digital\ncomputer, generates the values of functions that are\nTuring-uncomputable. In recent years, several designs for\nhypercomputation have been proposed. Hypercomputation is the\ncomputation of Turing-uncomputable functions. If hypercomputation\nturned out to be physically possible, it would refute Modest Physical\nCTT.\n4.3 Hypercomputation\n\nTo a first approximation, a hypercomputer is a system that yields the\nvalues of a function that is not Turing-computable. If what counts as\nyielding the values of a function is left unspecified, any of the\nsystems discussed in Section 4.1, such as genuinely random processes\nand systems that manipulate arbitrary real-valued quantities, would\ncount as hypercomputers. But in discussing Bold Physical CTT, we saw\nthat yielding the values of a function that is Turing-uncomputable,\nwithout further constraints, is not enough for genuine physical\ncomputation.\n\nBy analogy with the distinction between Bold Physical CTT and Modest\nPhysical CTT, let us distinguish between a weak and a strong notion of\nhypercomputation by distinguishing usable hypercomputers from unusable\nhypercomputational processes.\n\nAn unusable hypercomputational process is a physical process\nthat fails to satisfy at least one of the first four constraints on\nphysical computation. Examples include processes whose inputs or\noutputs are arbitrary real-valued quantities (which cannot be read\nwith infinite precision) and genuine random processes (which have no\nrule characterizing the inputs and outputs independently of the\nprocess and are neither repeatable nor settable). These processes are\nnot usable because an observer cannot obtain from them arbitrary\nvalues of an independently defined function on a chosen input, as\nordinary computing systems can (given enough time and space). Since\nthey are not usable, unusable hypercomputational processes are\nirrelevant to Modest Physical CTT.\n\nA usable hypercomputer is a physical system that satisfies at\nleast the first four constraints on physical computation. It has\nreadable inputs and outputs, there is a rule characterizing its\ninput-output properties that may be defined independently of the\nprocess itself, and its processes are repeatable and settable. If a\nsystem does not satisfy one of these conditions, it does not count as\ncomputing in the sense relevant to Modest Physical CTT.\n\nA system that satisfies these conditions\u2014a usable\nhypercomputer\u2014may be purely notional. For instance, infinitely\naccelerating TMs (Copeland 2002) are TMs that perform each\ncomputational operation in half the time as their previous operation.\nAs a consequence, infinitely accelerating TMs complete an infinite\nnumber of operations (a supertask) within twice the time it\ntakes them to perform their first operation. This allows infinitely\naccelerating TMs to compute functions, such as the halting function,\nthat are Turing-uncomputable. But infinitely accelerating TMs are\nusually discussed as notional entities, without evidence that they can\nbe constructed. Purely notional systems, of course, do not falsify\nModest Physical CTT. To do that, a system must satisfy at least the\nfifth and sixth constraints on physical computation: it must be\nphysically constructible, and it must operate reliably.\n\nOne way to construct something like an infinitely accelerating TM\nwould be to make a computing machine that, after performing some\ncomputational operations, builds a smaller and faster copy of itself\n(Davies 2001). The smaller and faster copy will also perform some\noperations and then build a faster and smaller copy, and so on. Given\nappropriate assumptions, the resulting series of infinitely shrinking\nmachines will be able to complete an infinite number of computational\noperations within a finite time, thereby surpassing the power of TMs.\nWhile infinitely shrinking machines appear to be consistent with\nNewtonian mechanics, Davies (2001, 672) points out that the atomic and\nquantum mechanical nature of matter in our universe makes infinitely\nshrinking machines physically impossible.\n\nNeural networks have sometimes been discussed as computing systems\nthat may go beyond Turing-computability (e.g., Smolensky 1988). If we\nrestrict our attention to classes of neural networks that contain all\nsystems with current or foreseeable practical applications, this\nopinion is unwarranted. There is now a considerable literature on the\ncomputational and complexity properties of large classes of neural\nnetworks. The most relevant systems have digital inputs and outputs\n(so as to satisfy our first constraint on physical computation) but\nmay have, and typically do have, non-digital internal processes (i.e.,\ntheir internal processes are not discrete step-by-step manipulations\nof strings of digits). The main results are the following: (i)\nfeedforward networks with finitely many processing units are\ncomputationally equivalent to Boolean circuits with finitely many\ngates; (ii) recurrent networks with finitely many units are equivalent\nto finite state automata; (iii) networks with unbounded tapes or an\nunbounded number of units are equivalent to TMs (\u0160\u00edma\n& Orponen 2003).\n\nNeural networks more powerful than TMs may be defined, however, by\nexploiting once again the expressive power of real numbers. The best\nknown networks of this kind are Analog Recurrent Neural Networks\n(ARNNs) (Siegelmann 1999). ARNNs should not be confused with analog\ncomputers in the traditional sense (Pour-El 1974, Rubel 1993, Mills\n2008). Whereas analog computers manipulate real variables without\nrelying on the exact value of arbitrary real-valued quantities, ARNNs\nmanipulate strings of digits by (possibly) relying on the exact value\nof arbitrary real-valued quantities. Specifically, the weights\nconnecting individual processing units within ARNNs can take exact\nvalues of arbitrary real numbers, including values that are\nTuring-uncomputable, and such exact values are exploited in the\ncomputation. When their weights are Turing-uncomputable, ARNNs can go\nbeyond the power of Turing-machines: they compute any function over\nbinary strings. ARNNs more powerful than TMs cannot operated reliably,\nbecause they require unboundedly precise weights. In addition, the\nrequired weights are Turing-uncomputable, so constructing ARRNs more\npowerful than TMs requires already possessing the ability to perform\nhypercomputations (Davis 2004, Schonbein 2005, Siegelmann 1999,\n148).\n\nPerhaps the best-known proposal for a hypercomputer is due to Mark\nHogarth (1994, 2004), who developed an idea of Itamar Pitowsky (1990).\nRelativistic hypercomputers exploit the properties of a special kind\nof spacetime called Malament-Hogarth spacetime, which is physically\npossible in the sense of constituting a solution to Einstein\u2019s field\nequations for General Relativity. Malament-Hogarth spacetimes contain\nregions with an infinite time-like trajectory \u03bb that can be\ncircumvented by a finite time-like trajectory \u03b3. In other words,\n\u03bb and \u03b3 have a common origin, and there is a spacetime\npoint p on \u03b3 such that \u03bb, even though it is\ninfinite, lies entirely in p\u2019s chronological past. If an\nobserver launches a TM along \u03bb and then travels along \u03b3\nshe may, within finite time, find herself in the future of an\ninfinitely long computation performed by the TM. If the TM is able to\nsend signals to the observer, the observer would be able to know the\noutcome of a potentially infinitely long computation, thereby having\ncomputational means more powerful than (ordinary) TMs. For instance,\nan observer may be able to obtain the results of an arbitrary instance\nof the halting function for TMs.\n\nConstructing and using a relativistic hypercomputer is challenging.\nThe first question is whether our spacetime is Malament-Hogarth. The\nanswer is currently unknown. Even if our spacetime is not\nMalament-Hogarth globally, it might still contain regions that have\nthe Malament-Hogarth property locally. An example of such a region is\na huge, rotating black hole; there is evidence that our universe\ncontains such black holes (Etesi and N\u00e9meti 2002). But even if\nthere are Malament-Hogarth regions in our universe, there remain\nconsiderable obstacles. For starters, (i) the huge, rotating black\nhole that is closest to us is probably out of our reach as well as our\ndescendants\u2019 reach, (ii) completing an infinite computation requires\nan unbounded memory, which might require an unbounded amount of\nmatter, and (iii) a machine that requires an unbounded amount of\nmatter running for an infinite amount of time will malfunction with\nprobability 1, rendering it useless (Button, 2009, 779). The latter\nchallenge might be addressable by employing multiple self-reproducing\nand self-correcting machines that check one another\u2019s\ncomputations instead of a single machine (Andr\u00e9ka et al. 2018),\nalthough that seems to exacerbate the need for unbounded resources\n(see also N\u00e9meti and D\u00e1vid 2006, Andr\u00e9ka,\nN\u00e9meti, and N\u00e9meti 2009).\n\nQuantum computing has also been invoked as a possible source of\nhypercomputation. Quantum computing is the manipulation of qubits (and\nmore generally, qudits) in accordance with the laws of quantum\nmechanics. Qubits are variables that, like bits, can be prepared or\nmeasured in one or two states, 0 and 1. Unlike bits, qubits can (i)\ntake states that are a superposition of 0 and 1 and (ii) become\nentangled with each other during a computation. A surprising feature\nof quantum computing is that it allows computing certain functions\nmuch faster than any known classical computation (Shor 1994). But\nwhile mainstream quantum computing may be more efficient than\nclassical computing, it does not allow computing any functions beyond\nthose computable by TMs.\n\nSome authors have questioned whether the mainstream quantum computing\nparadigm is general enough and, if not, whether some aspects of\nquantum mechanics may be exploited to design a quantum hypercomputer\n(Nielsen 1997, Calude and Pavlov 2002). The most prominent proposal\nfor a quantum hypercomputer is due to Tien Kieu (2002, 2003, 2004,\n2005). He argues that an appropriately constructed quantum system can\ndecide whether an arbitrary Diophantine equation has an integral\nsolution\u2014a problem which is known to be unsolvable by TMs.\nKieu\u2019s method involves encoding a specific instance of the problem in\nan appropriate Hamiltonian, which represents the total energy of a\nquantum system. Kieu shows that such a system can dynamically evolve\nover time into an energy ground state that encodes the desired\nsolution. Unfortunately, Kieu\u2019s scheme does not appear to be workable.\nFor one thing, it requires infinite precision in setting up and\nmaintaining the system (Hodges 2005). For another, Kieu does not\nprovide a successful criterion for knowing when the system has\nevolved into the solution state, and the problem of determining when\nthe solution state is reached is Turing-uncomputable (Smith 2006b,\nHagar and Korolev 2007). Thus, operating Kieu\u2019s proposed hypercomputer\nwould require already possessing hypercomputational powers.\n\nIn conclusion, the candidate hypercomputers proposed so far have not\nbeen shown to be physically constructible and reliable. For the time\nbeing, Modest Physical CTT remains plausible. It may well be that, for\nall practical purposes, any function that is physically computable is\nTuring-computable.\n",
    "bibliography": {
        "categories": [],
        "cat_ref_text": {
            "ref_list": [
                "Andr\u00e9ka, H., N\u00e9meti, I., and P. N\u00e9meti, 2009,\n\u201cGeneral Relativistic Hypercomputing and Foundation of\nMathematics,\u201d <em>Natural Computing</em>, 8(3):\n499\u2013516.",
                "Andr\u00e9ka, H., Madar\u00e1sz, J. X., N\u00e9meti, I.,\nN\u00e9meti, P. and Sz\u00e9kely, G., 2018, \u201cRelativistic\ncomputation,\u201d in Cuffaro and Fletcher (eds.) 2018.",
                "Beggs, E. J., and J.V. Tucker, 2007, \u201cCan Newtonian Systems,\nBounded in Space, Time, Mass and Energy Compute all Functions?\u201d\n<em>Theoretical Computer Science</em>, 371(1\u20132):\n4\u201319.",
                "Block, N., 1978, \u201cTroubles with Functionalism,\u201d in\n<em>Perception and Cognition: Issues in the Foundations of\nPsychology</em>, C. W. Savage (ed.), Minneapolis, University of\nMinnesota Press, pp. 261\u2013325.",
                "Blum, L., Cucker F., Shub M., and S. Smale, 1998, <em>Complexity\nand Real Computation</em>, New York: Springer.",
                "Bontly, T., 1998, \u201cIndividualism and the Nature of Syntactic\nStates,\u201d <em>British Journal for the Philosophy of Science</em>,\n49(4): 557\u2013574.",
                "Bub, J., 2005, \u201cQuantum Mechanics is About Quantum\nInformation,\u201d <em>Foundations of Physics</em>, 35(4):\n541\u2013560.",
                "Burge, T., 1986, \u201cIndividualism and Psychology,\u201d\n<em>Philosophical Review</em>, 45: 3\u201345.",
                "Button, T., 2009, \u201cSAD Computers and Two Versions of the\nChurch-Turing Thesis,\u201d <em>British Journal for the Philosophy of\nScience</em>, 60(4): 765\u2013792.",
                "Calude, C. S., 2005, \u201cAlgorithmic Randomness, Quantum\nPhysics, and Incompleteness,\u201d in <em>Proceedings of the\nConference \u201cMachines, Computations and Universality\u201d (MCU\n2004)</em>, M. Margenstern (ed.), Berlin: Springer, pp.\n1\u201317.",
                "Calude, C. S., and B. Pavlov, 2002, \u201cCoins, Quantum\nMeasurements, and Turing\u2019s Barrier,\u201d <em>Quantum Information\nProcessing</em>, 1(1\u20132): 107\u2013127.",
                "Calude, C. S., and K. Svozil, 2008, \u201cQuantum Randomness and\nValue Indefiniteness,\u201d <em>Advanced Science Letters</em>, 1(2):\n165\u2013168.",
                "Campbell, D. I., and Yang, Y., 2021, \u201cDoes the solar system\ncompute the laws of motion?\u201d <em>Synthese</em>, 198:\n3203\u20133220.",
                "Chalmers, D. J., 1995, \u201cOn Implementing a\nComputation,\u201d <em>Minds and Machines</em>, 4:\n391\u2013402.",
                "\u2013\u2013\u2013, 1996, \u201cDoes a Rock Implement Every\nFinite-State Automaton?\u201d <em>Synthese</em>, 108: 310-333.",
                "\u2013\u2013\u2013, 2011, \u201cA Computational Foundation for\nthe Study of Cognition,\u201d <em>Journal of Cognitive Science</em>,\n12(4): 323\u201357.",
                "Chrisley, R. L., 1995, \u201cWhy Everything Doesn\u2019t Realize Every\nComputation,\u201d <em>Minds and Machines</em>, 4:\n403\u2013430.",
                "Church, A., 1932, \u201cA Set of Postulates for the Foundation of\nLogic,\u201d <em>Annals of Mathematics</em>, 33: 346\u2013366.",
                "\u2013\u2013\u2013, 1936, \u201cAn Unsolvable Problem in\nElementary Number Theory,\u201d <em>The American Journal of\nMathematics</em>, 58: 345\u2013363.",
                "Churchland, P. S., and T. J. Sejnowski, 1992, <em>The\nComputational Brain</em>, Cambridge, MA: MIT Press.",
                "Coelho Mollo, D., 2018, \u201cFunctional Individuation,\nMechanistic Implementation: The Proper Way of Seeing the Mechanistic\nView of Concrete Computation,\u201d <em>Synthese</em>, 195(8):\n3477\u201397.",
                "Copeland, B. J., 1996, \u201cWhat is Computation?\u201d\n<em>Synthese</em>, 108(3): 335\u2013359.",
                "\u2013\u2013\u2013, 2000, \u201cNarrow Versus Wide Mechanism:\nIncluding a Re-Examination of Turing\u2019s Views on the Mind-Machine\nIssue.\u201d <em>The Journal of Philosophy</em>, XCVI(1):\n5\u201333.",
                "\u2013\u2013\u2013, 2002, \u201cAccelerating Turing\nMachines,\u201d <em>Minds and Machines</em>, 12(2):\n281\u2013301.",
                "Crane, T., 1990, \u201cThe Language of Thought: No Syntax Without\nSemantics,\u201d <em>Mind and Language</em>, 5(3):\n187\u2013212.",
                "Craver, C. F., 2012, \u201cFunctions and Mechanisms: A\nPerspectivalist Account,\u201d in P. Huneman (ed.),\n<em>Functions</em>, Dordrecht: Springer.",
                "Cuffaro, Michael E., and Samuel C. Fletcher (eds.),\n2018, <em>Physical Perspectives on Computation, Computational\nPerspectives on Physics</em>, Cambridge: Cambridge University\nPress.",
                "Cummins, R., 1983, <em>The Nature of Psychological\nExplanation</em>, Cambridge, MA: MIT Press.",
                "Curtis-Trudel, A., forthcoming-a, \u201cWhy Do We Need A Theory of\nImplementation?\u201d <em>British Journal for the Philosophy of\nScience</em>. doi:10.1086/714791",
                "Curtis-Trudel, A., forthcoming-b, \u201cImplementation as\nResemblance,\u201d <em>Philosophy of Science</em>.\ndoi:10.1086/714872",
                "Davies, E. B., 2001, \u201cBuilding Infinite Machines,\u201d\n<em>British Journal for the Philosophy of Science</em>, 52(4):\n671\u2013682.",
                "Davis, M., 2004a, \u201cThe Myth of Hypercomputation,\u201d in\n<em>Alan Turing: Life and Legacy of a Great Thinker</em>, C. Teuscher\n(ed.), Berlin: Springer, pp. 195\u2013211.",
                "\u2013\u2013\u2013 (ed.), 2004b, <em>The Undecidable: Basic\nPapers on Undecidable Propositions, Unsolvable Problems and Computable\nFunctions</em>, Dover: Mineola.",
                "Dennett, D. C., 1987, <em>The Intentional Stance</em>, Cambridge,\nMA: MIT Press.",
                "Deutsch, D., 1985, \u201cQuantum Theory, the Church-Turing\nPrinciple and the Universal Quantum Computer,\u201d <em>Proceedings\nof the Royal Society of London A</em>, 400: 97\u2013117.",
                "Dewhurst, J., 2018, \u201cComputing Mechanisms without Proper\nFunctions,\u201d <em>Minds and Machines</em>, 28: 569\u201388.",
                "Dretske, F. I., 1981, <em>Knowledge and the Flow of\nInformation</em>, Cambridge, MA: MIT Press.",
                "Duwell, A., 2017, \u201cExploring the Frontiers of Computation:\nMeasurement Based Quantum Computers and the Mechanistic View of\nComputation,\u201d in A. Bokulich and J. Floyd (eds.), <em>Turing 100:\nPhilosophical Explorations of the Legacy of Alan Turing</em> (Boston\nStudies in the Philosophy and History of Science: Volume 324),\nNew York: Springer, 219\u201332.",
                "Earman, J., 1986, <em>A Primer on Determinism</em>, Dordrecht: D.\nReidel.",
                "Earman, J., and J. Norton, 1993, \u201cForever is a Day:\nSupertasks in Pitowsky and Malament-Hogarth Spacetimes,\u201d\n<em>Philosophy of Science</em>, 60: 22\u201342.",
                "Egan, F., 1999, \u201cIn Defence of Narrow Mindedness.\u201d\n<em>Mind and Language</em>, 14(2): 177\u2013194.",
                "\u2013\u2013\u2013, 2010, \u201cComputational Models: A Modest\nRole For Content,\u201d <em>Studies in the History and Philosophy of\nScience</em>, 41(3): 253\u2013259.",
                "Etesi, G., and I. N\u00e9meti, 2002, \u201cNon-Turing\nComputations via Malament-Hogarth Spacetimes,\u201d <em>International\nJournal of Theoretical Physics</em>, 41: 342\u2013370.",
                "Feynman, R. P., 1982, \u201cSimulating Physics with\nComputers,\u201d <em>International Journal of Theoretical\nPhysics</em>, 21(6\u20137): 467\u2013488.",
                "Fodor, J. A., 1975, <em>The Language of Thought</em>, Cambridge,\nMA: Harvard University Press.",
                "\u2013\u2013\u2013, 1981, \u201cThe Mind-Body Problem,\u201d\n<em>Scientific American</em>, 244: 114\u2013125.",
                "\u2013\u2013\u2013, 2008, <em>LOT 2: The Language of Thought\nRevisited</em>, Oxford: Oxford University Press.",
                "Fredkin, E., 1990, \u201cDigital Mechanics: An Information\nProcess Based on Reversible Universal Cellular Automata,\u201d\n<em>Physica D</em>, 45: 254\u2013270.",
                "Fresco, N., 2010, \u201cExplaining Computation Without Semantics:\nKeeping It Simple,\u201d <em>Minds and Machines</em>, 20:\n165\u2013181.",
                "\u2013\u2013\u2013, 2014, <em>Physical Computation and\nCognitive Science</em>, New York: Springer.",
                "Fuchs, C. A., 2004, \u201cQuantum Mechanics as Quantum\nInformation (and only a little more),\u201d in <em>Quantum Theory:\nReconsiderations of Foundations</em>, A. Khrennikov (ed.),\nV\u00e4xj\u00f6, Sweden: V\u00e4xj\u00f6 University Press, pp.\n463\u2013543.",
                "Gandy, R., 1980, \u201cChurch\u2019s Thesis and Principles for\nMechanism,\u201d in J. Barwise, H. J. Keisler, K. Kunen\n(eds.), <em>The Kleene Symposium: Studies in Logic and the Foundations\nof Mathematics</em>, Amsterdam: North-Holland Publishing.",
                "Garson, J., 2013, \u201cThe Functional Sense of Mechanism,\u201d\n<em>Philosophy of Science</em>, 80: 317\u2013333.",
                "G\u00f6del, K., 1934, \u201cOn Undecidable Propositions of Formal\nMathematical Systemsm,\u201d in <em>The Undecidable</em>, M. Davis\n(ed.), Ewlett, NY: Raven, pp. 41\u201371.",
                "\u2013\u2013\u2013, 1936. \u201c\u00dcber die Lange von\nBeweisen,\u201d <em>Ergebnisse eines mathematischen Kolloquiums</em>,\n7: 23\u201324.",
                "\u2013\u2013\u2013, 1946, \u201cRemarks Before the Princeton\nBicentennial Conference on Problems in Mathematics,\u201d reprinted\nin Davis 2004b, pp. 84\u201388.",
                "Godfrey-Smith, P., 2009, \u201cTriviality Arguments Against\nFunctionalism,\u201d <em>Philosophical Studies</em>, 145(2):\n273\u2013295.",
                "Grice, H. P., 1957, \u201cMeaning,\u201d <em>The Philosophical\nReview</em>, 66(3): 377\u2013388.",
                "Hagar, A., and A. Korolev, 2007, \u201cQuantum\nHypercomputation--Hyper or Computation?,\u201d <em>Philosophy of\nScience</em>, 74(3): 347\u2013363.",
                "Hamkins, J. D., 2002. \u201cInfinite Time Turing Machines,\u201d\n<em>Minds and Machines</em>, 12: 521\u2013539.",
                "Harman, G., 1987, \u201c(Nonsolipsistic) Conceptual Role\nSemantics,\u201d in <em>New Directions in Semantics</em>, E. Lepore\n(ed.), London: Academic Press, pp. 55\u201381.",
                "Hogarth, M. L., 1994, \u201cNon-Turing Computers and Non-Turing\nComputability,\u201d <em>PSA 1994</em>(1): 126\u2013138.",
                "\u2013\u2013\u2013, 2004, \u201cDeciding Arithmetic Using SAD\nComputers,\u201d <em>British Journal for the Philosophy of\nScience</em>, 55: 681\u2013691.",
                "Isaac, A., 2019, \u201cThe Semantics Latent in Shannon\nInformation,\u201d <em>British Journal for the Philosophy of\nScience</em>, 70(1): 103\u2013125.",
                "Jacquette, D., 1991, \u201cThe Myth of Pure Syntax,\u201d in\n<em>Topics in Philosophy and Artificial Intelligence</em>, L.\nAlbertazzi and R. Rolli (eds.), Bozen: Istituto Mitteleuropeo di\nCultura, pp. 1\u201314.",
                "Kantor, F. W., 1982, \u201cAn Informal Partial Overview of\nInformation Mechanics,\u201d <em>International Journal of Theoretical\nPhysics</em>, 21(6\u20137): 525\u201335.",
                "Kaplan, D. M., 2011, \u201cExplanation and Description in\nComputational Neuroscience,\u201d <em>Synthese</em>, 183(3):\n339\u2013373.",
                "Kieu, T. D., 2002, \u201cQuantum Hypercomputation,\u201d\n<em>Minds and Machines</em>, 12(4): 541\u2013561.",
                "\u2013\u2013\u2013, 2003, \u201cComputing the\n\nNoncomputable,\u201d <em>Contemporary Physics</em>, 44:\n51\u201371.",
                "\u2013\u2013\u2013, 2004, \u201cA Reformulation of Hilbert\u2019s\nTenth Problem through Quantum Mechanics,\u201d <em>Proceedings of the\nRoyal Society A</em>, 460(2045): 1535\u20131545.",
                "\u2013\u2013\u2013, 2005, \u201cAn Anatomy of a Quantum\nAdiabatic Algorithm that Transcends the Turing Computability,\u201d\n<em>International Journal of Quantum Information</em>, 3(1):\n177\u2013183.",
                "Kleene, S. C., 1935, \u201cA Theory of Positive Integers in\nFormal Logic,\u201d <em>American Journal of Mathematics</em>, 57:\n153\u2013173 and 219\u2013244.",
                "\u2013\u2013\u2013, 1952, <em>Introduction to\nMetamathematics</em>, Princeton: Van Nostrand.",
                "Klein, C., 2008, \u201cDispositional Implementation Solves the\nSuperfluous Structure Problem,\u201d <em>Synthese</em>, 165:\n141\u2013153.",
                "Leff, H. S. and A.F. Rex, (eds.), 2003, <em>Maxwell\u2019s Demon 2:\nEntropy, Classical and Quantum Information, Computing</em>, Bristol:\nInstitute of Physics Publishing.",
                "Lloyd, S., 2006, <em>Programming the Universe: A Quantum Computer\nScientist Takes on the Cosmos</em>, New York: Knopf.",
                "Lycan, W., 1981, \u201cForm, Function, and Feel,\u201d\n<em>Journal of Philosophy</em>, 78(1): 24\u201350.",
                "Machamer, P. K., Darden, L., and C. Craver, 2000, \u201cThinking\nAbout Mechanisms,\u201d <em>Philosophy of Science</em>, 67:\n1\u201325.",
                "Maley, C. J., forthcoming, \u201cAnalog Computation and\nRepresentation,\u201d <em>British Journal for the Philosophy of\nScience</em>. doi:10.1086/715031",
                "Martin, C. B., 1997, \u201cOn the Need for Properties: The Road\nto Pythagoreanism and Back,\u201d <em>Synthese</em>, 112(2):\n193\u2013231.",
                "Maudlin, T., 1989, \u201cComputation and Consciousness,\u201d\n<em>Journal of Philosophy</em>, 86(8): 407\u2013432.",
                "Milkowski, M., 2013, <em>Explaining the Computational Mind</em>,\nCambridge, MA: MIT Press.",
                "Mills, J. W., 2008, \u201cThe Nature of the Extended Analog\nComputer,\u201d <em>Physica D: Nonlinear Phenomena</em>, 237(9):\n1235\u20131256.",
                "N\u00e9meti, I., and G. D\u00e1vid, 2006, \u201cRelativistic\nComputers and the Turing Barrier,\u201d <em>Journal of Applied\nMathematics and Computation</em>, 178(1): 118\u2013142.",
                "Nielsen, M. A., 1997, \u201cComputable Functions, Quantum\nMeasurements, and Quantum Dynamics,\u201d <em>Physical Review\nLetters</em>, 79(15): 2915\u20132918.",
                "Nielsen, M. A., and I. L. Chuang, 2000, <em>Quantum Computation\nand Quantum Information</em>, New York: Cambridge University\nPress.",
                "Ord, T., 2006, \u201cThe Many Forms of Hypercomputation,\u201d\n<em>Applied Mathematics and Computation</em>, 178(1):\n143\u2013153.",
                "Papayannopoulos, P., 2020, \u201cComputing and modelling: Analog vs.\nAnalogue,\u201d <em>Studies in History and Philosophy of Science</em>, 83:\n103\u2013120.",
                "Piccinini, G., 2004, \u201cFunctionalism, Computationalism, and\nMental Contents,\u201d <em>Canadian Journal of Philosophy</em>,\n34(3): 375\u2013410.",
                "\u2013\u2013\u2013, 2007, \u201cComputing Mechanisms,\u201d\n<em>Philosophy of Science</em>, 74(4): 501\u2013526.",
                "\u2013\u2013\u2013, 2010, \u201cThe Mind as Neural Software?\nUnderstanding Functionalism, Computationalism, and Computational\nFunctionalism,\u201d <em>Philosophy and Phenomenological\nResearch</em>, 81(2): 269\u2013311.",
                "\u2013\u2013\u2013, 2015, <em>Physical Computation: A\nMechanistic Account</em>, Oxford: Oxford University Press.",
                "Piccinini, G. and A. Scarantino, 2011, \u201cInformation\nProcessing, Computation, and Cognition,\u201d <em>Journal of\nBiological Physics</em> 37(1): 1\u201338.",
                "Pitowsky, I., 1990, \u201cThe Physical Church Thesis and Physical\nComputational Complexity,\u201d <em>Iyyun</em>, 39: 81\u201399.",
                "\u2013\u2013\u2013, 2002, \u201cQuantum Speed-Up of\nComputations,\u201d <em>Philosophy of Science</em>, 69:\nS168-S177.",
                "Pour-El, M. B., 1974, \u201cAbstract Computability and Its\nRelation to the General Purpose Analog Computer (Some Connections\nBetween Logic, Differential Equations and Analog Computers),\u201d\n<em>Transactions of the American Mathematical Society</em>, 199:\n1\u201328.",
                "\u2013\u2013\u2013, 1999, The Structure of Computability in\nAnalysis and Physical Theory: An Extension of Church\u2019s Thesis. In\n<em>Handbooks of Computability Theory</em>, E.R. Griffor (ed.), New\nYork: Elsevier, pp. 449\u2013471.",
                "Putnam, H., 1960, \u201cMinds and Machines,\u201d in\n<em>Dimensions of Mind: A Symposium</em>, S. Hook (ed.), New York:\nCollier, pp. 138\u2013164; Reprinted in Putnam 1975a, pp.\n362\u2013386.",
                "\u2013\u2013\u2013, 1967, \u201cPsychological\nPredicates,\u201d in <em>Art, Mind, and Religion</em>, W.H. Capitan\n&amp; D.D. Merrill (eds.), Pittsburgh, PA: University of Pittsburgh\nPress, pp. 37\u201348. Reprinted in Putnam 1975a as \u201cThe Nature\nof Mental States,\u201d pp. 150\u2013161.",
                "\u2013\u2013\u2013, 1975a, <em>Philosophical Papers: Volume 2,\nMind, Language and Reality</em>, Cambridge: Cambridge University\nPress.",
                "\u2013\u2013\u2013, 1975b, \u201cThe Meaning of\n\u2018Meaning\u2019,\u201d in <em>Language, Mind and Knowledge.\nMinnesota Studies in the Philosophy of Science</em>, vol. 7, K.\nGunderson (ed.), Minneapolis: University of Minnesota Press, pp.\n131\u2013193. Reprinted in Putnam 1975a, pp. 215\u2013271.",
                "\u2013\u2013\u2013, 1988, <em>Representation and Reality</em>,\nCambridge, MA: MIT Press.",
                "Pylyshyn, Z. W., 1984, <em>Computation and Cognition</em>,\nCambridge, MA: MIT Press.",
                "Quine, W. V. O., (1976), \u201cWhither Physical Objects?\u201d\nin <em>Essays in Memory of Imre Lakatos</em>, (Series: Boston Studies\nin the Philosophy of Science), R.S. Cohen, P.K. Feyerabend, &amp; M.W.\nWartofsky (eds.), Dordrecht: Reidel, pp. 497\u2013504.",
                "Rescorla, M., 2014, \u201cA Theory of Computational\nImplementation,\u201d <em>Synthese</em>, 191: 1277\u20131307.",
                "Rubel, L. A., 1989, \u201cDigital Simulation of Analog\nComputation and Church\u2019s Thesis,\u201d <em>Journal of Symbolic\nLogic</em>, 54(3): 1011\u20131017.",
                "\u2013\u2013\u2013, 1993, \u201cThe Extended Analog\nComputer,\u201d <em>Advances in Applied Mathematics</em>, 14(1):\n39\u201350.",
                "Scheutz, M., 1999, \u201cWhen Physical Systems Realize Functions\n\u2026,\u201d <em>Minds and Machines</em>, 9(2):\n161\u2013196.",
                "\u2013\u2013\u2013, 2001, \u201cCausal versus Computational\nComplexity,\u201d <em>Minds and Machines</em>, 11(4):\n534\u2013566.",
                "Schonbein, W., 2005, \u201cCognition and the Power of Continuous\nDynamical Systems,\u201d <em>Minds and Machines</em>, 15(1):\n57\u201371.",
                "Searle, J. R., 1992, <em>The Rediscovery of the Mind</em>,\nCambridge, MA: MIT Press.",
                "Segal, G., 1991, \u201cDefence of a Reasonable\nIndividualism,\u201d <em>Mind</em>, 100(400): 485\u2013493.",
                "Shagrir, O., 2001. \u201cContent, Computation and\nExternalism,\u201d <em>Mind</em>, 110(438): 369\u2013400.",
                "\u2013\u2013\u2013, 2006, \u201cWhy We View the Brain as a\nComputer,\u201d <em>Synthese</em>, 153(3): 393\u2013416.",
                "\u2013\u2013\u2013, forthcoming, <em>The Nature of Physical\nComputation</em>, Oxford: Oxford University Press.",
                "Shagrir, O., and I. Pitowsky, 2003, \u201cPhysical\nHypercomputation and the Church-Turing Thesis,\u201d <em>Minds and\nMachines</em>, 13(1): 87\u2013101.",
                "Shannon, C. E., and W. Weaver, 1949, <em>The Mathematical Theory\nof Communication</em>, Urbana: University of Illinois Press.",
                "Shapiro, L. A., 1997, \u201cA Clearer Vision,\u201d\n<em>Philosophy of Science</em>, 64(1): 131\u2013153.",
                "Shor, P. W., 1994, \u201cAlgorithms for Quantum Computation:\nDiscrete Logarithms and Factoring,\u201d in <em>Proceedings of the\n357th Annual Symposium on Foundations of Computer Science</em>, Los\nAlamitos, CA: IEEE Computer Society Press, pp. 124\u2013134.",
                "Sieg, W., 2006, \u201cOn Computability,\u201d in <em>Philosophy\nof Mathematics (Handbook of the Philosophy of Science)</em>, A. Irvine\n(ed.) Amsterdam: Elsevier, pp. 535\u2013630.",
                "Siegelmann, H. T., 1999, <em>Neural Networks and Analog\nComputation: Beyond the Turing Limit</em>, Boston:\nBirkh\u00e4user.",
                "\u0160\u00edma, J., and P. Orponen, 2003,\n\u201cGeneral-purpose Computation with Neural Networks: A Survey of\nComplexity Theoretic Results,\u201d <i>Neural Computation</i>, 15:\n2727\u201378.",
                "Smith, B. C., 2002, \u201cThe Foundations of Computing,\u201d in\n<em>Computationalism: New Directions</em>, M. Scheutz (ed.),\nCambridge, MA: MIT Press, pp. 23\u201358.",
                "Smith, W. D., 2006a, \u201cChurch\u2019s Thesis Meets the\n<em>N</em>-body Problem,\u201d <em>Applied Mathematics and\nComputation</em>, 178(1): 154\u2013183.",
                "\u2013\u2013\u2013, 2006b, \u201cThree Counterexamples\nRefuting Kieu\u2019s Plan for Quantum Adiabatic Hypercomputation; and Some\nUncomputable Quantum Mechanical Tasks,\u201d <em>Applied Mathematics\nand Computation</em>, 178(1): 184\u2013193.",
                "Stannett, M., 1990, \u201cX-Machines and the Halting Problem:\nBuilding a Super-Turing Machine,\u201d <em>Formal Aspects of\nComputing</em>, 2(1): 331\u2013341.",
                "Stich, S., 1983, <em>From Folk Psychology to Cognitive\nScience</em>, Cambridge, MA: MIT Press.",
                "Toffoli, T., 1982, \u201cPhysics and Computation,\u201d\n<em>International Journal of Theoretical Physics</em>, 21(3\u20134):\n165\u2013175.",
                "Tucker, Chris, 2018, \u201cHow to Explain Miscomputation,\u201d\n<em>Philosophers\u2019 Imprint</em>, 18(24).\n[<a href=\"https://www.philosophersimprint.org/018024/\" target=\"other\">Tucker 2018 available online</a>]",
                "Turing, A. M., 1936\u20137, \u201cOn Computable Numbers, with an\nApplication to the Entscheidungsproblem,\u201d <em>Proceeding of the\nLondon Mathematical Society</em>, 42(1): 230\u2013265, reprinted in\nDavis 2004b, pp. 116\u2013154.",
                "\u2013\u2013\u2013, 1950, \u201cComputing Machinery and\nIntelligence,\u201d <em>Mind</em>, LIX(236): 433\u2013460.",
                "Wheeler, J. A., 1982, \u201cThe Computer and the Universe,\u201d\n<em>International Journal of Theoretical Physics</em>, 21(6\u20137):\n557\u2013572.",
                "\u2013\u2013\u2013, 1989, \u201cInformation, Physics, Quantum:\nThe Search for Links,\u201d <i>Proceedings III International\nSymposium on Foundations of Quantum Mechanics</i>, Tokyo,\n354\u2013358.",
                "Wolfram, S., 2002, <em>A New Kind of Science</em>, Champaign, IL:\nWolfram Media.",
                "Zuse, K., 1970, <em>Calculating Space</em>, Cambridge, MA: MIT\nPress.",
                "\u2013\u2013\u2013, 1982, \u201cThe Computing Universe,\u201d\n<em>International Journal of Theoretical Physics</em>, 21(6\u20137):\n589\u2013600."
            ]
        },
        "raw_text": "<div id=\"bibliography\">\n<h2><a name=\"Bib\">Bibliography</a></h2>\n<ul class=\"hanging\">\n<li>Andr\u00e9ka, H., N\u00e9meti, I., and P. N\u00e9meti, 2009,\n\u201cGeneral Relativistic Hypercomputing and Foundation of\nMathematics,\u201d <em>Natural Computing</em>, 8(3):\n499\u2013516.</li>\n<li>Andr\u00e9ka, H., Madar\u00e1sz, J. X., N\u00e9meti, I.,\nN\u00e9meti, P. and Sz\u00e9kely, G., 2018, \u201cRelativistic\ncomputation,\u201d in Cuffaro and Fletcher (eds.) 2018.</li>\n<li>Beggs, E. J., and J.V. Tucker, 2007, \u201cCan Newtonian Systems,\nBounded in Space, Time, Mass and Energy Compute all Functions?\u201d\n<em>Theoretical Computer Science</em>, 371(1\u20132):\n4\u201319.</li>\n<li>Block, N., 1978, \u201cTroubles with Functionalism,\u201d in\n<em>Perception and Cognition: Issues in the Foundations of\nPsychology</em>, C. W. Savage (ed.), Minneapolis, University of\nMinnesota Press, pp. 261\u2013325.</li>\n<li>Blum, L., Cucker F., Shub M., and S. Smale, 1998, <em>Complexity\nand Real Computation</em>, New York: Springer.</li>\n<li>Bontly, T., 1998, \u201cIndividualism and the Nature of Syntactic\nStates,\u201d <em>British Journal for the Philosophy of Science</em>,\n49(4): 557\u2013574.</li>\n<li>Bub, J., 2005, \u201cQuantum Mechanics is About Quantum\nInformation,\u201d <em>Foundations of Physics</em>, 35(4):\n541\u2013560.</li>\n<li>Burge, T., 1986, \u201cIndividualism and Psychology,\u201d\n<em>Philosophical Review</em>, 45: 3\u201345.</li>\n<li>Button, T., 2009, \u201cSAD Computers and Two Versions of the\nChurch-Turing Thesis,\u201d <em>British Journal for the Philosophy of\nScience</em>, 60(4): 765\u2013792.</li>\n<li>Calude, C. S., 2005, \u201cAlgorithmic Randomness, Quantum\nPhysics, and Incompleteness,\u201d in <em>Proceedings of the\nConference \u201cMachines, Computations and Universality\u201d (MCU\n2004)</em>, M. Margenstern (ed.), Berlin: Springer, pp.\n1\u201317.</li>\n<li>Calude, C. S., and B. Pavlov, 2002, \u201cCoins, Quantum\nMeasurements, and Turing\u2019s Barrier,\u201d <em>Quantum Information\nProcessing</em>, 1(1\u20132): 107\u2013127.</li>\n<li>Calude, C. S., and K. Svozil, 2008, \u201cQuantum Randomness and\nValue Indefiniteness,\u201d <em>Advanced Science Letters</em>, 1(2):\n165\u2013168.</li>\n<li>Campbell, D. I., and Yang, Y., 2021, \u201cDoes the solar system\ncompute the laws of motion?\u201d <em>Synthese</em>, 198:\n3203\u20133220.</li>\n<li>Chalmers, D. J., 1995, \u201cOn Implementing a\nComputation,\u201d <em>Minds and Machines</em>, 4:\n391\u2013402.</li>\n<li>\u2013\u2013\u2013, 1996, \u201cDoes a Rock Implement Every\nFinite-State Automaton?\u201d <em>Synthese</em>, 108: 310-333.</li>\n<li>\u2013\u2013\u2013, 2011, \u201cA Computational Foundation for\nthe Study of Cognition,\u201d <em>Journal of Cognitive Science</em>,\n12(4): 323\u201357.</li>\n<li>Chrisley, R. L., 1995, \u201cWhy Everything Doesn\u2019t Realize Every\nComputation,\u201d <em>Minds and Machines</em>, 4:\n403\u2013430.</li>\n<li>Church, A., 1932, \u201cA Set of Postulates for the Foundation of\nLogic,\u201d <em>Annals of Mathematics</em>, 33: 346\u2013366.</li>\n<li>\u2013\u2013\u2013, 1936, \u201cAn Unsolvable Problem in\nElementary Number Theory,\u201d <em>The American Journal of\nMathematics</em>, 58: 345\u2013363.</li>\n<li>Churchland, P. S., and T. J. Sejnowski, 1992, <em>The\nComputational Brain</em>, Cambridge, MA: MIT Press.</li>\n<li>Coelho Mollo, D., 2018, \u201cFunctional Individuation,\nMechanistic Implementation: The Proper Way of Seeing the Mechanistic\nView of Concrete Computation,\u201d <em>Synthese</em>, 195(8):\n3477\u201397.</li>\n<li>Copeland, B. J., 1996, \u201cWhat is Computation?\u201d\n<em>Synthese</em>, 108(3): 335\u2013359.</li>\n<li>\u2013\u2013\u2013, 2000, \u201cNarrow Versus Wide Mechanism:\nIncluding a Re-Examination of Turing\u2019s Views on the Mind-Machine\nIssue.\u201d <em>The Journal of Philosophy</em>, XCVI(1):\n5\u201333.</li>\n<li>\u2013\u2013\u2013, 2002, \u201cAccelerating Turing\nMachines,\u201d <em>Minds and Machines</em>, 12(2):\n281\u2013301.</li>\n<li>Crane, T., 1990, \u201cThe Language of Thought: No Syntax Without\nSemantics,\u201d <em>Mind and Language</em>, 5(3):\n187\u2013212.</li>\n<li>Craver, C. F., 2012, \u201cFunctions and Mechanisms: A\nPerspectivalist Account,\u201d in P. Huneman (ed.),\n<em>Functions</em>, Dordrecht: Springer.</li>\n<li>Cuffaro, Michael E., and Samuel C. Fletcher (eds.),\n2018, <em>Physical Perspectives on Computation, Computational\nPerspectives on Physics</em>, Cambridge: Cambridge University\nPress.</li>\n<li>Cummins, R., 1983, <em>The Nature of Psychological\nExplanation</em>, Cambridge, MA: MIT Press.</li>\n<li>Curtis-Trudel, A., forthcoming-a, \u201cWhy Do We Need A Theory of\nImplementation?\u201d <em>British Journal for the Philosophy of\nScience</em>. doi:10.1086/714791</li>\n<li>Curtis-Trudel, A., forthcoming-b, \u201cImplementation as\nResemblance,\u201d <em>Philosophy of Science</em>.\ndoi:10.1086/714872</li>\n<li>Davies, E. B., 2001, \u201cBuilding Infinite Machines,\u201d\n<em>British Journal for the Philosophy of Science</em>, 52(4):\n671\u2013682.</li>\n<li>Davis, M., 2004a, \u201cThe Myth of Hypercomputation,\u201d in\n<em>Alan Turing: Life and Legacy of a Great Thinker</em>, C. Teuscher\n(ed.), Berlin: Springer, pp. 195\u2013211.</li>\n<li>\u2013\u2013\u2013 (ed.), 2004b, <em>The Undecidable: Basic\nPapers on Undecidable Propositions, Unsolvable Problems and Computable\nFunctions</em>, Dover: Mineola.</li>\n<li>Dennett, D. C., 1987, <em>The Intentional Stance</em>, Cambridge,\nMA: MIT Press.</li>\n<li>Deutsch, D., 1985, \u201cQuantum Theory, the Church-Turing\nPrinciple and the Universal Quantum Computer,\u201d <em>Proceedings\nof the Royal Society of London A</em>, 400: 97\u2013117.</li>\n<li>Dewhurst, J., 2018, \u201cComputing Mechanisms without Proper\nFunctions,\u201d <em>Minds and Machines</em>, 28: 569\u201388.</li>\n<li>Dretske, F. I., 1981, <em>Knowledge and the Flow of\nInformation</em>, Cambridge, MA: MIT Press.</li>\n<li>Duwell, A., 2017, \u201cExploring the Frontiers of Computation:\nMeasurement Based Quantum Computers and the Mechanistic View of\nComputation,\u201d in A. Bokulich and J. Floyd (eds.), <em>Turing 100:\nPhilosophical Explorations of the Legacy of Alan Turing</em> (Boston\nStudies in the Philosophy and History of Science: Volume 324),\nNew York: Springer, 219\u201332.</li>\n<li>Earman, J., 1986, <em>A Primer on Determinism</em>, Dordrecht: D.\nReidel.</li>\n<li>Earman, J., and J. Norton, 1993, \u201cForever is a Day:\nSupertasks in Pitowsky and Malament-Hogarth Spacetimes,\u201d\n<em>Philosophy of Science</em>, 60: 22\u201342.</li>\n<li>Egan, F., 1999, \u201cIn Defence of Narrow Mindedness.\u201d\n<em>Mind and Language</em>, 14(2): 177\u2013194.</li>\n<li>\u2013\u2013\u2013, 2010, \u201cComputational Models: A Modest\nRole For Content,\u201d <em>Studies in the History and Philosophy of\nScience</em>, 41(3): 253\u2013259.</li>\n<li>Etesi, G., and I. N\u00e9meti, 2002, \u201cNon-Turing\nComputations via Malament-Hogarth Spacetimes,\u201d <em>International\nJournal of Theoretical Physics</em>, 41: 342\u2013370.</li>\n<li>Feynman, R. P., 1982, \u201cSimulating Physics with\nComputers,\u201d <em>International Journal of Theoretical\nPhysics</em>, 21(6\u20137): 467\u2013488.</li>\n<li>Fodor, J. A., 1975, <em>The Language of Thought</em>, Cambridge,\nMA: Harvard University Press.</li>\n<li>\u2013\u2013\u2013, 1981, \u201cThe Mind-Body Problem,\u201d\n<em>Scientific American</em>, 244: 114\u2013125.</li>\n<li>\u2013\u2013\u2013, 2008, <em>LOT 2: The Language of Thought\nRevisited</em>, Oxford: Oxford University Press.</li>\n<li>Fredkin, E., 1990, \u201cDigital Mechanics: An Information\nProcess Based on Reversible Universal Cellular Automata,\u201d\n<em>Physica D</em>, 45: 254\u2013270.</li>\n<li>Fresco, N., 2010, \u201cExplaining Computation Without Semantics:\nKeeping It Simple,\u201d <em>Minds and Machines</em>, 20:\n165\u2013181.</li>\n<li>\u2013\u2013\u2013, 2014, <em>Physical Computation and\nCognitive Science</em>, New York: Springer.</li>\n<li>Fuchs, C. A., 2004, \u201cQuantum Mechanics as Quantum\nInformation (and only a little more),\u201d in <em>Quantum Theory:\nReconsiderations of Foundations</em>, A. Khrennikov (ed.),\nV\u00e4xj\u00f6, Sweden: V\u00e4xj\u00f6 University Press, pp.\n463\u2013543.</li>\n<li>Gandy, R., 1980, \u201cChurch\u2019s Thesis and Principles for\nMechanism,\u201d in J. Barwise, H. J. Keisler, K. Kunen\n(eds.), <em>The Kleene Symposium: Studies in Logic and the Foundations\nof Mathematics</em>, Amsterdam: North-Holland Publishing.</li>\n<li>Garson, J., 2013, \u201cThe Functional Sense of Mechanism,\u201d\n<em>Philosophy of Science</em>, 80: 317\u2013333.</li>\n<li>G\u00f6del, K., 1934, \u201cOn Undecidable Propositions of Formal\nMathematical Systemsm,\u201d in <em>The Undecidable</em>, M. Davis\n(ed.), Ewlett, NY: Raven, pp. 41\u201371.</li>\n<li>\u2013\u2013\u2013, 1936. \u201c\u00dcber die Lange von\nBeweisen,\u201d <em>Ergebnisse eines mathematischen Kolloquiums</em>,\n7: 23\u201324.</li>\n<li>\u2013\u2013\u2013, 1946, \u201cRemarks Before the Princeton\nBicentennial Conference on Problems in Mathematics,\u201d reprinted\nin Davis 2004b, pp. 84\u201388.</li>\n<li>Godfrey-Smith, P., 2009, \u201cTriviality Arguments Against\nFunctionalism,\u201d <em>Philosophical Studies</em>, 145(2):\n273\u2013295.</li>\n<li>Grice, H. P., 1957, \u201cMeaning,\u201d <em>The Philosophical\nReview</em>, 66(3): 377\u2013388.</li>\n<li>Hagar, A., and A. Korolev, 2007, \u201cQuantum\nHypercomputation--Hyper or Computation?,\u201d <em>Philosophy of\nScience</em>, 74(3): 347\u2013363.</li>\n<li>Hamkins, J. D., 2002. \u201cInfinite Time Turing Machines,\u201d\n<em>Minds and Machines</em>, 12: 521\u2013539.</li>\n<li>Harman, G., 1987, \u201c(Nonsolipsistic) Conceptual Role\nSemantics,\u201d in <em>New Directions in Semantics</em>, E. Lepore\n(ed.), London: Academic Press, pp. 55\u201381.</li>\n<li>Hogarth, M. L., 1994, \u201cNon-Turing Computers and Non-Turing\nComputability,\u201d <em>PSA 1994</em>(1): 126\u2013138.</li>\n<li>\u2013\u2013\u2013, 2004, \u201cDeciding Arithmetic Using SAD\nComputers,\u201d <em>British Journal for the Philosophy of\nScience</em>, 55: 681\u2013691.</li>\n<li>Isaac, A., 2019, \u201cThe Semantics Latent in Shannon\nInformation,\u201d <em>British Journal for the Philosophy of\nScience</em>, 70(1): 103\u2013125.</li>\n<li>Jacquette, D., 1991, \u201cThe Myth of Pure Syntax,\u201d in\n<em>Topics in Philosophy and Artificial Intelligence</em>, L.\nAlbertazzi and R. Rolli (eds.), Bozen: Istituto Mitteleuropeo di\nCultura, pp. 1\u201314.</li>\n<li>Kantor, F. W., 1982, \u201cAn Informal Partial Overview of\nInformation Mechanics,\u201d <em>International Journal of Theoretical\nPhysics</em>, 21(6\u20137): 525\u201335.</li>\n<li>Kaplan, D. M., 2011, \u201cExplanation and Description in\nComputational Neuroscience,\u201d <em>Synthese</em>, 183(3):\n339\u2013373.</li>\n<li>Kieu, T. D., 2002, \u201cQuantum Hypercomputation,\u201d\n<em>Minds and Machines</em>, 12(4): 541\u2013561.</li>\n<li>\u2013\u2013\u2013, 2003, \u201cComputing the\n\nNoncomputable,\u201d <em>Contemporary Physics</em>, 44:\n51\u201371.</li>\n<li>\u2013\u2013\u2013, 2004, \u201cA Reformulation of Hilbert\u2019s\nTenth Problem through Quantum Mechanics,\u201d <em>Proceedings of the\nRoyal Society A</em>, 460(2045): 1535\u20131545.</li>\n<li>\u2013\u2013\u2013, 2005, \u201cAn Anatomy of a Quantum\nAdiabatic Algorithm that Transcends the Turing Computability,\u201d\n<em>International Journal of Quantum Information</em>, 3(1):\n177\u2013183.</li>\n<li>Kleene, S. C., 1935, \u201cA Theory of Positive Integers in\nFormal Logic,\u201d <em>American Journal of Mathematics</em>, 57:\n153\u2013173 and 219\u2013244.</li>\n<li>\u2013\u2013\u2013, 1952, <em>Introduction to\nMetamathematics</em>, Princeton: Van Nostrand.</li>\n<li>Klein, C., 2008, \u201cDispositional Implementation Solves the\nSuperfluous Structure Problem,\u201d <em>Synthese</em>, 165:\n141\u2013153.</li>\n<li>Leff, H. S. and A.F. Rex, (eds.), 2003, <em>Maxwell\u2019s Demon 2:\nEntropy, Classical and Quantum Information, Computing</em>, Bristol:\nInstitute of Physics Publishing.</li>\n<li>Lloyd, S., 2006, <em>Programming the Universe: A Quantum Computer\nScientist Takes on the Cosmos</em>, New York: Knopf.</li>\n<li>Lycan, W., 1981, \u201cForm, Function, and Feel,\u201d\n<em>Journal of Philosophy</em>, 78(1): 24\u201350.</li>\n<li>Machamer, P. K., Darden, L., and C. Craver, 2000, \u201cThinking\nAbout Mechanisms,\u201d <em>Philosophy of Science</em>, 67:\n1\u201325.</li>\n<li>Maley, C. J., forthcoming, \u201cAnalog Computation and\nRepresentation,\u201d <em>British Journal for the Philosophy of\nScience</em>. doi:10.1086/715031</li>\n<li>Martin, C. B., 1997, \u201cOn the Need for Properties: The Road\nto Pythagoreanism and Back,\u201d <em>Synthese</em>, 112(2):\n193\u2013231.</li>\n<li>Maudlin, T., 1989, \u201cComputation and Consciousness,\u201d\n<em>Journal of Philosophy</em>, 86(8): 407\u2013432.</li>\n<li>Milkowski, M., 2013, <em>Explaining the Computational Mind</em>,\nCambridge, MA: MIT Press.</li>\n<li>Mills, J. W., 2008, \u201cThe Nature of the Extended Analog\nComputer,\u201d <em>Physica D: Nonlinear Phenomena</em>, 237(9):\n1235\u20131256.</li>\n<li>N\u00e9meti, I., and G. D\u00e1vid, 2006, \u201cRelativistic\nComputers and the Turing Barrier,\u201d <em>Journal of Applied\nMathematics and Computation</em>, 178(1): 118\u2013142.</li>\n<li>Nielsen, M. A., 1997, \u201cComputable Functions, Quantum\nMeasurements, and Quantum Dynamics,\u201d <em>Physical Review\nLetters</em>, 79(15): 2915\u20132918.</li>\n<li>Nielsen, M. A., and I. L. Chuang, 2000, <em>Quantum Computation\nand Quantum Information</em>, New York: Cambridge University\nPress.</li>\n<li>Ord, T., 2006, \u201cThe Many Forms of Hypercomputation,\u201d\n<em>Applied Mathematics and Computation</em>, 178(1):\n143\u2013153.</li>\n<li>Papayannopoulos, P., 2020, \u201cComputing and modelling: Analog vs.\nAnalogue,\u201d <em>Studies in History and Philosophy of Science</em>, 83:\n103\u2013120.</li>\n<li>Piccinini, G., 2004, \u201cFunctionalism, Computationalism, and\nMental Contents,\u201d <em>Canadian Journal of Philosophy</em>,\n34(3): 375\u2013410.</li>\n<li>\u2013\u2013\u2013, 2007, \u201cComputing Mechanisms,\u201d\n<em>Philosophy of Science</em>, 74(4): 501\u2013526.</li>\n<li>\u2013\u2013\u2013, 2010, \u201cThe Mind as Neural Software?\nUnderstanding Functionalism, Computationalism, and Computational\nFunctionalism,\u201d <em>Philosophy and Phenomenological\nResearch</em>, 81(2): 269\u2013311.</li>\n<li>\u2013\u2013\u2013, 2015, <em>Physical Computation: A\nMechanistic Account</em>, Oxford: Oxford University Press.</li>\n<li>Piccinini, G. and A. Scarantino, 2011, \u201cInformation\nProcessing, Computation, and Cognition,\u201d <em>Journal of\nBiological Physics</em> 37(1): 1\u201338.</li>\n<li>Pitowsky, I., 1990, \u201cThe Physical Church Thesis and Physical\nComputational Complexity,\u201d <em>Iyyun</em>, 39: 81\u201399.</li>\n<li>\u2013\u2013\u2013, 2002, \u201cQuantum Speed-Up of\nComputations,\u201d <em>Philosophy of Science</em>, 69:\nS168-S177.</li>\n<li>Pour-El, M. B., 1974, \u201cAbstract Computability and Its\nRelation to the General Purpose Analog Computer (Some Connections\nBetween Logic, Differential Equations and Analog Computers),\u201d\n<em>Transactions of the American Mathematical Society</em>, 199:\n1\u201328.</li>\n<li>\u2013\u2013\u2013, 1999, The Structure of Computability in\nAnalysis and Physical Theory: An Extension of Church\u2019s Thesis. In\n<em>Handbooks of Computability Theory</em>, E.R. Griffor (ed.), New\nYork: Elsevier, pp. 449\u2013471.</li>\n<li>Putnam, H., 1960, \u201cMinds and Machines,\u201d in\n<em>Dimensions of Mind: A Symposium</em>, S. Hook (ed.), New York:\nCollier, pp. 138\u2013164; Reprinted in Putnam 1975a, pp.\n362\u2013386.</li>\n<li>\u2013\u2013\u2013, 1967, \u201cPsychological\nPredicates,\u201d in <em>Art, Mind, and Religion</em>, W.H. Capitan\n&amp; D.D. Merrill (eds.), Pittsburgh, PA: University of Pittsburgh\nPress, pp. 37\u201348. Reprinted in Putnam 1975a as \u201cThe Nature\nof Mental States,\u201d pp. 150\u2013161.</li>\n<li>\u2013\u2013\u2013, 1975a, <em>Philosophical Papers: Volume 2,\nMind, Language and Reality</em>, Cambridge: Cambridge University\nPress.</li>\n<li>\u2013\u2013\u2013, 1975b, \u201cThe Meaning of\n\u2018Meaning\u2019,\u201d in <em>Language, Mind and Knowledge.\nMinnesota Studies in the Philosophy of Science</em>, vol. 7, K.\nGunderson (ed.), Minneapolis: University of Minnesota Press, pp.\n131\u2013193. Reprinted in Putnam 1975a, pp. 215\u2013271.</li>\n<li>\u2013\u2013\u2013, 1988, <em>Representation and Reality</em>,\nCambridge, MA: MIT Press.</li>\n<li>Pylyshyn, Z. W., 1984, <em>Computation and Cognition</em>,\nCambridge, MA: MIT Press.</li>\n<li>Quine, W. V. O., (1976), \u201cWhither Physical Objects?\u201d\nin <em>Essays in Memory of Imre Lakatos</em>, (Series: Boston Studies\nin the Philosophy of Science), R.S. Cohen, P.K. Feyerabend, &amp; M.W.\nWartofsky (eds.), Dordrecht: Reidel, pp. 497\u2013504.</li>\n<li>Rescorla, M., 2014, \u201cA Theory of Computational\nImplementation,\u201d <em>Synthese</em>, 191: 1277\u20131307.</li>\n<li>Rubel, L. A., 1989, \u201cDigital Simulation of Analog\nComputation and Church\u2019s Thesis,\u201d <em>Journal of Symbolic\nLogic</em>, 54(3): 1011\u20131017.</li>\n<li>\u2013\u2013\u2013, 1993, \u201cThe Extended Analog\nComputer,\u201d <em>Advances in Applied Mathematics</em>, 14(1):\n39\u201350.</li>\n<li>Scheutz, M., 1999, \u201cWhen Physical Systems Realize Functions\n\u2026,\u201d <em>Minds and Machines</em>, 9(2):\n161\u2013196.</li>\n<li>\u2013\u2013\u2013, 2001, \u201cCausal versus Computational\nComplexity,\u201d <em>Minds and Machines</em>, 11(4):\n534\u2013566.</li>\n<li>Schonbein, W., 2005, \u201cCognition and the Power of Continuous\nDynamical Systems,\u201d <em>Minds and Machines</em>, 15(1):\n57\u201371.</li>\n<li>Searle, J. R., 1992, <em>The Rediscovery of the Mind</em>,\nCambridge, MA: MIT Press.</li>\n<li>Segal, G., 1991, \u201cDefence of a Reasonable\nIndividualism,\u201d <em>Mind</em>, 100(400): 485\u2013493.</li>\n<li>Shagrir, O., 2001. \u201cContent, Computation and\nExternalism,\u201d <em>Mind</em>, 110(438): 369\u2013400.</li>\n<li>\u2013\u2013\u2013, 2006, \u201cWhy We View the Brain as a\nComputer,\u201d <em>Synthese</em>, 153(3): 393\u2013416.</li>\n<li>\u2013\u2013\u2013, forthcoming, <em>The Nature of Physical\nComputation</em>, Oxford: Oxford University Press.</li>\n<li>Shagrir, O., and I. Pitowsky, 2003, \u201cPhysical\nHypercomputation and the Church-Turing Thesis,\u201d <em>Minds and\nMachines</em>, 13(1): 87\u2013101.</li>\n<li>Shannon, C. E., and W. Weaver, 1949, <em>The Mathematical Theory\nof Communication</em>, Urbana: University of Illinois Press.</li>\n<li>Shapiro, L. A., 1997, \u201cA Clearer Vision,\u201d\n<em>Philosophy of Science</em>, 64(1): 131\u2013153.</li>\n<li>Shor, P. W., 1994, \u201cAlgorithms for Quantum Computation:\nDiscrete Logarithms and Factoring,\u201d in <em>Proceedings of the\n357th Annual Symposium on Foundations of Computer Science</em>, Los\nAlamitos, CA: IEEE Computer Society Press, pp. 124\u2013134.</li>\n<li>Sieg, W., 2006, \u201cOn Computability,\u201d in <em>Philosophy\nof Mathematics (Handbook of the Philosophy of Science)</em>, A. Irvine\n(ed.) Amsterdam: Elsevier, pp. 535\u2013630.</li>\n<li>Siegelmann, H. T., 1999, <em>Neural Networks and Analog\nComputation: Beyond the Turing Limit</em>, Boston:\nBirkh\u00e4user.</li>\n<li>\u0160\u00edma, J., and P. Orponen, 2003,\n\u201cGeneral-purpose Computation with Neural Networks: A Survey of\nComplexity Theoretic Results,\u201d <i>Neural Computation</i>, 15:\n2727\u201378.</li>\n<li>Smith, B. C., 2002, \u201cThe Foundations of Computing,\u201d in\n<em>Computationalism: New Directions</em>, M. Scheutz (ed.),\nCambridge, MA: MIT Press, pp. 23\u201358.</li>\n<li>Smith, W. D., 2006a, \u201cChurch\u2019s Thesis Meets the\n<em>N</em>-body Problem,\u201d <em>Applied Mathematics and\nComputation</em>, 178(1): 154\u2013183.</li>\n<li>\u2013\u2013\u2013, 2006b, \u201cThree Counterexamples\nRefuting Kieu\u2019s Plan for Quantum Adiabatic Hypercomputation; and Some\nUncomputable Quantum Mechanical Tasks,\u201d <em>Applied Mathematics\nand Computation</em>, 178(1): 184\u2013193.</li>\n<li>Stannett, M., 1990, \u201cX-Machines and the Halting Problem:\nBuilding a Super-Turing Machine,\u201d <em>Formal Aspects of\nComputing</em>, 2(1): 331\u2013341.</li>\n<li>Stich, S., 1983, <em>From Folk Psychology to Cognitive\nScience</em>, Cambridge, MA: MIT Press.</li>\n<li>Toffoli, T., 1982, \u201cPhysics and Computation,\u201d\n<em>International Journal of Theoretical Physics</em>, 21(3\u20134):\n165\u2013175.</li>\n<li>Tucker, Chris, 2018, \u201cHow to Explain Miscomputation,\u201d\n<em>Philosophers\u2019 Imprint</em>, 18(24).\n[<a href=\"https://www.philosophersimprint.org/018024/\" target=\"other\">Tucker 2018 available online</a>]</li>\n<li>Turing, A. M., 1936\u20137, \u201cOn Computable Numbers, with an\nApplication to the Entscheidungsproblem,\u201d <em>Proceeding of the\nLondon Mathematical Society</em>, 42(1): 230\u2013265, reprinted in\nDavis 2004b, pp. 116\u2013154.</li>\n<li>\u2013\u2013\u2013, 1950, \u201cComputing Machinery and\nIntelligence,\u201d <em>Mind</em>, LIX(236): 433\u2013460.</li>\n<li>Wheeler, J. A., 1982, \u201cThe Computer and the Universe,\u201d\n<em>International Journal of Theoretical Physics</em>, 21(6\u20137):\n557\u2013572.</li>\n<li>\u2013\u2013\u2013, 1989, \u201cInformation, Physics, Quantum:\nThe Search for Links,\u201d <i>Proceedings III International\nSymposium on Foundations of Quantum Mechanics</i>, Tokyo,\n354\u2013358.</li>\n<li>Wolfram, S., 2002, <em>A New Kind of Science</em>, Champaign, IL:\nWolfram Media.</li>\n<li>Zuse, K., 1970, <em>Calculating Space</em>, Cambridge, MA: MIT\nPress.</li>\n<li>\u2013\u2013\u2013, 1982, \u201cThe Computing Universe,\u201d\n<em>International Journal of Theoretical Physics</em>, 21(6\u20137):\n589\u2013600.</li>\n</ul>\n</div>"
    },
    "related_entries": {
        "entry_list": [
            "Church-Turing Thesis",
            "computability and complexity",
            "computing: modern history of",
            "information",
            "mathematics, philosophy of",
            "mind: computational theory of",
            "models in science",
            "quantum theory: quantum computing",
            "quantum theory: quantum entanglement and information",
            "recursive functions",
            "Turing machines"
        ],
        "entry_link": [
            {
                "../church-turing/": "Church-Turing Thesis"
            },
            {
                "../computability/": "computability and complexity"
            },
            {
                "../computing-history/": "computing: modern history of"
            },
            {
                "../information/": "information"
            },
            {
                "../philosophy-mathematics/": "mathematics, philosophy of"
            },
            {
                "../computational-mind/": "mind: computational theory of"
            },
            {
                "../models-science/": "models in science"
            },
            {
                "../qt-quantcomp/": "quantum theory: quantum computing"
            },
            {
                "../qt-entangle/": "quantum theory: quantum entanglement and information"
            },
            {
                "../recursive-functions/": "recursive functions"
            },
            {
                "../turing-machine/": "Turing machines"
            }
        ]
    },
    "academic_tools": {
        "listed_text": [
            "<img alt=\"sep man icon\" src=\"../../symbols/sepman-icon.jpg\"/>",
            "<a href=\"https://plato.stanford.edu/cgi-bin/encyclopedia/archinfo.cgi?entry=computation-physicalsystems\" target=\"other\">How to cite this entry</a>.",
            "<img alt=\"sep man icon\" src=\"../../symbols/sepman-icon.jpg\"/>",
            "<a href=\"https://leibniz.stanford.edu/friends/preview/computation-physicalsystems/\" target=\"other\">Preview the PDF version of this entry</a> at the\n <a href=\"https://leibniz.stanford.edu/friends/\" target=\"other\">Friends of the SEP Society</a>.",
            "<img alt=\"inpho icon\" src=\"../../symbols/inpho.png\"/>",
            "<a href=\"https://www.inphoproject.org/entity?sep=computation-physicalsystems&amp;redirect=True\" target=\"other\">Look up topics and thinkers related to this entry</a>\n at the Internet Philosophy Ontology Project (InPhO).",
            "<img alt=\"phil papers icon\" src=\"../../symbols/pp.gif\"/>",
            "<a href=\"https://philpapers.org/sep/computation-physicalsystems/\" target=\"other\">Enhanced bibliography for this entry</a>\nat <a href=\"https://philpapers.org/\" target=\"other\">PhilPapers</a>, with links to its database."
        ],
        "listed_links": [
            {
                "https://plato.stanford.edu/cgi-bin/encyclopedia/archinfo.cgi?entry=computation-physicalsystems": "How to cite this entry"
            },
            {
                "https://leibniz.stanford.edu/friends/preview/computation-physicalsystems/": "Preview the PDF version of this entry"
            },
            {
                "https://leibniz.stanford.edu/friends/": "Friends of the SEP Society"
            },
            {
                "https://www.inphoproject.org/entity?sep=computation-physicalsystems&redirect=True": "Look up topics and thinkers related to this entry"
            },
            {
                "https://philpapers.org/sep/computation-physicalsystems/": "Enhanced bibliography for this entry"
            },
            {
                "https://philpapers.org/": "PhilPapers"
            }
        ]
    },
    "other_internet_resources": {
        "listed_text": [
            "Hodges, A., 2005,\n \u201c<a href=\"http://arxiv.org/pdf/quant-ph/0512248\" target=\"other\">Can quantum computing solve classically unsolvable problems?</a>\u201d\n [PDF].",
            "<a href=\"https://www.mdpi.com/journal/entropy/special_issues/information_computation\" target=\"other\">special issue of the journal <em>Entropy</em></a>, \n  published by MDPI (aka Multidisciplinary Digital Publishing Institute).",
            "<a href=\"http://philpapers.org/browse/computation-and-physical-systems\" target=\"other\">Bibliography on Computation and Physical Systems</a>,\n at the\n <a href=\"http://www.philpapers.org/\" target=\"other\">PhilPapers</a>\n website.",
            "<a href=\"http://www.hypercomputation.net/\" target=\"other\">Hypercomputation Research Network</a>"
        ],
        "listed_links": [
            {
                "http://arxiv.org/pdf/quant-ph/0512248": "Can quantum computing solve classically unsolvable problems?"
            },
            {
                "https://www.mdpi.com/journal/entropy/special_issues/information_computation": "special issue of the journal Entropy"
            },
            {
                "http://philpapers.org/browse/computation-and-physical-systems": "Bibliography on Computation and Physical Systems"
            },
            {
                "http://www.philpapers.org/": "PhilPapers"
            },
            {
                "http://www.hypercomputation.net/": "Hypercomputation Research Network"
            }
        ]
    }
}