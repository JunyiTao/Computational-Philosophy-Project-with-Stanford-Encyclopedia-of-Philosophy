{
    "main_text": "Computing with Turing Machines || Some (Simple) Examples\n2.1 Some (Simple) Examples\n\nIn order to speak about a Turing machine that does something useful\nfrom the human perspective, we will have to provide an interpretation\nof the symbols recorded on the tape. For example, if we want to design\na machine which will compute some mathematical function, addition say,\nthen we will need to describe how to interpret the ones and zeros\nappearing on the tape as numbers.\n\nIn the examples that follow we will represent the number n as\na block of \\(n+1\\) copies of the symbol \u20181\u2019 on the tape.\nThus we will represent the number 0 as a single \u20181\u2019 and\nthe number 3 as a block of four \u20181\u2019s. This is called\nunary notation.\n\nWe will also have to make some assumptions about the configuration of\nthe tape when the machine is started, and when it finishes, in order\nto interpret the computation. We will assume that if the function to\nbe computed requires n arguments, then the Turing machine\nwill start with its head scanning the leftmost \u20181\u2019 of a\nsequence of n blocks of \u20181\u2019s. The blocks of\n\u20181\u2019s representing the arguments must be separated by a\nsingle occurrence of the symbol \u20180\u2019. For example, to\ncompute the sum \\(3+4\\), a Turing machine will start in the\nconfiguration shown in\n Figure 3.\n\n\n\nFigure 3: Initial configuration for a\ncomputation over two numbers n and m\n\n\nHere the supposed addition machine takes two arguments representing\nthe numbers to be added, starting at the leftmost 1 of the first\nargument. The arguments are separated by a single 0 as required, and\nthe first block contains four \u20181\u2019s, representing the\nnumber 3, and the second contains five \u20181\u2019s, representing\nthe number 4.\n\nA machine must finish in standard configuration too. There must be a\nsingle block of symbols (a sequence of 1s representing some number or\na symbol representing another kind of output) and the machine must be\nscanning the leftmost symbol of that sequence. If the machine\ncorrectly computes the function then this block must represent the\ncorrect answer.\n\nAdopting this convention for the terminating configuration of a Turing\nmachine means that we can compose machines by identifying the final\nstate of one machine with the initial state of the next.\nAddition of two numbers n and m\n\nTable 4\n gives the transition table of a Turing machine \\(T_{\\textrm{Add}_2}\\)\nwhich adds two natural numbers n and m. We assume the\nmachine starts in state \\(q_1\\) scanning the leftmost 1 of\n\\(n+1\\).\n\n\nTable 4: Transition table for\n\\(T_{\\textrm{Add}_2}\\)\n\n\n\n\n0\n1 \n\n\\(q_1\\)\n/\n\\(0\\opR q_2\\) \n\n\\(q_2\\)\n\\(1\\opL q_3\\)\n\\(1\\opR q_2\\) \n\n\\(q_3\\)\n\\(0\\opR q_{4}\\)\n\\(1\\opL q_3\\) \n\n\\(q_4\\)\n\\(/\\)\n\\(0\\opR q_{\\textrm{halt}}\\)  \n\n\n\nThe idea of doing an addition with Turing machines when using unary\nrepresentation is to shift the leftmost number n one square to\nthe right. This is achieved by erasing the leftmost 1 of \\(n +1\\)\n(this is done in state \\(q_1\\)) and then setting the 0 between \\(n+1\\)\nand \\(m+1\\) to 1 (state \\(q_2\\)). We then have \\(n + m + 2\\) and so we\nstill need to erase one additional 1. This is done by erasing the\nleftmost 1 (states \\(q_3\\) and \\(q_4\\)).\n Figure 4\n shows this computation for \\(3 + 4\\).\n\n\n\nFigure 4: The computation of \\(3+4\\) by\n\\(T_{\\textrm{Add}_2}\\)\n\nAddition of n numbers\n\nWe can generalize \\(T_{\\textrm{Add}_2}\\) to a Turing machine\n\\(T_{\\textrm{Add}_i}\\) for the addition of an arbitrary number\ni of integers \\(n_1, n_2,\\ldots, n_j\\). We assume\nagain that the machine starts in state \\(q_1\\) scanning the leftmost 1\nof \\(n_1+1\\). The transition table for such a machine\n\\(T_{\\textrm{Add}_i}\\) is given in\n Table 5.\n\n\nTable 5: Transition table for\n\\(T_{\\textrm{Add}_i}\\)\n\n\n\n\n0\n1 \n\n\\(q_1\\)\n/\n\\(0\\opR q_2\\) \n\n\\(q_2\\)\n\\(1\\opR q_3\\)\n\\(1\\opR q_2\\) \n\n\\(q_3\\)\n\\(0\\opL q_{6}\\)\n\\(1\\opL q_4\\) \n\n\\(q_4\\)\n\\(0\\opR q_5\\)\n\\(1\\opL q_4\\) \n\n\\(q_5\\)\n/\n\\(0\\opR q_1\\) \n\n\\(q_6\\)\n\\(0\\opR q_{\\textrm{halt}}\\)\n\\(1\\opL q_6\\) \n\n\n\n\nThe machine \\(T_{\\textrm{Add}_i}\\) uses the principle of shifting the\naddends to the right which was also used for \\(T_{\\textrm{Add}_2}\\).\nMore particularly, \\(T_{add_i}\\) computes the sum of \\(n_1 + 1\\),\n\\(n_2 + 1\\),\u2026 \\(n_i+1\\) from left to right, viz. it computes\nthis sum as follows:  \n\n\\[\\begin{align}\nN_1 & = n_1 + n_2 + 1\\\\\nN_2  & = N_1 + n_3 \\\\\nN_3  &= N_2 + n_4\\\\\n &\\vdots\\\\\nN_i  &= N_{i-1} + n_i + 1\n\\end{align}\n\\]\n\n\nThe most important difference between \\(T_{\\textrm{Add}_2}\\) and\n\\(T_{\\textrm{Add}_i}\\) is that \\(T_{\\textrm{Add}_i}\\) needs to verify\nif the leftmost addend \\(N_j, 1 < j \\leq i\\) is equal to\n\\(N_i\\). This is achieved by checking whether the first 0 to the right\nof \\(N_j\\) is followed by another 0 or not (states \\(q_2\\) and\n\\(q_3\\)). If it is not the case, then there is at least one more\naddend \\(n_{j+1}\\) to be added. Note that, as was the case for \\(T_{\\textrm{Add}_2}\\), the machine needs to erase an additional one from the addend \\(n_{j+1}\\) which is done via state \\(q_5\\). It then moves back to state \\(q_1\\). \nIf, on the other hand, \\(N_j = N_i\\), the machine moves to the leftmost 1 of \\(N_i = n_1 + n_2 + \\ldots + n_i + 1 \\) and halts.\n",
    "section_title": "2.1 Some (Simple) Examples",
    "entry_title": "Turing Machines",
    "hierarchy_title": "Turing Machines || Computing with Turing Machines || Some (Simple) Examples",
    "tokenized_text": [
        "computing",
        "turing",
        "machine",
        "simple",
        "example",
        "simple",
        "example",
        "order",
        "speak",
        "turing",
        "machine",
        "something",
        "useful",
        "human",
        "perspective",
        "provide",
        "interpretation",
        "symbol",
        "recorded",
        "tape",
        "example",
        "want",
        "design",
        "machine",
        "compute",
        "mathematical",
        "function",
        "addition",
        "say",
        "need",
        "describe",
        "interpret",
        "one",
        "zero",
        "appearing",
        "tape",
        "number",
        "example",
        "follow",
        "represent",
        "number",
        "n",
        "block",
        "n",
        "copy",
        "symbol",
        "tape",
        "thus",
        "represent",
        "number",
        "single",
        "number",
        "block",
        "four",
        "called",
        "unary",
        "notation",
        "also",
        "make",
        "assumption",
        "configuration",
        "tape",
        "machine",
        "started",
        "finish",
        "order",
        "interpret",
        "computation",
        "assume",
        "function",
        "computed",
        "requires",
        "n",
        "argument",
        "turing",
        "machine",
        "start",
        "head",
        "scanning",
        "leftmost",
        "sequence",
        "n",
        "block",
        "block",
        "representing",
        "argument",
        "must",
        "separated",
        "single",
        "occurrence",
        "symbol",
        "example",
        "compute",
        "sum",
        "turing",
        "machine",
        "start",
        "configuration",
        "shown",
        "figure",
        "figure",
        "initial",
        "configuration",
        "computation",
        "two",
        "number",
        "n",
        "supposed",
        "addition",
        "machine",
        "take",
        "two",
        "argument",
        "representing",
        "number",
        "added",
        "starting",
        "leftmost",
        "first",
        "argument",
        "argument",
        "separated",
        "single",
        "required",
        "first",
        "block",
        "contains",
        "four",
        "representing",
        "number",
        "second",
        "contains",
        "five",
        "representing",
        "number",
        "machine",
        "must",
        "finish",
        "standard",
        "configuration",
        "must",
        "single",
        "block",
        "symbol",
        "sequence",
        "representing",
        "number",
        "symbol",
        "representing",
        "another",
        "kind",
        "output",
        "machine",
        "must",
        "scanning",
        "leftmost",
        "symbol",
        "sequence",
        "machine",
        "correctly",
        "computes",
        "function",
        "block",
        "must",
        "represent",
        "correct",
        "answer",
        "adopting",
        "convention",
        "terminating",
        "configuration",
        "turing",
        "machine",
        "mean",
        "compose",
        "machine",
        "identifying",
        "final",
        "state",
        "one",
        "machine",
        "initial",
        "state",
        "next",
        "addition",
        "two",
        "number",
        "n",
        "table",
        "give",
        "transition",
        "table",
        "turing",
        "machine",
        "t_",
        "textrm",
        "add",
        "_",
        "add",
        "two",
        "natural",
        "number",
        "n",
        "m",
        "assume",
        "machine",
        "start",
        "state",
        "q_",
        "scanning",
        "leftmost",
        "n",
        "table",
        "transition",
        "table",
        "t_",
        "textrm",
        "add",
        "_",
        "q_",
        "opr",
        "q_",
        "q_",
        "opl",
        "q_",
        "opr",
        "q_",
        "q_",
        "opr",
        "q_",
        "opl",
        "q_",
        "q_",
        "opr",
        "q_",
        "textrm",
        "halt",
        "idea",
        "addition",
        "turing",
        "machine",
        "using",
        "unary",
        "representation",
        "shift",
        "leftmost",
        "number",
        "n",
        "one",
        "square",
        "right",
        "achieved",
        "erasing",
        "leftmost",
        "n",
        "done",
        "state",
        "q_",
        "setting",
        "n",
        "m",
        "state",
        "q_",
        "n",
        "still",
        "need",
        "erase",
        "one",
        "additional",
        "done",
        "erasing",
        "leftmost",
        "state",
        "q_",
        "q_",
        "figure",
        "show",
        "computation",
        "figure",
        "computation",
        "t_",
        "textrm",
        "add",
        "_",
        "addition",
        "n",
        "number",
        "generalize",
        "t_",
        "textrm",
        "add",
        "_",
        "turing",
        "machine",
        "t_",
        "textrm",
        "add",
        "_i",
        "addition",
        "arbitrary",
        "number",
        "integer",
        "n_",
        "n_",
        "ldots",
        "n_j",
        "assume",
        "machine",
        "start",
        "state",
        "q_",
        "scanning",
        "leftmost",
        "n_",
        "transition",
        "table",
        "machine",
        "t_",
        "textrm",
        "add",
        "_i",
        "given",
        "table",
        "table",
        "transition",
        "table",
        "t_",
        "textrm",
        "add",
        "_i",
        "q_",
        "opr",
        "q_",
        "q_",
        "opr",
        "q_",
        "opr",
        "q_",
        "q_",
        "opl",
        "q_",
        "opl",
        "q_",
        "q_",
        "opr",
        "q_",
        "opl",
        "q_",
        "q_",
        "opr",
        "q_",
        "q_",
        "opr",
        "q_",
        "textrm",
        "halt",
        "opl",
        "q_",
        "machine",
        "t_",
        "textrm",
        "add",
        "_i",
        "us",
        "principle",
        "shifting",
        "addend",
        "right",
        "also",
        "used",
        "t_",
        "textrm",
        "add",
        "_",
        "particularly",
        "t_",
        "add_i",
        "computes",
        "sum",
        "n_",
        "n_",
        "n_i",
        "left",
        "right",
        "viz",
        "computes",
        "sum",
        "follows",
        "begin",
        "align",
        "n_",
        "n_",
        "n_",
        "n_",
        "n_",
        "n_",
        "n_",
        "n_",
        "n_",
        "vdots",
        "n_i",
        "n_",
        "i",
        "n_i",
        "end",
        "align",
        "important",
        "difference",
        "t_",
        "textrm",
        "add",
        "_",
        "t_",
        "textrm",
        "add",
        "_i",
        "t_",
        "textrm",
        "add",
        "_i",
        "need",
        "verify",
        "leftmost",
        "addend",
        "n_j",
        "j",
        "leq",
        "i",
        "equal",
        "n_i",
        "achieved",
        "checking",
        "whether",
        "first",
        "right",
        "n_j",
        "followed",
        "another",
        "state",
        "q_",
        "q_",
        "case",
        "least",
        "one",
        "addend",
        "n_",
        "j",
        "added",
        "note",
        "case",
        "t_",
        "textrm",
        "add",
        "_",
        "machine",
        "need",
        "erase",
        "additional",
        "one",
        "addend",
        "n_",
        "j",
        "done",
        "via",
        "state",
        "q_",
        "move",
        "back",
        "state",
        "q_",
        "hand",
        "n_j",
        "n_i",
        "machine",
        "move",
        "leftmost",
        "n_i",
        "n_",
        "n_",
        "ldots",
        "n_i",
        "halt"
    ]
}