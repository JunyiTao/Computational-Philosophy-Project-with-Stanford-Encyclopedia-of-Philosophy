{
    "main_text": "Syntax || Fundamental Ideas\n1.1 Fundamental Ideas\n\nWe start with an informal description of the fundamental ideas\nunderlying the syntax of Church\u2019s formulation of type\ntheory.\n\nAll entities have types, and if \u03b1 and \u03b2 are types, the type\nof functions from elements of type \u03b2 to elements of type \u03b1\nis written as \\((\\alpha \\beta)\\). (This notation was introduced by\nChurch, but some authors write \\((\\beta \\rightarrow \\alpha)\\) instead\nof \\((\\alpha \\beta)\\). See, for example, Section 2 of the entry on\n type theory.)\n\nAs noted by Sch\u00f6nfinkel (1924), functions of more than one\nargument can be represented in terms of functions of one argument when\nthe values of these functions can themselves be functions. For\nexample, if f is a function of two arguments, for each element\nx of the left domain of f there is a function g\n(depending on x) such that \\(gy = fxy\\) for each element\ny of the right domain of f. We may now write \\(g = fx\\),\nand regard f as a function of a single argument, whose value\nfor any argument x in its domain is a function \\(fx\\), whose\nvalue for any argument y in its domain is fxy.\n\nFor a more explicit example, consider the function + which carries any\npair of natural numbers to their sum. We may denote this function by\n\\(+_{((\\sigma \\sigma)\\sigma)}\\), where \\(\\sigma\\) is the type of\nnatural numbers. Given any number x, \\([+_{((\\sigma\n\\sigma)\\sigma)}x]\\) is the function which, when applied to any number\ny, gives the value \\([[+_{((\\sigma \\sigma)\\sigma)}x]y]\\), which\nis ordinarily abbreviated as \\(x + y\\). Thus \\([+_{((\\sigma\n\\sigma)\\sigma)}x]\\) is the function of one argument which adds\nx to any number. When we think of \\(+_{((\\sigma\n\\sigma)\\sigma)}\\) as a function of one argument, we see that it maps\nany number x to the function \\([+_{((\\sigma\n\\sigma)\\sigma)}x]\\).\n\nMore generally, if f is a function which maps n-tuples\n\\(\\langle w_{\\beta},x_{\\gamma},\\ldots ,y_{\\delta},z_{\\tau}\\rangle\\) of\nelements of types \\(\\beta\\), \\(\\gamma\\),\u2026, \\(\\delta\\)\n,\\(\\tau\\), respectively, to elements of type \u03b1, we may assign to\nf the type \\(((\\ldots((\\alpha \\tau)\\delta)\\ldots\n\\gamma)\\beta)\\). It is customary to use the convention of association\nto the left to omit parentheses, and write this type symbol simply as\n\\((\\alpha \\tau \\delta \\ldots \\gamma \\beta)\\).\n\nA set or property can be represented by a function (often called\ncharacteristic function) which maps elements to truth values,\nso that an element is in the set, or has the property, in question iff\nthe function representing the set or property maps that element to\ntruth. When a statement is asserted, the speaker means that it is\ntrue, so that \\(s x\\) means that \\(s x\\) is true, which also expresses\nthe assertions that s maps x to truth and that \\(x \\in\ns\\). In other words, \\(x \\in s\\) iff \\(s x\\). We take \\({o}\\) as the\ntype symbol denoting the type of truth values, so we may speak of any\nfunction of type \\(({o}\\alpha)\\) as a set of elements of type\n\u03b1. A function of type \\((({o}\\alpha)\\beta)\\) is a binary\nrelation between elements of type \u03b2 and elements of type \u03b1.\nFor example, if \\(\\sigma\\) is the type of the natural numbers, and\n\\(<\\) is the order relation between natural numbers, \\(<\\) has\ntype \\(({o}\\sigma \\sigma)\\), and for all natural numbers x and\n\\(y, {<}x y\\) (which we ordinarily write as \\(x < y)\\) has the\nvalue truth iff x is less than y. Of course, \\(<\\)\ncan also be regarded as the function which maps each natural number\nx to the set \\(<x\\) of all natural numbers y such\nthat x is less than y. Thus sets, properties, and\nrelations may be regarded as particular kinds of functions.\nChurch\u2019s type type theory is thus a logic of functions, and, in\nthis sense, it is in the tradition of the work of Frege\u2019s\nBegriffsschrift. The opposite approach would be to reduce\nfunctions to relations, which was the approach taken by Whitehead and\nRussell (1927a) in the Principia Mathematica.\n\nExpressions which denote elements of type \u03b1 are called wffs\nof type \u03b1. Thus, statements of type theory are wffs of type\n\\({o}\\).\n\nIf \\(\\bA_{\\alpha}\\) is a wff of type \u03b1 in which \\(\\bu_{\\alpha\n\\beta}\\) is not free, the function (associated with) \\(\\bu_{\\alpha\n\\beta}\\) such that \\(\\forall \\bv_{\\beta}[\\bu_{\\alpha \\beta}\\bv_{\\beta}\n= \\bA_{\\alpha}]\\) is denoted by \\([\\lambda \\bv_{\\beta}\\bA_{\\alpha}]\\).\nThus \\(\\lambda \\bv_{\\beta}\\) is a variable-binder, like \\(\\forall\n\\bv_{\\beta}\\) or \\(\\exists \\bv_{\\beta}\\) (but with a quite different\nmeaning, of course); \u03bb is known as an abstraction\noperator. \\([\\lambda \\bv_{\\beta}\\bA_{\\alpha}]\\) denotes the\nfunction whose value on any argument \\(\\bv_{\\beta}\\) is\n\\(\\bA_{\\alpha}\\), where \\(\\bv_{\\beta}\\) may occur free in\n\\(\\bA_{\\alpha}\\). For example, \\([\\lambda n_{\\sigma}[4\\cdot\nn_{\\sigma}+3]]\\) denotes the function whose value on any natural\nnumber n is \\(4\\cdot n+3\\). Hence, when we apply this function\nto the number 5 we obtain \\([\\lambda n_{\\sigma}[4\\cdot n_{\\sigma}+3]]5\n= 4\\cdot 5+3 = 23\\).\n\nWe use \\(\\textsf{Sub}(\\bB,\\bv,\\bA)\\) as a notation for the result of\nsubstituting \\(\\bB\\) for \\(\\bv\\) in \\(\\bA\\), and\n\\(\\textsf{SubFree}(\\bB,\\bv,\\bA)\\) as a notation for the result of\nsubstituting \\(\\bB\\) for all free occurrences of \\(\\bv\\) in \\(\\bA\\).\nThe process of replacing \\([\\lambda\n\\bv_{\\beta}\\bA_{\\alpha}]\\bB_{\\beta}\\) by\n\\(\\textsf{SubFree}(\\bB_{\\beta},\\bv_{\\beta},\\bA_{\\alpha})\\) (or\nvice-versa) is known as \u03b2-conversion, which is one form\nof \u03bb-conversion. Of course, when \\(\\bA_{{o}}\\) is a\nwff of type \\({o}\\), \\([\\lambda \\bv_{\\beta}\\bA_{{o}}]\\) denotes the\nset of all elements \\(\\bv_{\\beta}\\) (of type \\(\\beta)\\) of which\n\\(\\bA_{{o}}\\) is true; this set may also be denoted by\n\\(\\{\\bv_{\\beta}|\\bA_{{o}}\\}\\). For example, \\([\\lambda x\\ x<y]\\)\ndenotes the set of x such that x is less than y\n(as well as that property which a number x has if it is less\nthan y). In familiar set-theoretic notation,  \n\n\\[[\\lambda \\bv_{\\beta} \\bA_{{o}}]\\bB_{\\beta} = \\textsf{SubFree}(\\bB_{\\beta},\\bv_{\\beta},\\bA_{{o}})\\]\n\n\nwould be written \n\n\\[\\bB_{\\beta} \\in \\{\\bv_{\\beta}|\\bA_{{o}}\\} \\equiv \\textsf{SubFree}(\\bB_{\\beta},\\bv_{\\beta},\\bA_{{o}}).\\]\n\n\n(By the Axiom of Extensionality for truth values, when \\(\\bC_{{o}}\\)\nand \\(\\bD_{{o}}\\) are of type \\({o}, \\bC_{{o}} \\equiv \\bD_{{o}}\\) is\nequivalent to \\(\\bC_{{o}} = \\bD_{{o}}\\).)\n\nPropositional connectives and quantifiers can be assigned types and\ncan be denoted by constants of these types. The negation function maps\ntruth values to truth values, so it has type \\(({o}{o})\\). Similarly,\ndisjunction and conjunction (etc.) are binary functions from truth\nvalues to truth values, so they have type \\(({o}{o}{o})\\).\n\nThe statement \\(\\forall \\bx_{\\alpha}\\bA_{{o}}\\) is true iff the set\n\\([\\lambda \\bx_{\\alpha}\\bA_{{o}}]\\) contains all elements of type\n\u03b1. A constant \\(\\Pi_{{o}({o}\\alpha)}\\) can be introduced (for\neach type symbol \\(\\alpha)\\) to denote a property of sets: a set\n\\(s_{{o}\\alpha}\\) has the property \\(\\Pi_{{o}({o}\\alpha)}\\) iff\n\\(s_{{o}\\alpha}\\) contains all elements of type \u03b1. With this\ninterpretation  \n\n\\[\n  \\forall s_{{o}\\alpha}\\left[\\Pi_{{o}({o}\\alpha)}s_{{o}\\alpha} \\equiv \\forall x_{\\alpha}\\left[s_{{o}\\alpha}x_{\\alpha}\\right]\\right]\n\\]\n\n\nshould be true, as well as  \n\n\\[\n  \\Pi_{{o}({o}\\alpha)}[\\lambda \\bx_{\\alpha}\\bA_{{o}}] \\equiv \\forall \\bx_{\\alpha}[[\\lambda \\bx_{\\alpha}\\bA_{{o}}]\\bx_{\\alpha}] \\label{eqPi}\n\\]\n\n\nfor any wff \\(\\bA_{{o}}\\) and variable \\(\\bx_{\\alpha}\\). Since by\n\u03bb-conversion we have  \n\n\\[\n  [\\lambda\n  \\bx_{\\alpha}\\bA_{{o}}]\\bx_{\\alpha} \\equiv\n\\bA_{{o}}\n\\]\n\n\nequation can be written more simply as  \n\n\\[\n  \\Pi_{{o}({o}\\alpha)}[\\lambda\n  \\bx_{\\alpha}\\bA_{{o}}] \\equiv \\forall\n  \\bx_{\\alpha}\\bA_{{o}}\n\\]\n\n\nThus, \\(\\forall \\bx_{\\alpha}\\) can be defined in terms of\n\\(\\Pi_{{o}({o}\\alpha)}\\), and \u03bb is the only variable-binder\nthat is needed.\n",
    "section_title": "1.1 Fundamental Ideas",
    "entry_title": "Church\u2019s Type Theory",
    "hierarchy_title": "Church\u2019s Type Theory || Syntax || Fundamental Ideas",
    "tokenized_text": [
        "syntax",
        "fundamental",
        "idea",
        "fundamental",
        "idea",
        "start",
        "informal",
        "description",
        "fundamental",
        "idea",
        "underlying",
        "syntax",
        "church",
        "formulation",
        "type",
        "theory",
        "entity",
        "type",
        "\u03b1",
        "\u03b2",
        "type",
        "type",
        "function",
        "element",
        "type",
        "\u03b2",
        "element",
        "type",
        "\u03b1",
        "written",
        "alpha",
        "beta",
        "notation",
        "introduced",
        "church",
        "author",
        "write",
        "beta",
        "rightarrow",
        "alpha",
        "instead",
        "alpha",
        "beta",
        "see",
        "example",
        "section",
        "entry",
        "type",
        "theory",
        "noted",
        "sch\u00f6nfinkel",
        "function",
        "one",
        "argument",
        "represented",
        "term",
        "function",
        "one",
        "argument",
        "value",
        "function",
        "function",
        "example",
        "f",
        "function",
        "two",
        "argument",
        "element",
        "x",
        "left",
        "domain",
        "f",
        "function",
        "g",
        "depending",
        "x",
        "gy",
        "fxy",
        "element",
        "right",
        "domain",
        "f",
        "may",
        "write",
        "g",
        "fx",
        "regard",
        "f",
        "function",
        "single",
        "argument",
        "whose",
        "value",
        "argument",
        "x",
        "domain",
        "function",
        "fx",
        "whose",
        "value",
        "argument",
        "domain",
        "fxy",
        "explicit",
        "example",
        "consider",
        "function",
        "carry",
        "pair",
        "natural",
        "number",
        "sum",
        "may",
        "denote",
        "function",
        "_",
        "sigma",
        "sigma",
        "sigma",
        "sigma",
        "type",
        "natural",
        "number",
        "given",
        "number",
        "x",
        "_",
        "sigma",
        "sigma",
        "sigma",
        "x",
        "function",
        "applied",
        "number",
        "give",
        "value",
        "_",
        "sigma",
        "sigma",
        "sigma",
        "x",
        "ordinarily",
        "abbreviated",
        "x",
        "y",
        "thus",
        "_",
        "sigma",
        "sigma",
        "sigma",
        "x",
        "function",
        "one",
        "argument",
        "add",
        "x",
        "number",
        "think",
        "_",
        "sigma",
        "sigma",
        "sigma",
        "function",
        "one",
        "argument",
        "see",
        "map",
        "number",
        "x",
        "function",
        "_",
        "sigma",
        "sigma",
        "sigma",
        "x",
        "generally",
        "f",
        "function",
        "map",
        "ntuples",
        "langle",
        "w_",
        "beta",
        "x_",
        "gamma",
        "ldots",
        "y_",
        "delta",
        "z_",
        "tau",
        "rangle",
        "element",
        "type",
        "beta",
        "gamma",
        "delta",
        "tau",
        "respectively",
        "element",
        "type",
        "\u03b1",
        "may",
        "assign",
        "f",
        "type",
        "ldots",
        "alpha",
        "tau",
        "delta",
        "ldots",
        "gamma",
        "beta",
        "customary",
        "use",
        "convention",
        "association",
        "left",
        "omit",
        "parenthesis",
        "write",
        "type",
        "symbol",
        "simply",
        "alpha",
        "tau",
        "delta",
        "ldots",
        "gamma",
        "beta",
        "set",
        "property",
        "represented",
        "function",
        "often",
        "called",
        "characteristic",
        "function",
        "map",
        "element",
        "truth",
        "value",
        "element",
        "set",
        "property",
        "question",
        "iff",
        "function",
        "representing",
        "set",
        "property",
        "map",
        "element",
        "truth",
        "statement",
        "asserted",
        "speaker",
        "mean",
        "true",
        "x",
        "mean",
        "x",
        "true",
        "also",
        "express",
        "assertion",
        "map",
        "x",
        "truth",
        "x",
        "in",
        "s",
        "word",
        "x",
        "in",
        "s",
        "iff",
        "x",
        "take",
        "type",
        "symbol",
        "denoting",
        "type",
        "truth",
        "value",
        "may",
        "speak",
        "function",
        "type",
        "alpha",
        "set",
        "element",
        "type",
        "\u03b1",
        "function",
        "type",
        "alpha",
        "beta",
        "binary",
        "relation",
        "element",
        "type",
        "\u03b2",
        "element",
        "type",
        "\u03b1",
        "example",
        "sigma",
        "type",
        "natural",
        "number",
        "order",
        "relation",
        "natural",
        "number",
        "type",
        "sigma",
        "sigma",
        "natural",
        "number",
        "x",
        "x",
        "y",
        "ordinarily",
        "write",
        "x",
        "value",
        "truth",
        "iff",
        "x",
        "le",
        "y",
        "course",
        "also",
        "regarded",
        "function",
        "map",
        "natural",
        "number",
        "x",
        "set",
        "x",
        "natural",
        "number",
        "x",
        "le",
        "y",
        "thus",
        "set",
        "property",
        "relation",
        "may",
        "regarded",
        "particular",
        "kind",
        "function",
        "church",
        "type",
        "type",
        "theory",
        "thus",
        "logic",
        "function",
        "sense",
        "tradition",
        "work",
        "frege",
        "begriffsschrift",
        "opposite",
        "approach",
        "would",
        "reduce",
        "function",
        "relation",
        "approach",
        "taken",
        "whitehead",
        "russell",
        "a",
        "principia",
        "mathematica",
        "expression",
        "denote",
        "element",
        "type",
        "\u03b1",
        "called",
        "wffs",
        "type",
        "\u03b1",
        "thus",
        "statement",
        "type",
        "theory",
        "wffs",
        "type",
        "ba_",
        "alpha",
        "wff",
        "type",
        "\u03b1",
        "bu_",
        "alpha",
        "beta",
        "free",
        "function",
        "associated",
        "bu_",
        "alpha",
        "beta",
        "forall",
        "bv_",
        "beta",
        "bu_",
        "alpha",
        "beta",
        "bv_",
        "beta",
        "ba_",
        "alpha",
        "denoted",
        "lambda",
        "bv_",
        "beta",
        "ba_",
        "alpha",
        "thus",
        "lambda",
        "bv_",
        "beta",
        "variablebinder",
        "like",
        "forall",
        "bv_",
        "beta",
        "exists",
        "bv_",
        "beta",
        "quite",
        "different",
        "meaning",
        "course",
        "\u03bb",
        "known",
        "abstraction",
        "operator",
        "lambda",
        "bv_",
        "beta",
        "ba_",
        "alpha",
        "denotes",
        "function",
        "whose",
        "value",
        "argument",
        "bv_",
        "beta",
        "ba_",
        "alpha",
        "bv_",
        "beta",
        "may",
        "occur",
        "free",
        "ba_",
        "alpha",
        "example",
        "lambda",
        "n_",
        "sigma",
        "cdot",
        "n_",
        "sigma",
        "denotes",
        "function",
        "whose",
        "value",
        "natural",
        "number",
        "n",
        "cdot",
        "n",
        "hence",
        "apply",
        "function",
        "number",
        "obtain",
        "lambda",
        "n_",
        "sigma",
        "cdot",
        "n_",
        "sigma",
        "cdot",
        "use",
        "textsf",
        "sub",
        "bb",
        "bv",
        "ba",
        "notation",
        "result",
        "substituting",
        "bb",
        "bv",
        "ba",
        "textsf",
        "subfree",
        "bb",
        "bv",
        "ba",
        "notation",
        "result",
        "substituting",
        "bb",
        "free",
        "occurrence",
        "bv",
        "ba",
        "process",
        "replacing",
        "lambda",
        "bv_",
        "beta",
        "ba_",
        "alpha",
        "bb_",
        "beta",
        "textsf",
        "subfree",
        "bb_",
        "beta",
        "bv_",
        "beta",
        "ba_",
        "alpha",
        "viceversa",
        "known",
        "\u03b2conversion",
        "one",
        "form",
        "\u03bbconversion",
        "course",
        "ba_",
        "wff",
        "type",
        "lambda",
        "bv_",
        "beta",
        "ba_",
        "denotes",
        "set",
        "element",
        "bv_",
        "beta",
        "type",
        "beta",
        "ba_",
        "true",
        "set",
        "may",
        "also",
        "denoted",
        "bv_",
        "beta",
        "ba_",
        "example",
        "lambda",
        "x",
        "x",
        "denotes",
        "set",
        "x",
        "x",
        "le",
        "well",
        "property",
        "number",
        "x",
        "le",
        "familiar",
        "settheoretic",
        "notation",
        "lambda",
        "bv_",
        "beta",
        "ba_",
        "bb_",
        "beta",
        "textsf",
        "subfree",
        "bb_",
        "beta",
        "bv_",
        "beta",
        "ba_",
        "would",
        "written",
        "bb_",
        "beta",
        "in",
        "bv_",
        "beta",
        "ba_",
        "equiv",
        "textsf",
        "subfree",
        "bb_",
        "beta",
        "bv_",
        "beta",
        "ba_",
        "axiom",
        "extensionality",
        "truth",
        "value",
        "bc_",
        "bd_",
        "type",
        "bc_",
        "equiv",
        "bd_",
        "equivalent",
        "bc_",
        "bd_",
        "propositional",
        "connective",
        "quantifier",
        "assigned",
        "type",
        "denoted",
        "constant",
        "type",
        "negation",
        "function",
        "map",
        "truth",
        "value",
        "truth",
        "value",
        "type",
        "similarly",
        "disjunction",
        "conjunction",
        "etc",
        "binary",
        "function",
        "truth",
        "value",
        "truth",
        "value",
        "type",
        "statement",
        "forall",
        "bx_",
        "alpha",
        "ba_",
        "true",
        "iff",
        "set",
        "lambda",
        "bx_",
        "alpha",
        "ba_",
        "contains",
        "element",
        "type",
        "\u03b1",
        "constant",
        "pi_",
        "alpha",
        "introduced",
        "type",
        "symbol",
        "alpha",
        "denote",
        "property",
        "set",
        "set",
        "s_",
        "alpha",
        "property",
        "pi_",
        "alpha",
        "iff",
        "s_",
        "alpha",
        "contains",
        "element",
        "type",
        "\u03b1",
        "interpretation",
        "forall",
        "s_",
        "alpha",
        "left",
        "pi_",
        "alpha",
        "s_",
        "alpha",
        "equiv",
        "forall",
        "x_",
        "alpha",
        "left",
        "s_",
        "alpha",
        "x_",
        "alpha",
        "right",
        "right",
        "true",
        "well",
        "pi_",
        "alpha",
        "lambda",
        "bx_",
        "alpha",
        "ba_",
        "equiv",
        "forall",
        "bx_",
        "alpha",
        "lambda",
        "bx_",
        "alpha",
        "ba_",
        "bx_",
        "alpha",
        "label",
        "eqpi",
        "wff",
        "ba_",
        "variable",
        "bx_",
        "alpha",
        "since",
        "\u03bbconversion",
        "lambda",
        "bx_",
        "alpha",
        "ba_",
        "bx_",
        "alpha",
        "equiv",
        "ba_",
        "equation",
        "written",
        "simply",
        "pi_",
        "alpha",
        "lambda",
        "bx_",
        "alpha",
        "ba_",
        "equiv",
        "forall",
        "bx_",
        "alpha",
        "ba_",
        "thus",
        "forall",
        "bx_",
        "alpha",
        "defined",
        "term",
        "pi_",
        "alpha",
        "\u03bb",
        "variablebinder",
        "needed"
    ]
}