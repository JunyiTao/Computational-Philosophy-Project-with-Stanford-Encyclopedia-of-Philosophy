{
    "main_text": "The Second-Order Predicate Calculus and Theory of Concepts || The Theory of Concepts\n1.3 The Theory of Concepts\n\nThe modern second-order predicate calculus includes a\ncomprehension principle that effectively guarantees that there\nexists an \\(n\\)-place relation corresponding to every open formula\nwith \\(n\\) free object variables \\(x_1,\\ldots,x_n\\). We introduce this\nprinciple by considering the following 1-place case:\n\nComprehension Principle for Concepts: \n\\(\\exists G \\forall x(Gx \\equiv \\phi)\\),  where \\(\\phi\\) is any\nformula in which \\(G\\) doesn\u2019t occur free. \n\nSimilarly the following is a Comprehension Principle for 2-place\nRelations: \n\nComprehension Principle for 2-place Relations: \n\\(\\exists R\\forall x\\forall y(Rxy \\equiv \\phi)\\),  where\n\\(\\phi\\) is any formula in which \\(R\\) doesn\u2019t occur free. \n\nAlthough Frege didn\u2019t explicitly formulate these comprehension\nprinciples, they are derivable in his system and constitute very\nimportant generalizations within his system that reveal its underlying\ntheory of concepts and relations. We can see these principles at work\nby formulating the following instance of comprehension, where\n\u2018\\(Ox\\)\u2019 asserts that \\(x\\) is odd:\n\n\\(\\exists G\\forall x(Gx \\equiv (Ox \\amp x \\gt 5))\\) \n\nThis asserts: there exists a concept \\(G\\) such that for every object\n\\(x\\), \\(x\\) falls under \\(G\\) if and only if \\(x\\) is odd and greater\nthan 5. If our second-order language were extended to include the\nprimitive predicates \u2018\\(O\\)\u2019 and \u2018\\(\\gt\\)\u2019 and\nthe primitive object term \u20185\u2019, then the above instance of\nthe Comprehension Principle for Concepts would be an axiom (and hence,\ntheorem) of second-order logic.\n\nSimilarly, the following is an instance of the Comprehension Principle\nfor Relations: \n\n\\(\\exists R\\forall x\\forall y(Rxy \\equiv (Ox \\amp x \\gt y))\\) \n\nThis asserts the existence of a relation that objects \\(x\\) and \\( y\\)\nbear to one another just in case the complex condition \\(Ox \\amp x \\gt\ny\\) holds.\n\nLogicians nowadays typically distinguish the open formula \\(\\phi\\) in\nwhich the variable \\(x\\) is free from the corresponding name of a\nconcept. For example, they use the notation \\([\\lambda x \\, Ox \\amp x\n\\gt 5]\\) as the name of the complex concept being an \\(x\\) such\nthat \\(x\\) is odd and \\(x\\) is greater than 5 (or, more\nnaturally, \u2018being odd and greater than 5\u2019). The\nterm-forming operator \\(\\lambda x\\) (which we read as \u2018being an\n\\(x\\) such that\u2019) combines with a formula \\(\\phi\\) in which\n\\(x\\) is free to produce \\([\\lambda x\\,\\phi]\\). The\n\\(\\lambda\\)-expression is a name of the concept expressed by the\nformula \\(\\phi\\). In what follows, the scope of the variable-binding\noperator \\(\\lambda x\\) in \\([\\lambda x\\,\\phi]\\) applies to the entire\nformula \\(\\phi\\), no matter how complex, so that instead of writing,\nfor example, \\([\\lambda x\\,(Ox \\amp x \\gt 5)]\\), we shall simply\nwrite: \\([\\lambda x\\, Ox \\amp x \\gt 5]\\).\n\nThis notation can be extended for relations. The expression:\n\n\\([\\lambda xy \\, Ox \\amp x \\gt y]\\) \n\nnames the 2-place relation being an \\(x\\) and \\(y\\)\nsuch that \\(x\\) is odd and \\(x\\) is greater\nthan \\(y\\).\n\nIt is important to emphasize that Frege didn\u2019t use\n\\(\\lambda\\)-notation. By contrast, he thought that predicative\nexpressions such as \u2018(\\(\\, )\\) is happy\u2019 are incomplete\nexpressions and that the concepts they denoted were\nunsaturated. We need not discuss Frege\u2019s reasons for\nthis in this entry, though interested readers may consult his 1892\nessay \u201cConcept and Object\u201d.\n\nFor the purposes of understanding Frege\u2019s Theorem, we only need\nto introduce one axiom that governs \\(\\lambda\\)-notation, namely, the\nprinciple known as \\(\\lambda \\)-Conversion. Let \\(\\phi\\) be any\nformula and let \\(\\phi^y_x\\) be the result of substituting the\nvariable \\(y\\) for free occurrences of \\(x\\) everywhere in \\(\\phi\\).\nThen the principle of \\(\\lambda\\)-Conversion is:\n\n\\(\\lambda\\)-Conversion:\n\n\\(\\forall y([\\lambda x \\, \\phi]y \\equiv \\phi^y_x)\\) \n\nThis asserts: for any object \\(y\\), \\(y\\) falls under the concept\n\\([\\lambda x \\, \\phi]\\) if and only if \\(y\\) is such that\n\\(\\phi^y_x\\). So, using our example, the following is an instance of\n\\(\\lambda\\)-conversion:\n\n\\(\\forall y([\\lambda x \\, Ox \\amp x \\gt 5]y \\equiv Oy \\amp y \\gt 5)\\)\n\n\nThis asserts: for any object \\(y\\), \\(y\\) falls under the\nconcept being odd and greater than 5 if and only if \\(y\\) is\nodd and greater than 5. Note that when the quantified variable \\(y\\)\nis instantiated to some object term, the resulting instance of\n\\(\\lambda\\)-Conversion is a biconditional. Thus, among the many\nconsequences of this axiom we find: 6 falls under the\nconcept being odd and greater than 5 if and only if 6 is odd\nand greater than 5 (in this case, the biconditional remains true\nbecause both sides are false). \n\nSome logicians call the rule of inference derived from the\nright-to-left direction of such biconditionals\n\u2018\\(\\lambda\\)-Abstraction\u2019. For example, the inference from\nthe premise: \n\n\\(O6 \\amp 6 \\gt 5\\) \n\nto the conclusion:\n\n\\([\\lambda x \\, Ox \\amp x \\gt 5]6\\) \n\nis justified by \\(\\lambda\\)-Abstraction. (Here we have a case of a\nvalid inference in which the premise and the conclusion are both\nfalse.)\n\nThe principle of \\(\\lambda\\)-Conversion can be generalized, so that it\ngoverns \\(n\\)-place \\(\\lambda\\)-expressions as well. Here is the\n2-place case:\n\n\\(\\forall z\\forall w([\\lambda xy\\, \\phi]zw \\equiv \\phi^{z,w}_{x,y})\\)\n\n\n(In this formula \\(\\phi^{z,w}_{x,y}\\) is the result of simultaneously\nsubstituting \\(z\\) for \\(x\\) and \\(w\\) for \\(y\\) in \\(\\phi\\).)\n\nThe reader should construct an instance of this principle using our\nexample \\([\\lambda xy \\, Ox \\amp x \\gt y].\\)\n\nIt should be noted at this point that instead of using comprehension\nprinciples, Frege had a distinguished rule in his system that is\nequivalent to such principles, namely, his Rule of Substitution.\nThough Frege\u2019s Rule of Substitution appears to allow the\nsubstitution of formulas \\(\\phi\\) for free concept variables \\(F\\) in\ntheorems of logic, we can understand this rule in terms of the\nsecond-order logic we\u2019ve defined as follows: in any theorem of\nlogic with a free variable \\(F^{n}\\), one may both substitute any\n\\(n\\)-place \\(\\lambda\\)-expression \\([\\lambda x_{1}\\ldots x_{n}\\,\n\\phi]\\) for \\(F^{n}\\) and then perform \\(\\lambda\\)-conversion. For\nexample, in the second-order system we now have, one can infer\n\\(\\forall x(Ox \\amp x \\gt 5 \\equiv Ox \\amp x \\gt 5)\\) from \\(\\forall\ny(Fy \\equiv Fy)\\) by first substituting \\([\\lambda x \\, Ox \\amp x \\gt\n5]\\) for \\(F\\) and then using \\(\\lambda\\)-Conversion on all the\nresulting subformulas containing the \\(\\lambda\\)-expression that flank\nthe \\(\\equiv\\) sign.  Frege\u2019s Rule of Substitution allows one to\ndo all this in one step. Readers interested in learning a bit more\nabout the connection between the Rule of Substitution and\nComprehension Principles described above can consult the following\nsupplementary document:\n\nFrege\u2019s Rule of Substitution\n\n\nFinally, it is important to point out that the system we have just\ndescribed, i.e., second-order logic with identity and comprehension\nprinciples, extended with \\(\\lambda\\)-expressions and\n\\(\\lambda\\)-Conversion, is consistent. Its axioms are true even in\nvery small interpretations, e.g., ones in which the domain of objects\ncontains a single object and each domain of \\(n\\)-place relations \\(\n(n\\geq1)\\) has just two relations. For example, if the domain of\nobjects contains a single object, say b, and the domain of\n1-place relations contains two concepts (i.e., one which b\nfalls under and one which nothing falls under), then all of the above\naxioms are true, including the Comprehension Principle for Concepts\nand 1-place \\(\\lambda\\)-Conversion. Even so, the system described\nabove requires that every concept has a negation, every pair of\nconcepts has a conjunction, every pair of concepts has a disjunction,\netc. The reader should be able to write down instances of the\ncomprehension principle which demonstrate these claims.\n\nReaders whose main goal is to understand Frege\u2019s Theorem can now\nskip directly to Section\u00a03.\n",
    "section_title": "1.3 The Theory of Concepts",
    "entry_title": "Frege\u2019s Theorem and Foundations for Arithmetic",
    "hierarchy_title": "Frege\u2019s Theorem and Foundations for Arithmetic || The Second-Order Predicate Calculus and Theory of Concepts || The Theory of Concepts",
    "tokenized_text": [
        "secondorder",
        "predicate",
        "calculus",
        "theory",
        "concept",
        "theory",
        "concept",
        "theory",
        "concept",
        "modern",
        "secondorder",
        "predicate",
        "calculus",
        "includes",
        "comprehension",
        "principle",
        "effectively",
        "guarantee",
        "exists",
        "n",
        "place",
        "relation",
        "corresponding",
        "every",
        "open",
        "formula",
        "n",
        "free",
        "object",
        "variable",
        "x_",
        "ldots",
        "x_n",
        "introduce",
        "principle",
        "considering",
        "following",
        "place",
        "case",
        "comprehension",
        "principle",
        "concept",
        "exists",
        "g",
        "forall",
        "x",
        "gx",
        "equiv",
        "phi",
        "phi",
        "formula",
        "g",
        "occur",
        "free",
        "similarly",
        "following",
        "comprehension",
        "principle",
        "place",
        "relation",
        "comprehension",
        "principle",
        "place",
        "relation",
        "exists",
        "rforall",
        "xforall",
        "rxy",
        "equiv",
        "phi",
        "phi",
        "formula",
        "r",
        "occur",
        "free",
        "although",
        "frege",
        "explicitly",
        "formulate",
        "comprehension",
        "principle",
        "derivable",
        "system",
        "constitute",
        "important",
        "generalization",
        "within",
        "system",
        "reveal",
        "underlying",
        "theory",
        "concept",
        "relation",
        "see",
        "principle",
        "work",
        "formulating",
        "following",
        "instance",
        "comprehension",
        "ox",
        "asserts",
        "x",
        "odd",
        "exists",
        "gforall",
        "x",
        "gx",
        "equiv",
        "ox",
        "amp",
        "x",
        "gt",
        "asserts",
        "exists",
        "concept",
        "g",
        "every",
        "object",
        "x",
        "x",
        "fall",
        "g",
        "x",
        "odd",
        "greater",
        "secondorder",
        "language",
        "extended",
        "include",
        "primitive",
        "predicate",
        "o",
        "gt",
        "primitive",
        "object",
        "term",
        "instance",
        "comprehension",
        "principle",
        "concept",
        "would",
        "axiom",
        "hence",
        "theorem",
        "secondorder",
        "logic",
        "similarly",
        "following",
        "instance",
        "comprehension",
        "principle",
        "relation",
        "exists",
        "rforall",
        "xforall",
        "rxy",
        "equiv",
        "ox",
        "amp",
        "x",
        "gt",
        "asserts",
        "existence",
        "relation",
        "object",
        "x",
        "y",
        "bear",
        "one",
        "another",
        "case",
        "complex",
        "condition",
        "ox",
        "amp",
        "x",
        "gt",
        "y",
        "hold",
        "logician",
        "nowadays",
        "typically",
        "distinguish",
        "open",
        "formula",
        "phi",
        "variable",
        "x",
        "free",
        "corresponding",
        "name",
        "concept",
        "example",
        "use",
        "notation",
        "lambda",
        "x",
        "ox",
        "amp",
        "x",
        "gt",
        "name",
        "complex",
        "concept",
        "x",
        "x",
        "odd",
        "x",
        "greater",
        "naturally",
        "odd",
        "greater",
        "termforming",
        "operator",
        "lambda",
        "x",
        "read",
        "x",
        "combine",
        "formula",
        "phi",
        "x",
        "free",
        "produce",
        "lambda",
        "x",
        "phi",
        "lambda",
        "expression",
        "name",
        "concept",
        "expressed",
        "formula",
        "phi",
        "follows",
        "scope",
        "variablebinding",
        "operator",
        "lambda",
        "x",
        "lambda",
        "x",
        "phi",
        "applies",
        "entire",
        "formula",
        "phi",
        "matter",
        "complex",
        "instead",
        "writing",
        "example",
        "lambda",
        "x",
        "ox",
        "amp",
        "x",
        "gt",
        "shall",
        "simply",
        "write",
        "lambda",
        "x",
        "ox",
        "amp",
        "x",
        "gt",
        "notation",
        "extended",
        "relation",
        "expression",
        "lambda",
        "xy",
        "ox",
        "amp",
        "x",
        "gt",
        "name",
        "place",
        "relation",
        "x",
        "y",
        "x",
        "odd",
        "x",
        "greater",
        "y",
        "important",
        "emphasize",
        "frege",
        "use",
        "lambda",
        "notation",
        "contrast",
        "thought",
        "predicative",
        "expression",
        "happy",
        "incomplete",
        "expression",
        "concept",
        "denoted",
        "unsaturated",
        "need",
        "discus",
        "frege",
        "reason",
        "entry",
        "though",
        "interested",
        "reader",
        "may",
        "consult",
        "essay",
        "concept",
        "object",
        "purpose",
        "understanding",
        "frege",
        "theorem",
        "need",
        "introduce",
        "one",
        "axiom",
        "governs",
        "lambda",
        "notation",
        "namely",
        "principle",
        "known",
        "lambda",
        "conversion",
        "let",
        "phi",
        "formula",
        "let",
        "phiy_x",
        "result",
        "substituting",
        "variable",
        "y",
        "free",
        "occurrence",
        "x",
        "everywhere",
        "phi",
        "principle",
        "lambda",
        "conversion",
        "lambda",
        "conversion",
        "forall",
        "lambda",
        "x",
        "phi",
        "equiv",
        "phiy_x",
        "asserts",
        "object",
        "y",
        "y",
        "fall",
        "concept",
        "lambda",
        "x",
        "phi",
        "y",
        "phiy_x",
        "using",
        "example",
        "following",
        "instance",
        "lambda",
        "conversion",
        "forall",
        "lambda",
        "x",
        "ox",
        "amp",
        "x",
        "gt",
        "equiv",
        "oy",
        "amp",
        "gt",
        "asserts",
        "object",
        "y",
        "y",
        "fall",
        "concept",
        "odd",
        "greater",
        "y",
        "odd",
        "greater",
        "note",
        "quantified",
        "variable",
        "y",
        "instantiated",
        "object",
        "term",
        "resulting",
        "instance",
        "lambda",
        "conversion",
        "biconditional",
        "thus",
        "among",
        "many",
        "consequence",
        "axiom",
        "find",
        "fall",
        "concept",
        "odd",
        "greater",
        "odd",
        "greater",
        "case",
        "biconditional",
        "remains",
        "true",
        "side",
        "false",
        "logician",
        "call",
        "rule",
        "inference",
        "derived",
        "righttoleft",
        "direction",
        "biconditionals",
        "lambda",
        "abstraction",
        "example",
        "inference",
        "premise",
        "o",
        "amp",
        "gt",
        "conclusion",
        "lambda",
        "x",
        "ox",
        "amp",
        "x",
        "gt",
        "justified",
        "lambda",
        "abstraction",
        "case",
        "valid",
        "inference",
        "premise",
        "conclusion",
        "false",
        "principle",
        "lambda",
        "conversion",
        "generalized",
        "governs",
        "n",
        "place",
        "lambda",
        "expressions",
        "well",
        "place",
        "case",
        "forall",
        "zforall",
        "w",
        "lambda",
        "xy",
        "phi",
        "zw",
        "equiv",
        "phi",
        "z",
        "w",
        "_",
        "x",
        "formula",
        "phi",
        "z",
        "w",
        "_",
        "x",
        "result",
        "simultaneously",
        "substituting",
        "z",
        "x",
        "w",
        "y",
        "phi",
        "reader",
        "construct",
        "instance",
        "principle",
        "using",
        "example",
        "lambda",
        "xy",
        "ox",
        "amp",
        "x",
        "gt",
        "noted",
        "point",
        "instead",
        "using",
        "comprehension",
        "principle",
        "frege",
        "distinguished",
        "rule",
        "system",
        "equivalent",
        "principle",
        "namely",
        "rule",
        "substitution",
        "though",
        "frege",
        "rule",
        "substitution",
        "appears",
        "allow",
        "substitution",
        "formula",
        "phi",
        "free",
        "concept",
        "variable",
        "f",
        "theorem",
        "logic",
        "understand",
        "rule",
        "term",
        "secondorder",
        "logic",
        "defined",
        "follows",
        "theorem",
        "logic",
        "free",
        "variable",
        "f",
        "n",
        "one",
        "may",
        "substitute",
        "n",
        "place",
        "lambda",
        "expression",
        "lambda",
        "x_",
        "ldots",
        "x_",
        "n",
        "phi",
        "f",
        "n",
        "perform",
        "lambda",
        "conversion",
        "example",
        "secondorder",
        "system",
        "one",
        "infer",
        "forall",
        "x",
        "ox",
        "amp",
        "x",
        "gt",
        "equiv",
        "ox",
        "amp",
        "x",
        "gt",
        "forall",
        "fy",
        "equiv",
        "fy",
        "first",
        "substituting",
        "lambda",
        "x",
        "ox",
        "amp",
        "x",
        "gt",
        "f",
        "using",
        "lambda",
        "conversion",
        "resulting",
        "subformulas",
        "containing",
        "lambda",
        "expression",
        "flank",
        "equiv",
        "sign",
        "frege",
        "rule",
        "substitution",
        "allows",
        "one",
        "one",
        "step",
        "reader",
        "interested",
        "learning",
        "bit",
        "connection",
        "rule",
        "substitution",
        "comprehension",
        "principle",
        "described",
        "consult",
        "following",
        "supplementary",
        "document",
        "frege",
        "rule",
        "substitution",
        "finally",
        "important",
        "point",
        "system",
        "described",
        "ie",
        "secondorder",
        "logic",
        "identity",
        "comprehension",
        "principle",
        "extended",
        "lambda",
        "expressions",
        "lambda",
        "conversion",
        "consistent",
        "axiom",
        "true",
        "even",
        "small",
        "interpretation",
        "eg",
        "one",
        "domain",
        "object",
        "contains",
        "single",
        "object",
        "domain",
        "n",
        "place",
        "relation",
        "ngeq",
        "two",
        "relation",
        "example",
        "domain",
        "object",
        "contains",
        "single",
        "object",
        "say",
        "b",
        "domain",
        "place",
        "relation",
        "contains",
        "two",
        "concept",
        "ie",
        "one",
        "b",
        "fall",
        "one",
        "nothing",
        "fall",
        "axiom",
        "true",
        "including",
        "comprehension",
        "principle",
        "concept",
        "place",
        "lambda",
        "conversion",
        "even",
        "system",
        "described",
        "requires",
        "every",
        "concept",
        "negation",
        "every",
        "pair",
        "concept",
        "conjunction",
        "every",
        "pair",
        "concept",
        "disjunction",
        "etc",
        "reader",
        "able",
        "write",
        "instance",
        "comprehension",
        "principle",
        "demonstrate",
        "claim",
        "reader",
        "whose",
        "main",
        "goal",
        "understand",
        "frege",
        "theorem",
        "skip",
        "directly",
        "section"
    ]
}