{
    "main_text": "Algorithms || Formal Approaches\n3.2 Formal Approaches\n\nGurevich (2011) maintains, on the one hand, that it is not possible to\nprovide formal definitions of algorithms, as the notion continues to\nevolve\u00a0over time: consider how sequential algorithms, used in\nancient mathematics, are flanked by parallel, analog, or quantum\nalgorithms in current computer science practice, and how new kinds of\nalgorithms are likely to be envisioned in the near\u00a0future. On the\nother hand, a formal analysis can be advanced if concerned only with\nclassical sequential algorithms. In particular, Gurevich (2000)\nprovides an axiomatic definition for this class of algorithms.\n\nAny sequential algorithm can be simulated by a sequential abstract\nstate machine satisfying three axioms:\n\nThe sequential-time postulate associates to any algorithm\nA a set of states S(A), a set of initial states\nI(A) subset of S(A), and a map from S(A) to\nS(A) of one-step transformations of A. States are\nsnapshot descriptions of running algorithms. A run of A is a\n(potentially infinite) sequence of states, starting from some initial\nstate, such that there is a one-step transformation from one state to\nits successor in the sequence. Termination is not presupposed by\nGurevich\u2019s definition. One-step transformations need not be\natomic, but they may be composed of a bounded set of atomic\noperations.\nAccording to the abstract-state postulate, states in\nS(A) are first-order structures, as commonly defined\nin mathematical logic; in other words, states provide a semantics to\nfirst-order statements.\nFinally, the bounded-exploration postulate states that\ngiven two states X and Y of A there is\nalways a set T of terms such that, when X and\nY coincide over T, the set of updates of X\ncorresponds to the set of updates of Y. X and\nY coincide over T when, for every term t in\nT, the evaluation of t in X is the same as\nthe evaluation of t in Y. This allows algorithm\nA to explore only those parts of states which are relative to\nterms in T.\n\n\nMoschovakis (2001) objects that the intuitive notion of algorithm is\nnot captured in full by abstract machines. Given a general recursive\nfunction f: \u2115 \u2192 \u2115 defined on natural\nnumbers, there are usually many different algorithms computing it;\n\u201cessential, implementation-independent properties\u201d are not\ncaptured by abstract machines, but rather by a system of recursive\nequations. Consider the algorithm mergesort for sorting\nlists; there are many different abstract machines for\nmergesort, and the question arises which one is to be chosen\nas the mergesort algorithm. The mergesort algorithm\nis instead the system of recursive equations specifying the involved\nfunction, whereas abstract machines for the mergesort\nprocedure are different implementations of the same\nalgorithm. Two questions are put forward by Moschovakis\u2019\nformal analysis: different implementations of the same\nalgorithm should be equivalent implementations, and yet, an\nequivalence relation among algorithm implementations is to be formally\ndefined. Furthermore, it remains to be clarified what the intuitive\nnotion of algorithm formalized by systems of recursive equations\namounts to.\n\nPrimiero (2020) proposes a reading of the nature of algorithms at\nthree different levels of abstraction. At a very high LoA, algorithms\ncan be defined abstracting from the procedure they describe, allowing\nfor many different sets of states and transitions. At this LoA\nalgorithms can be understood as informal specifications, that\nis, as informal descriptions of a procedure P. At a lower\nLoA, algorithms specify the instructions needed to solve the given\ncomputational problem; in other words, they specify a procedure.\nAlgorithms can thus be defined as procedures, or descriptions\nin some given formal language L of how to execute a procedure\nP. Many important properties of algorithms, including those\nrelated to complexity classes and data structures, cannot be\ndetermined at the procedural LoA, and instead make reference to an\nabstract machine implementing the procedure is needed. At a bottom\nLoA, algorithms can be defined as implementable abstract\nmachines, viz. as the specification, in a formal language\nL, of the executions of a program P for a given\nabstract machine M. The threefold definition of algorithms\nallows Primiero (2020) to supply a formal definition of equivalence\nrelations for algorithms in terms of the algebraic notions of\nsimulation and bisimulation (Milner 1973, see also\nAngius and Primero 2018). A machine Mi executing a\nprogram Pi implements the same algorithm of a\nmachine Mj executing a program\nPj if and only if the abstract machines\ninterpreting Mi and Mj are in\na bisimulation relation.\n",
    "section_title": "3.2 Formal Approaches",
    "entry_title": "The Philosophy of Computer Science",
    "hierarchy_title": "The Philosophy of Computer Science || Algorithms || Formal Approaches",
    "tokenized_text": [
        "algorithm",
        "formal",
        "approach",
        "formal",
        "approach",
        "gurevich",
        "maintains",
        "one",
        "hand",
        "possible",
        "provide",
        "formal",
        "definition",
        "algorithm",
        "notion",
        "continues",
        "evolve",
        "time",
        "consider",
        "sequential",
        "algorithm",
        "used",
        "ancient",
        "mathematics",
        "flanked",
        "parallel",
        "analog",
        "quantum",
        "algorithm",
        "current",
        "computer",
        "science",
        "practice",
        "new",
        "kind",
        "algorithm",
        "likely",
        "envisioned",
        "near",
        "future",
        "hand",
        "formal",
        "analysis",
        "advanced",
        "concerned",
        "classical",
        "sequential",
        "algorithm",
        "particular",
        "gurevich",
        "provides",
        "axiomatic",
        "definition",
        "class",
        "algorithm",
        "sequential",
        "algorithm",
        "simulated",
        "sequential",
        "abstract",
        "state",
        "machine",
        "satisfying",
        "three",
        "axiom",
        "sequentialtime",
        "postulate",
        "associate",
        "algorithm",
        "set",
        "state",
        "set",
        "initial",
        "state",
        "subset",
        "map",
        "onestep",
        "transformation",
        "a",
        "state",
        "snapshot",
        "description",
        "running",
        "algorithm",
        "run",
        "potentially",
        "infinite",
        "sequence",
        "state",
        "starting",
        "initial",
        "state",
        "onestep",
        "transformation",
        "one",
        "state",
        "successor",
        "sequence",
        "termination",
        "presupposed",
        "gurevich",
        "definition",
        "onestep",
        "transformation",
        "need",
        "atomic",
        "may",
        "composed",
        "bounded",
        "set",
        "atomic",
        "operation",
        "according",
        "abstractstate",
        "postulate",
        "state",
        "firstorder",
        "structure",
        "commonly",
        "defined",
        "mathematical",
        "logic",
        "word",
        "state",
        "provide",
        "semantics",
        "firstorder",
        "statement",
        "finally",
        "boundedexploration",
        "postulate",
        "state",
        "given",
        "two",
        "state",
        "x",
        "always",
        "set",
        "term",
        "x",
        "coincide",
        "set",
        "update",
        "x",
        "corresponds",
        "set",
        "update",
        "y",
        "x",
        "coincide",
        "every",
        "term",
        "evaluation",
        "x",
        "evaluation",
        "y",
        "allows",
        "algorithm",
        "explore",
        "part",
        "state",
        "relative",
        "term",
        "t",
        "moschovakis",
        "object",
        "intuitive",
        "notion",
        "algorithm",
        "captured",
        "full",
        "abstract",
        "machine",
        "given",
        "general",
        "recursive",
        "function",
        "f",
        "\u2115",
        "\u2115",
        "defined",
        "natural",
        "number",
        "usually",
        "many",
        "different",
        "algorithm",
        "computing",
        "essential",
        "implementationindependent",
        "property",
        "captured",
        "abstract",
        "machine",
        "rather",
        "system",
        "recursive",
        "equation",
        "consider",
        "algorithm",
        "mergesort",
        "sorting",
        "list",
        "many",
        "different",
        "abstract",
        "machine",
        "mergesort",
        "question",
        "arises",
        "one",
        "chosen",
        "mergesort",
        "algorithm",
        "mergesort",
        "algorithm",
        "instead",
        "system",
        "recursive",
        "equation",
        "specifying",
        "involved",
        "function",
        "whereas",
        "abstract",
        "machine",
        "mergesort",
        "procedure",
        "different",
        "implementation",
        "algorithm",
        "two",
        "question",
        "put",
        "forward",
        "moschovakis",
        "formal",
        "analysis",
        "different",
        "implementation",
        "algorithm",
        "equivalent",
        "implementation",
        "yet",
        "equivalence",
        "relation",
        "among",
        "algorithm",
        "implementation",
        "formally",
        "defined",
        "furthermore",
        "remains",
        "clarified",
        "intuitive",
        "notion",
        "algorithm",
        "formalized",
        "system",
        "recursive",
        "equation",
        "amount",
        "primiero",
        "proposes",
        "reading",
        "nature",
        "algorithm",
        "three",
        "different",
        "level",
        "abstraction",
        "high",
        "loa",
        "algorithm",
        "defined",
        "abstracting",
        "procedure",
        "describe",
        "allowing",
        "many",
        "different",
        "set",
        "state",
        "transition",
        "loa",
        "algorithm",
        "understood",
        "informal",
        "specification",
        "informal",
        "description",
        "procedure",
        "p",
        "lower",
        "loa",
        "algorithm",
        "specify",
        "instruction",
        "needed",
        "solve",
        "given",
        "computational",
        "problem",
        "word",
        "specify",
        "procedure",
        "algorithm",
        "thus",
        "defined",
        "procedure",
        "description",
        "given",
        "formal",
        "language",
        "l",
        "execute",
        "procedure",
        "p",
        "many",
        "important",
        "property",
        "algorithm",
        "including",
        "related",
        "complexity",
        "class",
        "data",
        "structure",
        "determined",
        "procedural",
        "loa",
        "instead",
        "make",
        "reference",
        "abstract",
        "machine",
        "implementing",
        "procedure",
        "needed",
        "bottom",
        "loa",
        "algorithm",
        "defined",
        "implementable",
        "abstract",
        "machine",
        "viz",
        "specification",
        "formal",
        "language",
        "l",
        "execution",
        "program",
        "p",
        "given",
        "abstract",
        "machine",
        "m",
        "threefold",
        "definition",
        "algorithm",
        "allows",
        "primiero",
        "supply",
        "formal",
        "definition",
        "equivalence",
        "relation",
        "algorithm",
        "term",
        "algebraic",
        "notion",
        "simulation",
        "bisimulation",
        "milner",
        "see",
        "also",
        "angius",
        "primero",
        "machine",
        "mi",
        "executing",
        "program",
        "pi",
        "implement",
        "algorithm",
        "machine",
        "mj",
        "executing",
        "program",
        "pj",
        "abstract",
        "machine",
        "interpreting",
        "mi",
        "mj",
        "bisimulation",
        "relation"
    ]
}