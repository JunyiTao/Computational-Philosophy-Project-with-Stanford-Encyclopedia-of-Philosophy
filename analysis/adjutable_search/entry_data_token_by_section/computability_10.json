{
    "main_text": "Computational Complexity: Functions Computable in Practice || Reductions and Completeness\n4.2 Significance of Complexity\n\n\nThe reason that the class NP is so\nwell studied is that a large number of important practical problems are\nNP complete, including Subset Sum. None of these problems is known to\nhave an algorithm that is faster than exponential time, although some\nNP-complete problems admit feasible approximations to their\nsolutions.\n\n\nA great deal remains open about computational complexity. We know that\nstrictly more of a particular computational resource lets us solve\nstrictly harder problems, e.g. \\(\\TIME[n]\\) is strictly contained in\n\\(\\TIME[n^{1.01}]\\) and similarly for \\(\\SPACE\\) and other\nmeasures. However, the trade-offs between different computational\nresources is still quite poorly understood. It is obvious that \\(\\P\\)\nis contained in \\(\\NP\\). Furthermore, \\(\\NP\\) is contained in\n\\(\\PSPACE\\) because in \\(\\PSPACE\\) we can systematically try every\nsingle branch of an \\(\\NP\\) computation, reusing space for the\nsuccessive branches, and accepting if any of these branches lead to\nacceptance. \\(\\PSPACE\\) is contained in \\(\\EXPTIME\\) because if a\n\\(\\PSPACE\\) machine takes more than exponential time, then it has\nexactly repeated some configuration so it must be in an infinite\nloop. The following are the known relationships between the above\nclasses:\n\n\\[\n\\P \\subseteq \\NP \\subseteq \\PSPACE \\subseteq \\EXPTIME\n\\]\n\n\n\nHowever, while it seems clear that \\(\\P\\) is strictly contained in\n\\(\\NP\\), that \\(\\NP\\) is strictly contained in \\(\\PSPACE\\), and that\n\\(\\PSPACE\\) is strictly contained in \\(\\EXPTIME\\), none of these\ninequalities has been proved. In fact, it is not even known that\n\\(\\P\\) is different from \\(\\PSPACE\\), nor that \\(\\NP\\) is different\nfrom \\(\\EXPTIME\\). The only known proper inclusion from the above is\nthat \\(\\P\\) is strictly contained in \\(\\EXPTIME\\). The remaining\nquestions concerning the relative power of different computational\nresources are fundamental unsolved problems in the theory of\ncomputation.\n\n\nThe following diagram  maps out all the\ncomplexity classes we have discussed and a few more as well.  The diagram comes from work in\nDescriptive Complexity [Immerman, 1999] which \nshows that all important complexity \nclasses have descriptive characterizations.  Fagin began this field by proving that NP = \nSO\\(\\exists\\), i.e., a property is in NP iff it is expressible in second-order existential logic\n[Fagin, 1974].\n\n\nVardi and the author of this entry later independently proved that P =\nFO(LFP): a property is in P iff it is expressible in first-order logic\nplus a least fixed-point operator (LFP) which formalizes the power to\ndefine new relations by induction.  A captivating corollary of this is\nthat P = NP iff SO = FO(LFP).  That is, P is equal to NP iff every\nproperty expressible in second order logic is already expressible in\nfirst-order logic plus inductive definitions. (The languages in\nquestion are over finite ordered input structures.  See [Immerman,\n1999] for details.)\n\n\nThe World of Computability and Complexity\n\n\n\nThe top right of the diagram shows the recursively enumerable (r.e.)\nproblems; this includes r.e.-complete problems such as the halting\nproblem (Halt). On the left is the set of co-r.e. problems including\nthe co-r.e.-complete problem \\(\\overline{{\\rm Halt}}\\) -- the set of\nTuring Machines that never halt on a given input.  We mentioned at the\nend of Section 2.3 that the intersection of the set of r.e problems\nand the set of co-r.e problems is equal to the set of Recursive\nproblems.  The set of Primitive Recursive problems is a strict subset\nof the Recursive problems.\n\n\nMoving toward the bottom of the diagram, there is a region marked with\na green dotted line labelled \u201ctruly feasible\u201d.  Note that\nthis is not a mathematically defined class, but rather an intuitive\nnotion of those problems that can be solved exactly, for all the\ninstances of reasonable size, within a reasonable amount of time,\nusing a computer that we can afford. (Interestingly, as the speed of\ncomputers has dramatically increased over the years, our expectation\nof how large an instance we should be able to handle has increased\naccordingly.  Thus, the boundary of what is \u201ctruly\nfeasible\u201d changes more slowly than the increase of computer\nspeed might suggest.)\n\n\nAs mentioned before, P is a good mathematical wrapper for the set of\nfeasible problems.  There are problems in P requiring \\(n^{1,000}\\)\ntime for problems of size \\(n\\) and thus not feasible.  Nature appears\nto be our friend here, which is to say naturally occurring problems in\nP favor relatively simple algorithms, and \u201cnatural\u201d\nproblems tend to be feasible. The number of steps required for\nproblems of size \\(n\\) tends to be less than \\(c n^k\\) with small\nmultiplicative constants \\(c\\), and very small exponents, \\(k\\), i.e.,\n\\(k\\leq 2\\).\n\n\nIn practice the asymptotic complexity of naturally occurring problems\ntends to be the key issue determining whether or not they are\nfeasible.  A problem with complexity \\(17n\\) can be handled in under a\nminute on modern computers, for every instance of size a\nbillion.  On the other hand, a problem with worst-case complexity\n\\(2^n\\) cannot be handled in our lifetimes for some instance of\nsize a hundred.\n\n\nAs discussed, natural problems tend to be complete for important\ncomplexity classes, namely the ones in the diagram and only a very few\nothers.  This fascinating phenomenon means that algorithms and\ncomplexity are more than abstract concepts; they are important at a\npractical level.  We have had remarkable success in proving that our\nproblem of interest is complete for a well-known complexity class.  If\nthe class is contained in P, then we can usually just look up a known\nefficient algorithm.  Otherwise, we must look at simplifications or\napproximations of our problem which may be feasible.\n\n\nThere is a rich theory of the approximability of NP optimization\nproblems (See [Arora & Barak, 2009]).  For example, the Subset Sum\nproblem mentioned above is an NP-complete problem.  Most likely it\nrequires exponential time to tell whether a given Subset Sum problem\nhas an exact solution.  However, if we only want to see if we can\nreach the target up to a fixed number of digits of accuracy, then the\nproblem is quite easy, i.e., Subset Sum is hard, but very easy to\napproximate.\n\n\nEven the r.e.-complete Halting problem has many important feasible\nsubproblems.  Given a program, it is in general not possible to figure\nout what it does and whether or not it eventually halts.  However,\nmost programs written by programmers or students can be automatically\nanalyzed, optimized and even corrected by modern compilers and model\ncheckers.\n\n\nThe class NP is very important practically and philosophically.  It is\nthe class of problems, \\(S\\), such that any input \\(w\\) is in \\(S\\)\niff there is a proof, \\(p(w)\\), that \\(w\\in S\\) and \\(p(w)\\) is not\nmuch larger than \\(w\\).  Thus, very informally, we can think of NP has\nthe set of intellectual endeavors that may be in reach: if we find the\nanswer to whether \\(w \\in S\\), we can convince others that we have\ndone so.\n\n\nThe boolean satisfiability problem, SAT, was the first problem proved\nNP complete [Cook, 1971], i.e., it is a hardest NP problem.  The fact\nthat SAT is NP complete means that all problems in NP are reducible to\nSAT.  Over the years, researchers have built very efficient SAT\nsolvers which can quickly solve many SAT instances \u2013 i.e., find a\nsatisfying assignment or prove that there is none\n-- even for instances with millions of variables.  Thus, SAT solvers are being used as general purpose\nproblem solvers.  On the other hand, there are known classes of small instances for which current\nSAT solvers fail.  Thus part of the P versus NP question concerns the practical and theoretical\ncomplexity of SAT [Nordstr\u00f6m, 2015].\n\n\nThere is an extensive theory of computational complexity.  This entry\nbriefly describes the area, putting it into the context of the\nquestion of what is computable in principle versus in practice.  For\nreaders interested in learning more about complexity, there are\nexcellent books, for example, [Papadimitriou, 1994] and [Arora and\nBarak, 2009]. There is also the entry on\n Computational Complexity Theory.\n",
    "section_title": "4.2 Significance of Complexity",
    "entry_title": "Computability and Complexity",
    "hierarchy_title": "Computability and Complexity || Computational Complexity: Functions Computable in Practice || Reductions and Completeness",
    "tokenized_text": [
        "computational",
        "complexity",
        "function",
        "computable",
        "practice",
        "reduction",
        "completeness",
        "significance",
        "complexity",
        "reason",
        "class",
        "np",
        "well",
        "studied",
        "large",
        "number",
        "important",
        "practical",
        "problem",
        "np",
        "complete",
        "including",
        "subset",
        "sum",
        "none",
        "problem",
        "known",
        "algorithm",
        "faster",
        "exponential",
        "time",
        "although",
        "npcomplete",
        "problem",
        "admit",
        "feasible",
        "approximation",
        "solution",
        "great",
        "deal",
        "remains",
        "open",
        "computational",
        "complexity",
        "know",
        "strictly",
        "particular",
        "computational",
        "resource",
        "let",
        "u",
        "solve",
        "strictly",
        "harder",
        "problem",
        "eg",
        "time",
        "n",
        "strictly",
        "contained",
        "time",
        "n",
        "similarly",
        "space",
        "measure",
        "however",
        "tradeoff",
        "different",
        "computational",
        "resource",
        "still",
        "quite",
        "poorly",
        "understood",
        "obvious",
        "p",
        "contained",
        "np",
        "furthermore",
        "np",
        "contained",
        "pspace",
        "pspace",
        "systematically",
        "try",
        "every",
        "single",
        "branch",
        "np",
        "computation",
        "reusing",
        "space",
        "successive",
        "branch",
        "accepting",
        "branch",
        "lead",
        "acceptance",
        "pspace",
        "contained",
        "exptime",
        "pspace",
        "machine",
        "take",
        "exponential",
        "time",
        "exactly",
        "repeated",
        "configuration",
        "must",
        "infinite",
        "loop",
        "following",
        "known",
        "relationship",
        "class",
        "p",
        "subseteq",
        "np",
        "subseteq",
        "pspace",
        "subseteq",
        "exptime",
        "however",
        "seems",
        "clear",
        "p",
        "strictly",
        "contained",
        "np",
        "np",
        "strictly",
        "contained",
        "pspace",
        "pspace",
        "strictly",
        "contained",
        "exptime",
        "none",
        "inequality",
        "proved",
        "fact",
        "even",
        "known",
        "p",
        "different",
        "pspace",
        "np",
        "different",
        "exptime",
        "known",
        "proper",
        "inclusion",
        "p",
        "strictly",
        "contained",
        "exptime",
        "remaining",
        "question",
        "concerning",
        "relative",
        "power",
        "different",
        "computational",
        "resource",
        "fundamental",
        "unsolved",
        "problem",
        "theory",
        "computation",
        "following",
        "diagram",
        "map",
        "complexity",
        "class",
        "discussed",
        "well",
        "diagram",
        "come",
        "work",
        "descriptive",
        "complexity",
        "immerman",
        "show",
        "important",
        "complexity",
        "class",
        "descriptive",
        "characterization",
        "fagin",
        "began",
        "field",
        "proving",
        "np",
        "so",
        "exists",
        "ie",
        "property",
        "np",
        "iff",
        "expressible",
        "secondorder",
        "existential",
        "logic",
        "fagin",
        "vardi",
        "author",
        "entry",
        "later",
        "independently",
        "proved",
        "p",
        "fo",
        "lfp",
        "property",
        "p",
        "iff",
        "expressible",
        "firstorder",
        "logic",
        "plus",
        "least",
        "fixedpoint",
        "operator",
        "lfp",
        "formalizes",
        "power",
        "define",
        "new",
        "relation",
        "induction",
        "captivating",
        "corollary",
        "p",
        "np",
        "iff",
        "fo",
        "lfp",
        "p",
        "equal",
        "np",
        "iff",
        "every",
        "property",
        "expressible",
        "second",
        "order",
        "logic",
        "already",
        "expressible",
        "firstorder",
        "logic",
        "plus",
        "inductive",
        "definition",
        "language",
        "question",
        "finite",
        "ordered",
        "input",
        "structure",
        "see",
        "immerman",
        "detail",
        "world",
        "computability",
        "complexity",
        "top",
        "right",
        "diagram",
        "show",
        "recursively",
        "enumerable",
        "re",
        "problem",
        "includes",
        "recomplete",
        "problem",
        "halting",
        "problem",
        "halt",
        "left",
        "set",
        "core",
        "problem",
        "including",
        "corecomplete",
        "problem",
        "overline",
        "rm",
        "halt",
        "set",
        "turing",
        "machine",
        "never",
        "halt",
        "given",
        "input",
        "mentioned",
        "end",
        "section",
        "intersection",
        "set",
        "re",
        "problem",
        "set",
        "core",
        "problem",
        "equal",
        "set",
        "recursive",
        "problem",
        "set",
        "primitive",
        "recursive",
        "problem",
        "strict",
        "subset",
        "recursive",
        "problem",
        "moving",
        "toward",
        "bottom",
        "diagram",
        "region",
        "marked",
        "green",
        "dotted",
        "line",
        "labelled",
        "truly",
        "feasible",
        "note",
        "mathematically",
        "defined",
        "class",
        "rather",
        "intuitive",
        "notion",
        "problem",
        "solved",
        "exactly",
        "instance",
        "reasonable",
        "size",
        "within",
        "reasonable",
        "amount",
        "time",
        "using",
        "computer",
        "afford",
        "interestingly",
        "speed",
        "computer",
        "dramatically",
        "increased",
        "year",
        "expectation",
        "large",
        "instance",
        "able",
        "handle",
        "increased",
        "accordingly",
        "thus",
        "boundary",
        "truly",
        "feasible",
        "change",
        "slowly",
        "increase",
        "computer",
        "speed",
        "might",
        "suggest",
        "mentioned",
        "p",
        "good",
        "mathematical",
        "wrapper",
        "set",
        "feasible",
        "problem",
        "problem",
        "p",
        "requiring",
        "n",
        "time",
        "problem",
        "size",
        "n",
        "thus",
        "feasible",
        "nature",
        "appears",
        "friend",
        "say",
        "naturally",
        "occurring",
        "problem",
        "p",
        "favor",
        "relatively",
        "simple",
        "algorithm",
        "natural",
        "problem",
        "tend",
        "feasible",
        "number",
        "step",
        "required",
        "problem",
        "size",
        "n",
        "tends",
        "le",
        "c",
        "nk",
        "small",
        "multiplicative",
        "constant",
        "c",
        "small",
        "exponent",
        "k",
        "ie",
        "kleq",
        "practice",
        "asymptotic",
        "complexity",
        "naturally",
        "occurring",
        "problem",
        "tends",
        "key",
        "issue",
        "determining",
        "whether",
        "feasible",
        "problem",
        "complexity",
        "n",
        "handled",
        "minute",
        "modern",
        "computer",
        "every",
        "instance",
        "size",
        "billion",
        "hand",
        "problem",
        "worstcase",
        "complexity",
        "n",
        "handled",
        "lifetime",
        "instance",
        "size",
        "hundred",
        "discussed",
        "natural",
        "problem",
        "tend",
        "complete",
        "important",
        "complexity",
        "class",
        "namely",
        "one",
        "diagram",
        "others",
        "fascinating",
        "phenomenon",
        "mean",
        "algorithm",
        "complexity",
        "abstract",
        "concept",
        "important",
        "practical",
        "level",
        "remarkable",
        "success",
        "proving",
        "problem",
        "interest",
        "complete",
        "wellknown",
        "complexity",
        "class",
        "class",
        "contained",
        "p",
        "usually",
        "look",
        "known",
        "efficient",
        "algorithm",
        "otherwise",
        "must",
        "look",
        "simplification",
        "approximation",
        "problem",
        "may",
        "feasible",
        "rich",
        "theory",
        "approximability",
        "np",
        "optimization",
        "problem",
        "see",
        "arora",
        "barak",
        "example",
        "subset",
        "sum",
        "problem",
        "mentioned",
        "npcomplete",
        "problem",
        "likely",
        "requires",
        "exponential",
        "time",
        "tell",
        "whether",
        "given",
        "subset",
        "sum",
        "problem",
        "exact",
        "solution",
        "however",
        "want",
        "see",
        "reach",
        "target",
        "fixed",
        "number",
        "digit",
        "accuracy",
        "problem",
        "quite",
        "easy",
        "ie",
        "subset",
        "sum",
        "hard",
        "easy",
        "approximate",
        "even",
        "recomplete",
        "halting",
        "problem",
        "many",
        "important",
        "feasible",
        "subproblems",
        "given",
        "program",
        "general",
        "possible",
        "figure",
        "whether",
        "eventually",
        "halt",
        "however",
        "program",
        "written",
        "programmer",
        "student",
        "automatically",
        "analyzed",
        "optimized",
        "even",
        "corrected",
        "modern",
        "compiler",
        "model",
        "checker",
        "class",
        "np",
        "important",
        "practically",
        "philosophically",
        "class",
        "problem",
        "s",
        "input",
        "w",
        "s",
        "iff",
        "proof",
        "p",
        "w",
        "win",
        "s",
        "p",
        "w",
        "much",
        "larger",
        "w",
        "thus",
        "informally",
        "think",
        "np",
        "set",
        "intellectual",
        "endeavor",
        "may",
        "reach",
        "find",
        "answer",
        "whether",
        "w",
        "in",
        "s",
        "convince",
        "others",
        "done",
        "boolean",
        "satisfiability",
        "problem",
        "sat",
        "first",
        "problem",
        "proved",
        "np",
        "complete",
        "cook",
        "ie",
        "hardest",
        "np",
        "problem",
        "fact",
        "sat",
        "np",
        "complete",
        "mean",
        "problem",
        "np",
        "reducible",
        "sat",
        "year",
        "researcher",
        "built",
        "efficient",
        "sat",
        "solver",
        "quickly",
        "solve",
        "many",
        "sat",
        "instance",
        "ie",
        "find",
        "satisfying",
        "assignment",
        "prove",
        "none",
        "even",
        "instance",
        "million",
        "variable",
        "thus",
        "sat",
        "solver",
        "used",
        "general",
        "purpose",
        "problem",
        "solver",
        "hand",
        "known",
        "class",
        "small",
        "instance",
        "current",
        "sat",
        "solver",
        "fail",
        "thus",
        "part",
        "p",
        "versus",
        "np",
        "question",
        "concern",
        "practical",
        "theoretical",
        "complexity",
        "sat",
        "nordstr\u00f6m",
        "extensive",
        "theory",
        "computational",
        "complexity",
        "entry",
        "briefly",
        "describes",
        "area",
        "putting",
        "context",
        "question",
        "computable",
        "principle",
        "versus",
        "practice",
        "reader",
        "interested",
        "learning",
        "complexity",
        "excellent",
        "book",
        "example",
        "papadimitriou",
        "arora",
        "barak",
        "also",
        "entry",
        "computational",
        "complexity",
        "theory"
    ]
}