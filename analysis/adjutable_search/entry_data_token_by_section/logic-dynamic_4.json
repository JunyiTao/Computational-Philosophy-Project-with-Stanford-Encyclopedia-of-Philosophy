{
    "main_text": "Definitions and fundamental results || Decidability and complexity\n2.3 Decidability and complexity\n\nThe aim of the complexity theory is to establish the computability of\nthe property sat \\(A\\) in terms of resources of time or space. The\ncomplexity of a logic \\(\\mathcal{L}\\) is often identified with the\nproblem of deciding the satisfiability of its formulas, defined\nas:\n\n(L-SAT)\nGiven a formula \\(A\\) of \\(\\mathcal{L}\\), is \\(A\\)\nsatisfiable?\n\n\nIn this section, we investigate the complexity of the following\ndecision problem:\n\n(PDL-SAT)\nGiven a formula \\(A\\) of PDL, is \\(A\\) satisfiable?\n\n\nThe complete axiomatization of PDL is a recursive definition of the\nset of valid PDL formulas, or in other words, of the set of formulas\nwhose negation is not satisfiable. Hence, concerning the problem\n(PDL-SAT), we have a sub-procedure that would answer \u201cno\u201d\nif the PDL formula \\(A\\) were not satisfiable. The sub-procedure (SP1)\nconsists in enumerating all the formulas \\(\\vdash\\)-deducible,\nstarting from the axioms and inferring other theorems with the help of\nthe inference rules. Given enough time, if a formula is\n\\(\\vdash\\)-deducible, the sub-procedure would find it eventually.\nThus, if \\(A\\) is not satisfiable, (SP1) must eventually find \\(\\lnot\nA\\), and answer \u201cno\u201d when it does.\n\nHowever, if the formula \\(A\\) is satisfiable, then (SP1) would never\nfind \\(\\lnot A\\). It would run forever, and one could not be sure\nabout it at any time. But there is a way out of this uncertainty. We\ncan also think of a second sub-procedure that answers\n\u201cyes\u201d if a PDL formula is satisfiable. Indeed, one of the\nearliest results on PDL was the proof that PDL has the finite\nmodel property, i.e.,\n\nFor all formulas \\(A\\), if sat \\(A\\) then there exists a finite model\n\\(M\\) such that \\(M\\) sat \\(A\\). \n\nThe finite model property offers a basis for a sub-procedure (SP2)\nthat consists in enumerating one by one the finite models of PDL and\ntesting whether one of them satisfies the formula. (For all formulas\n\\(A\\) and for all finite models \\(M\\), it is easy to test if \\(M\\) sat\n\\(A\\) by applying the definition of \\(V(A)\\).) Thus, if \\(A\\) is\nsatisfiable, it must eventually find a model \\(M\\) such that \\(M\\) sat\n\\(A\\), and answer \u201cyes\u201d when it does. Symmetrically to the\nfirst sub-procedure (SP1), if the formula \\(A\\) is not satisfiable,\nthen (SP2) will never find a model satisfying it, it will run forever,\nand one could not be sure about it at any time.\n\nNow, combining (SP1) and (SP2) together we have a way of deciding\nwhether a PDL formula \\(A\\) is satisfiable. It suffices to run them in\nparallel: if \\(A\\) is satisfiable then (SP2) will eventually answer\n\u201cyes\u201d, if \\(A\\) is not satisfiable then (SP1) will\neventually answer \u201cno\u201d. The procedure halts when either\n(SP1) or (SP2) provides an answer.\n\nIf the procedure that is obtained is sufficient to conclude that the\nproblem (PDL-SAT) is decidable, it is very inefficient in practice.\nThere is a result\u2014due to Fischer and Ladner [1979] and Kozen and\nParikh [1981]\u2014 stronger than the finite model property, that is\nsmall model property:\n\nFor all formulas \\(A\\), if sat \\(A\\) then there exists a finite model\n\\(M\\) of size exponential in \\(A\\) such that \\(M\\) sat \\(A\\). \n\nThis means that we would now know when to stop looking for a model\nsatisfying a formula in the procedure (SP2). Hence, we can use (SP2)\nto test whether a formula is satisfiable, but once we have exhausted\nall small models, we can conclude that the formula is not satisfiable.\nThis yields a procedure that runs non-deterministically in exponential\ntime (NEXPTIME): guess a model of size at most singly exponential, and\ncheck whether it satisfies the formula. But the key results in the\ncomplexity theory of PDL come from Fischer and Ladner [1979] and Pratt\n[1980a]. Observing that a formula of PDL can efficiently describe the\ncomputation of a linear space bounded alternating Turing machine,\nFischer and Ladner [1979] first established the lower bound of\nexponential time of (PDL-SAT). The EXPTIME upper bound of (PDL-SAT)\nhas been obtained by Pratt [1980a], who adapted the method of semantic\ntableaux to PDL. Thus, (PDL-SAT) is EXPTIME-complete. (An algorithm\nmore efficient in practice, although still running in deterministic\nexponential time in the worst case, is proposed in De Giacomo and\nMassacci [2000].)\n",
    "section_title": "2.3 Decidability and complexity",
    "entry_title": "Propositional Dynamic Logic",
    "hierarchy_title": "Propositional Dynamic Logic || Definitions and fundamental results || Decidability and complexity",
    "tokenized_text": [
        "definition",
        "fundamental",
        "result",
        "decidability",
        "complexity",
        "decidability",
        "complexity",
        "aim",
        "complexity",
        "theory",
        "establish",
        "computability",
        "property",
        "sat",
        "a",
        "term",
        "resource",
        "time",
        "space",
        "complexity",
        "logic",
        "mathcal",
        "l",
        "often",
        "identified",
        "problem",
        "deciding",
        "satisfiability",
        "formula",
        "defined",
        "lsat",
        "given",
        "formula",
        "a",
        "mathcal",
        "l",
        "a",
        "satisfiable",
        "section",
        "investigate",
        "complexity",
        "following",
        "decision",
        "problem",
        "pdlsat",
        "given",
        "formula",
        "a",
        "pdl",
        "a",
        "satisfiable",
        "complete",
        "axiomatization",
        "pdl",
        "recursive",
        "definition",
        "set",
        "valid",
        "pdl",
        "formula",
        "word",
        "set",
        "formula",
        "whose",
        "negation",
        "satisfiable",
        "hence",
        "concerning",
        "problem",
        "pdlsat",
        "subprocedure",
        "would",
        "answer",
        "pdl",
        "formula",
        "a",
        "satisfiable",
        "subprocedure",
        "sp",
        "consists",
        "enumerating",
        "formula",
        "vdash",
        "deducible",
        "starting",
        "axiom",
        "inferring",
        "theorem",
        "help",
        "inference",
        "rule",
        "given",
        "enough",
        "time",
        "formula",
        "vdash",
        "deducible",
        "subprocedure",
        "would",
        "find",
        "eventually",
        "thus",
        "a",
        "satisfiable",
        "sp",
        "must",
        "eventually",
        "find",
        "lnot",
        "a",
        "answer",
        "however",
        "formula",
        "a",
        "satisfiable",
        "sp",
        "would",
        "never",
        "find",
        "lnot",
        "a",
        "would",
        "run",
        "forever",
        "one",
        "could",
        "sure",
        "time",
        "way",
        "uncertainty",
        "also",
        "think",
        "second",
        "subprocedure",
        "answer",
        "yes",
        "pdl",
        "formula",
        "satisfiable",
        "indeed",
        "one",
        "earliest",
        "result",
        "pdl",
        "proof",
        "pdl",
        "finite",
        "model",
        "property",
        "ie",
        "formula",
        "a",
        "sat",
        "a",
        "exists",
        "finite",
        "model",
        "m",
        "m",
        "sat",
        "a",
        "finite",
        "model",
        "property",
        "offer",
        "basis",
        "subprocedure",
        "sp",
        "consists",
        "enumerating",
        "one",
        "one",
        "finite",
        "model",
        "pdl",
        "testing",
        "whether",
        "one",
        "satisfies",
        "formula",
        "formula",
        "a",
        "finite",
        "model",
        "m",
        "easy",
        "test",
        "m",
        "sat",
        "a",
        "applying",
        "definition",
        "v",
        "thus",
        "a",
        "satisfiable",
        "must",
        "eventually",
        "find",
        "model",
        "m",
        "m",
        "sat",
        "a",
        "answer",
        "yes",
        "symmetrically",
        "first",
        "subprocedure",
        "sp",
        "formula",
        "a",
        "satisfiable",
        "sp",
        "never",
        "find",
        "model",
        "satisfying",
        "run",
        "forever",
        "one",
        "could",
        "sure",
        "time",
        "combining",
        "sp",
        "sp",
        "together",
        "way",
        "deciding",
        "whether",
        "pdl",
        "formula",
        "a",
        "satisfiable",
        "suffices",
        "run",
        "parallel",
        "a",
        "satisfiable",
        "sp",
        "eventually",
        "answer",
        "yes",
        "a",
        "satisfiable",
        "sp",
        "eventually",
        "answer",
        "procedure",
        "halt",
        "either",
        "sp",
        "sp",
        "provides",
        "answer",
        "procedure",
        "obtained",
        "sufficient",
        "conclude",
        "problem",
        "pdlsat",
        "decidable",
        "inefficient",
        "practice",
        "resultdue",
        "fischer",
        "ladner",
        "kozen",
        "parikh",
        "stronger",
        "finite",
        "model",
        "property",
        "small",
        "model",
        "property",
        "formula",
        "a",
        "sat",
        "a",
        "exists",
        "finite",
        "model",
        "m",
        "size",
        "exponential",
        "a",
        "m",
        "sat",
        "a",
        "mean",
        "would",
        "know",
        "stop",
        "looking",
        "model",
        "satisfying",
        "formula",
        "procedure",
        "sp",
        "hence",
        "use",
        "sp",
        "test",
        "whether",
        "formula",
        "satisfiable",
        "exhausted",
        "small",
        "model",
        "conclude",
        "formula",
        "satisfiable",
        "yield",
        "procedure",
        "run",
        "nondeterministically",
        "exponential",
        "time",
        "nexptime",
        "guess",
        "model",
        "size",
        "singly",
        "exponential",
        "check",
        "whether",
        "satisfies",
        "formula",
        "key",
        "result",
        "complexity",
        "theory",
        "pdl",
        "come",
        "fischer",
        "ladner",
        "pratt",
        "a",
        "observing",
        "formula",
        "pdl",
        "efficiently",
        "describe",
        "computation",
        "linear",
        "space",
        "bounded",
        "alternating",
        "turing",
        "machine",
        "fischer",
        "ladner",
        "first",
        "established",
        "lower",
        "bound",
        "exponential",
        "time",
        "pdlsat",
        "exptime",
        "upper",
        "bound",
        "pdlsat",
        "obtained",
        "pratt",
        "a",
        "adapted",
        "method",
        "semantic",
        "tableau",
        "pdl",
        "thus",
        "pdlsat",
        "exptimecomplete",
        "algorithm",
        "efficient",
        "practice",
        "although",
        "still",
        "running",
        "deterministic",
        "exponential",
        "time",
        "worst",
        "case",
        "proposed",
        "de",
        "giacomo",
        "massacci"
    ]
}