{"url": "logic-linear", "title": "Linear Logic", "authorship": {"year": "Copyright \u00a9 2023", "author_text": "Roberto Di Cosmo\n<roberto@dicosmo.org>\nDale Miller\n<dale.miller@inria.fr>", "author_links": [{"http://www.dicosmo.org": "Roberto Di Cosmo"}, {"mailto:roberto%40dicosmo%2eorg": "roberto@dicosmo.org"}, {"http://www.lix.polytechnique.fr/Labo/Dale.Miller/": "Dale Miller"}, {"mailto:dale%2emiller%40inria%2efr": "dale.miller@inria.fr"}], "raw_html": "<div id=\"article-copyright\">\n<p>\n<a href=\"../../info.html#c\">Copyright \u00a9 2023</a> by\n\n<br/>\n<a href=\"http://www.dicosmo.org\" target=\"other\">Roberto Di Cosmo</a>\n&lt;<a href=\"mailto:roberto%40dicosmo%2eorg\"><em>roberto<abbr title=\" at \">@</abbr>dicosmo<abbr title=\" dot \">.</abbr>org</em></a>&gt;<br/>\n<a href=\"http://www.lix.polytechnique.fr/Labo/Dale.Miller/\" target=\"other\">Dale Miller</a>\n&lt;<a href=\"mailto:dale%2emiller%40inria%2efr\"><em>dale<abbr title=\" dot \">.</abbr>miller<abbr title=\" at \">@</abbr>inria<abbr title=\" dot \">.</abbr>fr</em></a>&gt;\n    </p>\n</div>"}, "pubinfo": ["First published Wed Sep 6, 2006", "substantive revision Sat Sep 16, 2023"], "preamble": "\n\nLinear logic is a refinement of classical and intuitionistic logic.\nInstead of emphasizing truth, as in classical logic, or\nproof, as in intuitionistic logic, linear logic emphasizes\nthe role of formulas as resources. To achieve this focus,\nlinear logic does not allow the usual structural rules of contraction\nand weakening to apply to all formulas but only those formulas marked\nwith certain modals. Linear logic contains a fully involutive negation\nwhile maintaining a strong constructive interpretation. Linear logic\nalso provides new insights into the nature of proofs in both classical\nand intuitionistic logic. Given its focus on resources, linear logic\nhas found many applications in Computer Science.\n", "toc": [{"#Int": "1. Introduction"}, {"#BitHis": "1.1 A bit of history"}, {"#LinLogComSci": "1.2 Linear logic and computer science"}, {"#ProSys": "2. Proof Systems"}, {"#SeqCal": "2.1 Sequent calculus"}, {"#FocProSea": "2.2 Focused proof search"}, {"#ProNet": "2.3 Proof nets"}, {"#Sem": "3. Semantics"}, {"#SemProv": "3.1 Semantics of provability "}, {"#SemProo": "3.2 Semantics of proofs "}, {"#Com": "4. Complexity"}, {"#ComSciImp": "5. Computer science impact"}, {"#ProNor": "5.1 Proof normalization"}, {"#ProSea": "5.2 Proof search"}, {"#Var": "6. Variations"}, {"#DifTreMod": "6.1 Different treatments of modality"}, {"#NonComLinLog": "6.2 Non-commutative linear logic"}, {"#unbounded": "6.3 Treatment of unbounded behavior"}, {"#Bib": "Bibliography"}, {"#Aca": "Academic Tools"}, {"#Oth": "Other Internet Resources"}, {"#Rel": "Related Entries"}], "main_text": "\n1. Introduction\n1.1 A bit of history\n\nLinear logic was introduced by Jean-Yves Girard in his seminal work\n (Girard 1987).\n While the origin of the discovery of this new logic comes from a\nsemantical analysis of the models of System F (or polymorphic\n\\(\\lambda\\)-calculus), one can see the whole system of linear logic as\na bold attempt to reconcile the beauty and symmetry of classical logic\nafforded by De Morgan's dualities with the quest for constructive proofs\nthat had led to intuitionistic logic.\n\nIndeed, one could present a fragment of linear logic, known as\nmultiplicative additive linear logic (MALL), as the outcome\nof two simple observations.\n\nIn the sequent calculus presentation of classical logic, the rules\nfor the connectives \u201cand\u201d and\n\u201cor\u201d, as well as the Cut rule and the rule for\nimplication may be presented equivalently in an additive form (the\ncontext of the premises are the same) or a multiplicative form (the\ncontext of the premises are different). These two presentations are\nequivalent, in classical logic, because of the availability of a few\nso-called \u201cstructural\u201d rules, namely, contraction and\nweakening.\nGentzen's use of the sequent calculus to capture proofs for both\nclassical and intuitionistic logics demonstrated that non-constructive\nproofs made use of one or the other of these structural rules in the\nconclusion (succedent) of sequents.\n\n\nSo, if we want to eliminate the non-constructive proofs without\ndestroying the symmetry of the sequent calculus, as is done in\nintuitionistic logic, we can try to eliminate the contraction and\nweakening rules instead. In doing so, we are left with two different\nversions of each connective: an additive version and a multiplicative\nversion of conjunction and of disjunction. These different versions of\nthe same connecitve are now no longer equivalent. These new\nconnectives are & (\u201cwith\u201d, additive and),\n\\(\\oplus\\) (\u201cplus\u201d, additive or), \\(\\otimes\\)\n(\u201ctensor\u201d, multiplicative and) and \\(\\lpar\\)\n(\u201cpar\u201d, multiplicative or).\n\nThis duplication of the connectives actually leads to a much clearer\nunderstanding of the conflict between classical and intuitionistic\nlogic. For example, the law of excluded middle (\\(A\\) or\nnot-\\(A\\)) is considered valid in the classical world and absurd in\nthe intuitionistic one. But in linear logic, this law has two\nreadings: the additive version \\((A \\oplus \\neg A)\\) is not provable\nand corresponds to the intuitionistic reading of disjunction; the\nmultiplicative version \\((A \\lpar \\neg A)\\) is trivially provable and\nsimply corresponds to the tautology \\((A\\) implies \\(A)\\)\nthat is perfectly acceptable in intuitionistic logic too.\n\nAlso, the disjunction property, essential in constructivism, is easily\nestablished for the additive disjunction.\n\nWe find then inside this richer logic a way to represent both the\nneeds of intuitionism and the elegance of classical logic: negation is\ninvolutive, sequents are symmetric, and connectives are\ninter-definable. Contrast these properties with those of\nintuitionistic logic, where negation is not involutive, sequents are\nnot symmetric, and connectives \\(\\neg, \\wedge, \\vee, \\Rightarrow\\) \nare all not inter-definable.\n\nNotice that once one has eliminated the contraction and\nweakening rules, formulas no longer behave as truth values.  Indeed, if\nwe compose a proof of \\(A \\Rightarrow B\\) and a proof of \\(A\\) without\nthese structural rules, we consume them to get a proof of \\(B\\): that\nis, \\(A \\Rightarrow B\\) and \\(A\\) are no longer available after the\ncomposition.  Linear logic formulas behave more like\nresources that can only be used in restricted ways.\n\nTo recover the full expressive power of intuitionistic and classical\nlogic, it is then necessary to add to the MALL fragment two dual\nmodalities, which are usually called exponentials in the\nlinear logic literature. In particular, the \u201cof-course\u201d\nexponential \\(\\bang\\) permits contraction and weakening to be applied\nto the formula \\(\\bang B\\) in the left-hand sequent context while the\n\u201cwhy-not\u201d exponential \\(\\quest\\) permits contraction and\nweakening to be applied to the formula \\(\\quest B\\) on the right-hand\nsequent context. This leads to the full propositional linear logic and\nto a very nice connection with computer science.\n\nNotice that besides MALL, there are two other widely used fragments of\nLinear Logic: Multiplicative Linear Logic (MLL), which is MALL without\nthe additive connectives; and Multiplicative Exponential Linear Logic\n(MELL), which is Linear Logic without the additive connectives. \n\nGentzen's sequent calculus proof system for intuitionistic logic was\nthe result of restricting his sequent calculus for classical logic so\nthat all sequents contained at most one formula on the right-hand side\nof sequents\n (Gentzen 1935).\n Such a single-conclusion restriction can also be explored in the\ncontext of linear logic. Various researchers have considered\nintuitionistic variants of MLL, MALL, and MELL: for example, IMLL\n (Lamarche 1996),\n IMALL\n (Lincoln et al. 1993),\n and IMELL\n (Dal Lago and Laurent 2008).\n Schellinx\n (1991)\n provided some general conservativity results of classical linear\n logic over the corresponding intuitionistic variants: see also\n(Troelstra 1992).\n\nPrior to the introduction of linear logic in 1987, various researchers\nhad been working on various kinds of substructural logic in which not\nall of Gentzen\u2019s structural rules (contraction, weakening, and\nexchange) are accepted. Lambek studied a sequent calculus proof\nsystems in which none of these structural rules were permitted\n (Lambek 1958).\n Other examples of such logics are relevant logic (in which weakening\nis not accepted)\n (Anderson & Belnap 1975, \n  Anderson et al. 1992, \n  Avron 1988,\n  Read 1988). and affine logic (in which contraction is not accepted)\n (Grishin 1981).\n \n1.2 Linear logic and computer science\n\nThe computer science exploitation of intuitionistic and constructive \nlogic began when people saw the possibility of reading\n\\(A \\Rightarrow B\\) as\n\u2018if you give me an \\(A\\), I will give you a \n\\(B\\)\u2019, which\nis a significant departure from the classical reading\n\u2018\\(A\\) is\nfalse or \\(B\\) is true\u2019.\n\nLinear logic provides a further twist in the interpretation of the\nimplication \u2018\\(A \\Rightarrow B\\)\n\u2019: now it can be read as\n\u2018give me as many \\(A\\)'s \nas I might need and I will\ngive you one \\(B\\)\u2019. The \nnotion of copy which\nis so central to the idea of computation is now wired into the logic.\nThis new viewpoint opens up new possibilities, including:\n\nnew formulas expressing refined operational properties\nlike \u2018give me \\(A\\) once and I will give you \\(B\\)\u2019.\nApplications here range from refined logic programming where the\nability of linear logic to represent states is put to use\n (Hodas & Miller, 1994),\n to the analysis of classical logic and computational interpretations\nthereof\n (Abramsky 1993),\n to the specification of exception mechanisms in programming languages\n (Miller, 1996), and\n to linearity analysis\n (Wadler, 1991).\nnew rules expressing constraints on the use of copies\nresulting in a fragment of linear logic for polytime computations to\nmention only the most spectacular application\n (Baillot & Terui, 2004,\n Baillot 2015).\nnew ways of representing proofs\n (Abramsky & Jagadeesan, 1994,\n Girard 1987). \n\n2. Proof Systems\n\nThe core propositional connectives of linear logic are divided into\nadditive and multiplicative connectives. The classical conjunction and\nits identity, \\(\\wedge\\) and \\(\\top\\), split into the additive\n\\(\\amp\\) (with) and \\(\\top\\) (top) and the multiplicative \\(\\otimes\\)\n(tensor) and 1 (one). Similarly, the classical disjunction and its\nidentity, \\(\\vee\\) and \\(\\bot\\), split into the additive \\(\\oplus\\)\n(oplus) and 0 (zero) and the multiplicative \\(\\lpar\\) (par) and\n\\(\\bot\\) (bottom). Negation is generally treated in one of two ways in\npresentations a linear logic. Negation can be viewed as a primitive\npropositional connective with no restrictions on its occurrences\nwithin formulas. Since De Morgan dualities exist between negation and\nall propositional connectives, exponentials, and quantifiers, it is\nalso possible to treat negation as a special symbol that only occurs\napplied to atomic formulas. Implications are also commonly introduced\ninto linear logic via definitions: the linear implication \\(B \\limp\nC\\) can be defined as \\(B^{\\bot} \\lpar C\\), while the intuitionistic\nimplication \\(B \\Rightarrow C\\) can be defined as \\(\\bang B \\limp C\\).\nThe operators \\(\\bang\\) and \\(\\quest\\) are variously called modals or\nexponentials. The term \u201cexponential\u201d is particularly\nappropriate since, following the usual relationship between\nexponentiation, addition, and multiplication, linear logic supports\nthe equivalences \\(\\bang (B \\amp C) \\equiv (\\bang B \\otimes \\bang C)\\)\nand \\(\\quest(B \\oplus C) \\equiv (\\quest B \\lpar \\quest C)\\), as well\nas the 0-ary versions of these equivalences, namely, \\((\\bang\\top\n\\equiv 1)\\) and \\((\\quest 0 \\equiv \\bot)\\). Here, we use the binary\nequivalence \\(B \\equiv C\\) to mean that the formula \\((B \\limp C)\n\\amp(C \\limp B)\\) is derivable in linear logic.\n2.1 Sequent calculus\n\nA two-sided sequent calculus for linear logic is presented in the\nfigure below. Notice here that negation is treated as if it were any\nother logic connective: that is, its occurrences in formulas are not\nrestricted and there are introduction rules on the left and right for\nnegation. The left and right side of sequents are multiset of\nformulas: thus, the order of formulas in these contexts does not\nmatter but their multiplicity does matter. \n\nIdentity Rules \n\\[\n\\frac{}{B \\vdash B}\\ \\textit{init}\n  \\qquad\n\\frac\n {\\Delta_1 \\vdash B,\\Gamma_1 \\qquad \\Delta_2,B \\vdash \\Gamma_2}\n {\\Delta_1,\\Delta_2 \\vdash \\Gamma_1,\\Gamma_2}\\ \\textit{cut}\n\\]\n\n\n\nNegation Rules \n\\[\n\\frac{\\Delta \\vdash B,\\Gamma}{\\Delta,B^{\\perp} \\vdash \\Gamma}\\ (\\cdot)^{\\perp} L\n   \\qquad\n\\frac{\\Delta,B \\vdash \\Gamma}{\\Delta \\vdash B^{\\perp},\\Gamma}\\ (\\cdot)^{\\perp} R\n\\]\n\n\n\nMultiplicative Rules \n\\[\\frac{\\Delta \\vdash \\Gamma}{\\Delta,\\one \\vdash \\Gamma}\\ \\one L\n  \\qquad\n  \\frac{}{\\vdash \\one}\\ \\one R\n\\]\n \n\\[\\frac{}{\\bot \\vdash}\\ \\bot L\n  \\qquad\n  \\frac{\\Delta \\vdash \\Gamma}{\\Delta \\vdash \\bot,\\Gamma}\\ \\bot R\n\\]\n\n\\[\\frac{\\Delta, B_1,B_2 \\vdash \\Gamma}{\\Delta, B_1\\ot B_2 \\vdash \\Gamma}\\ \\ot L\n  \\qquad\n  \\frac{\\Delta_1 \\vdash B_1,\\Gamma_1 \\qquad \\Delta_2 \\vdash B_2,\\Gamma_2}\n       {\\Delta_1, \\Delta_2 \\vdash B_1\\ot B_2,\\Gamma_{1},\\Gamma_{2}}\\ \\ot R\n\\]\n \n\\[\\frac{\\Delta_1,B_1 \\vdash \\Gamma_1 \\qquad \\Delta_2, B_2 \\vdash \\Gamma_2}\n       {\\Delta_1,\\Delta_2, B_1\\lpar B_2 \\vdash \\Gamma_1,\\Gamma_2}\\ \n        \\lpar L\n  \\qquad\n  \\frac{\\Delta \\vdash B_1, B_2,\\Gamma}{\\Delta \\vdash B_1\\lpar B_2, \\Gamma}\\ \n  \\lpar R\n\\]\n\n\n\nAdditive Rules \n\\[\\frac{}{\\Delta,\\zero \\vdash \\Gamma}\\ \\zero L\n  \\qquad\n  \\frac{}{\\Delta \\vdash \\top,\\Gamma}\\ \\top R\n\\]\n \n\\[\\frac{\\Delta, B_i \\vdash \\Gamma}\n       {\\Delta, B_1\\amp  B_2 \\vdash \\Gamma}\\ {\\amp}L\\ (i=1,2)\n  \\qquad\n  \\frac{\\Delta \\vdash B_1,\\Gamma \\qquad \\Delta \\vdash B_2,\\Gamma}\n       {\\Delta \\vdash B_1\\amp B_2,\\Gamma}\\ {\\amp}R\n\\]\n \n\\[\\frac{\\Delta,B_1 \\vdash \\Gamma \\qquad \\Delta,B_2 \\vdash \\Gamma}\n       {\\Delta,B_1\\oplus B_2 \\vdash \\Gamma}\\ {\\oplus}L\n  \\qquad\n  \\frac{\\Delta \\vdash B_i,\\Gamma}\n       {\\Delta \\vdash B_1\\oplus B_2,\\Gamma}\\ {\\oplus}R\\ (i=1,2)\n\\]\n\n\n\nQuantifier Rules \n\\[\\frac{\\Delta, B[t/x] \\vdash \\Gamma}{\\Delta,\\forall x.B \\vdash \\Gamma}\\ \\forall L\n  \\qquad\n  \\frac{\\Delta \\vdash B[y/x],\\Gamma}{\\Delta \\vdash \\forall x.B,\\Gamma}\\ \\forall R\n\\]\n \n\\[\\frac{\\Delta \\vdash B[t/x],\\Gamma}{\\Delta \\vdash \\exists x.B,\\Gamma}\\ \\exists R\n  \\qquad\n  \\frac{\\Delta,B[y/x] \\vdash \\Gamma}{\\Delta,\\exists x.B \\vdash \\Gamma}\\ \\exists L,\n\\]\n\n\n\nExponential Rules \n\\[\\frac{\\Delta \\vdash \\Gamma}{\\Delta, \\bang B \\vdash \\Gamma}\\ \\bang W\n  \\quad\n  \\frac{\\Delta, \\bang B, \\bang B \\vdash \\Gamma}{\\Delta, \\bang B \\vdash \\Gamma}\\ \\bang C\n  \\quad\n  \\frac{\\Delta,B \\vdash \\Gamma}{\\Delta, \\bang B \\vdash \\Gamma}\\ \\bang D\n  \\quad\n  \\frac{\\bang\\Delta \\vdash B,\\quest\\Gamma}{\\bang\\Delta \\vdash \\bang B,\\quest\\Gamma}\\ \\bang R\n\\]\n \n\\[\\frac{\\Delta \\vdash \\Gamma}{\\Delta \\vdash \\quest B,\\Gamma}\\ \\quest W\n  \\quad\n  \\frac{\\Delta \\vdash \\quest B, \\quest B,\\Gamma}{\\Delta \\vdash \\quest B,\\Gamma}\\ \\quest C\n  \\quad\n  \\frac{\\Delta \\vdash B,\\Gamma}{\\Delta \\vdash \\quest B,\\Gamma}\\ \\quest D\n  \\quad\n  \\frac{\\bang\\Delta,B \\vdash \\quest\\Gamma}{\\bang\\Delta,\\quest B \\vdash \\quest\\Gamma}\\ \\quest L\n\\]\n\n\n\nNotice that the rules of weakening and contraction are available only\nfor formulas marked with the exponential \\(\\bang\\) on the left or\n\\(\\quest\\) on the right of the sequent. The \\(\\quest\\)R and \\(\\bang\\)L\nrules are often called \u201cdereliction\u201d rules. The \\(\\quest\\)L and \\(\\bang\\)R rules are often called\n\u201cpromotion\u201d rules and\nare similar to the sequent calculus rules used in the treatment of\nS4 modal logic (Ono 1998). The usual\nproviso for the \\(\\forall\\)-right and \\(\\exists\\)-left introduction\nrules is assumed; in particular, the variable \\(y\\) must not be free\nin the formulas of the lower sequent of those inference rules.\nQuantification here is assumed to be first-order.  Girard presented a higher-order version of linear logic in his 1987 paper.\n\nThe cut rule can be eliminated and completeness is still maintained.\nDually, the init rule can also be eliminated as well except\nfor the occurrences of init involving atomic formulas.\n2.2 Focused proofs\n\nAn important normal form theorem for the structure of cut-free proofs\nwas provided by Andreoli\n (1992).\n He classified a non-atomic formula as asynchronous if its\ntop-level logical connective is \\(\\top\\), &, \\(\\bot , \\lpar\\),\n\\(\\quest\\), or \\(\\forall\\) or synchronous if its top-level\nlogical connective is \\(0, \\oplus , 1, \\otimes\\), \\(\\bang\\), or\n\\(\\exists\\).\n\nWhen viewing proof search as a computational model, we consider how \ninference rules can transform a sequent as its conclusion into \npremises. As a result, we can see formulas in a sequent as being \u201cagents\u201d that may act\nindependently or in concert with others in their environment. \nHere, the actions of such agents are determined by reading the introduction\nrule for them bottom-up. If an asynchronous formula occurs on the\nright of a sequent, it can evolve without affecting provability and\nwithout interacting with its context, i.e., the corresponding\nintroduction rule is invertible. For example, the agent \\((B \\lpar\nC)\\) becomes (by applying the \\(\\lpar\\)-right introduction rule) the\ntwo agents \\(B\\) and \\(C\\) (now working in parallel). Similarly, the\nagent \\((B \\amp C)\\) yields (by applying the &-right introduction\nrule) two different identical worlds (sequents) except that \\(B\\) is\nin one of these worlds and \\(C\\) is in the other.\n\nOn the other hand, if we view a synchronous formula as an agent whose\nevolution is determined by reading the corresponding right-introduction \nrule from the bottom up,\nthen it is possible for a provable sequent to evolve to a non-provable\nsequent (for example, by applying the \\(\\oplus\\) right-introduction\nrule). Also, the instances of such inference rules depend on details\nof the context of the formula. For example, the success of the 1-right\nintroduction rule requires that the surrounding context is empty and\nthe success of the \\(\\otimes\\)-right introduction rule depends on how\nthe agent\u2019s surrounding context is divided into two contexts.\nThus, the evolution of such agents depends on\n\u201csynchronizing\u201d with other parts of the context.\n\nNow consider a one-sided sequent calculus presentation of linear logic\nwhere the only introduction rules are right-introduction rules. Given\nthe above classification of connectives, it is possible to show that\nproof search can be structured into the following phases without loss\nof completeness. The asynchronous phase occurs if there is an\nasynchronous formula present in the sequent. In this phase,\nright-introduction rules are applied (bottom-up) in any order until there are no\nfurther asynchronous formulas. In the synchronous phase some\nsynchronous formula is selected and becomes the \u201cfocus\u201d of\nthis phase: that is, right-introduction rules are applied (bottom-up) to it and to\nany synchronous subformula that it might generate.\n\nThe following figure presents the focusing proof system for linear\nlogic. Notice that the two phases are represented by different arrows:\nthe up-arrow denotes the asynchronous phase and the down-arrow denotes\nthe synchronous phase. Also, sequents are divided into three\nzones (where the zones are separated by either a semicolon or\nan up or down-arrow). In particular, to the left of the up-arrow and\ndown-arrow are the two zones. The zone written as \\(\\Psi\\) denotes a\nset of formulas that can be used any number of times in the proof of\nthat sequent. The zone written as \\(\\Delta\\) denotes a multiset of\nformulas. The zone to the right of an\nup-arrow is also a multiset of formulas while the zone to the right of\na down-arrow is a single formula. It is possible to impose an\narbitrary order on the formulas to the right of the up-arrow since the\nintroduction of asynchronous formulas can be done in any order. Atoms\nare given polarity and in the figure below, \\(A\\) stands for positive\natoms and the negation of \\(A\\) stands for negative atoms. Proofs\nbuilt by these inference rules are called focused proofs. The\ncompleteness of focused proofs for linear logic is proved in \n Andreoli 1992.\n\nAsynchronous Phase \n\\[\\frac{\\Up{\\Psi}{\\Delta}{L}}{\\Up{\\Psi}{\\Delta}{\\bot,L}}\\ [\\bot]\n     \\qquad\n\\frac{\\Up{\\Psi,F}{\\Delta}{L}}\n     {\\Up{\\Psi}{\\Delta}{\\quest F,L}}\\ [\\quest]\n\\]\n \n\\[\\frac{}\n       {\\Up{\\Psi}{\\Delta}{\\top,L}}\\ [\\top]\n  \\qquad\n\\frac{\\Up{\\Psi}{\\Delta}{F[y/x],L}} \n     {\\Up{\\Psi}{\\Delta}{\\forall x.F,L}}\\ [\\forall]\n\\]\n\n\\[\\frac{\\Up{\\Psi}{\\Delta}{F_1,F_2,L}}\n     {\\Up{\\Psi}{\\Delta}{F_1\\lpar F_2,L}}\\ [\\lpar]\n  \\qquad\n\\frac{\\Up{\\Psi}{\\Delta}{F_1,L}\\quad \\Up{\\Psi}{\\Delta}{F_2,L}}\n     {\\Up{\\Psi}{\\Delta}{F_1\\amp F_2,L}}\\ [\\amp]\n\\]\n \n\\[\\frac{\\Up{\\Psi}{\\Delta,F}{L}}{\\Up{\\Psi}{\\Delta}{F,L}}\n   \\ [R\\Uparrow]\\ \\text{provided that $F$ is not asynchronous}\n\\]\n\n\n\nSynchronous Phase \n\\[\\frac{}{\\Down{\\Psi}{\\cdot}{\\one}}\\ [\\one]\n  \\qquad\n  \\frac{\\Down{\\Psi}{\\Delta_1}{F_1}\\quad \\Down{\\Psi}{\\Delta_2}{F_2}}\n       {\\Down{\\Psi}{\\Delta_1,\\Delta_2}{F_1\\ot F_2}}\n   \\ [\\ot]\n\\qquad\n\\frac{\\Up{\\Psi}{\\cdot}{F}}{\\Down{\\Psi}{\\cdot}{\\bang F}}\n  \\ [\\bang]\n\\]\n \n\\[\\frac{\\Down{\\Psi}{\\Delta}{F_i}}{\\Down{\\Psi}{\\Delta}{F_1\\oplus F_2}}\n  \\ [\\oplus_i]\n  \\qquad\n\\frac{\\Down{\\Psi}{\\Delta}{F[t/x]}}\n  {\\Down{\\Psi}{\\Delta}{\\exists x.F}}\n   \\ [\\exists]\n\\]\n\n\\[\\frac{\\Up{\\Psi}{\\Delta}{F}}{\\Down{\\Psi}{\\Delta}{F}}\n   \\ [R\\Downarrow]\\ \\text{provided that $F$ is either asynchronous or an atom} \n\\]\n\n\n\nIdentity and Decide Rules \n\\[\\frac{}{\\Down{\\Psi}{A}{A^{\\perp}}}\n   \\ [I_1]\n\\qquad\n  \\frac{}{\\Down{\\Psi,A}{\\cdot}{A^{\\perp}}}\n     \\ [I_2]\\ \\text{where } A \\text{ is an atom}\n\\]\n \n\\[\\frac{\\Down{\\Psi}{\\Delta}{F}}{\\Up{\\Psi}{\\Delta,F}{\\cdot}}\n   \\ [D_1]\n\\qquad\n   \\frac{\\Down{\\Psi}{\\Delta}{F}}{\\Up{\\Psi,F}{\\Delta}{\\cdot}}\n   \\ [D_2]\\ \\text{where } F \\text{ is a positive formula}\n\\]\n\n\n\nFocused proof systems have also been designed for classical and\nintuitionistic logics\n (Danos et al. 1997;\n Laurent et al. 2005;\n Liang & Miller 2009).\n2.3 Proof nets\n\nProofs presented using a sequent calculus contain a lot of detail that\nsometimes is uninteresting: consider for example how many\nuninterestingly different ways there are to form a proof of \\(\\vdash\n\\Gamma , (A_1\\lpar A_2), \\ldots ,(A_{n-1}\\lpar A_n)\\) from a\nderivation of \\(\\vdash \\Gamma , A_1, A_2 , \\ldots ,A_n\\). This\nunpleasant fact derives from the sequential nature of proofs in a\nsequent calculus: if we want to apply a set \\(S\\) of \\(n\\) rules to\ndifferent parts of a sequent, we cannot apply them in one step, even\nif they do not interfere with each other! We must\nsequentialize them, i.e., choose a linear order on \\(S\\) and\napply the rules in \\(n\\) steps, according to this order.\n\nA natural question arises: \u201cIs there a representation of proofs\nthat abstracts from such uninteresting details?\u201d. A similar\nquestion is answered positively in the case of intuitionistic sequent\ncalculus by means of what is known as natural deduction, that\nhas, via the Curry-Howard correspondence (Howard 1980),\na strong connection with the\ncomputational device known as \\(\\lambda\\)-calculus.\n\nFor linear logic, this succinct representation of proofs is given by\nproof nets, graph-like structures that enjoy particularly\ngood properties for the MLL fragment of the logic. The first step\ntowards this representation is to convert all the sequent calculus\nsystem, using the involutivity of negation, into a one-sided system,\nwhere sequents are of the form \\(\\vdash \\Gamma\\). As a consequence,\nthe number of rules is reduced since we have no left-introduction\nrules, but we keep the same expressive power, as provability stays the\nsame.\n\nTo each sequent calculus proof in MLL, one can inductively associate a\nproof net with the same conclusions as follows:\n\nTo a proof reduced to the axiom rule, we associate an axiom\nlink.\n\n\n\n \nFor a proof obtained by applying the cut rule to two proofs, we\nfirst inductively build the proof nets associated to those two proofs,\nand then we combine them using a cut link.\n\n\n\n \nFor a proof obtained by applying the tensor rule to two proofs, we\nfirst inductively build the proof nets associated to those two proofs,\nand then we combine them using a tensor link.\n\n\n\n \nFor a proof obtained by applying the par rule to a proof, first\ninductively build the proof net associated to that proof, and then we\nadd a \u201cpar link\u201d.\n\n\n\n \n\n\nAll this can be properly formalized using hypergraphs (formulas are\nnodes and \u201clinks\u201d are oriented hyperedges with hypotheses\nand conclusions), and we can formally define as a proof net a\nhypergraph inductively built out of a sequent calculus derivation of\nMLL. Notice that there are quite a lot of hypergraphs that are not\nproof nets.\n\nNow if you look at the proof net built from the derivations of\n\\(\\vdash \\Gamma , (A_1\\lpar A_2), \\ldots ,(A_{n-1}\\lpar A_n)\\)\nobtained from \\(\\vdash \\Gamma , A_1, A_2 , \\ldots ,A_n\\), you will see\nthat all trace of the order of application of the rules has\ndisappeared. In a sense, the proof nets are an equivalence class of\nsequent calculus derivations with respect to the derivation order of\nrules whose application commute.\n\nSuppose that somebody now comes to you with a huge hypergraph built\nwith axiom, cut, par and tensor links, claiming that it is actually\na representation of a proof.\nHow can you verify that it is actually a representation of a\nproof, and not just a random structure?\n\nPerforming this correctness check is a challenge that amounts\nto rebuilding a sequential construction history for your structure,\ncorresponding to a derivation in sequent calculus, and seems at first\na very complex problem. The first correctness criterion for MLL proof\nnets, called the \u201clong trip criterion\u201d, and present in\nGirard\u2019s original paper, is exponential, as well as the ACC\n(Acyclic connected) criterion of Danos and Regnier\n (1989)\n found later on. Nevertheless, there exists a much more efficient\ncriterion, known as Contractibility, due to Danos and Regnier, that\nhas more recently been reformulated as the following elegant graph\nparsing criterion by Guerrini, Martini and Masini: a hypergraph is a\nproof net if and only if it reduces to the singleton node\n\u201cnet\u201d via the following graph reduction rules\n\n\n\n\nPerforming this check naively can take quadratic time (each\napplication of a rule may require an entire lookup of the graph to\nfind the redex, and we need to perform as many steps as there are\nhyperlinks in the graph). Linear time algorithms have been give by\nGuerrini\n (2011)\n and by Murawski and Ong\n (2006).\n\nAnother style of correctness criterion for MLL proof nets is given by\nRetor\u00e9\n (2003)\n in which a quadratic algorithm is given for MLL. \n\nOn proof nets, one can perform cut elimination in a particularly clean\nway, because of their parallel nature, cuts can be eliminated locally via\ntwo simplification rules:\n\nAxiom move:\n\n\n\n \nMultiplicative move:\n\n\n\n \n\n\nThese are actually computation rules over proof nets, and the\ncorrectness criteria allow to verify easily that any such rule\npreserves correctness, and as a consequence, the reduction of a proof\nnet still comes from a sequent calculus proof of the same sequent.\n\nHence, cut elimination in MLL proof nets can be performed in linear\ntime and gives a simple, elegant cut-elimination result for all of\nMLL.\n\nThe proof nets approach can be extended to larger subsets of linear\nlogic, but then it is less clear how to obtain the same elegant\nresults as for MLL: the original system proposed in\n Girard 1987\n works for MELL, for example, by associating to the four exponential\nrules the following hypergraph constructions:\n\nContraction\n\n\n\n \nWeakening\n\n\n\n \nDereliction\n\n\n\n \nPromotion, that introduces the notion of \u201cbox\u201d, a\nsequentialization mark around a piece of a proof net materialized in\nthe pictures of the graphs by the rectangle drawn around the proof net\nof conclusions \\(A\\) and \\(\\quest\\Gamma\\).\n\n\n\n \n\n\nWhile these constructions and the associated graph reductions bear\nstriking similarity with \\(\\lambda\\)-calculus with explicit\nsubstitutions, as first remarked by Di Cosmo & Kesner\n (1997),\n they are too similar to the corresponding sequent calculus rules. The\nparallelization effect so elegant for MLL does not properly carry on\nhere, and the graph reduction rules involve boxes and are not\nlocal.\n\nTo recover a satisfactory system, many proposals have been made,\nstarting from the one by Danos & Regnier\n (1995)\n but we want to mention here the very elegant approach by Guerrini,\nMartini and Masini\n (Guerrini et al. 2003),\n that neatly shows the connection between two level proof systems for\nmodal logic, proper proof nets for MELL, and optimal reduction in the\n\\(\\lambda\\)-calculus.\n\nA recent paper by Heijltjes and Houston\n (2016)\n has shown that there can be no satisfactory notion of proof nets for\nMLL if units are also allowed. \n\nIt is possible to provide a canonical treatment of additive\nconnectives, even with first-order quantification\n (Heijltjes et al. 2019).\n Proof nets for formulas containing both multiplicative and additive\nconnectives have various technical presentations, none of which\nappears canonical and satisfactory. Their treatment in proof-net-like\nproof systems is currently a topic of active research. In particular,\nsee\n (Hughes and van Glabbeek 2005)\n and\n (Hughes and Heijltjes 2016).\n \n3. Semantics\n\nApproaching the semantics of linear logic is usually done along two\ndifferent paths. First, there are various semantic structures\navailable that can be used to map formulas to denotations in such\nstructures. That approach can be used to establish soundness and\ncompleteness for various fragments of linear logic. A more novel\nsemantic approach to linear logic involves giving semantics to proofs\ndirectly. We describe briefly these two approaches and provide some\nlinks to the literature.\n3.1 Semantics of provability\n\nOne approach to attempting a sound and complete semantics for\nfragments of linear logic associates to a formula the set of all\ncontexts that can be used to prove that formula. Of course, such a\ncollection may need to be more abstract and to be given various\nclosure properties. The phase semantics of Girard\n (1987)\n provides one such semantics: some uses of such semantics have been\nmade in computer science to provide counterexamples and as a tool that\ncan help establish that a given concurrent system cannot evolve into\nanother with certain properties\n (Fages et al. 2001).\nPhase semantics have also been used to give semantic proofs of cut elimination\nfor both first-order and higher-order versions of linear logic \n(Okada 1999).\n Similarly, Kripke-style semantics have been provided in\n Allwein & Dunn 1993\n and\n Hodas & Miller 1994.\n Quantales, which are certain kind of partially ordered algebraic structures,\nhave also been used to provide semantic models for parts of\nlinear logic early on\n (Yetter 1990).\n3.2 Semantics of proofs\n\nIn the formulas-as-types analogy which is so popular and fruitful in\ntheoretical computer science, a logical system is put in\ncorrespondence with a typed computational device (like typed\n\\(\\lambda\\)-calculus), by associating to each proof of that formula a\nprogram having that formula as a type. For example, a proof of the\ntautology \\(A \\Rightarrow A\\) corresponds to the program\nfun\\((x:A).x:A\\rightarrow A\\), the identity function on\nobjects of type \\(A\\). This is why, in constructive logical systems\n(such as intuitionistic logic and arithmetic), and in linear logic, so\nmuch importance is attached to proofs, to the point that building and\nstudying models of proofs gets so much more attention than building\nand studying models of provability: we are not satisfied to know that\na formula is provable, we really want to know the computational\ncontent of its proof.\n\nMany models of linear logic proofs have been proposed; we consider\nthat, to date, the simplest and most intuitive construction is the one\nbased on the so-called \u201crelational semantics\u201d or\n\u201cKripke-style semantics\u201d, where formulas are interpreted\nas multisets, one-sided sequents are interpreted as tuples of\nmultisets, and proofs are interpreted as relations over the\ninterpretation of sequents \n(Tortora de Falco 2003,\nEhrhard 2012,\nMelli\u00e8s 2018). \nIf one wants to give a purely\nset-theoretic semantics, without resorting to multisets, it is\npossible to do it by means of coherence spaces, sets equipped with a\nspecial coherence relation, as originally shown by in\n Girard 1987.\n There are interesting category theoretical models of linear logic,\nsuch as the *-autonomous categories\n (Barr 1991)\n and hypercoherences\n (Ehrhard 1993).\n\nAnother approach to the semantics of proofs is given by Girard\u2019s\nGeometry of Interaction, that allows us to obtain a fully\nalgebraic characterization of proofs. To each proof net, one can\nassociate a partial permutation matrix \\(\\sigma\\) corresponding to the\ncut links, and a proper matrix \\(M\\) corresponding expressions built\nout of a certain dynamic algebra, that describe the possible paths\ninside the proof net. It is then possible to fully describe the proof\nnet via the execution formula \n\\[\n\\mathrm{EX}(\\sigma ,M) = (1-\\sigma^2) \\left(\\sum_i M(\\sigma M)\\right) (1-\\sigma^2)\n\\]\n\n\nwhich, in the MLL case, is an invariant of the normalization process.\nSome nice connection to results coming from data-flow theory has been\nshown in some early work of Abramsky & Jagadeesan\n (1994).\n\nThe area of semantics that has developed around so-called game\nsemantics deserves special attention. The strong connection\nbetween games and linear logic was pointed out quite early by A. Blass\n (1992).\n In fact, there are two different traditions to connecting logic to\ngames. In the tradition of dialog games dating back to\nLorenzen, one player attempts to prove a formula while a second player\nattempts to refute it. It is possible to provide MALL with such a\ndialog game that is completely symmetric for both the prover and the\nrefuter\n (Delande et al. 2010).\n In another tradition, formulas are interpreted as games, logical\nconnectives as game constructors, and proofs as strategies that\ndescribe how a player reacts to opponent moves. By imposing different\nrestrictions on the rules of the game, one can actually provide a\nprecise semantics (technically, a fully abstract model) for various\nfeatures of actual programming languages, hence the huge interest in\nthis area over the past years. See, for example,\n Abramsky & Jagadeesan 1994,\n Abramsky & Melli\u00e8s 1999, and\n Hyland & Ong 2000.\n \n4. Complexity\n\nFor any given logic, it is useful to know whether or not there is an\neffective procedure to determine, for each sentence in the logic, if\nit is provable or not. A decidable logic\u2014i.e., one for\nwhich there is an effective procedure for provability\u2014is often\ndescribed by its complexity class, which characterizes how\ndifficult it is to perform the decision procedure. Extensive research\nwork has been dedicated to the study of the complexity and\ndecidability issues for several fragments of propositional linear\nlogic. It is known that\n\nMLL provability is NP-complete\n (Kanovich 1992) and \nMALL provability is PSPACE-complete\n (Lincoln et al. 1992).\n\nHere, \nNP and PSPACE are complexity classes such that NP\n\\(\\subseteq\\) PSPACE.  Surprisingly, for those\nthat may forget that the novelty in linear logic lies in the way\nformulas are managed without the structural rules of contraction and\nweakening, these results stay the same even if we focus on the\nfragments of the logics where only the constants, and no propositional\nvariables, are allowed\n (Lincoln & Winkler 1994). Indeed, it is possible to encode arbitrary formulas\ninto constant-only formulas preserving provability.\n\nMELL is a surprisingly expressive logic. For example, the reachability\nproblem in Petri nets can be encoded into MELL\n (Gunter & Gehlot 1989)\n and that problem is equivalent to the reachability problem of vector\naddition systems with states (VASS)\n (Reutenauer 1989).\n Furthermore, the decidability problem of MELL is equivalent to the\nreachability problem for branching VASS\n (de Groote et al. 2004)\n and the latter is known to have a non-elementary lower bound\n (Lazic and Schmitz 2015).\n Thus, if MELL turns out to be decidable, it will be at least TOWER-hard\n (Lazic and Schmitz 2015).\n A proof of the decidability of MELL has been given by Bimb\u00f3\n (2015)\n but a gap in that proof has been reported by Stra\u00dfburger\n (2019).\n \n\nProofs of the undecidability of propositional linear logic were\npublished in the early 1990s (Lincoln et\nal. 1992, Lincoln 1995).\nKanovich (2016) showed that this\nundecidability result holds for a greatly reduced fragment of\npropositional linear logic.  and a machine checked proof of undecidability\nhas been published in (Forster\n& Larchey-Wendling, 2019).  However, a proof\nof decidability of propositional linear logic has also been published\nby Bimb\u00f3 & Dunn in (2022), who also\nclaim to have found mistakes in the above-mentioned papers.\n\n\nLinear logic with the unrestricted weakening rule added (also known as\nlinear affine logic) is decidable\n (Kopylov 1995)\n and exponential space hard\n (Urquhart 2000).\n \n\nA good overview of complexity results surrounding linear logic can be\nfound in\n Lincoln 1995.\n5. Computer science impact\n\nWhen intuitionistic logic was first proposed early in the last\ncentury, it was presented as a challenge to the way traditional\nmathematicians were supposed to do business. Uses of the excluded\nmiddle and of proof-by-contradiction were considered suspect and\nproblematic, particularly in the presence of infinity. As\nintuitionistic logic concerns were developed into constructive\nmathematics, new constructive approaches have arisen to topics such as\ntopology, algebra, and analysis. Given that linear logic encompasses\nthe dynamics of proof (algorithm) and resources, its primary impact\nhas been not in traditional mathematics but in computer science.\nBefore overviewing the nature of that impact, we outline the various\nways in which logic more generally is used in computer science.\n\nLogic plays different roles in the specification of computations. We\ncan identify the following broad different approaches and note which\nroles have felt influences from linear logic.\n\nIn the computation-as-model approach, computations are\nencoded as mathematical structures and consist of such items as nodes,\ntransitions, and states. Logic is used externally to make\nstatements about those structures. That is, computations are\nused as models for logical expressions. Intensional operators, such as\nthe modals of temporal and dynamic logics or the triples of Hoare\nlogic, are often employed to express propositions about the change in\nstate. This use of logic to represent and reason about computation is\nprobably the most broadly successful use of logic for\nrepresenting computation. This role for logic has felt little\ninfluence from linear logic.\n\nIn the computation-as-deduction approach, pieces of\nlogic\u2019s syntax (such as formulas, terms, types, and proofs) are\nused directly as elements of the specified computation. In this more\nrarefied setting, there are two rather different approaches to how\ncomputation is modeled, called the proof normalization\napproach and the proof search approach.\n\nWe outline below the significant impacts that linear logic has had on\nboth of these different settings.\n5.1 Proof normalization\n\nThe proof normalization approach views the state of a\ncomputation as a proof term and the process of computing as\nnormalization (known alternatively as \\(\\beta\\)-reduction or\ncut-elimination). Functional programming can be explained using\nproof-normalization as its theoretical basis\n (Martin-L\u00f6f 1982)\n and has been used to justify the design of new functional programming\nlanguages, e.g.,\n Abramsky 1993.\n Linear logic provides this approach to computational specification\nwith new types, new declarative means for statically understanding how\nresources may be used in a computation, and provided an appealing\nmeans for formalizing the duality between a function and the\nenvironment that supplies it with arguments.\n\nAnother area where linear logic has been a powerful theoretical\ninstrument is that of optimal reduction. The problem of\nbuilding efficient (optimal) interpreters for the\n\\(\\lambda\\)-calculus, that stayed open for quite a long time after its\noriginal definition by J.J. L\u00e9vy, was solved for the first time\nin\n Lamping 1990,\n via a sophisticated sharing graph implementation involving a quite\nimpressive amount of rules. Using ideas and intuition from linear\nlogic, many authors reconstructed Lamping\u2019s solution,\nsimplifying it and leading to a rich theory connected to that of the\nGeometry of Interaction. For further reading, a good reference is\n Asperti & Guerrini 1998.\n \n\nThe refinement of intuitionistic logic provided by linear logic and\nthe dualities of linear logic provided a setting in which one could\nview a function and its environment as similar entities that interact\ndually. For example, a function with the type \\(A \\limp B\\) can be\nmodeled as a process that consumes a value of type \\(A\\) from its\nenvironment and transforms it into a value of type \\(B\\). In linear\nlogic, this implication is equivalent to its contrapositive form: the\ntype \\(B^{\\bot} \\limp A^{\\bot}\\) can lead to interpreting the same\nfunction as a process that transforms a demand for a value of type\n\\(B\\) into a demand for a value of type \\(A\\) (notice that this does\nnot happen with functions of intuitionistic type since, for example,\ninput argument may be vacuous)\n (Curien 2003).\n The recent successes of using game semantics to model functional\ncomputation are similarly related to the dual treatment of function\nand environment\n (Abramsky and Jagadeesan 1994,\n Hyland & Ong 2000).\n\nFinally, we mention that in the area of encoding computation as proof\nnormalization, linear logic has been used to provide a type-based\ndescription of polytime recursive functions. For example, M. Hofmann\n (2003)\n introduced a \\(\\lambda\\)-calculus with modal and linear types that\nextended the function algebra of\n Bellantoni & Cook 1992\n to higher types. Types based on linear logic have also been used\nwithin functional programs: see\n Guzman & Hudak 1990\n and\n Wadler 1991.\n5.2 Proof search\n\nThe proof search approach views the state of a computation as\na sequent (a structured collection of formulas) and the process of\ncomputing as the process of searching for a proof of a sequent: the\nchanges that take place in sequents capture the dynamics of\ncomputation. With this view of computation, we generally read\ninference rules bottom up, i.e., as a transformation of their\nconclusion into their premise(s). Logic programming can be explained\nusing proof search as its theoretical basis, and linear logic provides\nthis approach to computational specification with new combinators for\nbuilding logic programs, new means to capture rich dynamics, and new\ndeclarative approaches to specifying concurrent computations. (See\n Miller 2004\n for an overview of linear logic programming languages.)\n\nThe completeness of focusing proof system can be used to provide a\ndeclarative explanation of part of the operational semantics of logic\nprogramming within linear logic. Consider, for example, the subset\n\\(L\\) of formulas of linear logic that are built from only the\nconnectives \\(\\top\\), &, \\(\\limp , \\Rightarrow\\), and \\(\\forall\\).\n(Notice that if one adds \\(\\bot\\) to this list, it is possible to\nencode all connectives of linear logic.) It is possible to see that\ncut-free proof search in \\(L\\) can be defined into to phases. Given a\nsequent \\(\\Gamma\\); \\(\\Delta \\vdash G\\), where \\(\\Gamma\\) is a\nset of formulas (which can be contracted and weakened), \\(\\Delta\\) is\nmultiset of formulas (which cannot be contracted nor weakened), and\n\\(G\\) (the \u201cgoal\u201d formula) is a single formula (all from\n\\(L)\\), then proof search proceeds as follows.\n\nIf \\(G\\) is non-atomic, then only a right introduction rule can be\nused to conclude this sequent. Given this set of connectives, the\nright rules are invertible and this goal-reduction phase\ncorresponds exactly to the asynchronous phase of focused proofs.\nIf \\(G\\) is atomic, then proof search proceeds by\ndeciding on a single formula from a left-hand context.\nOnce a formula is chosen for the focus, all\nleft-introduction rules are applied to only that formula and any\npositive subformulas that arise. This backchaining phase\ncorresponds to the asynchronous phase of focused proof\nconstruction.\n\n\nFormally, these various phases can be described using the following\ninference rules. Here, a new sequent arrow is introduced: this arrow\nis labeled with the formula that is the result of a left-introduction\nrule. Notice that the rule for left-introduction of \\(\\limp\\) requires\nsplitting the \\(\\Delta\\) context into two parts \\(\\Delta_1,\\Delta_2\\)\n(when reading the rule bottom up). There are, of course, \\(2^n\\) such\nsplittings if that context has \\(n \\ge 0\\) distinct formulas. The\nsyntactic variable \\(A\\) in these inference rules ranges over atomic\nformulas.\n\nGoal Reduction Phase \n\\[\n\\frac{}  \n     {\\Gamma;\\Delta \\vdash \\top}\\ \\top R\n  \\qquad\n\n\\frac{\\Gamma;\\Delta \\vdash B \\qquad \\Gamma;\\Delta \\vdash C}\n     {\\Gamma;\\Delta \\vdash B \\amp C}\\ {\\amp}R\n\\]\n \n\\[\\frac{\\Gamma;\\Delta, B \\vdash C}\n       {\\Gamma;\\Delta \\vdash B \\limp C}\\ \\limp R\n  \\qquad\n\n\\frac{\\Gamma,B ;\\Delta \\vdash C}\n     {\\Gamma;\\Delta \\vdash B \\Rightarrow C}\\ {\\Rightarrow}R\n  \\qquad\n\n\\frac{\\Gamma;\\Delta \\vdash B[y/x]}\n     {\\Gamma;\\Delta \\vdash \\forall x. B}\\ \\forall R\n\\]\n\n\n\nBackchaining Phase \n\\[\n\\frac{\\Gamma;\\Delta \\lvdash{D_1} A}\n     {\\Gamma;\\Delta \\lvdash{D_1\\amp D_2}\\, A} \\ {\\amp}L\n  \\qquad\n\n\\frac{\\Gamma;\\Delta \\lvdash{D_2} A}\n     {\\Gamma;\\Delta \\lvdash{D_1\\amp D_2} A}\\ {\\amp}L\n  \\qquad\n\n\\frac{\\Gamma;\\Delta \\lvdash{D[t/x]} A}\n     {\\Gamma;\\Delta \\lvdash{\\forall_{\\tau}x.D} A}\\ \\forall L\n\\]\n \n\\[\\frac{\\Gamma;\\Delta_1 \\vdash G \\quad \\Gamma;\\Delta_2 \\lvdash{D} A}\n       {\\Gamma;\\Delta_1,\\Delta_2 \\lvdash{G\\limp D} A} \\ {\\limp}L\n  \\qquad\n\n\\frac{\\Gamma;\\cdot \\vdash G \\quad \\Gamma;\\Delta \\lvdash{D} A}\n     {\\Gamma;\\Delta \\lvdash{G\\Rightarrow D} A}\\ {\\Rightarrow}L\n\\]\n\n\n\nIdentity and Decide Rules \n\\[\n\\frac{\\Gamma,D;\\Delta \\lvdash{D} A}\n     {\\Gamma,D;\\Delta \\vdash A}\\ \\textit{decide}{!}\n  \\qquad\n\n\\frac{\\Gamma;\\Delta \\lvdash{D} A}\n     {\\Gamma;\\Delta,D \\vdash A}\\ \\textit{decide}\n  \\qquad\n\n\\frac{}\n     {\\Gamma;\\cdot \\lvdash{A} A}\\ \\textit{init}\n\\]\n\n\n\nLinear logic restricted to \\(L\\) can be viewed as a linear logic\nprogramming language. As a consequence, it can serve as a\nspecification language for computational systems, a role that is also\noccupied by, say, Petri nets, process calculi, \\(\\lambda\\)-calculus,\netc. Given that linear logic has a proof theory and various kinds of\nsemantics, broad avenues of reasoning about computations specified in\n\\(L\\) are provided by the meta-theory of linear logic.\n\nGiven that the sequent calculus for linear logic uses multisets of\nformulas, proof search can directly encode multiset\nrewriting. Since many computations can naturally be seen as\nmultiset rewriting, it has been possible to make numerous connections\nbetween linear logic and Petri nets\n (Gunter & Gehlot 1989),\n process calculi\n (Andreoli & Pareschi 1991,\n Kobayashi et al. 1999,\n Miller 1996),\n and security protocols\n (Cervesato et al. 1999,\n Miller 2003).\n6. Variations\n6.1 Different treatments of modality\n\nIf one uses traditional sequent calculus presentations, the exponentials are not\ncanonical in the following sense: if you introduce another copy of\nexponentials, say \\(\\bang'\\) and \\(\\quest'\\), with the same rules as\nthe original ones, there is no way to prove that \\(\\bang\\) is\nequivalent to \\(\\bang'\\), and \\(\\quest\\) to \\(\\quest'\\), while for the\nother connectives this is easily established. Various applications of\nnon-canonical exponentials can be found in\n (Danos et. al., 1993;\n Nigam & Miller, 2009). Although the decidability of MELL is currently being\ndebated\n (Bimb\u00f3 2015,\n Stra\u00dfburger 2019), extending MLL with three pairs of \\(\\bang\\) and\n\\(\\quest\\) yields a logic that is undecidable\n (Chaudhuri 2018).\n Martini and Masini\n 1995\n describe a \u201c2-sequent\u201d proof system in which the\nexponentials are canonical.\n\nThe fact that cut-elimination can make proofs in classical and\nintuitionistic logic grow to enormous size can be analyzed in terms of\nthe application of the contraction rule in those proof systems. If\nproof systems introduce restrictions on contraction, it is possible to\ndesign new logics and proof systems for which cut-elimination has a\nmuch-reduced complexity. For example, elementary linear logic\n(ELL) is obtained by replacing the \\(\\bang\\) and \\(\\quest\\)\nintroduction by a single rule introducing \\(\\bang\\) and \\(\\quest\\) at\nthe same time. As a consequence, ELL can encode all and only the\nKalmar elementary functions (computable in time bounded by a tower of\nexponentials of fixed height)\n (Girard 1998,\n Baillot 2015). Still, other variations on the inference rules for the\nexponentials have been studied. For example, light linear\nlogic\n (Girard 1998)\n and soft linear logic\n (Lafont 2004)\n both characterize functions computable in polynomial time: see also\n (Baillot & Terui 2004).\n \n6.2 Non-commutative linear logic\n\nWhile linear logic rejects the universal application of the two\nstructural rules of weakening and contraction, it allows the\nunrestricted use of the structural rule called exchange. A\nsequent calculus that does not universally employ the exchange rule\nhas sequents whose left and right contexts are lists: the order of\nformulas within context becomes an expressive element of the logic. In\nthis case, the multiplicative disjunction and conjunction can become\nnon-commutative.\n\nOne of the first logics that rejects all three structural rules of the\nsequent calculus was given in\n Lambek 1958.\n While this logic contains two implications, it \ncontains neither a negation nor any exponentials. Various papers have\nproposed extending linear logic to include non-commutative features\nand, at present, no proposal seems canonical. For a sampling of\nnon-commutative linear logics, see\n Yetter 1990,\n Abrusci 1991,\n Retor\u00e9 1997,\n Abrusci & Ruet 1999, and\n Guglielmi & Stra\u00dfburger 2001.\n6.3 Treatment of unbounded behavior\n\nWhile the MALL logic is an expressive and novel logic, it is also\ndecidable and, thus, not capable of capturing the unbounded behaviors\nfound in, say, iteration and recursion. As described above,\nthe addition of the exponentials ! and ? enriches MALL to full linear\nlogic and to a setting where unbounded behaviors can be captured. A\nsecond approach to extending MALL to capture unbounded behaviors\ninvolves the addition of the least and greatest fixed point operators\nas logical connectives directly into MALL. In order to properly\ncharacterize fixed points as being either the least or the greatest,\nit is necessary for the inference rules for fixed points to be\n\u201chigher-order\u201d in the sense that they involve invariants.\nSuch an extension to MALL (also with first-order quantification and\nterm equality) has been developed by Baelde\n (Baelde & Miller, 2007;\n Baelde 2012) and has been used to provide a proof-theoretic\nfoundation for model checking\n (Heath & Miller 2018).\n \n", "bibliography": {"categories": [], "cat_ref_text": {"ref_list": ["<a name=\"abramsky93tcs\"></a>Abramsky,\n S., 1993, \u201cComputational interpretations of linear\nlogic\u201d, <em>Theoretical Computer Science</em>, 111:\n3\u201357.", "<a name=\"abramsky94ic\"></a>Abramsky,\n S., and Jagadeesan, R., 1994, \u201cNew Foundations for the Geometry\nof Interaction\u201d, <em>Information and Computation</em>, 111(1):\n53\u2013119.", "<a name=\"abramsky99lics\"></a>Abramsky,\n S., and Melli\u00e8s, Paul-Andr\u00e9, 1999, \u201cConcurrent\nGames and Full Completeness\u201d, <em>14th Annual Symposium on Logic\nin Computer Science</em>, Trento: IEEE Computer Society Press., pp.\n431\u2013442.", "<a name=\"abrusci91jsl\"></a>Abrusci,\n V. M., 1991, \u201cPhase semantics and sequent calculus for pure\nnon-commutative classical linear propositional logic\u201d,\n<em>Journal of Symbolic Logic</em>, 56(4): 1403\u20131451.", "<a name=\"abrusci99apal\"></a>Abrusci,\n V.M., and Ruet, P., 1999, \u201cNon-Commutative Logic I: The\nMultiplicative Fragment\u201d, <em>Annals of Pure and Applied\nLogic</em>, 101(1): 29\u201364.", "<a name=\"allwein93jsl\"></a>Allwein,\n G. and Dunn, J.M., 1993, \u201cKripke Models for Linear\nLogic\u201d, <em>Journal of Symbolic Logic</em>, 58(2):\n514\u2013545.", "<a name=\"anderson75vol1\"></a> Anderson, A. R. and Belnap, N. D.,\n 1975, <em>Entailment: The Logic of Relevance and Necessity</em>\n (Volume I), Nuel D. Belnap &amp; J. Michael Dunn (eds.), Princeton,\n N.J.: Princeton University Press.", "<a name=\"anderson92vol2\"></a> Anderson, A. R., Belnap, N. D., and\nDunn, J. M., 1975, <em>Entailment: The Logic of Relevance and\nNecessity</em> (Volume II), Princeton, N.J.: Princeton University\nPress.", "<a name=\"andreoli92jlc\"></a>Andreoli,\n J.-M., 1992, \u201cLogic programming with focusing proofs in linear\nlogic\u201d, <em>Journal of Logic and Computation</em>, 2(3):\n297\u2013347.", "<a name=\"andreoli91ngc\"></a>Andreoli,\n J.-M. and Pareschi, R., 1991, \u201cLinear objects: Logical\nprocesses with built-in inheritance\u201d, <em>New Generation\nComputing</em>, 9(3\u20134): 445\u2013473.", "<a name=\"asperti98cup\"></a>Asperti,\n A., and Guerrini, S., 1998, \u201cThe Optimal Implementation of\nFunctional Programming Languages\u201d, Cambridge Univ. Press.", "<a name=\"avron88tcs\"></a>Avron,\n A., 1988, \u201cThe Semantics and Proof Theory of Linear\nLogic\u201d, <em>Theoretical Computer Science</em>, 57:\n161\u2013184. ", "<a name=\"baelde12tocl\"></a>Baelde,\n D., 2012, \u201cLeast and greatest fixed points in linear\nlogic\u201d, ACM Transactions on Computational Logic, 13(1).\ndoi:10.1145/2071368.2071370", "<a name=\"baelde07lpar\"></a>Baelde,\n D. and Miller, D., 2007, \u201cLeast and greatest fixed points in\nlinear logic\u201d, <em>Logic for Programming, Artificial\nIntelligence, and Reasoning</em> (Lecture Notes in Computer Science:\nVolume 4790), edited by N. Dershowitz and A. Voronkov, pp.\n92\u2013106.", "<a name=\"baillot15ic\"></a>Baillot,\n P., 2015, \u201cOn the expressivity of elementary linear logic:\nCharacterizing Ptime and an exponential time hierarchy\u201d,\n<em>Information and Computation</em>, 241: 3\u201331.", "<a name=\"baillot04lics\"></a>Baillot,\n P., and Terui, K., 2004, \u201cLight Types for Polynomial Time\nComputation in Lambda-Calculus\u201d, <em>Proceedings of the\nNineteenth Annual IEEE Symposium on Logic in Computer Science</em>,\nTurku, Finland, IEEE Computer Society Press, pp. 266\u2013275.", "<a name=\"barr91mscs\"></a>Barr,\n M., 1991, \u201c*-Autonomous categories and linear logic\u201d,\n<em>Mathemathical Structures in Computer Science</em>, 1(2):\n159\u2013178.", "<a name=\"bellantoni92cc\"></a>Bellantoni,\n S. and Cook, S., 1992, \u201cA New Recursion-Theoretic\nCharacterization of the Polytime Functions\u201d, <em>Computational\nComplexity</em>, 2: 97\u2013110.", "<a name=\"bimbo15\"></a>Bimb\u00f3, K., 2015, \u201cThe\ndecidability of the intensional fragment of classical linear\nlogic\u201d, <em>Theoretical Computer Science</em>, 597(13):\n1\u201317.", "<a name=\"bimbo22essays\"></a>Bimb\u00f3, K. and J. M. Dunn, 2022,\n\u201cModalities in lattice-R\u201d, in <em>Relevance Logics and\nother Tools for Reasoning.  Essays in Honor of J. Michael Dunn</em>,\nLondon: College Publications, pp. 89\u2013127.  ", "<a name=\"blass92apal\"></a>Blass,\n A., 1992, \u201cA game semantics for linear logic\u201d, <em>Annals\nof Pure and Applied Logic</em>, 56: 183\u2013220.", "<a name=\"cervesato99csfw\"></a>Cervesato,\n I., Durgin, N., Lincoln, P., Mitchell, J., and Scedrov, A., 1999,\n\u201cA meta-notation for protocol analysis\u201d, in R. Gorrieri\n(ed.), <em>Proceedings of the 12th IEEE Computer Security Foundations\nWorkshop\u2014CSFW 1999</em>, Los Alamitos, CA: IEEE Computer Society\nPress, pp. 55\u201369.", "<a name=\"chaudhuri18mscs\"></a>Chaudhuri,\n K., 2018, \u201cEncoding additives using multiplicatives and\nsubexponentials\u201d, <em>Mathematical Structures in Computer\nScience</em>, 28(5): 651\u2013666.", "<a name=\"curien03bsl\"></a>Curien,\n P.-L., 2003, \u201cSymmetry and interactivity in programming\u201d,\n<em>Bulletin of Symbolic Logic</em>, 9(2): 169\u2013180.", "<a name=\"dallago08csl\"></a>Dal Lago, U., and Laurent, O., 2008,\n\u201cQuantitative Game Semantics for Linear\nLogic\u201d, <em>Computer Science Logic</em> (Lecture Notes in\nComputer Science: Volume 5213), Michael Kaminski and Simone Martini\n(eds.), Berlin: Springer, pp. 230\u2013245. ", "<a name=\"danos93kgc\"></a>Danos,\n V., Joinet, J.-P., and Schellinx, H., 1993, \u201cThe Structure of\nExponentials: Uncovering the Dynamics of Linear Logic Proofs\u201d,\npp. 159\u2013171, in <em>Kurt G\u00f6del Colloquium</em> (Lecture\nNotes in Computer Science, Volume 713), edited by G. Gottlob, A.\nLeitsch, and D. Mundici, Berlin: Springer.", "<a name=\"danos97jsl\"></a>\u2013\u2013\u2013,\n 1997, \u201cA New Deconstructive Logic: Linear Logic\u201d,\n<em>Journal of Symbolic Logic</em>, 62(3): 755\u2013807. ", "<a name=\"danos89aml\"></a>Danos,\n V. and Regnier, L., 1989, \u201cThe Structure of\nMultiplicatives\u201d, <em>Archive of Mathematical Logic</em>,\nSpringer, 28:181\u2013203.", "<a name=\"danos95all\"></a>\u2013\u2013\u2013,\n 1995, \u201cProof-nets and Hilbert space\u201d, in J.-Y. Girard, Y.\nLafont, and L. Regnier (eds.), <em>Advances in Linear Logic</em>,\nCambridge: Cambridge University Press, pp. 307\u2013328.", "<a name=\"degroote04lics\"></a>de\n Groote, P., Guillaume, B., and Salvati, S., 2004, \u201cVector\naddition tree automata\u201d, in <em>Proceedings of the 19th IEEE\nSymposium on Logic in Computer Science</em> (LICS 2004), 14\u201317\nJuly 2004, Turku, Finland, pp. 64\u201373.", "<a name=\"delande10apal\"></a>Delande,\n O., Miller, D., and Saurin, A., 2010, \u201cProof and refutation in\nMALL as a game\u201d, <em>Annals of Pure and Applied Logic</em>,\n161(5): 654\u2013672.", "<a name=\"dicosmo97lics\"></a>Di\n Cosmo, R., and Kesner, D., 1997, \u201cStrong normalization of\nexplicit substitutions via cut elimination in proof nets\u201d,\n(extended abstract) in <em>Proceedings of the Twelfth Annual IEEE\nSymposium on Logic in Computer Science</em>, Los Alamitos, CA: IEEE\nComputer Society Press, pp. 35\u201346.", "<a name=\"ehrhard93mscs\"></a>Ehrhard,\n T., 1993, \u201cHypercoherences: A Strongly Stable Model of Linear\nLogic\u201d, <em>Mathematical Structures in Computer Science</em>,\n3(4): 365\u2013385.", "<a name=\"ehrhard12tcs\"></a>\u2013\u2013\u2013, 2012,\n\u201cThe Scott model of linear logic is the \nextensional collapse of its relational model\u201d, \n<em>Theoretical Computer Science</em>, 13(6):\n20\u201345.", "<a name=\"fages01ic\"></a>Fages,\n F., Ruet, P., and Soliman, S., 2001, \u201cLinear Concurrent\nConstraint Programming: Operational and Phase Semantics\u201d,\n<em>Information and Computation</em>, 165(1): 14\u201341.", "<a name=\"forster19cpp\"></a>Forster, Y. and D. Larchey-Wendling,\n2019, \u201cCertified undecidability of intuitionistic linear logic\nvia binary stack machines and Minsky machines\u201d, <em>Proceedings\nof the 8th ACM SIGPLAN International Conference on Certified Programs\nand Proofs (CPP\u201919)</em>, New York: Association of Computing\nMachinery, pp. 104\u2013117. doi:10.1145/3293880.3294096", "<a name=\"gentzen35\"></a>Gentzen, G., 1935, \u201cInvestigations\ninto Logical Deduction\u201d, in M.  E. Szabo (ed.), <em>The\nCollected Papers of Gerhard Gentzen</em>,  Amsterdam: North-Holland\npp.  68\u2013131. ", "<a name=\"girard87tcs\"></a>Girard,\n J.-Y., 1987, \u201cLinear logic\u201d, <em>Theoretical Computer\nScience</em>, 50: 1\u2013102.", "<a name=\"girard98ic\"></a>\u2013\u2013\u2013,\n 1998, \u201cLight Linear Logic\u201d, <em>Information and\nComputation</em>, 143(2):175\u2013204.", "<a name=\"grishin81\"></a>Grishin,\n V. N., 1981, \u201cPredicate and set-theoretic calculi based on\nlogic without contraction rules,\u201d (Russian). Izvestiya Akademii\nNauk SSSR Seriya Matematicheskaya 45(1): 47\u201368. 239. Math. USSR\nIzv., 18, no.1, Moscow. ", "<a name=\"guerrini11tcs\"></a>Guerrini,\n S., 2011, \u201cA linear algorithm for MLL proof net correctness and\nsequentialization\u201d, <em>Theoretical Computer Science</em>, 412:\n1958\u20131978.", "<a name=\"guerrini03tcs\"></a>Guerrini,\n S., Martini, S., and Masini, A., 2003, \u201cCoherence for sharing\nproof-nets\u201d, <em>Theoretical Computer Science</em>, 294(3):\n379\u2013409.", "<a name=\"guglielmi01csl\"></a>Guglielmi,\n A., and Stra\u00dfburger, L., 2001, \u201cNon-commutativity and\nMELL in the Calculus of Structures\u201d, <em>Computer Science\nLogic</em> (Lecture Notes in Computer Science, Volume 2142), Berlin:\nSpringer Verlag, pp. 54\u201368.", "<a name=\"gunter89atpn\"></a>Gunter,\n C. A., and Gehlot, V., 1989, \u201cNets as Tensor Theories\u201d,\nin G. De Michelis (ed.), <em>Proceedings of the Tenth International\nConference on Application and Theory of Petri Nets</em> (Lecture Notes\nin Computer Science: Volume 616), Bonn: Springer-Verlag, pp.\n174\u2013191.", "<a name=\"guzman90lics\"></a>Guzman,\n J.C. and Hudak, P., 1990, \u201cSingle-threaded polymorphic lambda\ncalculus\u201d, in <em>Proceedings of the Fifth IEEE Symposium on\nLogic in Computer Science</em>, Philadelphia: IEEE Computer Society\nPress.", "<a name=\"heath18jar\"></a>Heath,\n Q. and Miller, D., 2018, \u201cA proof theory for model\nchecking\u201d, <em>Journal of Automated Deduction</em>,\ndoi:10.1007/s10817-018-9475-3.", "<a name=\"heijltjes16lmcs\"></a>Heijltjes,\n W. and Houston, R., 2016, \u201cProof equivalence in MLL is\nPSPACE-complete\u201d, <em>Logical Methods in Computer Science</em>\n12(1).", "<a name=\"heijltjes19fscd\"></a>Heijltjes,\n W. B., Hughes, D. J. D., and Stra\u00dfburger, L., 2018,\n\u201cProof nets for first-order additive linear logic\u201d,\n<em>4th International Conference on Formal Structures for Computation\nand Deduction</em>, (FSCD 2019: Volume 131), Dagstuhl: Leibniz-Zentrum\nf\u00fcr Informatik, pp. 22:1\u201322:22.", "<a name=\"hodas94ic\"></a>Hodas,\n J., and Miller, D., 1994, \u201cLogic programming in a fragment of\nintuitionistic linear logic\u201d, <em>Information and\nComputation</em>, 110(2): 327\u2013365.", "<a name=\"hofmann03ic\"></a>Hofmann,\n M., 2003, \u201cLinear types and non-size increasing polynomial time\ncomputation\u201d, <em>Information and Computation</em>, 183(1):\n57\u201385.", "<a name=\"howard80\"></a>Howard,\n W.A., 1980, \u201cThe formulae-as-type notion of construction,\n1969\u201d, in J.P. Seldin and R. Hindley (eds.), <em>To H. B. Curry:\nEssays in Combinatory Logic, Lambda Calculus, and Formalism</em>, New\nYork: Academic Press, pp. 479\u2013490.", "<a name=\"hughes05tocl\"></a>Hughes,\n D.J.D. and van Glabbeek, R., 2005, \u201cProof Nets for Unit-Free\nMultiplicative-Additive Linear Logic\u201d, <em>ACM Transactions on\nComputational Logic</em>, 6: 784\u2013842.", "<a name=\"hughes16lics\"></a>Hughes,\n D.J.D. and Heijltjes, W. B., 2016, \u201cConflict nets: efficient\nlocally canonical mall proof nets\u201d, <em>31st Annual ACM/IEEE\nSymposium on Logic in Computer Science</em> (LICS), 2016.", "<a name=\"hyland00ic\"></a>Hyland,\n J.M.E., and Ong, C.-H.L., 2000, \u201cOn Full Abstraction for PCF:\nI. Models, observables and the full abstraction problem, II. Dialogue\ngames and innocent strategies, III. A fully abstract and universal\ngame model\u201d, <em>Information and Computation</em>, 163:\n285\u2013408.", "<a name=\"kanovich92\"></a>Kanovich,\n M.I., 1992, \u201cHorn Programming in Linear Logic is\nNP-Complete\u201d, in <em>Proceedings of the Seventh Annual Symposium\non Logic in Computer Science</em>, Santa Cruz, IEEE Computer Society\nPress, pp. 200\u2013210.", "<a name=\"kanovich16mscs\"></a>\n\u2013\u2013\u2013,\n2016, \u201cThe undecidability theorem for the\nHorn-like fragment of linear logic\n(Revisited)\u201d, <em>Mathematical Structures in\nComputer Science</em>, 26: 719\u2013744.  ", "<a name=\"kobayashi99tcs\"></a>Kobayashi,\n N., Shimizu, T., and Yonezawa, A., 1999, \u201cDistributed\nconcurrent linear logic programming\u201d, <em>Theoretical Computer\nScience</em>, 227(1\u20132): 185\u2013220.", "<a name=\"kopylov95lics\"></a>Kopylov,\n A. P., 1995, \u201cDecidability of Linear Affine Logic\u201d,\nSymposium on Logic in Computer Science (LICS\u201995), IEEE Computer\nSociety Press, pp. 496\u2013505. ", "<a name=\"lafont04tcs\"></a>Lafont,\n Y., 2004, \u201cSoft linear logic and polynomial time\u201d,\n<em>Theoretical Computer Science</em>, 318(1\u20132):\n163\u2013180.", "<a name=\"lamarche96entcs\"></a>Lamarche, F., 1996, \u201cFrom\nProof Nets to Games: extended abstract\u201d, in <em>Linear Logic 96\nTokyo Meeting</em>, <em>Electronic Notes in Theoretical Computer\nScience</em>, 3: 107\u2013119. ", "<a name=\"lambek58amm\"></a>Lambek,\n J., 1958, \u201cThe mathematics of sentence structure\u201d,\n<em>American Mathematical Monthly</em>, 65: 154\u2013169.", "<a name=\"lamp90\"></a>Lamping,\n J., 1990, \u201cAn algorithm for optimal lambda-calculus\nreductions\u201d. 17th Annual Symposium on Principles of Programming\nLanguages, San Francisco, ACM Press, pp. 16\u201330.", "<a name=\"laurent05apal\"></a>Laurent,\n O., Quatrini, M., and Tortora de Falco, L., 2005, \u201cPolarized\nand focalized linear and classical proofs\u201d, <em>Annals of Pure\nand Applied Logic</em>, 134 (2\u20133): 217\u2013264.", "<a name=\"lazic15tocl\"></a>Lazic,\n R. and Schmitz, S., 2015, \u201cNonelementary complexities for\nbranching VASS, MELL, and extensions\u201d, <em>ACM Transactions on\nComputational Logic</em>, 16(3): pp. 20:1\u201320:30.", "<a name=\"liang09tcs\"></a>Liang,\n C. and Miller, D., 2009, \u201cFocusing and Polarization in Linear,\nIntuitionistic, and Classical Logics\u201d, <em>Theoretical Computer\nScience</em>, 410(46): 4747\u20134768.", "<a name=\"lincoln93apal\"></a>Lincoln, P., Scedrov, A., and Shankar,\nN., 1993, \u201cLinearizing intuitionistic\nimplication\u201d, <em>Annals of Pure and Applied Logic</em>, 60(2):\n151\u2013177. ", "<a name=\"lincoln95all\"></a>Lincoln,\n P., 1995, \u201cDeciding provability of linear logic\nformulas\u201d, <em>Proceedings of the Workshop on Advances in Linear\nLogic</em>, J.-Y. Girard, Y. Lafont, and L. Regnier (eds.), Cambridge:\nCambridge University Press, pp. 197\u2013210.", "<a name=\"lincoln92\"></a>Lincoln,\n P., Mitchell, J., Scedrov, A., and Shankar, N., 1992, \u201cDecision\nproblems for propositional linear logic\u201d, <em>Annals of Pure and\nApplied Logic</em>, 56: 239\u2013311.", "<a name=\"lincoln92un\"></a>Lincoln,\n P., and Winkler, T., 1994, \u201cConstant-Only Multiplicative Linear\nLogic is NP-Complete\u201d, <em>Theoretical Computer Science</em>,\n135: 155\u2013169.", "<a name=\"martini95all\"></a>Martini,\n S. and Masini, A., 1995, \u201cOn the fine structure of the\nexponential rule\u201d, in <em>Advances in linear logic</em>, edited\nby J.-Y. Girard and Y. Lafont and L. Regnier, pp. 197\u2013210, New\nYork: Cambridge University Press.", "<a name=\"martinlof82lmps\"></a>Martin-L\u00f6f,\n P., 1982, \u201cConstructive Mathematics and Computer\nProgramming\u201d, <em>Sixth International Congress for Logic,\nMethodology, and Philosophy of Science</em>, Amsterdam: North-Holland,\npp. 153\u2013175.", "<a name=\"mellies18mscs\"></a>Melli\u00e8s, P.-A., Tabareau, N.\nand Tasson, C., 2018, \u201cAn explicit formula for the free\nexponential modality of linear logic\u201d,\n<em>Mathematical Structures in Computer Science</em>, 28(7):\n1253\u20131286.", "<a name=\"miller96tcs\"></a>Miller,\n D., 1996, \u201cForum: A multiple-conclusion specification\nlanguage\u201d, <em>Theoretical Computer Science</em>, 165(1):\n201\u2013232.", "<a name=\"miller03fcs\"></a>\u2013\u2013\u2013,\n 2003, \u201cEncryption as an abstract data-type: An extended\nabstract\u201d, in I. Cervesato (ed.), <em>16th Workshop on\nFoundations of Computer Security</em>, Asilomar, IEEE Computing\nSociety, pp. 3\u201314, 2003. ", "<a name=\"miller04llcs\"></a>\u2013\u2013\u2013,\n 2004, \u201cOverview of linear logic programming\u201d, <em>Linear\nLogic in Computer Science</em>, T. Ehrhard, J.-Y. Girard, P. Ruet, and\nP. Scott (eds.) (London Mathematical Society Lecture Notes: Volume\n316), Cambridge: Cambridge University Press, pp. 119\u2013150.", "<a name=\"murawski06tocl\"></a>Murawski,\n A. S., and Ong, C.-H. L., 2006, \u201cFast verification of MLL proof\nnets via IMLL\u201d, <em>ACM Transactions on Computational\nLogic</em>, 7(3): 473\u2013498.", "<a name=\"nigam09ppdp\"></a>Nigam,\n V. and Miller, D., 2009, \u201cAlgorithmic specifications in linear\nlogic with subexponentials\u201d, Proceedings of the 11th ACM SIGPLAN\nconference on Principles and practice of declarative programming\n(PPDP), 2009, pp. 129\u2013140.", "<a name=\"okada99tcs\"></a>Okada, M., 1999, \u201cPhase\nSemantic Cut-Elimination and Normalization Proofs of First- and\nHigher-Order Linear Logic\u201d, <em>Theoretical\nComputer Science</em>, 227(1\u20132): 333\u2013396.\n", "<a name=\"ono98msj\"></a>Ono, H., 1998, \u201cProof-theoretic\nmethods in nonclassical logic. An Introduction\u201d, in\nM. Takahashi, M. Okada,  and M. Dezani-Ciancaglini (eds.), \n<em>Theories of Types and Proofs</em> (Mathematical Society of Japan\nMemoirs: Volume 2), 207\u2013254. doi:10.2969/msjmemoirs/00201C060", "<a name=\"read88\"></a>Read,\n S., 1988, <em>Relevant Logic</em>, Oxford: Blackwell. ", "<a name=\"retore97tlca\"></a>Retor\u00e9,\n C., 1997, \u201cPomset logic: a non-commutative extension of\nclassical linear logic\u201d, <em>Typed Lambda Calculi and\nApplications</em> (Lecture notes in Computer Science: Volume 1210),\nBerlin: Springer Verlag, pp. 300\u2013318.", "<a name=\"retore03tcs\"></a>Retor\u00e9, C., 2003, \u201cHandsome\n proof-nets: perfect matchings and cographs\u201d, <em>Theoretical\n Computer Science</em>, 294(3): 473\u2013488.\n", "<a name=\"reutenauer89\"></a>Reutenauer,\n C., 1989, \u201cAspects math\u00e9matiques des r\u00e9seaux de\nPetri\u201d, Etudes et Recherches en Informatique. Masson. ", "<a name=\"schellinx91jlc\"></a>Schellinx, H., 1991, \u201cSome\nSyntactical Observations on Linear Logic\u201d, <em>Journal of Logic\nand Computation</em>, 1(4): 537\u2013559. ", "<a name=\"tortoradefalco2003mscs\"></a>Tortora de Falco, L., 2003,\n\u201cObsessional experiments for linear logic proof-nets\u201d,\n<em>Mathematical Structures in Computer Science</em>, 13(6):\n799\u2013855.", "<a name=\"troelstra92csli\"></a>Troelstra, A. S., 1992,\n\u201cLectures on Linear Logic\u201d, <em>CSLI Lecture Notes</em>\n(Number 29), Stanford: CSLI Publications. ", "<a name=\"strassburger19tcs\"></a>Stra\u00dfburger,\n L., 2019, \u201cOn the Decision Problem for MELL\u201d,\n<em>Theoretical Computer Science</em>, 768: 91\u201398.\ndoi:10.1016/j.tcs.2019.02.022", "<a name=\"urquhart00lc\"></a>Urquhart,\n A., 2000, \u201cThe Complexity of Linear Logic with\nWeakening\u201d, <em>Logic Colloquium \u201998</em> (Lecture Notes\nin Logic 13), Urbana: Association for Symbolic Logic, pp.\n500\u2013515. ", "<a name=\"wadler91pepm\"></a>Wadler,\n P., 1991, \u201cIs there a use for linear logic?\u201d,\n<em>Proceedings of ACM/SIGPLAN Workshop Partial Evaluation and\nSemantics-Based Program Manipulation</em>, New Haven: ACM Press, pp.\n255\u2013273, 1991.", "<a name=\"yetter90jsl\"></a>Yetter,\n D.N., 1990, \u201cQuantales and (noncommutative) linear\nlogic\u201d, <em>Journal of Symbolic Logic</em>, 55(1):\n41\u201364."]}, "raw_text": "<div id=\"bibliography\">\n<h2><a name=\"Bib\">Bibliography</a></h2>\n<ul class=\"hanging\">\n<li><a name=\"abramsky93tcs\"></a>Abramsky,\n S., 1993, \u201cComputational interpretations of linear\nlogic\u201d, <em>Theoretical Computer Science</em>, 111:\n3\u201357.</li>\n<li><a name=\"abramsky94ic\"></a>Abramsky,\n S., and Jagadeesan, R., 1994, \u201cNew Foundations for the Geometry\nof Interaction\u201d, <em>Information and Computation</em>, 111(1):\n53\u2013119.</li>\n<li><a name=\"abramsky99lics\"></a>Abramsky,\n S., and Melli\u00e8s, Paul-Andr\u00e9, 1999, \u201cConcurrent\nGames and Full Completeness\u201d, <em>14th Annual Symposium on Logic\nin Computer Science</em>, Trento: IEEE Computer Society Press., pp.\n431\u2013442.</li>\n<li><a name=\"abrusci91jsl\"></a>Abrusci,\n V. M., 1991, \u201cPhase semantics and sequent calculus for pure\nnon-commutative classical linear propositional logic\u201d,\n<em>Journal of Symbolic Logic</em>, 56(4): 1403\u20131451.</li>\n<li><a name=\"abrusci99apal\"></a>Abrusci,\n V.M., and Ruet, P., 1999, \u201cNon-Commutative Logic I: The\nMultiplicative Fragment\u201d, <em>Annals of Pure and Applied\nLogic</em>, 101(1): 29\u201364.</li>\n<li><a name=\"allwein93jsl\"></a>Allwein,\n G. and Dunn, J.M., 1993, \u201cKripke Models for Linear\nLogic\u201d, <em>Journal of Symbolic Logic</em>, 58(2):\n514\u2013545.</li>\n<li><a name=\"anderson75vol1\"></a> Anderson, A. R. and Belnap, N. D.,\n 1975, <em>Entailment: The Logic of Relevance and Necessity</em>\n (Volume I), Nuel D. Belnap &amp; J. Michael Dunn (eds.), Princeton,\n N.J.: Princeton University Press.</li>\n<li><a name=\"anderson92vol2\"></a> Anderson, A. R., Belnap, N. D., and\nDunn, J. M., 1975, <em>Entailment: The Logic of Relevance and\nNecessity</em> (Volume II), Princeton, N.J.: Princeton University\nPress.</li>\n<li><a name=\"andreoli92jlc\"></a>Andreoli,\n J.-M., 1992, \u201cLogic programming with focusing proofs in linear\nlogic\u201d, <em>Journal of Logic and Computation</em>, 2(3):\n297\u2013347.</li>\n<li><a name=\"andreoli91ngc\"></a>Andreoli,\n J.-M. and Pareschi, R., 1991, \u201cLinear objects: Logical\nprocesses with built-in inheritance\u201d, <em>New Generation\nComputing</em>, 9(3\u20134): 445\u2013473.</li>\n<li><a name=\"asperti98cup\"></a>Asperti,\n A., and Guerrini, S., 1998, \u201cThe Optimal Implementation of\nFunctional Programming Languages\u201d, Cambridge Univ. Press.</li>\n<li><a name=\"avron88tcs\"></a>Avron,\n A., 1988, \u201cThe Semantics and Proof Theory of Linear\nLogic\u201d, <em>Theoretical Computer Science</em>, 57:\n161\u2013184. </li>\n<li><a name=\"baelde12tocl\"></a>Baelde,\n D., 2012, \u201cLeast and greatest fixed points in linear\nlogic\u201d, ACM Transactions on Computational Logic, 13(1).\ndoi:10.1145/2071368.2071370</li>\n<li><a name=\"baelde07lpar\"></a>Baelde,\n D. and Miller, D., 2007, \u201cLeast and greatest fixed points in\nlinear logic\u201d, <em>Logic for Programming, Artificial\nIntelligence, and Reasoning</em> (Lecture Notes in Computer Science:\nVolume 4790), edited by N. Dershowitz and A. Voronkov, pp.\n92\u2013106.</li>\n<li><a name=\"baillot15ic\"></a>Baillot,\n P., 2015, \u201cOn the expressivity of elementary linear logic:\nCharacterizing Ptime and an exponential time hierarchy\u201d,\n<em>Information and Computation</em>, 241: 3\u201331.</li>\n<li><a name=\"baillot04lics\"></a>Baillot,\n P., and Terui, K., 2004, \u201cLight Types for Polynomial Time\nComputation in Lambda-Calculus\u201d, <em>Proceedings of the\nNineteenth Annual IEEE Symposium on Logic in Computer Science</em>,\nTurku, Finland, IEEE Computer Society Press, pp. 266\u2013275.</li>\n<li><a name=\"barr91mscs\"></a>Barr,\n M., 1991, \u201c*-Autonomous categories and linear logic\u201d,\n<em>Mathemathical Structures in Computer Science</em>, 1(2):\n159\u2013178.</li>\n<li><a name=\"bellantoni92cc\"></a>Bellantoni,\n S. and Cook, S., 1992, \u201cA New Recursion-Theoretic\nCharacterization of the Polytime Functions\u201d, <em>Computational\nComplexity</em>, 2: 97\u2013110.</li>\n<li><a name=\"bimbo15\"></a>Bimb\u00f3, K., 2015, \u201cThe\ndecidability of the intensional fragment of classical linear\nlogic\u201d, <em>Theoretical Computer Science</em>, 597(13):\n1\u201317.</li>\n<li><a name=\"bimbo22essays\"></a>Bimb\u00f3, K. and J. M. Dunn, 2022,\n\u201cModalities in lattice-R\u201d, in <em>Relevance Logics and\nother Tools for Reasoning.  Essays in Honor of J. Michael Dunn</em>,\nLondon: College Publications, pp. 89\u2013127.  </li>\n<li><a name=\"blass92apal\"></a>Blass,\n A., 1992, \u201cA game semantics for linear logic\u201d, <em>Annals\nof Pure and Applied Logic</em>, 56: 183\u2013220.</li>\n<li><a name=\"cervesato99csfw\"></a>Cervesato,\n I., Durgin, N., Lincoln, P., Mitchell, J., and Scedrov, A., 1999,\n\u201cA meta-notation for protocol analysis\u201d, in R. Gorrieri\n(ed.), <em>Proceedings of the 12th IEEE Computer Security Foundations\nWorkshop\u2014CSFW 1999</em>, Los Alamitos, CA: IEEE Computer Society\nPress, pp. 55\u201369.</li>\n<li><a name=\"chaudhuri18mscs\"></a>Chaudhuri,\n K., 2018, \u201cEncoding additives using multiplicatives and\nsubexponentials\u201d, <em>Mathematical Structures in Computer\nScience</em>, 28(5): 651\u2013666.</li>\n<li><a name=\"curien03bsl\"></a>Curien,\n P.-L., 2003, \u201cSymmetry and interactivity in programming\u201d,\n<em>Bulletin of Symbolic Logic</em>, 9(2): 169\u2013180.</li>\n<li><a name=\"dallago08csl\"></a>Dal Lago, U., and Laurent, O., 2008,\n\u201cQuantitative Game Semantics for Linear\nLogic\u201d, <em>Computer Science Logic</em> (Lecture Notes in\nComputer Science: Volume 5213), Michael Kaminski and Simone Martini\n(eds.), Berlin: Springer, pp. 230\u2013245. </li>\n<li><a name=\"danos93kgc\"></a>Danos,\n V., Joinet, J.-P., and Schellinx, H., 1993, \u201cThe Structure of\nExponentials: Uncovering the Dynamics of Linear Logic Proofs\u201d,\npp. 159\u2013171, in <em>Kurt G\u00f6del Colloquium</em> (Lecture\nNotes in Computer Science, Volume 713), edited by G. Gottlob, A.\nLeitsch, and D. Mundici, Berlin: Springer.</li>\n<li><a name=\"danos97jsl\"></a>\u2013\u2013\u2013,\n 1997, \u201cA New Deconstructive Logic: Linear Logic\u201d,\n<em>Journal of Symbolic Logic</em>, 62(3): 755\u2013807. </li>\n<li><a name=\"danos89aml\"></a>Danos,\n V. and Regnier, L., 1989, \u201cThe Structure of\nMultiplicatives\u201d, <em>Archive of Mathematical Logic</em>,\nSpringer, 28:181\u2013203.</li>\n<li><a name=\"danos95all\"></a>\u2013\u2013\u2013,\n 1995, \u201cProof-nets and Hilbert space\u201d, in J.-Y. Girard, Y.\nLafont, and L. Regnier (eds.), <em>Advances in Linear Logic</em>,\nCambridge: Cambridge University Press, pp. 307\u2013328.</li>\n<li><a name=\"degroote04lics\"></a>de\n Groote, P., Guillaume, B., and Salvati, S., 2004, \u201cVector\naddition tree automata\u201d, in <em>Proceedings of the 19th IEEE\nSymposium on Logic in Computer Science</em> (LICS 2004), 14\u201317\nJuly 2004, Turku, Finland, pp. 64\u201373.</li>\n<li><a name=\"delande10apal\"></a>Delande,\n O., Miller, D., and Saurin, A., 2010, \u201cProof and refutation in\nMALL as a game\u201d, <em>Annals of Pure and Applied Logic</em>,\n161(5): 654\u2013672.</li>\n<li><a name=\"dicosmo97lics\"></a>Di\n Cosmo, R., and Kesner, D., 1997, \u201cStrong normalization of\nexplicit substitutions via cut elimination in proof nets\u201d,\n(extended abstract) in <em>Proceedings of the Twelfth Annual IEEE\nSymposium on Logic in Computer Science</em>, Los Alamitos, CA: IEEE\nComputer Society Press, pp. 35\u201346.</li>\n<li><a name=\"ehrhard93mscs\"></a>Ehrhard,\n T., 1993, \u201cHypercoherences: A Strongly Stable Model of Linear\nLogic\u201d, <em>Mathematical Structures in Computer Science</em>,\n3(4): 365\u2013385.</li>\n<li><a name=\"ehrhard12tcs\"></a>\u2013\u2013\u2013, 2012,\n\u201cThe Scott model of linear logic is the \nextensional collapse of its relational model\u201d, \n<em>Theoretical Computer Science</em>, 13(6):\n20\u201345.</li>\n<li><a name=\"fages01ic\"></a>Fages,\n F., Ruet, P., and Soliman, S., 2001, \u201cLinear Concurrent\nConstraint Programming: Operational and Phase Semantics\u201d,\n<em>Information and Computation</em>, 165(1): 14\u201341.</li>\n<li><a name=\"forster19cpp\"></a>Forster, Y. and D. Larchey-Wendling,\n2019, \u201cCertified undecidability of intuitionistic linear logic\nvia binary stack machines and Minsky machines\u201d, <em>Proceedings\nof the 8th ACM SIGPLAN International Conference on Certified Programs\nand Proofs (CPP\u201919)</em>, New York: Association of Computing\nMachinery, pp. 104\u2013117. doi:10.1145/3293880.3294096</li>\n<li><a name=\"gentzen35\"></a>Gentzen, G., 1935, \u201cInvestigations\ninto Logical Deduction\u201d, in M.  E. Szabo (ed.), <em>The\nCollected Papers of Gerhard Gentzen</em>,  Amsterdam: North-Holland\npp.  68\u2013131. </li>\n<li><a name=\"girard87tcs\"></a>Girard,\n J.-Y., 1987, \u201cLinear logic\u201d, <em>Theoretical Computer\nScience</em>, 50: 1\u2013102.</li>\n<li><a name=\"girard98ic\"></a>\u2013\u2013\u2013,\n 1998, \u201cLight Linear Logic\u201d, <em>Information and\nComputation</em>, 143(2):175\u2013204.</li>\n<li><a name=\"grishin81\"></a>Grishin,\n V. N., 1981, \u201cPredicate and set-theoretic calculi based on\nlogic without contraction rules,\u201d (Russian). Izvestiya Akademii\nNauk SSSR Seriya Matematicheskaya 45(1): 47\u201368. 239. Math. USSR\nIzv., 18, no.1, Moscow. </li>\n<li><a name=\"guerrini11tcs\"></a>Guerrini,\n S., 2011, \u201cA linear algorithm for MLL proof net correctness and\nsequentialization\u201d, <em>Theoretical Computer Science</em>, 412:\n1958\u20131978.</li>\n<li><a name=\"guerrini03tcs\"></a>Guerrini,\n S., Martini, S., and Masini, A., 2003, \u201cCoherence for sharing\nproof-nets\u201d, <em>Theoretical Computer Science</em>, 294(3):\n379\u2013409.</li>\n<li><a name=\"guglielmi01csl\"></a>Guglielmi,\n A., and Stra\u00dfburger, L., 2001, \u201cNon-commutativity and\nMELL in the Calculus of Structures\u201d, <em>Computer Science\nLogic</em> (Lecture Notes in Computer Science, Volume 2142), Berlin:\nSpringer Verlag, pp. 54\u201368.</li>\n<li><a name=\"gunter89atpn\"></a>Gunter,\n C. A., and Gehlot, V., 1989, \u201cNets as Tensor Theories\u201d,\nin G. De Michelis (ed.), <em>Proceedings of the Tenth International\nConference on Application and Theory of Petri Nets</em> (Lecture Notes\nin Computer Science: Volume 616), Bonn: Springer-Verlag, pp.\n174\u2013191.</li>\n<li><a name=\"guzman90lics\"></a>Guzman,\n J.C. and Hudak, P., 1990, \u201cSingle-threaded polymorphic lambda\ncalculus\u201d, in <em>Proceedings of the Fifth IEEE Symposium on\nLogic in Computer Science</em>, Philadelphia: IEEE Computer Society\nPress.</li>\n<li><a name=\"heath18jar\"></a>Heath,\n Q. and Miller, D., 2018, \u201cA proof theory for model\nchecking\u201d, <em>Journal of Automated Deduction</em>,\ndoi:10.1007/s10817-018-9475-3.</li>\n<li><a name=\"heijltjes16lmcs\"></a>Heijltjes,\n W. and Houston, R., 2016, \u201cProof equivalence in MLL is\nPSPACE-complete\u201d, <em>Logical Methods in Computer Science</em>\n12(1).</li>\n<li><a name=\"heijltjes19fscd\"></a>Heijltjes,\n W. B., Hughes, D. J. D., and Stra\u00dfburger, L., 2018,\n\u201cProof nets for first-order additive linear logic\u201d,\n<em>4th International Conference on Formal Structures for Computation\nand Deduction</em>, (FSCD 2019: Volume 131), Dagstuhl: Leibniz-Zentrum\nf\u00fcr Informatik, pp. 22:1\u201322:22.</li>\n<li><a name=\"hodas94ic\"></a>Hodas,\n J., and Miller, D., 1994, \u201cLogic programming in a fragment of\nintuitionistic linear logic\u201d, <em>Information and\nComputation</em>, 110(2): 327\u2013365.</li>\n<li><a name=\"hofmann03ic\"></a>Hofmann,\n M., 2003, \u201cLinear types and non-size increasing polynomial time\ncomputation\u201d, <em>Information and Computation</em>, 183(1):\n57\u201385.</li>\n<li><a name=\"howard80\"></a>Howard,\n W.A., 1980, \u201cThe formulae-as-type notion of construction,\n1969\u201d, in J.P. Seldin and R. Hindley (eds.), <em>To H. B. Curry:\nEssays in Combinatory Logic, Lambda Calculus, and Formalism</em>, New\nYork: Academic Press, pp. 479\u2013490.</li>\n<li><a name=\"hughes05tocl\"></a>Hughes,\n D.J.D. and van Glabbeek, R., 2005, \u201cProof Nets for Unit-Free\nMultiplicative-Additive Linear Logic\u201d, <em>ACM Transactions on\nComputational Logic</em>, 6: 784\u2013842.</li>\n<li><a name=\"hughes16lics\"></a>Hughes,\n D.J.D. and Heijltjes, W. B., 2016, \u201cConflict nets: efficient\nlocally canonical mall proof nets\u201d, <em>31st Annual ACM/IEEE\nSymposium on Logic in Computer Science</em> (LICS), 2016.</li>\n<li><a name=\"hyland00ic\"></a>Hyland,\n J.M.E., and Ong, C.-H.L., 2000, \u201cOn Full Abstraction for PCF:\nI. Models, observables and the full abstraction problem, II. Dialogue\ngames and innocent strategies, III. A fully abstract and universal\ngame model\u201d, <em>Information and Computation</em>, 163:\n285\u2013408.</li>\n<li><a name=\"kanovich92\"></a>Kanovich,\n M.I., 1992, \u201cHorn Programming in Linear Logic is\nNP-Complete\u201d, in <em>Proceedings of the Seventh Annual Symposium\non Logic in Computer Science</em>, Santa Cruz, IEEE Computer Society\nPress, pp. 200\u2013210.</li>\n<li><a name=\"kanovich16mscs\"></a>\n\u2013\u2013\u2013,\n2016, \u201cThe undecidability theorem for the\nHorn-like fragment of linear logic\n(Revisited)\u201d, <em>Mathematical Structures in\nComputer Science</em>, 26: 719\u2013744.  </li>\n<li><a name=\"kobayashi99tcs\"></a>Kobayashi,\n N., Shimizu, T., and Yonezawa, A., 1999, \u201cDistributed\nconcurrent linear logic programming\u201d, <em>Theoretical Computer\nScience</em>, 227(1\u20132): 185\u2013220.</li>\n<li><a name=\"kopylov95lics\"></a>Kopylov,\n A. P., 1995, \u201cDecidability of Linear Affine Logic\u201d,\nSymposium on Logic in Computer Science (LICS\u201995), IEEE Computer\nSociety Press, pp. 496\u2013505. </li>\n<li><a name=\"lafont04tcs\"></a>Lafont,\n Y., 2004, \u201cSoft linear logic and polynomial time\u201d,\n<em>Theoretical Computer Science</em>, 318(1\u20132):\n163\u2013180.</li>\n<li><a name=\"lamarche96entcs\"></a>Lamarche, F., 1996, \u201cFrom\nProof Nets to Games: extended abstract\u201d, in <em>Linear Logic 96\nTokyo Meeting</em>, <em>Electronic Notes in Theoretical Computer\nScience</em>, 3: 107\u2013119. </li>\n<li><a name=\"lambek58amm\"></a>Lambek,\n J., 1958, \u201cThe mathematics of sentence structure\u201d,\n<em>American Mathematical Monthly</em>, 65: 154\u2013169.</li>\n<li><a name=\"lamp90\"></a>Lamping,\n J., 1990, \u201cAn algorithm for optimal lambda-calculus\nreductions\u201d. 17th Annual Symposium on Principles of Programming\nLanguages, San Francisco, ACM Press, pp. 16\u201330.</li>\n<li><a name=\"laurent05apal\"></a>Laurent,\n O., Quatrini, M., and Tortora de Falco, L., 2005, \u201cPolarized\nand focalized linear and classical proofs\u201d, <em>Annals of Pure\nand Applied Logic</em>, 134 (2\u20133): 217\u2013264.</li>\n<li><a name=\"lazic15tocl\"></a>Lazic,\n R. and Schmitz, S., 2015, \u201cNonelementary complexities for\nbranching VASS, MELL, and extensions\u201d, <em>ACM Transactions on\nComputational Logic</em>, 16(3): pp. 20:1\u201320:30.</li>\n<li><a name=\"liang09tcs\"></a>Liang,\n C. and Miller, D., 2009, \u201cFocusing and Polarization in Linear,\nIntuitionistic, and Classical Logics\u201d, <em>Theoretical Computer\nScience</em>, 410(46): 4747\u20134768.</li>\n<li><a name=\"lincoln93apal\"></a>Lincoln, P., Scedrov, A., and Shankar,\nN., 1993, \u201cLinearizing intuitionistic\nimplication\u201d, <em>Annals of Pure and Applied Logic</em>, 60(2):\n151\u2013177. </li>\n<li><a name=\"lincoln95all\"></a>Lincoln,\n P., 1995, \u201cDeciding provability of linear logic\nformulas\u201d, <em>Proceedings of the Workshop on Advances in Linear\nLogic</em>, J.-Y. Girard, Y. Lafont, and L. Regnier (eds.), Cambridge:\nCambridge University Press, pp. 197\u2013210.</li>\n<li><a name=\"lincoln92\"></a>Lincoln,\n P., Mitchell, J., Scedrov, A., and Shankar, N., 1992, \u201cDecision\nproblems for propositional linear logic\u201d, <em>Annals of Pure and\nApplied Logic</em>, 56: 239\u2013311.</li>\n<li><a name=\"lincoln92un\"></a>Lincoln,\n P., and Winkler, T., 1994, \u201cConstant-Only Multiplicative Linear\nLogic is NP-Complete\u201d, <em>Theoretical Computer Science</em>,\n135: 155\u2013169.</li>\n<li><a name=\"martini95all\"></a>Martini,\n S. and Masini, A., 1995, \u201cOn the fine structure of the\nexponential rule\u201d, in <em>Advances in linear logic</em>, edited\nby J.-Y. Girard and Y. Lafont and L. Regnier, pp. 197\u2013210, New\nYork: Cambridge University Press.</li>\n<li><a name=\"martinlof82lmps\"></a>Martin-L\u00f6f,\n P., 1982, \u201cConstructive Mathematics and Computer\nProgramming\u201d, <em>Sixth International Congress for Logic,\nMethodology, and Philosophy of Science</em>, Amsterdam: North-Holland,\npp. 153\u2013175.</li>\n<li><a name=\"mellies18mscs\"></a>Melli\u00e8s, P.-A., Tabareau, N.\nand Tasson, C., 2018, \u201cAn explicit formula for the free\nexponential modality of linear logic\u201d,\n<em>Mathematical Structures in Computer Science</em>, 28(7):\n1253\u20131286.</li>\n<li><a name=\"miller96tcs\"></a>Miller,\n D., 1996, \u201cForum: A multiple-conclusion specification\nlanguage\u201d, <em>Theoretical Computer Science</em>, 165(1):\n201\u2013232.</li>\n<li><a name=\"miller03fcs\"></a>\u2013\u2013\u2013,\n 2003, \u201cEncryption as an abstract data-type: An extended\nabstract\u201d, in I. Cervesato (ed.), <em>16th Workshop on\nFoundations of Computer Security</em>, Asilomar, IEEE Computing\nSociety, pp. 3\u201314, 2003. </li>\n<li><a name=\"miller04llcs\"></a>\u2013\u2013\u2013,\n 2004, \u201cOverview of linear logic programming\u201d, <em>Linear\nLogic in Computer Science</em>, T. Ehrhard, J.-Y. Girard, P. Ruet, and\nP. Scott (eds.) (London Mathematical Society Lecture Notes: Volume\n316), Cambridge: Cambridge University Press, pp. 119\u2013150.</li>\n<li><a name=\"murawski06tocl\"></a>Murawski,\n A. S., and Ong, C.-H. L., 2006, \u201cFast verification of MLL proof\nnets via IMLL\u201d, <em>ACM Transactions on Computational\nLogic</em>, 7(3): 473\u2013498.</li>\n<li><a name=\"nigam09ppdp\"></a>Nigam,\n V. and Miller, D., 2009, \u201cAlgorithmic specifications in linear\nlogic with subexponentials\u201d, Proceedings of the 11th ACM SIGPLAN\nconference on Principles and practice of declarative programming\n(PPDP), 2009, pp. 129\u2013140.</li>\n<li><a name=\"okada99tcs\"></a>Okada, M., 1999, \u201cPhase\nSemantic Cut-Elimination and Normalization Proofs of First- and\nHigher-Order Linear Logic\u201d, <em>Theoretical\nComputer Science</em>, 227(1\u20132): 333\u2013396.\n</li>\n<li><a name=\"ono98msj\"></a>Ono, H., 1998, \u201cProof-theoretic\nmethods in nonclassical logic. An Introduction\u201d, in\nM. Takahashi, M. Okada,  and M. Dezani-Ciancaglini (eds.), \n<em>Theories of Types and Proofs</em> (Mathematical Society of Japan\nMemoirs: Volume 2), 207\u2013254. doi:10.2969/msjmemoirs/00201C060</li>\n<li><a name=\"read88\"></a>Read,\n S., 1988, <em>Relevant Logic</em>, Oxford: Blackwell. </li>\n<li><a name=\"retore97tlca\"></a>Retor\u00e9,\n C., 1997, \u201cPomset logic: a non-commutative extension of\nclassical linear logic\u201d, <em>Typed Lambda Calculi and\nApplications</em> (Lecture notes in Computer Science: Volume 1210),\nBerlin: Springer Verlag, pp. 300\u2013318.</li>\n<li><a name=\"retore03tcs\"></a>Retor\u00e9, C., 2003, \u201cHandsome\n proof-nets: perfect matchings and cographs\u201d, <em>Theoretical\n Computer Science</em>, 294(3): 473\u2013488.\n</li>\n<li><a name=\"reutenauer89\"></a>Reutenauer,\n C., 1989, \u201cAspects math\u00e9matiques des r\u00e9seaux de\nPetri\u201d, Etudes et Recherches en Informatique. Masson. </li>\n<li><a name=\"schellinx91jlc\"></a>Schellinx, H., 1991, \u201cSome\nSyntactical Observations on Linear Logic\u201d, <em>Journal of Logic\nand Computation</em>, 1(4): 537\u2013559. </li>\n<li><a name=\"tortoradefalco2003mscs\"></a>Tortora de Falco, L., 2003,\n\u201cObsessional experiments for linear logic proof-nets\u201d,\n<em>Mathematical Structures in Computer Science</em>, 13(6):\n799\u2013855.</li>\n<li><a name=\"troelstra92csli\"></a>Troelstra, A. S., 1992,\n\u201cLectures on Linear Logic\u201d, <em>CSLI Lecture Notes</em>\n(Number 29), Stanford: CSLI Publications. </li>\n<li><a name=\"strassburger19tcs\"></a>Stra\u00dfburger,\n L., 2019, \u201cOn the Decision Problem for MELL\u201d,\n<em>Theoretical Computer Science</em>, 768: 91\u201398.\ndoi:10.1016/j.tcs.2019.02.022</li>\n<li><a name=\"urquhart00lc\"></a>Urquhart,\n A., 2000, \u201cThe Complexity of Linear Logic with\nWeakening\u201d, <em>Logic Colloquium \u201998</em> (Lecture Notes\nin Logic 13), Urbana: Association for Symbolic Logic, pp.\n500\u2013515. </li>\n<li><a name=\"wadler91pepm\"></a>Wadler,\n P., 1991, \u201cIs there a use for linear logic?\u201d,\n<em>Proceedings of ACM/SIGPLAN Workshop Partial Evaluation and\nSemantics-Based Program Manipulation</em>, New Haven: ACM Press, pp.\n255\u2013273, 1991.</li>\n<li><a name=\"yetter90jsl\"></a>Yetter,\n D.N., 1990, \u201cQuantales and (noncommutative) linear\nlogic\u201d, <em>Journal of Symbolic Logic</em>, 55(1):\n41\u201364.</li>\n</ul>\n</div>"}, "related_entries": {"entry_list": ["logic: and games", "logic: classical", "logic: dialogical", "logic: intuitionistic", "logic: substructural", "proof theory"], "entry_link": [{"../logic-games/": "logic: and games"}, {"../logic-classical/": "logic: classical"}, {"../logic-dialogical/": "logic: dialogical"}, {"../logic-intuitionistic/": "logic: intuitionistic"}, {"../logic-substructural/": "logic: substructural"}, {"../proof-theory/": "proof theory"}]}, "academic_tools": {"listed_text": ["<img alt=\"sep man icon\" src=\"../../symbols/sepman-icon.jpg\"/>", "<a href=\"https://plato.stanford.edu/cgi-bin/encyclopedia/archinfo.cgi?entry=logic-linear\" target=\"other\">How to cite this entry</a>.", "<img alt=\"sep man icon\" src=\"../../symbols/sepman-icon.jpg\"/>", "<a href=\"https://leibniz.stanford.edu/friends/preview/logic-linear/\" target=\"other\">Preview the PDF version of this entry</a> at the\n <a href=\"https://leibniz.stanford.edu/friends/\" target=\"other\">Friends of the SEP Society</a>.", "<img alt=\"inpho icon\" src=\"../../symbols/inpho.png\"/>", "<a href=\"https://www.inphoproject.org/entity?sep=logic-linear&amp;redirect=True\" target=\"other\">Look up topics and thinkers related to this entry</a>\n at the Internet Philosophy Ontology Project (InPhO).", "<img alt=\"phil papers icon\" src=\"../../symbols/pp.gif\"/>", "<a href=\"https://philpapers.org/sep/logic-linear/\" target=\"other\">Enhanced bibliography for this entry</a>\nat <a href=\"https://philpapers.org/\" target=\"other\">PhilPapers</a>, with links to its database."], "listed_links": [{"https://plato.stanford.edu/cgi-bin/encyclopedia/archinfo.cgi?entry=logic-linear": "How to cite this entry"}, {"https://leibniz.stanford.edu/friends/preview/logic-linear/": "Preview the PDF version of this entry"}, {"https://leibniz.stanford.edu/friends/": "Friends of the SEP Society"}, {"https://www.inphoproject.org/entity?sep=logic-linear&redirect=True": "Look up topics and thinkers related to this entry"}, {"https://philpapers.org/sep/logic-linear/": "Enhanced bibliography for this entry"}, {"https://philpapers.org/": "PhilPapers"}]}, "other_internet_resources": {"listed_text": ["The\n <a href=\"http://www.cs.cmu.edu/~carsten/linearbib/llb.html\" target=\"other\">linear logic bibliography</a>\n (up to 1998).", "Vincent Danos and Roberto Di Cosmo.\n <a href=\"http://www.dicosmo.org/CourseNotes/LinLog/\" target=\"other\">The Linear Logic Primer. Course Notes.</a>\n (1992)."], "listed_links": [{"http://www.cs.cmu.edu/~carsten/linearbib/llb.html": "linear logic bibliography"}, {"http://www.dicosmo.org/CourseNotes/LinLog/": "The Linear Logic Primer. Course Notes."}]}, "tokenized_text": ["1", "introduction", "11", "bit", "history", "linear", "logic", "introduced", "jeanyves", "girard", "seminal", "work", "girard", "1987", "origin", "discovery", "new", "logic", "come", "semantical", "analysis", "model", "system", "f", "polymorphic", "lambda", "calculus", "one", "see", "whole", "system", "linear", "logic", "bold", "attempt", "reconcile", "beauty", "symmetry", "classical", "logic", "afforded", "de", "morgan", "s", "duality", "quest", "constructive", "proof", "led", "intuitionistic", "logic", "indeed", "one", "could", "present", "fragment", "linear", "logic", "known", "multiplicative", "additive", "linear", "logic", "mall", "outcome", "two", "simple", "observation", "sequent", "calculus", "presentation", "classical", "logic", "rule", "connective", "well", "cut", "rule", "rule", "implication", "may", "presented", "equivalently", "additive", "form", "context", "premise", "multiplicative", "form", "context", "premise", "different", "two", "presentation", "equivalent", "classical", "logic", "availability", "socalled", "structural", "rule", "namely", "contraction", "weakening", "gentzen", "s", "use", "sequent", "calculus", "capture", "proof", "classical", "intuitionistic", "logic", "demonstrated", "nonconstructive", "proof", "made", "use", "one", "structural", "rule", "conclusion", "succedent", "sequents", "want", "eliminate", "nonconstructive", "proof", "without", "destroying", "symmetry", "sequent", "calculus", "done", "intuitionistic", "logic", "try", "eliminate", "contraction", "weakening", "rule", "instead", "left", "two", "different", "version", "connective", "additive", "version", "multiplicative", "version", "conjunction", "disjunction", "different", "version", "connecitve", "longer", "equivalent", "new", "connective", "additive", "oplus", "plus", "additive", "otimes", "tensor", "multiplicative", "lpar", "par", "multiplicative", "duplication", "connective", "actually", "lead", "much", "clearer", "understanding", "conflict", "classical", "intuitionistic", "logic", "example", "law", "excluded", "middle", "a", "not", "a", "considered", "valid", "classical", "world", "absurd", "intuitionistic", "one", "linear", "logic", "law", "two", "reading", "additive", "version", "oplus", "neg", "provable", "corresponds", "intuitionistic", "reading", "disjunction", "multiplicative", "version", "lpar", "neg", "trivially", "provable", "simply", "corresponds", "tautology", "a", "implies", "perfectly", "acceptable", "intuitionistic", "logic", "also", "disjunction", "property", "essential", "constructivism", "easily", "established", "additive", "disjunction", "find", "inside", "richer", "logic", "way", "represent", "need", "intuitionism", "elegance", "classical", "logic", "negation", "involutive", "sequents", "symmetric", "connective", "interdefinable", "contrast", "property", "intuitionistic", "logic", "negation", "involutive", "sequents", "symmetric", "connective", "neg", "wedge", "vee", "rightarrow", "interdefinable", "notice", "one", "eliminated", "contraction", "weakening", "rule", "formula", "longer", "behave", "truth", "value", "indeed", "compose", "proof", "rightarrow", "b", "proof", "a", "without", "structural", "rule", "consume", "get", "proof", "b", "rightarrow", "b", "a", "longer", "available", "composition", "linear", "logic", "formula", "behave", "like", "resource", "used", "restricted", "way", "recover", "full", "expressive", "power", "intuitionistic", "classical", "logic", "necessary", "add", "mall", "fragment", "two", "dual", "modality", "usually", "called", "exponential", "linear", "logic", "literature", "particular", "ofcourse", "exponential", "bang", "permit", "contraction", "weakening", "applied", "formula", "bang", "b", "lefthand", "sequent", "context", "whynot", "exponential", "quest", "permit", "contraction", "weakening", "applied", "formula", "quest", "b", "righthand", "sequent", "context", "lead", "full", "propositional", "linear", "logic", "nice", "connection", "computer", "science", "notice", "besides", "mall", "two", "widely", "used", "fragment", "linear", "logic", "multiplicative", "linear", "logic", "mll", "mall", "without", "additive", "connective", "multiplicative", "exponential", "linear", "logic", "mell", "linear", "logic", "without", "additive", "connective", "gentzen", "s", "sequent", "calculus", "proof", "system", "intuitionistic", "logic", "result", "restricting", "sequent", "calculus", "classical", "logic", "sequents", "contained", "one", "formula", "righthand", "side", "sequents", "gentzen", "1935", "singleconclusion", "restriction", "also", "explored", "context", "linear", "logic", "various", "researcher", "considered", "intuitionistic", "variant", "mll", "mall", "mell", "example", "imll", "lamarche", "1996", "imall", "lincoln", "et", "al", "1993", "imell", "dal", "lago", "laurent", "2008", "schellinx", "1991", "provided", "general", "conservativity", "result", "classical", "linear", "logic", "corresponding", "intuitionistic", "variant", "see", "also", "troelstra", "1992", "prior", "introduction", "linear", "logic", "1987", "various", "researcher", "working", "various", "kind", "substructural", "logic", "gentzen", "structural", "rule", "contraction", "weakening", "exchange", "accepted", "lambek", "studied", "sequent", "calculus", "proof", "system", "none", "structural", "rule", "permitted", "lambek", "1958", "example", "logic", "relevant", "logic", "weakening", "accepted", "anderson", "belnap", "1975", "anderson", "et", "al", "1992", "avron", "1988", "read", "1988", "affine", "logic", "contraction", "accepted", "grishin", "1981", "12", "linear", "logic", "computer", "science", "computer", "science", "exploitation", "intuitionistic", "constructive", "logic", "began", "people", "saw", "possibility", "reading", "rightarrow", "b", "give", "a", "give", "b", "significant", "departure", "classical", "reading", "a", "false", "b", "true", "linear", "logic", "provides", "twist", "interpretation", "implication", "rightarrow", "b", "read", "give", "many", "a", "s", "might", "need", "give", "one", "b", "notion", "copy", "central", "idea", "computation", "wired", "logic", "new", "viewpoint", "open", "new", "possibility", "including", "new", "formula", "expressing", "refined", "operational", "property", "like", "give", "a", "give", "b", "application", "range", "refined", "logic", "programming", "ability", "linear", "logic", "represent", "state", "put", "use", "hodas", "miller", "1994", "analysis", "classical", "logic", "computational", "interpretation", "thereof", "abramsky", "1993", "specification", "exception", "mechanism", "programming", "language", "miller", "1996", "linearity", "analysis", "wadler", "1991", "new", "rule", "expressing", "constraint", "use", "copy", "resulting", "fragment", "linear", "logic", "polytime", "computation", "mention", "spectacular", "application", "baillot", "terui", "2004", "baillot", "2015", "new", "way", "representing", "proof", "abramsky", "jagadeesan", "1994", "girard", "1987", "2", "proof", "system", "core", "propositional", "connective", "linear", "logic", "divided", "additive", "multiplicative", "connective", "classical", "conjunction", "identity", "wedge", "top", "split", "additive", "amp", "top", "top", "multiplicative", "otimes", "tensor", "1", "one", "similarly", "classical", "disjunction", "identity", "vee", "bot", "split", "additive", "oplus", "oplus", "0", "zero", "multiplicative", "lpar", "par", "bot", "bottom", "negation", "generally", "treated", "one", "two", "way", "presentation", "linear", "logic", "negation", "viewed", "primitive", "propositional", "connective", "restriction", "occurrence", "within", "formula", "since", "de", "morgan", "duality", "exist", "negation", "propositional", "connective", "exponential", "quantifier", "also", "possible", "treat", "negation", "special", "symbol", "occurs", "applied", "atomic", "formula", "implication", "also", "commonly", "introduced", "linear", "logic", "via", "definition", "linear", "implication", "b", "limp", "c", "defined", "b", "bot", "lpar", "c", "intuitionistic", "implication", "b", "rightarrow", "c", "defined", "bang", "b", "limp", "c", "operator", "bang", "quest", "variously", "called", "modal", "exponential", "term", "exponential", "particularly", "appropriate", "since", "following", "usual", "relationship", "exponentiation", "addition", "multiplication", "linear", "logic", "support", "equivalence", "bang", "b", "amp", "c", "equiv", "bang", "b", "otimes", "bang", "c", "quest", "b", "oplus", "c", "equiv", "quest", "b", "lpar", "quest", "c", "well", "0ary", "version", "equivalence", "namely", "bangtop", "equiv", "1", "quest", "0", "equiv", "bot", "use", "binary", "equivalence", "b", "equiv", "c", "mean", "formula", "b", "limp", "c", "amp", "c", "limp", "b", "derivable", "linear", "logic", "21", "sequent", "calculus", "twosided", "sequent", "calculus", "linear", "logic", "presented", "figure", "notice", "negation", "treated", "logic", "connective", "occurrence", "formula", "restricted", "introduction", "rule", "left", "right", "negation", "left", "right", "side", "sequents", "multiset", "formula", "thus", "order", "formula", "context", "matter", "multiplicity", "matter", "identity", "rule", "frac", "b", "vdash", "b", "textit", "init", "qquad", "frac", "delta_1", "vdash", "b", "gamma_1", "qquad", "delta_2", "b", "vdash", "gamma_2", "delta_1", "delta_2", "vdash", "gamma_1", "gamma_2", "textit", "cut", "negation", "rule", "frac", "delta", "vdash", "b", "gamma", "delta", "b", "perp", "vdash", "gamma", "cdot", "perp", "l", "qquad", "frac", "delta", "b", "vdash", "gamma", "delta", "vdash", "b", "perp", "gamma", "cdot", "perp", "r", "multiplicative", "rule", "frac", "delta", "vdash", "gamma", "delta", "one", "vdash", "gamma", "one", "l", "qquad", "frac", "vdash", "one", "one", "r", "frac", "bot", "vdash", "bot", "l", "qquad", "frac", "delta", "vdash", "gamma", "delta", "vdash", "bot", "gamma", "bot", "r", "frac", "delta", "b_1", "b_2", "vdash", "gamma", "delta", "b_1ot", "b_2", "vdash", "gamma", "ot", "l", "qquad", "frac", "delta_1", "vdash", "b_1", "gamma_1", "qquad", "delta_2", "vdash", "b_2", "gamma_2", "delta_1", "delta_2", "vdash", "b_1ot", "b_2", "gamma_", "1", "gamma_", "2", "ot", "r", "frac", "delta_1", "b_1", "vdash", "gamma_1", "qquad", "delta_2", "b_2", "vdash", "gamma_2", "delta_1", "delta_2", "b_1lpar", "b_2", "vdash", "gamma_1", "gamma_2", "lpar", "l", "qquad", "frac", "delta", "vdash", "b_1", "b_2", "gamma", "delta", "vdash", "b_1lpar", "b_2", "gamma", "lpar", "r", "additive", "rule", "frac", "delta", "zero", "vdash", "gamma", "zero", "l", "qquad", "frac", "delta", "vdash", "top", "gamma", "top", "r", "frac", "delta", "b_i", "vdash", "gamma", "delta", "b_1amp", "b_2", "vdash", "gamma", "amp", "l", "i12", "qquad", "frac", "delta", "vdash", "b_1", "gamma", "qquad", "delta", "vdash", "b_2", "gamma", "delta", "vdash", "b_1amp", "b_2", "gamma", "amp", "r", "frac", "delta", "b_1", "vdash", "gamma", "qquad", "delta", "b_2", "vdash", "gamma", "delta", "b_1oplus", "b_2", "vdash", "gamma", "oplus", "l", "qquad", "frac", "delta", "vdash", "b_i", "gamma", "delta", "vdash", "b_1oplus", "b_2", "gamma", "oplus", "r", "i12", "quantifier", "rule", "frac", "delta", "b", "tx", "vdash", "gamma", "delta", "forall", "xb", "vdash", "gamma", "forall", "l", "qquad", "frac", "delta", "vdash", "b", "yx", "gamma", "delta", "vdash", "forall", "xb", "gamma", "forall", "r", "frac", "delta", "vdash", "b", "tx", "gamma", "delta", "vdash", "exists", "xb", "gamma", "exists", "r", "qquad", "frac", "delta", "b", "yx", "vdash", "gamma", "delta", "exists", "xb", "vdash", "gamma", "exists", "l", "exponential", "rule", "frac", "delta", "vdash", "gamma", "delta", "bang", "b", "vdash", "gamma", "bang", "w", "quad", "frac", "delta", "bang", "b", "bang", "b", "vdash", "gamma", "delta", "bang", "b", "vdash", "gamma", "bang", "c", "quad", "frac", "delta", "b", "vdash", "gamma", "delta", "bang", "b", "vdash", "gamma", "bang", "quad", "frac", "bangdelta", "vdash", "b", "questgamma", "bangdelta", "vdash", "bang", "b", "questgamma", "bang", "r", "frac", "delta", "vdash", "gamma", "delta", "vdash", "quest", "b", "gamma", "quest", "w", "quad", "frac", "delta", "vdash", "quest", "b", "quest", "b", "gamma", "delta", "vdash", "quest", "b", "gamma", "quest", "c", "quad", "frac", "delta", "vdash", "b", "gamma", "delta", "vdash", "quest", "b", "gamma", "quest", "quad", "frac", "bangdelta", "b", "vdash", "questgamma", "bangdelta", "quest", "b", "vdash", "questgamma", "quest", "l", "notice", "rule", "weakening", "contraction", "available", "formula", "marked", "exponential", "bang", "left", "quest", "right", "sequent", "quest", "r", "bang", "l", "rule", "often", "called", "dereliction", "rule", "quest", "l", "bang", "r", "rule", "often", "called", "promotion", "rule", "similar", "sequent", "calculus", "rule", "used", "treatment", "s4", "modal", "logic", "ono", "1998", "usual", "proviso", "forall", "right", "exists", "left", "introduction", "rule", "assumed", "particular", "variable", "y", "must", "free", "formula", "lower", "sequent", "inference", "rule", "quantification", "assumed", "firstorder", "girard", "presented", "higherorder", "version", "linear", "logic", "1987", "paper", "cut", "rule", "eliminated", "completeness", "still", "maintained", "dually", "init", "rule", "also", "eliminated", "well", "except", "occurrence", "init", "involving", "atomic", "formula", "22", "focused", "proof", "important", "normal", "form", "theorem", "structure", "cutfree", "proof", "provided", "andreoli", "1992", "classified", "nonatomic", "formula", "asynchronous", "toplevel", "logical", "connective", "top", "bot", "lpar", "quest", "forall", "synchronous", "toplevel", "logical", "connective", "0", "oplus", "1", "otimes", "bang", "exists", "viewing", "proof", "search", "computational", "model", "consider", "inference", "rule", "transform", "sequent", "conclusion", "premise", "result", "see", "formula", "sequent", "agent", "may", "act", "independently", "concert", "others", "environment", "action", "agent", "determined", "reading", "introduction", "rule", "bottomup", "asynchronous", "formula", "occurs", "right", "sequent", "evolve", "without", "affecting", "provability", "without", "interacting", "context", "ie", "corresponding", "introduction", "rule", "invertible", "example", "agent", "b", "lpar", "c", "becomes", "applying", "lpar", "right", "introduction", "rule", "two", "agent", "b", "c", "working", "parallel", "similarly", "agent", "b", "amp", "c", "yield", "applying", "right", "introduction", "rule", "two", "different", "identical", "world", "sequents", "except", "b", "one", "world", "c", "hand", "view", "synchronous", "formula", "agent", "whose", "evolution", "determined", "reading", "corresponding", "rightintroduction", "rule", "bottom", "possible", "provable", "sequent", "evolve", "nonprovable", "sequent", "example", "applying", "oplus", "rightintroduction", "rule", "also", "instance", "inference", "rule", "depend", "detail", "context", "formula", "example", "success", "1right", "introduction", "rule", "requires", "surrounding", "context", "empty", "success", "otimes", "right", "introduction", "rule", "depends", "agent", "surrounding", "context", "divided", "two", "context", "thus", "evolution", "agent", "depends", "synchronizing", "part", "context", "consider", "onesided", "sequent", "calculus", "presentation", "linear", "logic", "introduction", "rule", "rightintroduction", "rule", "given", "classification", "connective", "possible", "show", "proof", "search", "structured", "following", "phase", "without", "loss", "completeness", "asynchronous", "phase", "occurs", "asynchronous", "formula", "present", "sequent", "phase", "rightintroduction", "rule", "applied", "bottomup", "order", "asynchronous", "formula", "synchronous", "phase", "synchronous", "formula", "selected", "becomes", "focus", "phase", "rightintroduction", "rule", "applied", "bottomup", "synchronous", "subformula", "might", "generate", "following", "figure", "present", "focusing", "proof", "system", "linear", "logic", "notice", "two", "phase", "represented", "different", "arrow", "uparrow", "denotes", "asynchronous", "phase", "downarrow", "denotes", "synchronous", "phase", "also", "sequents", "divided", "three", "zone", "zone", "separated", "either", "semicolon", "downarrow", "particular", "left", "uparrow", "downarrow", "two", "zone", "zone", "written", "psi", "denotes", "set", "formula", "used", "number", "time", "proof", "sequent", "zone", "written", "delta", "denotes", "multiset", "formula", "zone", "right", "uparrow", "also", "multiset", "formula", "zone", "right", "downarrow", "single", "formula", "possible", "impose", "arbitrary", "order", "formula", "right", "uparrow", "since", "introduction", "asynchronous", "formula", "done", "order", "atom", "given", "polarity", "figure", "a", "stand", "positive", "atom", "negation", "a", "stand", "negative", "atom", "proof", "built", "inference", "rule", "called", "focused", "proof", "completeness", "focused", "proof", "linear", "logic", "proved", "andreoli", "1992", "asynchronous", "phase", "frac", "up", "psi", "delta", "l", "up", "psi", "delta", "bot", "l", "bot", "qquad", "frac", "up", "psi", "f", "delta", "l", "up", "psi", "delta", "quest", "f", "l", "quest", "frac", "up", "psi", "delta", "top", "l", "top", "qquad", "frac", "up", "psi", "delta", "f", "yx", "l", "up", "psi", "delta", "forall", "xf", "l", "forall", "frac", "up", "psi", "delta", "f_1", "f_2", "l", "up", "psi", "delta", "f_1lpar", "f_2", "l", "lpar", "qquad", "frac", "up", "psi", "delta", "f_1", "l", "quad", "up", "psi", "delta", "f_2", "l", "up", "psi", "delta", "f_1amp", "f_2", "l", "amp", "frac", "up", "psi", "delta", "f", "l", "up", "psi", "delta", "f", "l", "ruparrow", "text", "provided", "f", "asynchronous", "synchronous", "phase", "frac", "down", "psi", "cdot", "one", "one", "qquad", "frac", "down", "psi", "delta_1", "f_1", "quad", "down", "psi", "delta_2", "f_2", "down", "psi", "delta_1", "delta_2", "f_1ot", "f_2", "ot", "qquad", "frac", "up", "psi", "cdot", "f", "down", "psi", "cdot", "bang", "f", "bang", "frac", "down", "psi", "delta", "f_i", "down", "psi", "delta", "f_1oplus", "f_2", "oplus_i", "qquad", "frac", "down", "psi", "delta", "f", "tx", "down", "psi", "delta", "exists", "xf", "exists", "frac", "up", "psi", "delta", "f", "down", "psi", "delta", "f", "rdownarrow", "text", "provided", "f", "either", "asynchronous", "atom", "identity", "decide", "rule", "frac", "down", "psi", "a", "perp", "i_1", "qquad", "frac", "down", "psi", "cdot", "a", "perp", "i_2", "text", "text", "atom", "frac", "down", "psi", "delta", "f", "up", "psi", "delta", "f", "cdot", "d_1", "qquad", "frac", "down", "psi", "delta", "f", "up", "psi", "f", "delta", "cdot", "d_2", "text", "f", "text", "positive", "formula", "focused", "proof", "system", "also", "designed", "classical", "intuitionistic", "logic", "danos", "et", "al", "1997", "laurent", "et", "al", "2005", "liang", "miller", "2009", "23", "proof", "net", "proof", "presented", "using", "sequent", "calculus", "contain", "lot", "detail", "sometimes", "uninteresting", "consider", "example", "many", "uninterestingly", "different", "way", "form", "proof", "vdash", "gamma", "a_1lpar", "a_2", "ldots", "a_", "n1", "lpar", "a_n", "derivation", "vdash", "gamma", "a_1", "a_2", "ldots", "a_n", "unpleasant", "fact", "derives", "sequential", "nature", "proof", "sequent", "calculus", "want", "apply", "set", "s", "n", "rule", "different", "part", "sequent", "apply", "one", "step", "even", "interfere", "must", "sequentialize", "ie", "choose", "linear", "order", "s", "apply", "rule", "n", "step", "according", "order", "natural", "question", "arises", "representation", "proof", "abstract", "uninteresting", "detail", "similar", "question", "answered", "positively", "case", "intuitionistic", "sequent", "calculus", "mean", "known", "natural", "deduction", "via", "curryhoward", "correspondence", "howard", "1980", "strong", "connection", "computational", "device", "known", "lambda", "calculus", "linear", "logic", "succinct", "representation", "proof", "given", "proof", "net", "graphlike", "structure", "enjoy", "particularly", "good", "property", "mll", "fragment", "logic", "first", "step", "towards", "representation", "convert", "sequent", "calculus", "system", "using", "involutivity", "negation", "onesided", "system", "sequents", "form", "vdash", "gamma", "consequence", "number", "rule", "reduced", "since", "leftintroduction", "rule", "keep", "expressive", "power", "provability", "stay", "sequent", "calculus", "proof", "mll", "one", "inductively", "associate", "proof", "net", "conclusion", "follows", "proof", "reduced", "axiom", "rule", "associate", "axiom", "link", "proof", "obtained", "applying", "cut", "rule", "two", "proof", "first", "inductively", "build", "proof", "net", "associated", "two", "proof", "combine", "using", "cut", "link", "proof", "obtained", "applying", "tensor", "rule", "two", "proof", "first", "inductively", "build", "proof", "net", "associated", "two", "proof", "combine", "using", "tensor", "link", "proof", "obtained", "applying", "par", "rule", "proof", "first", "inductively", "build", "proof", "net", "associated", "proof", "add", "par", "link", "properly", "formalized", "using", "hypergraphs", "formula", "node", "link", "oriented", "hyperedges", "hypothesis", "conclusion", "formally", "define", "proof", "net", "hypergraph", "inductively", "built", "sequent", "calculus", "derivation", "mll", "notice", "quite", "lot", "hypergraphs", "proof", "net", "look", "proof", "net", "built", "derivation", "vdash", "gamma", "a_1lpar", "a_2", "ldots", "a_", "n1", "lpar", "a_n", "obtained", "vdash", "gamma", "a_1", "a_2", "ldots", "a_n", "see", "trace", "order", "application", "rule", "disappeared", "sense", "proof", "net", "equivalence", "class", "sequent", "calculus", "derivation", "respect", "derivation", "order", "rule", "whose", "application", "commute", "suppose", "somebody", "come", "huge", "hypergraph", "built", "axiom", "cut", "par", "tensor", "link", "claiming", "actually", "representation", "proof", "verify", "actually", "representation", "proof", "random", "structure", "performing", "correctness", "check", "challenge", "amount", "rebuilding", "sequential", "construction", "history", "structure", "corresponding", "derivation", "sequent", "calculus", "seems", "first", "complex", "problem", "first", "correctness", "criterion", "mll", "proof", "net", "called", "long", "trip", "criterion", "present", "girard", "original", "paper", "exponential", "well", "acc", "acyclic", "connected", "criterion", "danos", "regnier", "1989", "found", "later", "nevertheless", "exists", "much", "efficient", "criterion", "known", "contractibility", "due", "danos", "regnier", "recently", "reformulated", "following", "elegant", "graph", "parsing", "criterion", "guerrini", "martini", "masini", "hypergraph", "proof", "net", "reduces", "singleton", "node", "net", "via", "following", "graph", "reduction", "rule", "performing", "check", "naively", "take", "quadratic", "time", "application", "rule", "may", "require", "entire", "lookup", "graph", "find", "redex", "need", "perform", "many", "step", "hyperlink", "graph", "linear", "time", "algorithm", "give", "guerrini", "2011", "murawski", "ong", "2006", "another", "style", "correctness", "criterion", "mll", "proof", "net", "given", "retor\u00e9", "2003", "quadratic", "algorithm", "given", "mll", "proof", "net", "one", "perform", "cut", "elimination", "particularly", "clean", "way", "parallel", "nature", "cut", "eliminated", "locally", "via", "two", "simplification", "rule", "axiom", "move", "multiplicative", "move", "actually", "computation", "rule", "proof", "net", "correctness", "criterion", "allow", "verify", "easily", "rule", "preserve", "correctness", "consequence", "reduction", "proof", "net", "still", "come", "sequent", "calculus", "proof", "sequent", "hence", "cut", "elimination", "mll", "proof", "net", "performed", "linear", "time", "give", "simple", "elegant", "cutelimination", "result", "mll", "proof", "net", "approach", "extended", "larger", "subset", "linear", "logic", "le", "clear", "obtain", "elegant", "result", "mll", "original", "system", "proposed", "girard", "1987", "work", "mell", "example", "associating", "four", "exponential", "rule", "following", "hypergraph", "construction", "contraction", "weakening", "dereliction", "promotion", "introduces", "notion", "box", "sequentialization", "mark", "around", "piece", "proof", "net", "materialized", "picture", "graph", "rectangle", "drawn", "around", "proof", "net", "conclusion", "a", "questgamma", "construction", "associated", "graph", "reduction", "bear", "striking", "similarity", "lambda", "calculus", "explicit", "substitution", "first", "remarked", "di", "cosmo", "kesner", "1997", "similar", "corresponding", "sequent", "calculus", "rule", "parallelization", "effect", "elegant", "mll", "properly", "carry", "graph", "reduction", "rule", "involve", "box", "local", "recover", "satisfactory", "system", "many", "proposal", "made", "starting", "one", "danos", "regnier", "1995", "want", "mention", "elegant", "approach", "guerrini", "martini", "masini", "guerrini", "et", "al", "2003", "neatly", "show", "connection", "two", "level", "proof", "system", "modal", "logic", "proper", "proof", "net", "mell", "optimal", "reduction", "lambda", "calculus", "recent", "paper", "heijltjes", "houston", "2016", "shown", "satisfactory", "notion", "proof", "net", "mll", "unit", "also", "allowed", "possible", "provide", "canonical", "treatment", "additive", "connective", "even", "firstorder", "quantification", "heijltjes", "et", "al", "2019", "proof", "net", "formula", "containing", "multiplicative", "additive", "connective", "various", "technical", "presentation", "none", "appears", "canonical", "satisfactory", "treatment", "proofnetlike", "proof", "system", "currently", "topic", "active", "research", "particular", "see", "hughes", "van", "glabbeek", "2005", "hughes", "heijltjes", "2016", "3", "semantics", "approaching", "semantics", "linear", "logic", "usually", "done", "along", "two", "different", "path", "first", "various", "semantic", "structure", "available", "used", "map", "formula", "denotation", "structure", "approach", "used", "establish", "soundness", "completeness", "various", "fragment", "linear", "logic", "novel", "semantic", "approach", "linear", "logic", "involves", "giving", "semantics", "proof", "directly", "describe", "briefly", "two", "approach", "provide", "link", "literature", "31", "semantics", "provability", "one", "approach", "attempting", "sound", "complete", "semantics", "fragment", "linear", "logic", "associate", "formula", "set", "context", "used", "prove", "formula", "course", "collection", "may", "need", "abstract", "given", "various", "closure", "property", "phase", "semantics", "girard", "1987", "provides", "one", "semantics", "us", "semantics", "made", "computer", "science", "provide", "counterexample", "tool", "help", "establish", "given", "concurrent", "system", "evolve", "another", "certain", "property", "fages", "et", "al", "2001", "phase", "semantics", "also", "used", "give", "semantic", "proof", "cut", "elimination", "firstorder", "higherorder", "version", "linear", "logic", "okada", "1999", "similarly", "kripkestyle", "semantics", "provided", "allwein", "dunn", "1993", "hodas", "miller", "1994", "quantales", "certain", "kind", "partially", "ordered", "algebraic", "structure", "also", "used", "provide", "semantic", "model", "part", "linear", "logic", "early", "yetter", "1990", "32", "semantics", "proof", "formulasastypes", "analogy", "popular", "fruitful", "theoretical", "computer", "science", "logical", "system", "put", "correspondence", "typed", "computational", "device", "like", "typed", "lambda", "calculus", "associating", "proof", "formula", "program", "formula", "type", "example", "proof", "tautology", "rightarrow", "a", "corresponds", "program", "fun", "x", "x", "arightarrow", "a", "identity", "function", "object", "type", "a", "constructive", "logical", "system", "intuitionistic", "logic", "arithmetic", "linear", "logic", "much", "importance", "attached", "proof", "point", "building", "studying", "model", "proof", "get", "much", "attention", "building", "studying", "model", "provability", "satisfied", "know", "formula", "provable", "really", "want", "know", "computational", "content", "proof", "many", "model", "linear", "logic", "proof", "proposed", "consider", "date", "simplest", "intuitive", "construction", "one", "based", "socalled", "relational", "semantics", "kripkestyle", "semantics", "formula", "interpreted", "multisets", "onesided", "sequents", "interpreted", "tuples", "multisets", "proof", "interpreted", "relation", "interpretation", "sequents", "tortora", "de", "falco", "2003", "ehrhard", "2012", "melli\u00e8s", "2018", "one", "want", "give", "purely", "settheoretic", "semantics", "without", "resorting", "multisets", "possible", "mean", "coherence", "space", "set", "equipped", "special", "coherence", "relation", "originally", "shown", "girard", "1987", "interesting", "category", "theoretical", "model", "linear", "logic", "autonomous", "category", "barr", "1991", "hypercoherences", "ehrhard", "1993", "another", "approach", "semantics", "proof", "given", "girard", "geometry", "interaction", "allows", "u", "obtain", "fully", "algebraic", "characterization", "proof", "proof", "net", "one", "associate", "partial", "permutation", "matrix", "sigma", "corresponding", "cut", "link", "proper", "matrix", "m", "corresponding", "expression", "built", "certain", "dynamic", "algebra", "describe", "possible", "path", "inside", "proof", "net", "possible", "fully", "describe", "proof", "net", "via", "execution", "formula", "mathrm", "ex", "sigma", "1sigma2", "left", "sum_i", "sigma", "right", "1sigma2", "mll", "case", "invariant", "normalization", "process", "nice", "connection", "result", "coming", "dataflow", "theory", "shown", "early", "work", "abramsky", "jagadeesan", "1994", "area", "semantics", "developed", "around", "socalled", "game", "semantics", "deserves", "special", "attention", "strong", "connection", "game", "linear", "logic", "pointed", "quite", "early", "a", "blass", "1992", "fact", "two", "different", "tradition", "connecting", "logic", "game", "tradition", "dialog", "game", "dating", "back", "lorenzen", "one", "player", "attempt", "prove", "formula", "second", "player", "attempt", "refute", "possible", "provide", "mall", "dialog", "game", "completely", "symmetric", "prover", "refuter", "delande", "et", "al", "2010", "another", "tradition", "formula", "interpreted", "game", "logical", "connective", "game", "constructor", "proof", "strategy", "describe", "player", "reacts", "opponent", "move", "imposing", "different", "restriction", "rule", "game", "one", "actually", "provide", "precise", "semantics", "technically", "fully", "abstract", "model", "various", "feature", "actual", "programming", "language", "hence", "huge", "interest", "area", "past", "year", "see", "example", "abramsky", "jagadeesan", "1994", "abramsky", "melli\u00e8s", "1999", "hyland", "ong", "2000", "4", "complexity", "given", "logic", "useful", "know", "whether", "effective", "procedure", "determine", "sentence", "logic", "provable", "decidable", "logicie", "one", "effective", "procedure", "provabilityis", "often", "described", "complexity", "class", "characterizes", "difficult", "perform", "decision", "procedure", "extensive", "research", "work", "dedicated", "study", "complexity", "decidability", "issue", "several", "fragment", "propositional", "linear", "logic", "known", "mll", "provability", "npcomplete", "kanovich", "1992", "mall", "provability", "pspacecomplete", "lincoln", "et", "al", "1992", "np", "pspace", "complexity", "class", "np", "subseteq", "pspace", "surprisingly", "may", "forget", "novelty", "linear", "logic", "lie", "way", "formula", "managed", "without", "structural", "rule", "contraction", "weakening", "result", "stay", "even", "focus", "fragment", "logic", "constant", "propositional", "variable", "allowed", "lincoln", "winkler", "1994", "indeed", "possible", "encode", "arbitrary", "formula", "constantonly", "formula", "preserving", "provability", "mell", "surprisingly", "expressive", "logic", "example", "reachability", "problem", "petri", "net", "encoded", "mell", "gunter", "gehlot", "1989", "problem", "equivalent", "reachability", "problem", "vector", "addition", "system", "state", "vas", "reutenauer", "1989", "furthermore", "decidability", "problem", "mell", "equivalent", "reachability", "problem", "branching", "vas", "de", "groote", "et", "al", "2004", "latter", "known", "nonelementary", "lower", "bound", "lazic", "schmitz", "2015", "thus", "mell", "turn", "decidable", "least", "towerhard", "lazic", "schmitz", "2015", "proof", "decidability", "mell", "given", "bimb\u00f3", "2015", "gap", "proof", "reported", "stra\u00dfburger", "2019", "proof", "undecidability", "propositional", "linear", "logic", "published", "early", "1990s", "lincoln", "et", "al", "1992", "lincoln", "1995", "kanovich", "2016", "showed", "undecidability", "result", "hold", "greatly", "reduced", "fragment", "propositional", "linear", "logic", "machine", "checked", "proof", "undecidability", "published", "forster", "larcheywendling", "2019", "however", "proof", "decidability", "propositional", "linear", "logic", "also", "published", "bimb\u00f3", "dunn", "2022", "also", "claim", "found", "mistake", "abovementioned", "paper", "linear", "logic", "unrestricted", "weakening", "rule", "added", "also", "known", "linear", "affine", "logic", "decidable", "kopylov", "1995", "exponential", "space", "hard", "urquhart", "2000", "good", "overview", "complexity", "result", "surrounding", "linear", "logic", "found", "lincoln", "1995", "5", "computer", "science", "impact", "intuitionistic", "logic", "first", "proposed", "early", "last", "century", "presented", "challenge", "way", "traditional", "mathematician", "supposed", "business", "us", "excluded", "middle", "proofbycontradiction", "considered", "suspect", "problematic", "particularly", "presence", "infinity", "intuitionistic", "logic", "concern", "developed", "constructive", "mathematics", "new", "constructive", "approach", "arisen", "topic", "topology", "algebra", "analysis", "given", "linear", "logic", "encompasses", "dynamic", "proof", "algorithm", "resource", "primary", "impact", "traditional", "mathematics", "computer", "science", "overviewing", "nature", "impact", "outline", "various", "way", "logic", "generally", "used", "computer", "science", "logic", "play", "different", "role", "specification", "computation", "identify", "following", "broad", "different", "approach", "note", "role", "felt", "influence", "linear", "logic", "computationasmodel", "approach", "computation", "encoded", "mathematical", "structure", "consist", "item", "node", "transition", "state", "logic", "used", "externally", "make", "statement", "structure", "computation", "used", "model", "logical", "expression", "intensional", "operator", "modal", "temporal", "dynamic", "logic", "triple", "hoare", "logic", "often", "employed", "express", "proposition", "change", "state", "use", "logic", "represent", "reason", "computation", "probably", "broadly", "successful", "use", "logic", "representing", "computation", "role", "logic", "felt", "little", "influence", "linear", "logic", "computationasdeduction", "approach", "piece", "logic", "syntax", "formula", "term", "type", "proof", "used", "directly", "element", "specified", "computation", "rarefied", "setting", "two", "rather", "different", "approach", "computation", "modeled", "called", "proof", "normalization", "approach", "proof", "search", "approach", "outline", "significant", "impact", "linear", "logic", "different", "setting", "51", "proof", "normalization", "proof", "normalization", "approach", "view", "state", "computation", "proof", "term", "process", "computing", "normalization", "known", "alternatively", "beta", "reduction", "cutelimination", "functional", "programming", "explained", "using", "proofnormalization", "theoretical", "basis", "martinl\u00f6f", "1982", "used", "justify", "design", "new", "functional", "programming", "language", "eg", "abramsky", "1993", "linear", "logic", "provides", "approach", "computational", "specification", "new", "type", "new", "declarative", "mean", "statically", "understanding", "resource", "may", "used", "computation", "provided", "appealing", "mean", "formalizing", "duality", "function", "environment", "supply", "argument", "another", "area", "linear", "logic", "powerful", "theoretical", "instrument", "optimal", "reduction", "problem", "building", "efficient", "optimal", "interpreter", "lambda", "calculus", "stayed", "open", "quite", "long", "time", "original", "definition", "jj", "l\u00e9vy", "solved", "first", "time", "lamping", "1990", "via", "sophisticated", "sharing", "graph", "implementation", "involving", "quite", "impressive", "amount", "rule", "using", "idea", "intuition", "linear", "logic", "many", "author", "reconstructed", "lamping", "solution", "simplifying", "leading", "rich", "theory", "connected", "geometry", "interaction", "reading", "good", "reference", "asperti", "guerrini", "1998", "refinement", "intuitionistic", "logic", "provided", "linear", "logic", "duality", "linear", "logic", "provided", "setting", "one", "could", "view", "function", "environment", "similar", "entity", "interact", "dually", "example", "function", "type", "limp", "b", "modeled", "process", "consumes", "value", "type", "a", "environment", "transforms", "value", "type", "b", "linear", "logic", "implication", "equivalent", "contrapositive", "form", "type", "b", "bot", "limp", "a", "bot", "lead", "interpreting", "function", "process", "transforms", "demand", "value", "type", "b", "demand", "value", "type", "a", "notice", "happen", "function", "intuitionistic", "type", "since", "example", "input", "argument", "may", "vacuous", "curien", "2003", "recent", "success", "using", "game", "semantics", "model", "functional", "computation", "similarly", "related", "dual", "treatment", "function", "environment", "abramsky", "jagadeesan", "1994", "hyland", "ong", "2000", "finally", "mention", "area", "encoding", "computation", "proof", "normalization", "linear", "logic", "used", "provide", "typebased", "description", "polytime", "recursive", "function", "example", "m", "hofmann", "2003", "introduced", "lambda", "calculus", "modal", "linear", "type", "extended", "function", "algebra", "bellantoni", "cook", "1992", "higher", "type", "type", "based", "linear", "logic", "also", "used", "within", "functional", "program", "see", "guzman", "hudak", "1990", "wadler", "1991", "52", "proof", "search", "proof", "search", "approach", "view", "state", "computation", "sequent", "structured", "collection", "formula", "process", "computing", "process", "searching", "proof", "sequent", "change", "take", "place", "sequents", "capture", "dynamic", "computation", "view", "computation", "generally", "read", "inference", "rule", "bottom", "ie", "transformation", "conclusion", "premise", "logic", "programming", "explained", "using", "proof", "search", "theoretical", "basis", "linear", "logic", "provides", "approach", "computational", "specification", "new", "combinators", "building", "logic", "program", "new", "mean", "capture", "rich", "dynamic", "new", "declarative", "approach", "specifying", "concurrent", "computation", "see", "miller", "2004", "overview", "linear", "logic", "programming", "language", "completeness", "focusing", "proof", "system", "used", "provide", "declarative", "explanation", "part", "operational", "semantics", "logic", "programming", "within", "linear", "logic", "consider", "example", "subset", "l", "formula", "linear", "logic", "built", "connective", "top", "limp", "rightarrow", "forall", "notice", "one", "add", "bot", "list", "possible", "encode", "connective", "linear", "logic", "possible", "see", "cutfree", "proof", "search", "l", "defined", "phase", "given", "sequent", "gamma", "delta", "vdash", "g", "gamma", "set", "formula", "contracted", "weakened", "delta", "multiset", "formula", "contracted", "weakened", "g", "goal", "formula", "single", "formula", "l", "proof", "search", "proceeds", "follows", "g", "nonatomic", "right", "introduction", "rule", "used", "conclude", "sequent", "given", "set", "connective", "right", "rule", "invertible", "goalreduction", "phase", "corresponds", "exactly", "asynchronous", "phase", "focused", "proof", "g", "atomic", "proof", "search", "proceeds", "deciding", "single", "formula", "lefthand", "context", "formula", "chosen", "focus", "leftintroduction", "rule", "applied", "formula", "positive", "subformulas", "arise", "backchaining", "phase", "corresponds", "asynchronous", "phase", "focused", "proof", "construction", "formally", "various", "phase", "described", "using", "following", "inference", "rule", "new", "sequent", "arrow", "introduced", "arrow", "labeled", "formula", "result", "leftintroduction", "rule", "notice", "rule", "leftintroduction", "limp", "requires", "splitting", "delta", "context", "two", "part", "delta_1", "delta_2", "reading", "rule", "bottom", "course", "2n", "splittings", "context", "n", "ge", "0", "distinct", "formula", "syntactic", "variable", "a", "inference", "rule", "range", "atomic", "formula", "goal", "reduction", "phase", "frac", "gamma", "delta", "vdash", "top", "top", "r", "qquad", "frac", "gamma", "delta", "vdash", "b", "qquad", "gamma", "delta", "vdash", "c", "gamma", "delta", "vdash", "b", "amp", "c", "amp", "r", "frac", "gamma", "delta", "b", "vdash", "c", "gamma", "delta", "vdash", "b", "limp", "c", "limp", "r", "qquad", "frac", "gamma", "b", "delta", "vdash", "c", "gamma", "delta", "vdash", "b", "rightarrow", "c", "rightarrow", "r", "qquad", "frac", "gamma", "delta", "vdash", "b", "yx", "gamma", "delta", "vdash", "forall", "x", "b", "forall", "r", "backchaining", "phase", "frac", "gamma", "delta", "lvdash", "d_1", "gamma", "delta", "lvdash", "d_1amp", "d_2", "amp", "l", "qquad", "frac", "gamma", "delta", "lvdash", "d_2", "gamma", "delta", "lvdash", "d_1amp", "d_2", "amp", "l", "qquad", "frac", "gamma", "delta", "lvdash", "tx", "gamma", "delta", "lvdash", "forall_", "tau", "xd", "forall", "l", "frac", "gamma", "delta_1", "vdash", "g", "quad", "gamma", "delta_2", "lvdash", "gamma", "delta_1", "delta_2", "lvdash", "glimp", "limp", "l", "qquad", "frac", "gamma", "cdot", "vdash", "g", "quad", "gamma", "delta", "lvdash", "gamma", "delta", "lvdash", "grightarrow", "rightarrow", "l", "identity", "decide", "rule", "frac", "gamma", "delta", "lvdash", "gamma", "delta", "vdash", "textit", "decide", "qquad", "frac", "gamma", "delta", "lvdash", "gamma", "delta", "vdash", "textit", "decide", "qquad", "frac", "gamma", "cdot", "lvdash", "textit", "init", "linear", "logic", "restricted", "l", "viewed", "linear", "logic", "programming", "language", "consequence", "serve", "specification", "language", "computational", "system", "role", "also", "occupied", "say", "petri", "net", "process", "calculus", "lambda", "calculus", "etc", "given", "linear", "logic", "proof", "theory", "various", "kind", "semantics", "broad", "avenue", "reasoning", "computation", "specified", "l", "provided", "metatheory", "linear", "logic", "given", "sequent", "calculus", "linear", "logic", "us", "multisets", "formula", "proof", "search", "directly", "encode", "multiset", "rewriting", "since", "many", "computation", "naturally", "seen", "multiset", "rewriting", "possible", "make", "numerous", "connection", "linear", "logic", "petri", "net", "gunter", "gehlot", "1989", "process", "calculus", "andreoli", "pareschi", "1991", "kobayashi", "et", "al", "1999", "miller", "1996", "security", "protocol", "cervesato", "et", "al", "1999", "miller", "2003", "6", "variation", "61", "different", "treatment", "modality", "one", "us", "traditional", "sequent", "calculus", "presentation", "exponential", "canonical", "following", "sense", "introduce", "another", "copy", "exponential", "say", "bang", "quest", "rule", "original", "one", "way", "prove", "bang", "equivalent", "bang", "quest", "quest", "connective", "easily", "established", "various", "application", "noncanonical", "exponential", "found", "danos", "et", "al", "1993", "nigam", "miller", "2009", "although", "decidability", "mell", "currently", "debated", "bimb\u00f3", "2015", "stra\u00dfburger", "2019", "extending", "mll", "three", "pair", "bang", "quest", "yield", "logic", "undecidable", "chaudhuri", "2018", "martini", "masini", "1995", "describe", "2sequent", "proof", "system", "exponential", "canonical", "fact", "cutelimination", "make", "proof", "classical", "intuitionistic", "logic", "grow", "enormous", "size", "analyzed", "term", "application", "contraction", "rule", "proof", "system", "proof", "system", "introduce", "restriction", "contraction", "possible", "design", "new", "logic", "proof", "system", "cutelimination", "muchreduced", "complexity", "example", "elementary", "linear", "logic", "ell", "obtained", "replacing", "bang", "quest", "introduction", "single", "rule", "introducing", "bang", "quest", "time", "consequence", "ell", "encode", "kalmar", "elementary", "function", "computable", "time", "bounded", "tower", "exponential", "fixed", "height", "girard", "1998", "baillot", "2015", "still", "variation", "inference", "rule", "exponential", "studied", "example", "light", "linear", "logic", "girard", "1998", "soft", "linear", "logic", "lafont", "2004", "characterize", "function", "computable", "polynomial", "time", "see", "also", "baillot", "terui", "2004", "62", "noncommutative", "linear", "logic", "linear", "logic", "reject", "universal", "application", "two", "structural", "rule", "weakening", "contraction", "allows", "unrestricted", "use", "structural", "rule", "called", "exchange", "sequent", "calculus", "universally", "employ", "exchange", "rule", "sequents", "whose", "left", "right", "context", "list", "order", "formula", "within", "context", "becomes", "expressive", "element", "logic", "case", "multiplicative", "disjunction", "conjunction", "become", "noncommutative", "one", "first", "logic", "reject", "three", "structural", "rule", "sequent", "calculus", "given", "lambek", "1958", "logic", "contains", "two", "implication", "contains", "neither", "negation", "exponential", "various", "paper", "proposed", "extending", "linear", "logic", "include", "noncommutative", "feature", "present", "proposal", "seems", "canonical", "sampling", "noncommutative", "linear", "logic", "see", "yetter", "1990", "abrusci", "1991", "retor\u00e9", "1997", "abrusci", "ruet", "1999", "guglielmi", "stra\u00dfburger", "2001", "63", "treatment", "unbounded", "behavior", "mall", "logic", "expressive", "novel", "logic", "also", "decidable", "thus", "capable", "capturing", "unbounded", "behavior", "found", "say", "iteration", "recursion", "described", "addition", "exponential", "enriches", "mall", "full", "linear", "logic", "setting", "unbounded", "behavior", "captured", "second", "approach", "extending", "mall", "capture", "unbounded", "behavior", "involves", "addition", "least", "greatest", "fixed", "point", "operator", "logical", "connective", "directly", "mall", "order", "properly", "characterize", "fixed", "point", "either", "least", "greatest", "necessary", "inference", "rule", "fixed", "point", "higherorder", "sense", "involve", "invariant", "extension", "mall", "also", "firstorder", "quantification", "term", "equality", "developed", "baelde", "baelde", "miller", "2007", "baelde", "2012", "used", "provide", "prooftheoretic", "foundation", "model", "checking", "heath", "miller", "2018"]}