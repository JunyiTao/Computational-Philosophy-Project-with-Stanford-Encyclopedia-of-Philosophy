{
    "main_text": "Brief history of \\(\\lambda\\)-calculus\n3. Brief history of \\(\\lambda\\)-calculus\n\n\\(\\lambda\\)-calculus arose from the study of functions as rules.\nAlready the essential ingredients of the subject can be found in\nFrege\u2019s pioneering work (Frege, 1893). Frege observed, as we did\nabove, that in the study of functions it is sufficient to focus on\nunary functions (i.e., functions that take exactly one argument). (The\nprocedure of viewing a multiple-arity operation as a sequence of\nabstractions that yield an equivalent unary operation is called\ncurrying the operation. Perhaps it would be\nmore historically accurate to call the operation\nfregeing, but there are often miscarriages\nof justice in the appellation of mathematical ideas.) In the 1920s,\nthe mathematician Moses Sch\u00f6nfinkel took the subject further with\nhis study of so-called combinators. As was common in the\nearly days of the subject, Sch\u00f6nfinkel was interested in the\nkinds of transformations that one sees in formal logic, and his\ncombinators were intended to be a contribution to the foundations of\nformal logic. By analogy with the reduction that one sees in classical\npropositional logic with the Sheffer stroke, Sch\u00f6finkel\nestablished the astonishing result that the all functions (in the\nsense of all transformations) could be given in terms of the\ncombinators \\(\\mathbf{K}\\) and \\(\\bS\\); later we will see the\ndefinition of these combinators.\n\nTheorem For every term \\(M\\) made up of\n\\(\\mathbf{K}\\) and \\(\\bS\\) and the variable \\(x\\), there exists a term\n\\(F\\) (built only from \\(\\mathbf{K}\\) and \\(\\bS)\\) such that we can\nderive \\(Fx = M\\).\n\n(The proof that these two suffice to represent all functions is beyond\nthe scope of this entry. For further discussion, see the entry on\n combinatory logic.)\n One can prove the theorem constructively: there is an algorithm that,\ngiven \\(M\\), produces the required \\(F\\). Church called this \\(F\\)\n\u2018\\(\\lambda x[M]\\)\u2019 (Church,\n 1932).[3]\n From this perspective, the \\(\\beta\\)-rule can be justified: if\n\u2018\\(\\lambda x[M]\\)\u2019 is to be a function \\(F\\) satisfying\n\\(Fx = M\\), then \\(\\lambda x[M]\\)x should transform to \\(M\\). This is\njust a special case of the more general principle that for all \\(N,\n(\\lambda x[M])N\\) should transform to \\(M[x := N]\\).\n\nAlthough today we have more clearly delimited systems of abstraction\nand rewriting, in its early days \\(\\lambda\\)-calculus and combinatory\nlogic (\u00e0 la Sch\u00f6nfinkel) were bound up with investigations\nof foundations of mathematics. In the hands of Curry, Church, Kleene,\nand Rosser (some of the pioneers in the subject) the focus was on\ndefining mathematical objects and carrying out logical reasoning\ninside the these new systems. It turned out that these early attempts\nat so-called illative \\(\\lambda\\)-calculus and combinatory logic were\ninconsistent. Curry isolated and polished the inconsistency; the\nresult is now known as Curry\u2019s paradox. See the entry on\n Curry\u2019s paradox\n and appendix B of (Barendregt, 1985).\n\nThe \\(\\lambda\\)-calculus earns a special place in the history of logic\nbecause it was the source of the first undecidable problem. The\nproblem is: given \\(\\lambda\\)-terms \\(M\\) and \\(N\\), determine whether\n\\(M = N\\). (A theory of equational reasoning\nabout \\(\\lambda\\)-terms has not yet been defined; the definition will\ncome later.) This problem was shown to be undecidable.\n\nAnother early problem in the \\(\\lambda\\)-calculus was whether it is\nconsistent at all. In this context, inconsistency means that all terms\nare equal: one can reduce any \\(\\lambda\\)-term \\(M\\) to any other\n\\(\\lambda\\)-term \\(N\\). That this is not the case is an early result\nof \\(\\lambda\\)-calculus. Initially one had results showing that\ncertain terms were not interconvertible (e.g., \\(\\mathbf{K}\\) and\n\\(\\bS)\\); later, a much more powerful result, the so-called\nChurch-Rosser theorem, helped shed more light on \\(\\beta\\)-conversion\nand could be used to give quick proofs of the non-inter-convertibility\nof whole classes of \\(\\lambda\\)-terms. See below for more detailed\ndiscussion of consistency.\n\nThe \\(\\lambda\\)-calculus was a somewhat obscure formalism until the\n1960s, when, at last, a \u2018mathematical\u2019 semantics was\nfound. Its relation to programming languages was also clarified. Till\nthen the only models of \\(\\lambda\\)-calculus were\n\u2018syntactic\u2019, that is, were generated in the style of\nHenkin and consisted of equivalence classes of \\(\\lambda\\)-terms (for\nsuitable notions of equivalence). Applications in the semantics of\nnatural language, thanks to developments by Montague and other\nlinguists, helped to \u2018spread the word\u2019 about the subject.\nSince then the \\(\\lambda\\)-calculus enjoys a respectable place in\nmathematical logic, computer science, linguistics (see, e.g., Heim and\nKratzer 1998), and kindred fields.\n",
    "section_title": "3. Brief history of \\(\\lambda\\)-calculus",
    "entry_title": "The Lambda Calculus",
    "hierarchy_title": "The Lambda Calculus || Brief history of \\(\\lambda\\)-calculus",
    "tokenized_text": [
        "brief",
        "history",
        "lambda",
        "calculus",
        "brief",
        "history",
        "lambda",
        "calculus",
        "lambda",
        "calculus",
        "arose",
        "study",
        "function",
        "rule",
        "already",
        "essential",
        "ingredient",
        "subject",
        "found",
        "frege",
        "pioneering",
        "work",
        "frege",
        "frege",
        "observed",
        "study",
        "function",
        "sufficient",
        "focus",
        "unary",
        "function",
        "ie",
        "function",
        "take",
        "exactly",
        "one",
        "argument",
        "procedure",
        "viewing",
        "multiplearity",
        "operation",
        "sequence",
        "abstraction",
        "yield",
        "equivalent",
        "unary",
        "operation",
        "called",
        "currying",
        "operation",
        "perhaps",
        "would",
        "historically",
        "accurate",
        "call",
        "operation",
        "fregeing",
        "often",
        "miscarriage",
        "justice",
        "appellation",
        "mathematical",
        "idea",
        "s",
        "mathematician",
        "moses",
        "sch\u00f6nfinkel",
        "took",
        "subject",
        "study",
        "socalled",
        "combinators",
        "common",
        "early",
        "day",
        "subject",
        "sch\u00f6nfinkel",
        "interested",
        "kind",
        "transformation",
        "one",
        "see",
        "formal",
        "logic",
        "combinators",
        "intended",
        "contribution",
        "foundation",
        "formal",
        "logic",
        "analogy",
        "reduction",
        "one",
        "see",
        "classical",
        "propositional",
        "logic",
        "sheffer",
        "stroke",
        "sch\u00f6finkel",
        "established",
        "astonishing",
        "result",
        "function",
        "sense",
        "transformation",
        "could",
        "given",
        "term",
        "combinators",
        "mathbf",
        "k",
        "bs",
        "later",
        "see",
        "definition",
        "combinators",
        "theorem",
        "every",
        "term",
        "m",
        "made",
        "mathbf",
        "k",
        "bs",
        "variable",
        "x",
        "exists",
        "term",
        "f",
        "built",
        "mathbf",
        "k",
        "bs",
        "derive",
        "fx",
        "m",
        "proof",
        "two",
        "suffice",
        "represent",
        "function",
        "beyond",
        "scope",
        "entry",
        "discussion",
        "see",
        "entry",
        "combinatory",
        "logic",
        "one",
        "prove",
        "theorem",
        "constructively",
        "algorithm",
        "given",
        "m",
        "produce",
        "required",
        "f",
        "church",
        "called",
        "f",
        "lambda",
        "x",
        "church",
        "perspective",
        "beta",
        "rule",
        "justified",
        "lambda",
        "x",
        "function",
        "f",
        "satisfying",
        "fx",
        "m",
        "lambda",
        "x",
        "x",
        "transform",
        "m",
        "special",
        "case",
        "general",
        "principle",
        "n",
        "lambda",
        "x",
        "n",
        "transform",
        "x",
        "n",
        "although",
        "today",
        "clearly",
        "delimited",
        "system",
        "abstraction",
        "rewriting",
        "early",
        "day",
        "lambda",
        "calculus",
        "combinatory",
        "logic",
        "\u00e0",
        "la",
        "sch\u00f6nfinkel",
        "bound",
        "investigation",
        "foundation",
        "mathematics",
        "hand",
        "curry",
        "church",
        "kleene",
        "rosser",
        "pioneer",
        "subject",
        "focus",
        "defining",
        "mathematical",
        "object",
        "carrying",
        "logical",
        "reasoning",
        "inside",
        "new",
        "system",
        "turned",
        "early",
        "attempt",
        "socalled",
        "illative",
        "lambda",
        "calculus",
        "combinatory",
        "logic",
        "inconsistent",
        "curry",
        "isolated",
        "polished",
        "inconsistency",
        "result",
        "known",
        "curry",
        "paradox",
        "see",
        "entry",
        "curry",
        "paradox",
        "appendix",
        "b",
        "barendregt",
        "lambda",
        "calculus",
        "earns",
        "special",
        "place",
        "history",
        "logic",
        "source",
        "first",
        "undecidable",
        "problem",
        "problem",
        "given",
        "lambda",
        "terms",
        "m",
        "n",
        "determine",
        "whether",
        "n",
        "theory",
        "equational",
        "reasoning",
        "lambda",
        "terms",
        "yet",
        "defined",
        "definition",
        "come",
        "later",
        "problem",
        "shown",
        "undecidable",
        "another",
        "early",
        "problem",
        "lambda",
        "calculus",
        "whether",
        "consistent",
        "context",
        "inconsistency",
        "mean",
        "term",
        "equal",
        "one",
        "reduce",
        "lambda",
        "term",
        "m",
        "lambda",
        "term",
        "n",
        "case",
        "early",
        "result",
        "lambda",
        "calculus",
        "initially",
        "one",
        "result",
        "showing",
        "certain",
        "term",
        "interconvertible",
        "eg",
        "mathbf",
        "k",
        "bs",
        "later",
        "much",
        "powerful",
        "result",
        "socalled",
        "churchrosser",
        "theorem",
        "helped",
        "shed",
        "light",
        "beta",
        "conversion",
        "could",
        "used",
        "give",
        "quick",
        "proof",
        "noninterconvertibility",
        "whole",
        "class",
        "lambda",
        "terms",
        "see",
        "detailed",
        "discussion",
        "consistency",
        "lambda",
        "calculus",
        "somewhat",
        "obscure",
        "formalism",
        "s",
        "last",
        "mathematical",
        "semantics",
        "found",
        "relation",
        "programming",
        "language",
        "also",
        "clarified",
        "till",
        "model",
        "lambda",
        "calculus",
        "syntactic",
        "generated",
        "style",
        "henkin",
        "consisted",
        "equivalence",
        "class",
        "lambda",
        "terms",
        "suitable",
        "notion",
        "equivalence",
        "application",
        "semantics",
        "natural",
        "language",
        "thanks",
        "development",
        "montague",
        "linguist",
        "helped",
        "spread",
        "word",
        "subject",
        "since",
        "lambda",
        "calculus",
        "enjoys",
        "respectable",
        "place",
        "mathematical",
        "logic",
        "computer",
        "science",
        "linguistics",
        "see",
        "eg",
        "heim",
        "kratzer",
        "kindred",
        "field"
    ]
}