{
    "main_text": "Applications || Formal Verification of Hardware\n4.4 Formal Verification of Hardware\n\nAutomated reasoning has reached the level of maturity where theorem\nproving systems and techniques are being used for industrial-strength\napplications. One such application area is the formal verification of\nhardware and software systems. The cost of defects in hardware can\neasily run into the millions. In 1994, the Pentium processor was\nshipped with a defect in its floating-point unit and the subsequent\noffer by Intel to replace the flawed chip (which was taken up only by\na small fraction of all Pentium owners) cost the company close to $500\nmillion. To guard against situations like this, the practice of\ntesting chip designs is now considered insufficient and more formal\nmethods of verification have not only gained large attention in the\nmicroprocessor industry but have become a necessity. The idea behind\nformal verification is to rigorously prove with mathematical certainty\nthat the system functions as specified. Common applications to\nhardware design include formally establish that the system functions\ncorrectly on all inputs, or that two different circuits are\nfunctionally equivalent.\n\nDepending on the task at hand, one can draw from a number of automated\nformal verification techniques, including SAT solvers in propositional\nlogic, symbolic simulation using binary decision diagrams (BDDs),\nmodel checking in temporal logic, or conducting proofs in higher-order\nlogic. In the latter case, using an automated theorem prover like\nHOL\u2014see Section 10\u2014has shown to be invaluable in practice.\nProof construction in a system like HOL proceeds semi-automatically\nwith the user providing a fair amount of guidance as to how the proof\nshould proceed: The user tries to find a proof while being assisted by\nthe theorem prover which, on request, can either automatically fill in\na proof segment or verify proof steps given to it. Although some of\nthe techniques mentioned above provide decision procedures which\nhigher-order logic lacks, higher-order logic has the advantage of\nbeing very expressive. The tradeoff is justified since proving facts\nabout floating-point arithmetic requires the\nformalization of a large body of real analysis, including many\nelementary statements such as:\n\n\n\n|-\n(!x. a <= x /\\ x <= b ==> (f diffl (f' x)) x) /\\\n\n\n\nf(a) <= K /\\ \n\n\nf(b) <= K /\\ \n\n\n(!x. a <= x /\\ x <= b /\\ (f'(x) = 0) ==> f(x) <= K)\n==>  \n\n\n\u00a0\u00a0(!x. a <= x /\\ x <= b ==> f(x) <=\nK) \n\n\n\nThis statement from Harrison 2000 written in HOL says that if a\nfunction f is differentiable with derivative\nf\u2032 in an interval [a, b] then a\nsufficient condition for f(x) \u2264 K\nthroughout the interval is that f(x) \u2264 K\nat the endpoints a, b and at all points of zero\nderivative. The result is used to determine error bounds when\napproximating transcendental functions by truncated power series.\nConducting proofs in such a \u201cpainstakingly foundational\nsystem\u201d (Harrison 2006) has some significant benefits. First,\none achieves a high degree of assurance that the proofs are valid\nsince (admitedly lengthy) they are composed of small error-free\ndeductive steps. Second, the formalization of these elementary\nstatements and intermediate results can be reused in other tasks or\nprojects. For example, a library of formal statements and proven\nresults in floating-point division can be reused when proving other\nresults of floating-point algorithms for square roots or\ntranscendental functions. To further illustrate, different versions of\nthe square root algorithm for the Intel Itanium share many\nsimilarities and the proof of correctness for one version of the\nalgorithm can be carried over to another version after minor tweaking\nof the proof. A third benefit of using a prover like HOL is, of\ncourse, that such lengthy proofs are carried out mechanically and are\ndeductively certain; the likelihood of introducing a human error if\nthey were carried out manually would be just as certain.\n",
    "section_title": "4.4 Formal Verification of Hardware",
    "entry_title": "Automated Reasoning",
    "hierarchy_title": "Automated Reasoning || Applications || Formal Verification of Hardware",
    "tokenized_text": [
        "application",
        "formal",
        "verification",
        "hardware",
        "formal",
        "verification",
        "hardware",
        "automated",
        "reasoning",
        "reached",
        "level",
        "maturity",
        "theorem",
        "proving",
        "system",
        "technique",
        "used",
        "industrialstrength",
        "application",
        "one",
        "application",
        "area",
        "formal",
        "verification",
        "hardware",
        "software",
        "system",
        "cost",
        "defect",
        "hardware",
        "easily",
        "run",
        "million",
        "pentium",
        "processor",
        "shipped",
        "defect",
        "floatingpoint",
        "unit",
        "subsequent",
        "offer",
        "intel",
        "replace",
        "flawed",
        "chip",
        "taken",
        "small",
        "fraction",
        "pentium",
        "owner",
        "cost",
        "company",
        "close",
        "million",
        "guard",
        "situation",
        "like",
        "practice",
        "testing",
        "chip",
        "design",
        "considered",
        "insufficient",
        "formal",
        "method",
        "verification",
        "gained",
        "large",
        "attention",
        "microprocessor",
        "industry",
        "become",
        "necessity",
        "idea",
        "behind",
        "formal",
        "verification",
        "rigorously",
        "prove",
        "mathematical",
        "certainty",
        "system",
        "function",
        "specified",
        "common",
        "application",
        "hardware",
        "design",
        "include",
        "formally",
        "establish",
        "system",
        "function",
        "correctly",
        "input",
        "two",
        "different",
        "circuit",
        "functionally",
        "equivalent",
        "depending",
        "task",
        "hand",
        "one",
        "draw",
        "number",
        "automated",
        "formal",
        "verification",
        "technique",
        "including",
        "sat",
        "solver",
        "propositional",
        "logic",
        "symbolic",
        "simulation",
        "using",
        "binary",
        "decision",
        "diagram",
        "bdds",
        "model",
        "checking",
        "temporal",
        "logic",
        "conducting",
        "proof",
        "higherorder",
        "logic",
        "latter",
        "case",
        "using",
        "automated",
        "theorem",
        "prover",
        "like",
        "holsee",
        "section",
        "has",
        "shown",
        "invaluable",
        "practice",
        "proof",
        "construction",
        "system",
        "like",
        "hol",
        "proceeds",
        "semiautomatically",
        "user",
        "providing",
        "fair",
        "amount",
        "guidance",
        "proof",
        "proceed",
        "user",
        "try",
        "find",
        "proof",
        "assisted",
        "theorem",
        "prover",
        "request",
        "either",
        "automatically",
        "fill",
        "proof",
        "segment",
        "verify",
        "proof",
        "step",
        "given",
        "although",
        "technique",
        "mentioned",
        "provide",
        "decision",
        "procedure",
        "higherorder",
        "logic",
        "lack",
        "higherorder",
        "logic",
        "advantage",
        "expressive",
        "tradeoff",
        "justified",
        "since",
        "proving",
        "fact",
        "floatingpoint",
        "arithmetic",
        "requires",
        "formalization",
        "large",
        "body",
        "real",
        "analysis",
        "including",
        "many",
        "elementary",
        "statement",
        "x",
        "x",
        "x",
        "b",
        "f",
        "diffl",
        "f",
        "x",
        "x",
        "f",
        "k",
        "f",
        "b",
        "k",
        "x",
        "x",
        "x",
        "b",
        "f",
        "x",
        "f",
        "x",
        "k",
        "x",
        "x",
        "x",
        "b",
        "f",
        "x",
        "k",
        "statement",
        "harrison",
        "written",
        "hol",
        "say",
        "function",
        "f",
        "differentiable",
        "derivative",
        "f",
        "interval",
        "b",
        "sufficient",
        "condition",
        "f",
        "x",
        "k",
        "throughout",
        "interval",
        "f",
        "x",
        "k",
        "endpoint",
        "b",
        "point",
        "zero",
        "derivative",
        "result",
        "used",
        "determine",
        "error",
        "bound",
        "approximating",
        "transcendental",
        "function",
        "truncated",
        "power",
        "series",
        "conducting",
        "proof",
        "painstakingly",
        "foundational",
        "system",
        "harrison",
        "significant",
        "benefit",
        "first",
        "one",
        "achieves",
        "high",
        "degree",
        "assurance",
        "proof",
        "valid",
        "since",
        "admitedly",
        "lengthy",
        "composed",
        "small",
        "errorfree",
        "deductive",
        "step",
        "second",
        "formalization",
        "elementary",
        "statement",
        "intermediate",
        "result",
        "reused",
        "task",
        "project",
        "example",
        "library",
        "formal",
        "statement",
        "proven",
        "result",
        "floatingpoint",
        "division",
        "reused",
        "proving",
        "result",
        "floatingpoint",
        "algorithm",
        "square",
        "root",
        "transcendental",
        "function",
        "illustrate",
        "different",
        "version",
        "square",
        "root",
        "algorithm",
        "intel",
        "itanium",
        "share",
        "many",
        "similarity",
        "proof",
        "correctness",
        "one",
        "version",
        "algorithm",
        "carried",
        "another",
        "version",
        "minor",
        "tweaking",
        "proof",
        "third",
        "benefit",
        "using",
        "prover",
        "like",
        "hol",
        "course",
        "lengthy",
        "proof",
        "carried",
        "mechanically",
        "deductively",
        "certain",
        "likelihood",
        "introducing",
        "human",
        "error",
        "carried",
        "manually",
        "would",
        "certain"
    ]
}