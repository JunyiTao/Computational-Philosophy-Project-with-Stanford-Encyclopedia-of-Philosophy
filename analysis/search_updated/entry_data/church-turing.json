{
    "url": "church-turing",
    "title": "The Church-Turing Thesis",
    "authorship": {
        "year": "Copyright \u00a9 2023",
        "author_text": "B. Jack Copeland\n<jack.copeland@canterbury.ac.nz>",
        "author_links": [
            {
                "https://www.canterbury.ac.nz/arts/contact-us/people/jack-copeland.html": "B. Jack Copeland"
            },
            {
                "mailto:jack%2ecopeland%40canterbury%2eac%2enz": "jack.copeland@canterbury.ac.nz"
            }
        ],
        "raw_html": "<div id=\"article-copyright\">\n<p>\n<a href=\"../../info.html#c\">Copyright \u00a9 2023</a> by\n\n<br/>\n<a href=\"https://www.canterbury.ac.nz/arts/contact-us/people/jack-copeland.html\" target=\"other\">B. Jack Copeland</a>\n&lt;<a href=\"mailto:jack%2ecopeland%40canterbury%2eac%2enz\"><em>jack<abbr title=\" dot \">.</abbr>copeland<abbr title=\" at \">@</abbr>canterbury<abbr title=\" dot \">.</abbr>ac<abbr title=\" dot \">.</abbr>nz</em></a>&gt;\n    </p>\n</div>"
    },
    "pubinfo": [
        "First published Wed Jan 8, 1997",
        "substantive revision Mon Dec 18, 2023"
    ],
    "preamble": "\n\nThe Church-Turing thesis (or Turing-Church thesis) is a fundamental\nclaim in the theory of computability. It was advanced independently by\nChurch and Turing in the mid 1930s. There are various equivalent\nformulations of the thesis. A common one is that every effective\ncomputation can be carried out by a Turing machine (i.e., by\nTuring\u2019s abstract computing machine, which in its universal form\nencapsulates the fundamental logical principles of the stored-program\nall-purpose digital computer). Modern reimaginings of the\nChurch-Turing thesis transform it, extending it to fundamental\nphysics, complexity theory, exotic algorithms, and cognitive science.\nIt is important to be aware though that some of the theses nowadays\nreferred to as the Church-Turing thesis are at best very\ndistant relatives of the thesis advanced by Church and Turing.\n",
    "toc": [
        {
            "#ThesHist": "1. The 1936 Thesis and its Context"
        },
        {
            "#NoteTerm": "1.1 Note on terminology"
        },
        {
            "#MakiInfoConcEffeMethPrec": "1.2 Making the informal concept of an effective method precise"
        },
        {
            "#FormTuriThesTermNumb": "1.3 Formulations of Turing\u2019s thesis in terms of numbers"
        },
        {
            "#MeanCompCompTuriThes": "1.4 The meaning of \u201ccomputable\u201d and \u201ccomputation\u201d in Turing\u2019s thesis"
        },
        {
            "#ChurThes": "1.5 Church\u2019s thesis"
        },
        {
            "#CompTuriChurAppr": "1.6 Comparing the Turing and Church approaches"
        },
        {
            "#Ents": "1.7 The Entscheidungsproblem"
        },
        {
            "#BackEmerConcEffeMethDeciMeth": "2. Backstory: Emergence of the concepts of effective method and decision method"
        },
        {
            "#SimpRuleThumSiriBeyo": "2.1 From simple rules-of-thumb to Siri and beyond"
        },
        {
            "#Leib": "2.2 Leibniz"
        },
        {
            "#LogiMach": "2.3 Logic machines"
        },
        {
            "#Peir": "2.4 Peirce"
        },
        {
            "#HilbGttiGrou": "2.5 Hilbert and the G\u00f6ttingen group"
        },
        {
            "#NewmCambMath": "2.6 Newman and the Cambridge mathematicians"
        },
        {
            "#OtheApprComp": "3. Other Approaches to Computability"
        },
        {
            "#Gdel": "3.1 G\u00f6del"
        },
        {
            "#Post": "3.2 Post"
        },
        {
            "#HilbBern": "3.3 Hilbert and Bernays"
        },
        {
            "#ModeAxioAnal": "3.4 Modern axiomatic analyses"
        },
        {
            "#CaseForChurTuriThes": "4. The Case for the Church-Turing Thesis"
        },
        {
            "#InduEquiArgu": "4.1 The inductive and equivalence arguments"
        },
        {
            "#SkepAbouInduEquiArgu": "4.2 Skepticism about the inductive and equivalence arguments"
        },
        {
            "#TuriArguI": "4.3 Turing\u2019s argument I"
        },
        {
            "#TuriAnal": "4.3.1 Turing\u2019s analysis"
        },
        {
            "#NextStepBLTypeTuriMach": "4.3.2 Next step: \\(B\\)-\\(L\\)-type Turing machines"
        },
        {
            "#FinaStep": "4.3.3 Final step"
        },
        {
            "#StatMindArguIII": "4.3.4 States of mind, and argument III"
        },
        {
            "#TuriTheo": "4.3.5 Turing\u2019s theorem"
        },
        {
            "#TuriArguII": "4.4 Turing\u2019s argument II"
        },
        {
            "#CalcLogi": "4.4.1 Calculating in a logic"
        },
        {
            "#ChurStepStepArgu": "4.4.2 Church\u2019s \u201cstep-by-step\u201d argument"
        },
        {
            "#TuriVari": "4.4.3 Turing\u2019s variant"
        },
        {
            "#CompChurTuriArgu": "4.4.4 Comparing the Church and Turing arguments"
        },
        {
            "#KripVersArguII": "4.5 Kripke\u2019s version of argument II"
        },
        {
            "#TuriStatThes": "4.6 Turing on the status of the thesis"
        },
        {
            "#ChurTuriThesLimiMach": "5. The Church-Turing Thesis and the Limits of Machines"
        },
        {
            "#TwoDistThes": "5.1 Two distinct theses"
        },
        {
            "#EquiFall": "5.2 The \u201cequivalence fallacy\u201d"
        },
        {
            "#WatcOurWord": "5.3 Watching our words"
        },
        {
            "#WordComp": "5.3.1 The word \u201ccomputable\u201d"
        },
        {
            "#TwoInstQuot": "5.3.2 Two instructive quotations"
        },
        {
            "#BeyoEffe": "5.3.3 Beyond effective"
        },
        {
            "#WordMech": "5.3.4 The word \u201cmechanical\u201d"
        },
        {
            "#StroMaxiThes": "5.4 The strong maximality thesis"
        },
        {
            "#AcceTuriMach": "5.4.1 Accelerating Turing machines"
        },
        {
            "#ModeVersChurTuriThes": "6. Modern Versions of the Church-Turing Thesis"
        },
        {
            "#AlgoVers": "6.1 The algorithmic version"
        },
        {
            "#CompCompExteChurTuriThes": "6.2 Computational complexity: the Extended Church-Turing thesis"
        },
        {
            "#BraiSimuChurTuriThes": "6.3 Brain simulation and the Church-Turing thesis"
        },
        {
            "#ChurTuriThesPhys": "6.4 The Church-Turing thesis and physics"
        },
        {
            "#DeutWolfThes": "6.4.1 The Deutsch-Wolfram thesis"
        },
        {
            "#GandArgu": "6.4.2 The \u201cGandy argument\u201d"
        },
        {
            "#QuanEffeTotaThes": "6.4.3 Quantum effects and the \u201cTotal\u201d thesis"
        },
        {
            "#SomeKeyRemaTuriChur": "7. Some Key Remarks by Turing and Church"
        },
        {
            "#TuriMach": "7.1 Turing machines"
        },
        {
            "#HumaCompMachComp": "7.2 Human computation and machine computation"
        },
        {
            "#ChurHumaComp": "7.3 Church and the human computer"
        },
        {
            "#TuriUseMach": "7.4 Turing\u2019s use of \u201cmachine\u201d"
        },
        {
            "#ChurVersTuriThes": "7.5 Church\u2019s version of Turing\u2019s thesis"
        },
        {
            "decision-problem.html": "Supplement: The Rise and Fall of the Entscheidungsproblem"
        },
        {
            "#Bib": "Bibliography"
        },
        {
            "#Aca": "Academic Tools"
        },
        {
            "#Oth": "Other Internet Resources"
        },
        {
            "#Rel": "Related Entries"
        }
    ],
    "main_text": "\n1. The 1936 Thesis and its Context\n\nThe Church-Turing thesis concerns the concept of an effective\nor systematic or mechanical method, as used in\nlogic, mathematics and computer science. \u201cEffective\u201d and\nits synonyms \u201csystematic\u201d and \u201cmechanical\u201d are\nterms of art in these disciplines: they do not carry their everyday\nmeaning. A method, or procedure, \\(M\\), for achieving some desired\nresult is called \u201ceffective\u201d (or \u201csystematic\u201d\nor \u201cmechanical\u201d) just in case:\n\n\\(M\\) is set out in terms of a finite number of exact instructions\n(each instruction being expressed by means of a finite number of\nsymbols);\n\\(M\\) will, if carried out without error, produce the desired\nresult in a finite number of steps;\n\\(M\\) can (in practice or in principle) be carried out by a human\nbeing unaided by any machinery except paper and pencil;\n\\(M\\) demands no insight, intuition, or ingenuity, on the part of\nthe human being carrying out the method.\n\n\nA well-known example of an effective method is the truth-table test\nfor tautologousness. In principle, a human being who works by rote\ncould apply this test successfully to any formula of the propositional\ncalculus\u2014given sufficient time, tenacity, paper, and pencils\n(although in practice the test is unworkable for any formula\ncontaining more than a few propositional variables).\n1.1 Note on terminology\n\nStatements that there is an effective method for achieving\nsuch-and-such a result are commonly expressed by saying that there is\nan effective method for obtaining the values of such-and-such a\nmathematical function.\n\nFor example, that there is an effective method for determining whether\nor not any given formula of the propositional calculus is a tautology\n(such as the truth-table method) is expressed in function-speak by\nsaying there is an effective method for obtaining the values of a\nfunction, call it \\(T\\), whose domain is the set of formulae of the\npropositional calculus and whose value for any given formula \\(x\\),\nwritten \\(T(x)\\), is 1 or 0 according to whether \\(x\\) is, or is not,\na tautology.\n1.2 Making the informal concept of an effective method precise\n\nThe notion of an effective method or procedure is an informal one, and\nattempts to characterize effectiveness, such as the above, lack rigor,\nfor the key requirement that the method must demand no insight,\nintuition or ingenuity is left unexplicated.\n\nOne of Alan Turing\u2019s achievements, in his famous paper of 1936,\nwas to present a formally exact predicate with which the informal\npredicate \u201ccan be done by means of an effective method\u201d\nmay be replaced (Turing 1936). Alonzo Church, working independently,\ndid the same (Church 1936a).\n\nThe replacement predicates that Church and Turing proposed were, on\nthe face of it, very different from one another. However, these\npredicates turned out to be equivalent, in the sense that\neach picks out the same set (call it \\(S\\)) of mathematical functions.\nThe Church-Turing thesis is the assertion that this set \\(S\\) contains\nevery function whose values can be obtained by a method or\nprocedure satisfying the above conditions for effectiveness.\n\nSince it can also be shown that there are no functions in \\(S\\)\nother than ones whose values can be obtained by a method\nsatisfying the above conditions for effectiveness, the Church-Turing\nthesis licenses replacing the informal claim \u201cThere is an\neffective method for obtaining the values of function \\(f\\)\u201d by\nthe formal claim \u201c\\(f\\) is a member of \\(S\\)\u201d\u2014or by\nany other formal claim equivalent to this one.\n\nWhen the Church-Turing thesis is expressed in terms of the replacement\nconcept proposed by Turing, it is appropriate to refer to the thesis\nalso as \u201cTuring\u2019s thesis\u201d; and as\n\u201cChurch\u2019s thesis\u201d when expressed in terms of one or\nanother of the formal replacements proposed by Church.\n\nThe formal concept proposed by Turing was that of computability by\nTuring machine. He argued for the claim\u2014Turing\u2019s\nthesis\u2014that whenever there is an effective method for obtaining\nthe values of a mathematical function, the function can be computed by\na Turing machine.\n\nThe converse claim\u2014amounting to the claim mentioned above, that\nthere are no functions in \\(S\\) other than ones whose values\ncan be obtained by an effective method\u2014is easily established,\nsince a Turing machine program is itself a specification of an\neffective method. Without exercising any insight, intuition, or\ningenuity, a human being can work through the instructions in the\nprogram and carry out the required operations.\n\nIf Turing\u2019s thesis is correct, then talk about the existence and\nnon-existence of effective methods and procedures can be replaced\nthroughout mathematics, logic and computer science by talk about the\nexistence or non-existence of Turing machine programs.\n\nTuring stated his thesis in numerous places, with varying degrees of\nrigor. The following formulation is one of the most accessible:\n\n\nTuring\u2019s thesis:\n\nL.C.M.s [logical computing machines: Turing\u2019s expression for\nTuring machines] can do anything that could be described as\n\u201crule of thumb\u201d or \u201cpurely mechanical\u201d.\n(Turing 1948 [2004: 414])\n\n\nHe adds:\n\n\nThis is sufficiently well established that it is now agreed amongst\nlogicians that \u201ccalculable by means of an L.C.M.\u201d is the\ncorrect accurate rendering of such phrases. (Ibid.)\n\n1.3 Formulations of Turing\u2019s thesis in terms of numbers\n\nIn his 1936 paper, which he titled \u201cOn Computable Numbers, with\nan Application to the Entscheidungsproblem\u201d, Turing wrote:\n\n\nAlthough the subject of this paper is ostensibly the computable\nnumbers, it is almost equally easy to define and investigate\ncomputable functions \u2026 I have chosen the computable numbers for\nexplicit treatment as involving the least cumbrous technique. (1936\n[2004: 58])\n\n\nComputable numbers are (real) numbers whose decimal representation can\nbe generated progressively, digit by digit, by a Turing machine.\nExamples are:\n\nany number whose decimal representation consists of a finite\nnumber of digits (e.g., 109, 1.142)\nall rational numbers, such as one-third, two-sevenths, etc.\nsome irrational real numbers, such as \u03c0 and e.\n\n\nSome real numbers, though, are uncomputable, as Turing\nproved. Turing\u2019s proof pointed to specific examples of\nuncomputable real numbers, but it is easy to see in a general way that\nthere must be real numbers that cannot be computed by any\nTuring machine, since there are more real numbers than there\nare Turing-machine programs. There can be no more Turing-machine\nprograms than there are whole numbers, since the programs can be\ncounted: 1st program, 2nd program, and so on;\nbut, as Cantor proved in 1874, there are vastly more real numbers than\nwhole numbers (Cantor 1874).\n\nAs Turing said, \u201cit is almost equally easy to define and\ninvestigate computable functions\u201d: There is, in a certain sense,\nlittle difference between a computable number and a computable\nfunction. For example, the computable number .14159\u2026 (formed of\nthe digits following the decimal point in \u03c0, 3.14159\u2026)\ncorresponds to the computable function: \\(f(1) = 1,\\)\u00a0\\(f(2) =\n4,\\) \\(f(3) = 1,\\)\u00a0\\(f(4) = 5,\\)\u00a0\\(f(5) = 9,\\)\u2026 .\n\nAs well as formulations of Turing\u2019s thesis like the one given\nabove, Turing also formulated his thesis in terms of numbers:\n\n\n[T]he \u201ccomputable numbers\u201d include all numbers which would\nnaturally be regarded as computable. (Turing 1936 [2004: 58])\n\n\nand\n\n\nIt is my contention that these operations [the operations of an\nL.C.M.] include all those which are used in the computation of a\nnumber. (Turing 1936 [2004: 60])\n\n\nIn the first of these two formulations, Turing is stating that every\nnumber which is able to be calculated by an effective method (that is,\n\u201call numbers which would naturally be regarded as\ncomputable\u201d) is included among the numbers whose decimal\nrepresentations can be written out progressively by one or another\nTuring machine. In the second, Turing is saying that the operations of\na Turing machine include all those that a human mathematician needs to\nuse when calculating a number by means of an effective method.\n1.4 The meaning of \u201ccomputable\u201d and \u201ccomputation\u201d in Turing\u2019s thesis\n\nTuring introduced his machines with the intention of providing an\nidealized description of a certain human activity, the tedious one of\nnumerical computation. Until the advent of automatic\ncomputing machines, this was the occupation of many thousands of\npeople in business, government, and research establishments. These\nhuman rote-workers were in fact called \u201ccomputers\u201d. Human\ncomputers used effective methods to carry out some aspects of the work\nnowadays done by electronic computers. The Church-Turing thesis is\nabout computation as this term was used in 1936, viz. human\ncomputation (to read more on this, turn to\n Section 7).\n\nFor instance, when Turing says that the operations of an L.C.M.\ninclude all those needed \u201cin the computation of a number\u201d,\nhe means \u201cin the computation of a number by a human\nbeing\u201d, since that is what computation was in those days.\nSimilarly, \u201cnumbers which would naturally be regarded as\ncomputable\u201d are numbers that would be regarded as being\ncomputable by a human computer, a human being who is working solely in\naccordance with an effective method.\n1.5 Church\u2019s thesis\n\nWhere Turing used the term \u201cpurely mechanical\u201d, Church\nused \u201ceffectively calculable\u201d to indicate that there is an\neffective method for obtaining the values of the function; and where\nTuring offered an analysis in terms of computability by an L.C.M.,\nChurch gave two alternative analyses, one in terms of the concept of\nrecursion and the other in terms of\nlambda-definability (\u03bb-definability). He proposed that\nwe\n\n\ndefine the notion \u2026 of an effectively calculable function of\npositive integers by identifying it with the notion of a recursive\nfunction of positive integers (or of a \u03bb-definable function of\npositive integers). (Church 1936a: 356)\n\n\nThe concept of a \u03bb-definable function was due to Church and\nKleene, with contributions also by Rosser (Church 1932, 1933, 1935c,\n1936a; Church & Rosser 1936; Kleene 1934, 1935a,b, 1936a,b; Kleene\n& Rosser 1935; Rosser 1935a,b). A function is said to be\n\u03bb-definable if the values of the function can be obtained by a\ncertain process of repeated substitution. The concept of a recursive\nfunction had emerged over time through the work of, among others,\nGrassmann, Peirce, Dedekind, Peano, Skolem, Hilbert\u2014and his\n\u201cassistants\u201d Ackermann and Bernays\u2014Sudan,\nP\u00e9ter (n\u00e9e Politzer), Herbrand, Kleene, and\npre-eminently G\u00f6del (G\u00f6del 1931, 1934). The class of\n\u03bb-definable functions (of positive integers) and the class of\nrecursive functions (of positive integers) are identical; this was\nproved by Church and Kleene (Church 1936a; Kleene 1936a,b).\n\nWhen Turing learned of Church\u2019s 1936 proposal to identify\neffectiveness with \u03bb-definability (while preparing his own\npaper for publication), he quickly established that the concept of\n\u03bb-definability and his concept of computability are equivalent\n(by proving the \u201ctheorem that all \u2026 \u03bb-definable\nsequences \u2026 are computable\u201d and its converse; Turing 1936\n[2004: 88ff]). Thus, in Church\u2019s proposal, the words\n\u201c\u03bb-definable function of positive integers\u201d (and\nequally the words \u201crecursive function of positive\nintegers\u201d) can be replaced by \u201cfunction of positive\nintegers that is computable by Turing machine\u201d. What Turing\nproved is called an equivalence result. There is further\ndiscussion of equivalence results in\n Section 4.1.\n\nPost referred to Church\u2019s identification of effective\ncalculability with recursiveness and \u03bb-definability as a\n\u201cworking hypothesis\u201d, and he quite properly criticized\nChurch for masking this hypothesis as a definition:\n\n\n[T]o mask this identification under a definition \u2026 blinds us to\nthe need of its continual verification. (Post 1936: 105)\n\n\nThis, then, is the \u201cworking hypothesis\u201d that, in effect,\nChurch proposed:\n\n\nChurch\u2019s thesis:\n\nA function of positive integers is effectively calculable only if\n\u03bb-definable (or, equivalently, recursive).\n\n\nThe reverse implication, that every \u03bb-definable function of\npositive integers is effectively calculable, is commonly referred to\nas the converse of Church\u2019s thesis, although Church\nhimself did not so distinguish (bundling both theses together in his\n\u201cdefinition\u201d).\n\nIf attention is restricted to functions of positive integers,\nChurch\u2019s thesis and Turing\u2019s thesis are\nextensionally equivalent. \u201cExtensionally\nequivalent\u201d means that the two theses are about one and the same\nclass of functions: In view of the previously mentioned results by\nChurch, Kleene and Turing, the class of \u03bb-definable functions\n(of positive integers) is identical to the class of recursive\nfunctions (of positive integers) and to the class of computable\nfunctions (of positive integers). Notice, though, that while the two\ntheses are equivalent in this sense, they nevertheless have distinct\nmeanings and so are two different theses. One\nimportant difference between the two is that Turing\u2019s thesis\nconcerns computing machines, whereas Church\u2019s does\nnot.\n\nConcerning the origin of the terms \u201cChurch\u2019s thesis\u201d\nand \u201cTuring\u2019s thesis\u201d, Kleene seems to have been the\nfirst to use the word \u201cthesis\u201d in this connection: In\n1952, he introduced the name \u201cChurch\u2019s thesis\u201d for\nthe proposition that every effectively calculable function (on the\nnatural numbers) is recursive (Kleene 1952: 300, 301, 317). The term\n\u201cChurch-Turing thesis\u201d also seems to have originated with\nKleene\u2014with a flourish of bias in favor of his mentor\nChurch:\n\n\nSo Turing\u2019s and Church\u2019s theses are equivalent. We shall\nusually refer to them both as Church\u2019s thesis, or in\nconnection with that one of its \u2026 versions which deals with\n\u201cTuring machines\u201d as the Church-Turing thesis.\n(Kleene 1967: 232)\n\n\nSome prefer the name Turing-Church thesis.\n1.6 Comparing the Turing and Church approaches\n\nOne way in which Turing\u2019s and Church\u2019s approaches differed\nwas that Turing\u2019s concerns were rather more general than\nChurch\u2019s, in that (as just mentioned) Church considered only\nfunctions of positive integers, whereas Turing described his work as\nencompassing \u201ccomputable functions of an integral variable or a\nreal or computable variable, computable predicates, and so\nforth\u201d (1936 [2004: 58]). Turing intended to pursue the theory\nof computable functions of a real variable in a subsequent paper, but\nin fact did not do so.\n\nA greater difference lay in the profound significance of\nTuring\u2019s approach for the emerging science of automatic\ncomputation. Church\u2019s approach did not mention computing\nmachinery, whereas Turing\u2019s introduced the \u201cTuring\nmachine\u201d (as Church dubbed it in his 1937a review of\nTuring\u2019s 1936 paper). Turing\u2019s paper also introduced what\nhe called the \u201cuniversal computing machine\u201d. Now known as\nthe universal Turing machine, this is Turing\u2019s all-purpose\ncomputing machine. The universal machine is able to emulate the\nbehavior of any single-purpose Turing machine, i.e., any Turing\nmachine set up to solve one particular problem. The universal machine\ndoes this by means of storing a description of the other machine on\nits tape, in the form of a finite list of instructions (a computer\nprogram, in modern terms). By following suitable instructions, the\nuniversal machine can carry out any and every effective procedure,\nassuming Turing\u2019s thesis is true. The functional parts of the\nabstract universal machine are:\n\nthe memory in which instructions and data are stored, and\nthe instruction-reading-and-obeying control mechanism.\n\n\nIn that respect, the universal Turing machine is a bare-bones logical\nmodel of almost every modern electronic digital computer.\n\nIn his review of Turing\u2019s work, Church noted an advantage of\nTuring\u2019s analysis of effectiveness over his own:\n\n\ncomputability by a Turing machine \u2026 has the advantage of making\nthe identification with effectiveness in the ordinary (not explicitly\ndefined) sense evident immediately. (Church 1937a: 43)\n\n\nHe also said that Turing\u2019s analysis has \u201ca more immediate\nintuitive appeal\u201d than his own (Church 1941: 41).\n\nG\u00f6del found Turing\u2019s analysis superior to Church\u2019s.\nKleene related that G\u00f6del was unpersuaded by Church\u2019s\nthesis until he saw Turing\u2019s formulation:\n\n\nAccording to a November 29, 1935, letter from Church to me, G\u00f6del\n\u201cregarded as thoroughly unsatisfactory\u201d Church\u2019s\nproposal to use \u03bb-definability as a definition of effective\ncalculability. \u2026 It seems that only after Turing\u2019s\nformulation appeared did G\u00f6del accept Church\u2019s thesis.\n(Kleene 1981: 59, 61)\n\n\nG\u00f6del described Turing\u2019s analysis of computability as\n\u201cmost satisfactory\u201d and \u201ccorrect \u2026 beyond any\ndoubt\u201d (G\u00f6del 1951: 304 and 193?: 168). He remarked:\n\n\nWe had not perceived the sharp concept of mechanical procedures\nsharply before Turing, who brought us to the right perspective.\n(Quoted in Wang 1974: 85)\n\n\nG\u00f6del also said:\n\n\nThe resulting definition of the concept of mechanical by the sharp\nconcept of \u201cperformable by a Turing machine\u201d is both\ncorrect and unique. (Quoted in Wang 1996: 203)\n\n\nAnd:\n\n\nMoreover it is absolutely impossible that anybody who understands the\nquestion and knows Turing\u2019s definition should decide for a\ndifferent concept. (Ibid.)\n\n\nEven the modest young Turing agreed that his analysis was\n\u201cpossibly more convincing\u201d than Church\u2019s (Turing\n1937: 153).\n1.7 The Entscheidungsproblem\n\nBoth Turing and Church introduced their respective versions of the\nChurch-Turing thesis in the course of attacking the so-called\nEntscheidungsproblem. As already mentioned, the title of\nTuring\u2019s 1936 paper included \u201cwith an Application to the\nEntscheidungsproblem\u201d, and Church went with simply \u201cA Note\non the Entscheidungsproblem\u201d for the title of his 1936 paper.\nSo\u2014what is the Entscheidungsproblem?\n\nThe German word \u201cEntscheidungsproblem\u201d means decision\nproblem. The Entscheidungsproblem for a logical calculus is the\nproblem of devising an effective method for deciding whether or not a\ngiven formula\u2014any formula\u2014is provable in the calculus.\n(Here \u201cprovable\u201d means that the formula can be derived,\nstep by logical step, from the axioms and definitions of the calculus,\nusing only the rules of the calculus.) For example, if such a method\nfor the classical propositional calculus is used to test the formula\n\\(A \\rightarrow A\\) (\\(A\\) implies \\(A\\)), the output will be\n\u201cYes, provable\u201d, and if the contradiction \\(A \\amp \\neg\nA\\) is tested, the output will be \u201cNot provable\u201d. Such a\nmethod is called a decision method or decision\nprocedure.\n\nChurch and Turing took on the Entscheidungsproblem for a fundamentally\nimportant logical system called the (first-order) functional\ncalculus. The functional calculus consists of standard\npropositional logic plus standard quantifier logic. The functional\ncalculus is also known as the classical predicate calculus\nand as quantification theory (and Church sometimes used the\nGerman term engere Funktionenkalk\u00fcl). They each arrived\nat the same negative result, arguing on the basis of the Church-Turing\nthesis that, in the case of the functional calculus, the\nEntscheidungsproblem is unsolvable\u2014there can be\nno decision method for the calculus. The two discovered this\nresult independently of one another, both publishing it in 1936\n(Church a few months earlier than Turing). Church\u2019s proof, which\nmade no reference to computing machines, is for that reason sometimes\nconsidered to be of less interest than Turing\u2019s.\n\nThe Entscheidungsproblem had attracted some of the finest minds of\nearly twentieth-century mathematical logic, including G\u00f6del,\nHerbrand, Post, Ramsey, and Hilbert and his assistants Ackermann,\nBehmann, Bernays, and Sch\u00f6nfinkel. Herbrand described the\nEntscheidungsproblem as \u201cthe most general problem of\nmathematics\u201d (Herbrand 1931b: 187). But it was Hilbert who had\nbrought the Entscheidungsproblem for the functional calculus into the\nlimelight. In 1928, he and Ackermann called it \u201cdas Hauptproblem\nder mathematischen Logik\u201d\u2014\u201cthe main problem of\nmathematical logic\u201d (Hilbert & Ackermann 1928: 77).\n\nHilbert knew that the propositional calculus (which is a fragment of\nthe functional calculus) is decidable, having found with Bernays a\ndecision procedure based on what are called \u201cnormal forms\u201d\n(Bernays 1918; Behmann 1922; Hilbert & Ackermann 1928: 9\u201312;\nZach 1999), and he also knew from the work of L\u00f6wenheim that the\nmonadic functional calculus is decidable (L\u00f6wenheim\n1915). (The monadic functional calculus is the fragment involving only\none-place predicates\u2014i.e., no relations, such as \u201c=\u201d\nand \u201c<\u201d, and no higher-place predicates, such as\n\u201c\u2013 is between \u2013 and \u2013\u201d.) He thought\nthere must be a decision procedure for the entire functional calculus.\nThe challenge, the main problem of mathematical logic, was to find it.\nAs he and Ackermann wrote in 1928, in their famous book\nGrundz\u00fcge der Theoretischen Logik (Principles of\nMathematical Logic):\n\n\n[I]t is to be expected that a systematic, so to speak computational\ntreatment of the logical formulae is possible \u2026. (Hilbert &\nAckermann 1928: 72)\n\n\nHowever, their expectations were frustrated by the Church-Turing\nresult of 1936. Hilbert and Ackermann excised the quoted statement\nfrom a revised edition of their book. Published in 1938, the new\nedition was considerably watered down to take account of\nTuring\u2019s and Church\u2019s monumental result.\n\nHilbert knew, of course, that some mathematical problems have\nno solution, for example the problem of finding a finite\nbinary numeral \\(n\\) (or unary numeral, in Hilbert\u2019s version of\nthe problem) such that \\(n^2 = 2\\) (Hilbert 1926: 179). He was\nnevertheless very fond of saying that every mathematical problem\ncan be solved, and by this he meant that\n\n\nevery definite mathematical problem must necessarily be susceptible of\nan exact settlement, either in the form of an actual answer to the\nquestion asked, or by the proof of the impossibility of its solution\nand therewith the necessary failure of all attempts. (Hilbert 1900:\n261 [trans. 1902: 444])\n\n\nIt seems never to have crossed his mind that his \u201cHauptproblem\nder mathematischen Logik\u201d falls into the second of these two\ncategories\u2014until, that is, Church and Turing unexpectedly proved\n\u201cthe impossibility of its solution\u201d.\n\nFor more detail on the Entscheidungsproblem, and an outline of the\nstunning result that Church and Turing independently established in\n1936, see the\n Supplement on the Rise and Fall of the Entscheidungsproblem.\n2. Backstory: Emergence of the concepts of effective method and decision method\n\nEffective methods are the subject matter of the Church-Turing thesis.\nHow did this subject matter evolve and how was it elaborated prior to\nChurch and Turing? This section looks back to an earlier era, after\nwhich\n Section 3\n turns to modern developments.\n2.1 From simple rules-of-thumb to Siri and beyond\n\nEffective methods are extremely helpful in carrying out many practical\ntasks, and their use stretches back into the mists of antiquity,\nalthough it was not until the twentieth century that interest began to\nbuild in analysing their nature. Perhaps the earliest effective\nmethods to be utilized were rules-of-thumb (as Turing called them) for\narithmetical calculations of various sorts, but whatever their humble\nbeginnings, the scope of effective methods has widened dramatically\nover the centuries. In the Middle Ages, the Catalan philosopher\n Llull\n envisaged an effective method for posing and answering questions\nabout the attributes of God, the nature of the soul, the nature of\ngoodness, and other fundamental issues. Three hundred years later, in\nthe seventeenth century, Hobbes was asserting that human reasoning\nprocesses amount to nothing more than (essentially arithmetical)\neffective procedures:\n\n\nBy reasoning I understand computation. (Hobbes 1655 [1839]: ch. 1\nsect. 2)\n\n\nNowadays, effective methods\u2014algorithms\u2014are the basis for\nevery job that electronic computers do. According to some computer\nscientists, advances in the design of effective methods will soon\nusher in human-level artificial intelligence, followed by superhuman\nintelligence. Already, virtual assistants such as Siri, Cortana and\nChatGPT implement effective methods that produce useful answers to a\nwide range of questions.\n\nIn its most sublimely general form, the Entscheidungsproblem is the\nproblem of designing an effective general-purpose question-answerer,\nan effective method that is capable of giving the correct answer, yes\nor no, to any meaningful scientific question, and perhaps\neven ethical and metaphysical questions too. The idea of such a method\nis almost jaw-dropping. Llull seems to have glimpsed the concept of a\ngeneral question-answering method, writing in approximately 1300 of a\ngeneral art (\u201cars\u201d), or technique, \u201cby\nmeans of which one may know in regard to all natural things\u201d\n(Lo Desconhort, line 8, in Llull 1986: 99). He dreamed of an\nars generalis (general technique) that could mechanize the\n\u201cone general science, with its own general principles in which\nthe principles of other sciences would be implicit\u201d (Preface to\nArs Generalis Ultima, in Llull 1645 [1970: 1]). Llull used\ncircumscribed fields of knowledge to illustrate his idea of a\nmechanical question-answerer, designing small domain-specific machines\nconsisting of superimposed discs; possibly his machines took the form\nof a parchment volvelle, a relative of the metal\nastrolabe.\n\nIn early modern times, Llull\u2019s idea of the ars\ngeneralis received a sympathetic discussion in Leibniz\u2019s\nwritings.\n2.2 Leibniz\n\nLeibniz designed a calculating machine that he said would add,\nsubtract, multiply and divide, and in 1673 he demonstrated a version\nof his machine in London and Paris (Leibniz 1710). His interest in\nmechanical methods led him to an even grander conception, inspired in\npart by Llull\u2019s unclear but provocative speculations about a\ngeneral-purpose question-answering mechanism. Leibniz said that Llull\n\u201chad scraped the skin off\u201d this idea, but \u201cdid not\nsee its inmost parts\u201d (Leibniz 1671 [1926: 160]). Leibniz\nenvisaged a method, just as mechanical as multiplication or division,\nwhereby\n\n\nwhen there are disputes among persons, we can simply say: Let us\ncalculate, without further ado, in order to see who is right. (Leibniz\n1685 [1951: 51])\n\n\nThe basis of the method, Leibniz explained, was that \u201cwe can\nrepresent all sorts of truths and consequences by Numbers\u201d and\n\u201cthen all the results of reasoning can be determined in\nnumerical fashion\u201d (Leibniz 1685 [1951: 50\u201351]). He hoped\nthe method would apply to \u201cMetaphysics, Physics, and\nEthics\u201d just as well as it did to mathematics (1685 [1951: 50]).\nThis conjectured method could, he thought, be implemented by what he\ncalled a machina combinatoria, a combinatorial machine\n(Leibniz n.d.1; Leibniz 1666). However, there was never much\nprogress towards his dreamed-of method, and in a letter two years\nbefore his death he wrote:\n\n\n[I]f I were younger or had talented young men to help me, I should\nstill hope to create a kind of universal symbolistic\n[sp\u00e9cieuse g\u00e9n\u00e9rale] in which all truths\nof reason would be reduced to a kind of calculus. (Leibniz 1714 [1969:\n654])\n\n\nIn his theorizing Leibniz described what he called an ars\ninveniendi, a discovering or devising method. The function of an\nars inveniendi is to produce hitherto unknown truths of\nscience (Leibniz 1679 [1903: 37]; Leibniz n.d.2 [1890: 180];\nHermes 1969). A mechanical ars inveniendi would generate true\nstatements, and with time the awaited answer to a scientific question\nwould arrive (Leibniz 1671 [1926: 160]). Blessed with a universal\n(i.e., complete, and consistent) ars inveniendi, the user\ncould input any meaningful and unambiguous (scientific or\nmathematical) statement \\(S\\), and the machine would eventually\nrespond (correctly) with either \u201c\\(S\\) is true\u201d or\n\u201c\\(S\\) is false\u201d. As the groundbreaking developments in\n1936 by Church and Turing made clear, if the ars inveniendi\nis supposed to work by means of an effective method, then there can be\nno universal ars inveniendi\u2014and not even an ars\ninveniendi that is restricted to all mathematical statements,\nsince these include statements of the form \u201c\\(p\\) is\nprovable\u201d, or even to all purely logical statements.\n2.3 Logic machines\n\nThe modern concept of a decision method for a logical calculus did not\ndevelop until the twentieth century. But earlier logicians, including\nLeibniz, certainly had the concept of a method that is\nmechanical in the literal sense that it could be carried out\nby a machine constructed from mechanical components of the sort\nfamiliar to them\u2014discs, pins, rods, springs, levers, pulleys,\nrotating shafts, gear wheels, weights, dials, mechanical switches,\nslotted plates, and so forth.\n\nIn 1869, Jevons designed a pioneering machine known as the\n\u201clogic piano\u201d (Jevons 1870; Barrett & Connell 2005).\nThe name arose because of the machine\u2019s piano-like keyboard for\ninputting logical formulae. The formulae were drawn from a syllogistic\ncalculus involving four positive terms, such as \u201ciron\u201d and\n\u201cmetal\u201d (Jevons 1870). Turing\u2019s colleague Mays, who\nhimself designed an influential electrical logic machine (Mays &\nPrinz 1950), described the logic piano as \u201cthe first working\nmachine to perform logical inference without the intervention of human\nagency\u201d (Mays & Henry 1951: 4).\n\nThe logic piano implemented a method for determining which\ncombinations drawn from eight terms\u2014the four positive terms and\nthe corresponding four negated terms (\u201cnon-metal\u201d,\netc.)\u2014were consistent with the inputted formulae and which not\n(although in fact not all consistent combinations were taken into\naccount). The machine displayed the consistent formulae by means of\nlettered strips of wood, with upper-case letters representing positive\nterms and lower-case negative. Jevons exhibited the logic piano in\nManchester at Owens College, now Manchester University, where he was\nprofessor of logic (Mays & Henry 1953: 503). His piano, Jevons\nclaimed with considerable exaggeration, made it \u201cevident that\nmechanism is capable of replacing for the most part the action of\nthought required in the performance of logical deduction\u201d\n(Jevons 1870: 517).\n\nA decade later, Venn published the technique we now call Venn\ndiagrams (Venn 1880). This technique satisfies the four criteria\nset out for an effective method in\n Section 1.\n The user first diagrams the premisses of a syllogism and then, as\nQuine put it, \u201cwe inspect the diagram to see whether the content\nof the conclusion has automatically appeared in the diagram as a\nresult\u201d (Quine 1950: 74). Not all formulae of the functional\ncalculus are Venn-diagrammable, and Venn\u2019s original method is\nlimited to testing syllogisms. In the twentieth century, Massey showed\nthat Venn\u2019s method can be stretched to give a decision procedure\nfor the monadic functional calculus (Massey 1966).\n\nVenn, like Jevons, was well aware of the concept of a literally\nmechanical method. He pointed out that diagrammatic methods such as\nhis \u201creadily lend themselves to mechanical performance\u201d\n(Venn 1880: 15). Venn went on to describe what he called a\n\u201clogical-diagram machine\u201d. This simple machine displayed\nwooden segments corresponding to the component areas of a Venn\ndiagram; each wooden segment represented one of four terms. A\nfinger-operated release mechanism allowed any segment selected by the\nuser to drop downwards. This represented \u201cthe destruction of any\nclass\u201d (1880: 18). Venn reported that he constructed this\nmachine, which measured \u201cbetween five and six inches square and\nthree inches deep\u201d (1880: 17). When Venn published his\ndescription of it, Jevons quickly wrote to him saying that the\nlogical-diagram machine \u201cis exceedingly ingenious & seems to\nrepresent the relations of four terms very well\u201d (Jevons 1880).\nVenn himself however was less enthusiastic, saying in his article\n\u201cI have no high estimate myself of the interest or importance of\nwhat are sometimes called logical machines\u201d (1880: 15). Baldwin,\ncommenting on Venn\u2019s machine in 1902, complained that it was\n\u201cmerely a more cumbersome diagram\u201d (1902: 29). This is\nquite true\u2014it would be at least as easy to draw the Venn diagram\non paper as to set it up on the machine. But Venn\u2019s article made\nit very plain that the logical-diagram machine was intended to be a\nhilarious send-up of Jevons\u2019 complicated logic piano.\n\nAt around the same time, Marquand\u2014a student of\nPeirce\u2019s\u2014designed a logic machine which a Princeton\ncolleague then built (out of wood salvaged from\n\u201cPrinceton\u2019s oldest homestead\u201d, Marquand related in\nhis 1885). Marquand knew of Jevons\u2019 and Venn\u2019s designs,\nand said he had \u201cfollowed Jevons\u201d in certain respects, and\nthat his own machine was \u201csomewhat similar\u201d to\nJevons\u2019 (Marquand 1881, 1883: 16, 1885: 303). Peirce, with\ncustomary bluntness, called Marquand\u2019s machine \u201ca vastly\nmore clear-headed contrivance than that of Jevons\u201d (Peirce 1887:\n166). Again limited to a syllogistic calculus involving only four\npositive terms, Marquand\u2019s device, like Jevons\u2019, displayed\nterm-combinations consistent with the inputted formulae. A lettered\nplate with sixteen mechanical dials was used to display the\ncombinations.\n2.4 Peirce\n\nIn 1886, in a letter to Marquand, Peirce famously suggested that\nMarquand consider an electrical version of his machine, and he\nsketched simple switching circuits implementing (what we would now\ncall) an AND-gate and an OR-gate\u2014possibly the earliest proposal\nfor electrical computation (Peirce 1886). Far-sightedly, Peirce wrote\nin the letter that, with the use of electricity, \u201cit is by no\nmeans hopeless to expect to make a machine for really very difficult\nmathematical problems\u201d. Much later, Church discovered a detailed\ndiagram of an electrical relay-based form of Marquand\u2019s machine\namong Marquand\u2019s papers at Princeton (reproduced in Ketner &\nStewart 1984: 200). Whoever worked out the design in this\ndiagram\u2014Marquand, Peirce, or an unknown third person\u2014has a\nclaim to be an important early pioneer of electromechanical\ncomputing.\n\nPeirce, with his interest in logic machines, seems to have been the\nfirst to consider the decision problem in roughly the form in which\nTuring and Church tackled it. From about 1896, he developed the\ndiagrammatic proof procedures he called \u201cexistential\ngraphs\u201d. These were much more advanced than Venn\u2019s\ndiagrams. Peirce\u2019s system of alpha-graphs is a\ndiagrammatic formulation of the propositional calculus, and his system\nof beta-graphs is a version of the first-order functional\ncalculus (Peirce 1903a; Roberts 1973). Roberts (1973) proved that the\nbeta-graphs system contains the axioms and rules of Quine\u2019s 1951\nformulation of the first-order functional calculus, in which only\nclosed formulae are asserted (Quine 1951: 88).\n\nPeirce anticipated the concept of a decision method in his extensive\nnotes for a series of lectures he delivered in Boston in 1903. There\nhe developed a method (Peirce 1903b,c) that, if applied to any given\nformula of the propositional calculus, would, he said,\n\u201cdetermine\u201d (or \u201cpositively ascertain\u201d)\nwhether the alpha-graphs system demonstrates that the formula is\nsatisfiable (is \u201calpha-possible\u201d, in Peirce\u2019s\nterminology), or whether, on the other hand, the system demonstrates\nthat it is unsatisfiable (\u201calpha-impossible\u201d). (See the\n Supplement\n for an explanation of \u201csatisfiable\u201d.) Peirce said his\nmethod \u201cis such a comprehensive routine that it would be easy to\ndefine a machine that would perform it\u201d\u2014although the\n\u201ccomplexity of the case\u201d, he continued, \u201crenders any\nsuch procedure quite impracticable\u201d (Peirce 1903c). Perhaps he\nwould not have been completely surprised to learn that within five or\nsix decades, and with the use of electricity, it became far from\nimpractical to run a decision method for the propositional calculus on\na machine.\n\nPeirce also searched\u2014in vain, of course\u2014for a\ncorresponding method for his beta-graphs system (Peirce 1903b,c,d;\nRoberts 1997). Like Hilbert after him, he seems to have entertained no\ndoubt that full first-order predicate logic is amenable to a\nmachine-like method.\n\nPeirce had prescient ideas about the use of machines in mathematics\nmore generally. Around the turn of the century, he wrote:\n\n\n[T]he whole science of higher arithmetic, with its hundreds of\nmarvellous theorems, has in fact been deduced from six primary\nassumptions about number. The logical machines hitherto constructed\nare inadequate to the performance of mathematical deductions. There\nis, however, a modern Exact Logic which, although yet in its infancy,\nis already far enough advanced to render it a mere question of expense\nto construct a machine that would grind out all the known theorems of\narithmetic and advance that science still more rapidly than it is now\nprogressing. (Peirce n.d., quoted in Stjernfelt 2022)\n\n\nHere Peirce seems to be asserting\u2014quite correctly\u2014that a\nmachine can be devised to grind out all the theorems of\nDedekind\u2019s (1888) axiomatisation of arithmetic (which consisted\nof six \u201cprimary assumptions\u201d in the form of of four axioms\nand two definitions). This statement of Peirce\u2019s, made almost\nfour decades before Turing introduced Turing machines into\nmathematics, was well ahead of its time.\n\nAs to whether all mathematical reasoning can be performed by\na machine, as Leibniz seems to have thought, Peirce was fiercely\nskeptical. He formulated the hypothesis that, in the future,\nmathematical reasoning\n\n\nmight conceivably be left to a machine\u2014some Babbage\u2019s\nanalytical engine or some logical machine. (Peirce 1908: 434)\n\n\nHowever, he placed this hypothesis alongside others he deemed\n\u201clogical heresies\u201d, calling it \u201cmalignant\u201d\n(ibid.). His skeptical attitude, if perhaps not his reasons for it,\nwas arguably vindicated by Turing\u2019s subsequent results (Turing\n1936, 1939). But before that, a quite different view of matters took\nroot among mathematicians, under the influence of Hilbert and his\ngroup at G\u00f6ttingen.\n2.5 Hilbert and the G\u00f6ttingen group\n\nIt was largely Hilbert who first drew attention to the need for a\nprecise analysis of the idea of an effective decision method. In a\nlecture he gave in Zurich in 1917, to the Swiss Mathematical Society,\nhe emphasized the need to study the concept of \u201cdecidability by\na finite number of operations\u201d,\nsaying\u2014accurately\u2014that this would be \u201can important\nnew field of research to develop\u201d (Hilbert 1917: 415). The\nlecture considered a number of what he called \u201cmost challenging\nepistemological problems of a specifically mathematical\ncharacter\u201d (1917: 412). Pre-eminent among these was the\n\u201cproblem of the decidability [Entscheidbarkeit] of a\nmathematical question\u201d because the problem \u201ctouches\nprofoundly upon the nature of mathematical thinking\u201d (1917:\n413).\n\nHilbert and his G\u00f6ttingen group looked back on Leibniz as the\noriginator of their approach to logic and the foundations of\nmathematics. Behmann, a prominent member of the group, said that\nLeibniz had anticipated modern symbolic logic (Behmann 1921:\n4\u20135). Leibniz\u2019s hypothesized \u201cuniversal\ncharacteristic\u201d or universal symbolistic was a universal\nsymbolic language, in conception akin to languages used in\nmathematical logic and computer science today. Hilbert and Ackermann\nacknowledged Leibniz\u2019s influence on the first page of their\nGrundz\u00fcge der Theoretischen Logik, saying \u201cThe\nidea of a mathematical logic was first put into a clear form by\nLeibniz\u201d (Hilbert & Ackermann 1928: 1). Cassirer said that\nin Hilbert\u2019s work \u201cthe fundamental idea of Leibniz\u2019s\n\u2018universal characteristic\u2019 is taken up anew and attains a\nsuccinct and precise expression\u201d (Cassirer 1929: 440). It was in\nthe writings of the G\u00f6ttingen group that Leibniz\u2019s idea of\nan effective method for answering any specified mathematical or\nscientific question found its fullest development (see further the\n Supplement).\n\nHilbert\u2019s earliest publication to mention what we would now call\na decision problem is his 1899 book Grundlagen der Geometrie\n[Foundations of Geometry]. He said that in the course of his\ninvestigations of Euclidean geometry he was\n\n\nguided by the principle of discussing each given question in such a\nway that we examined both whether it can or cannot be answered by\nmeans of prescribed steps using certain limited resources. (Hilbert\n1899: 89)\n\n\nConcerning a specific example, he wrote:\n\n\nSuppose a geometrical construction problem that can be carried out\nwith a compass is presented; we will attempt to lay down a criterion\nthat enables us to determine [beurteilen] immediately, from\nthe analytical nature of the problem and its solutions, whether the\nconstruction can also be carried out using only a ruler and a\nsegment-transferrer. (Hilbert 1899: 85\u201386)\n\n\nHe described what would now be called an effective method for\ndetermining this, and his term \u201cbeurteilen\u201d\ncould, with a trace of anachronism, be translated as\n\u201cdecide\u201d.\n\nHilbert expressed the concept of a decision method more clearly the\nfollowing year, in his famous turn-of-the-century speech in Paris, to\nthe International Congress of Mathematicians. He presented\ntwenty-three unsolved problems, \u201cfrom the discussion of which an\nadvancement of science may be expected\u201d. The tenth on his list\n(now known universally as Hilbert\u2019s Tenth Problem) was:\n\n\nGiven a diophantine equation with any number of unknown quantities and\nwith rational integral numerical coefficients: To devise a process\naccording to which it can be determined by a finite number of\noperations whether the equation is solvable in rational integers.\n(Hilbert 1900: 276 [trans. 1902: 458])\n\n\nThe Entscheidungsproblem was coming into even clearer focus by the\ntime Hilbert\u2019s student Behmann published a landmark article in\n1922, \u201cContributions to the Algebra of Logic, in particular to\nthe Entscheidungsproblem\u201d. It was probably Behmann who coined\nthe term \u201cEntscheidungsproblem\u201d (Mancosu & Zach 2015:\n166\u2013167). In a 1921 lecture to the G\u00f6ttingen group, Behmann\nsaid:\n\n\nIf a logical or mathematical statement is given, the required\nprocedure should give complete instructions for determining whether\nthe statement is correct or false by a deterministic calculation after\nfinitely many steps. The problem thus formulated I want to call the\nallgemeine Entscheidungsproblem [general decision problem].\n(Behmann 1921: 6 [trans. 2015: 176])\n\n\nPeirce, as we saw, spoke of a procedure\u2019s forming \u201csuch a\ncomprehensive routine that it would be easy to define a machine that\nwould perform it\u201d. His work was well-known in G\u00f6ttingen:\nHilbert and Ackermann said that Peirce \u201cespecially\u201d, and\nalso Jevons, had \u201cenriched the young science\u201d of\nmathematical logic (1928: 1). Like Peirce, Behmann used the concept of\na machine to clarify the nature of the Entscheidungsproblem. \u201cIt\nis essential to the character\u201d of the problem, Behmann said,\nthat \u201conly entirely mechanical calculation according to given\ninstructions\u201d is involved. The decision whether the statement is\ntrue or false becomes \u201ca mere exercise in computation\u201d;\nthere is \u201can elimination of thinking in favor of mechanical\ncalculation\u201d. Behmann continued:\n\n\nOne might, if one wanted to, speak of mechanical or machine-like\nthinking. (Perhaps one can one day even let it be carried out by a\nmachine.) (Behmann 1921: 6\u20137 [trans. 2015: 176])\n\n\nLeibniz\u2019s Llullian idea of a machine that could calculate the\ntruth was suddenly at the forefront of early twentieth century\nmathematics.\n2.6 Newman and the Cambridge mathematicians\n\nThe connection Behmann emphasized between the decision problem and a\nmachine that carries out an \u201cexercise in computation\u201d\nwould soon prove crucial in Turing\u2019s hands. What seems to have\nbeen Turing\u2019s first significant brush with the\nEntscheidungsproblem was in 1935, in a Cambridge lecture given by\nNewman. Newman, a mathematical logician and topologist, was very\nfamiliar with the ideas emanating from G\u00f6ttingen. As early as\n1923 he gave a left-field discussion of some of Hilbert\u2019s ideas,\nhimself proposing an approach to the foundations of mathematics that,\nwhile radical and new, nevertheless had a strongly Hilbertian flavor\n(Newman 1923). In 1928, Newman attended an international congress of\nmathematicians in the Italian city of Bologna, where Hilbert talked\nabout the Entscheidungsproblem while lecturing on his proof theory\n(Hilbert 1930a; Zanichelli 1929). Hilbert\u2019s leading works in\nmathematical logic\u2014Hilbert and Ackermann (1928) and Hilbert and\nBernays (1934)\u2014were both recommended reading for Newman\u2019s\nown lectures on the Foundations of Mathematics (Smithies 1934;\nCopeland and Fan 2022).\n\nSpeaking in a tape-recorded interview about Turing\u2019s engagement\nwith the Entscheidungsproblem, Newman said \u201cI believe it all\nstarted because he attended a lecture of mine on foundations of\nmathematics and logic\u201d:\n\n\nI think I said in the course of this lecture that what is meant by\nsaying that [a] process is constructive is that it\u2019s a purely\nmechanical machine\u2014and I may even have said, a machine can do\nit.\n\nAnd this of course led [Turing] to the next challenge, what sort of\nmachine, and this inspired him to try and say what one would mean by a\nperfectly general computing machine. (Newman c1977)\n\n\nSadly, there seems to be no record of what else Newman said at that\ncrucial juncture in his lecture. However, his 1923 paper \u201cThe\nFoundations of Mathematics from the Standpoint of Physics\u201d does\nrecord some of his related thinking (Copeland & Fan 2023). There\nhe introduced the term \u201cprocess\u201d (which he also used in\nthe above quotation), saying \u201cAll logic and mathematics consist\nof certain processes\u201d (1923: 12). He emphasized the\nrequirement that a process should terminate with the required\nresult (such as a theorem or number); and he gave a formal treatment\nof processes:\n\n\nThe properties of processes are formally developed from a set of\naxioms, and a general method reached for attacking the problem of\nwhether a given process terminates or not. (Newman 1923: 12)\n\n\nNewman did not mention the Entscheidungsproblem in his 1923\npaper\u2014let alone moot its unsolvability (there is no evidence\nthat, pre-Turing, he thought the problem unsolvable)\u2014yet, with\nhindsight, he certainly laid some suggestive groundwork for an attack\non the problem. He wrote:\n\n\nThe information of the first importance to be obtained about a process\nor segment of a process is whether it is possible to perform\nit\u2026. The statement that [process] \\(\\Phi|\\,|\\alpha\\rho\\) is\npossible means that this process terminates: comes to a halt\n\u2026 (Newman 1923: 39)\n\n\nNewman even proposed an \u201capparatus\u201d, a \u201csymbolic\nmachine\u201d, for producing numbers by means of carrying out\nprocesses of the sort he analysed, and he gave a profound discussion\nof real numbers from the standpoint of this proposal (1923:\n130ff).\n\nNor was Newman the only person at Cambridge with an interest in the\nEntscheidungsproblem. The Entscheidungsproblem was \u201cin the\nair\u201d there during the decade leading up to Turing\u2019s\nassault on it. The Sadleirian Professor of Mathematics at Cambridge,\nHardy, took an interest in the problem, inspired by von\nNeumann\u2019s magisterial exposition and critique of Hilbert\u2019s\nideas (von Neumann 1927). Ackermann himself had visited Cambridge from\nG\u00f6ttingen for the first half of 1925 (Zach 2003: 226). Another\nvisitor, Langford\u2014who worked in Cambridge on a fellowship from\nHarvard for the academic year 1924\u201325 (Frankena & Burks\n1964)\u2014presented a series of results to the American Mathematical\nSociety not long after his return to Harvard, in effect solving a\nnumber of special cases of the Entscheidungsproblem (Langford 1926a,\n1927).\n\nThe Cambridge logician Ramsey, like Turing a Fellow of King\u2019s\nCollege, also worked on the Entscheidungsproblem in the latter part of\nthe 1920s. He died in 1930 (the year before Turing arrived in\nCambridge as an undergraduate), but not before completing a key paper\nsolving the Entscheidungsproblem in special cases (Ramsey 1930). His\nwork, too, was prominent in the recommended reading for Newman\u2019s\nlecture course. Braithwaite, another Fellow of King\u2019s College\n(who had a hand in Turing\u2019s election to a junior research\nfellowship at King\u2019s in 1935), was keenly interested in\nRamsey\u2019s work on the Entscheidungsproblem (Copeland & Fan\n2022). Also in 1935, von Neumann visited Cambridge from Princeton, for\nthe term following Newman\u2019s lecture course (Copeland & Fan\n2023). Von Neumann, a member of the G\u00f6ttingen group during the\nmid-1920s, had called the Entscheidungsproblem \u201cprofound and\ncomplex\u201d, and he voiced doubts that it was solvable (von Neumann\n1927: 11; 1931: 120).\n\nHe was not alone. Hardy gave this statement of the\nEntscheidungsproblem, in the course of a famous discussion of\nHilbert\u2019s ideas:\n\n\nSuppose, for example, that we could find a finite system of rules\nwhich enabled us to say whether any given formula was demonstrable or\nnot. (Hardy 1929: 16)\n\n\nHardy foresaw what Turing, and Church, would soon prove, telling his\naudience that such a system of rules \u201cis not to be\nexpected\u201d.\n\nWhat Turing showed is that there will never be, and can never be, a\ncomputing machine satisfying the following specification: When the\nuser types in a formula\u2014any formula\u2014of the functional\ncalculus, the machine carries out a finite number of steps and then\noutputs the correct answer, either \u201cThis formula is provable in\nthe functional calculus\u201d or \u201cThis formula is not provable\nin the functional calculus\u201d, as the case may be. Given,\ntherefore, Turing\u2019s thesis that if an effective method\nexists then it can be carried out by one of his machines, it\nfollows that there is no effective method for deciding the full\nfirst-order functional calculus.\n3. Other Approaches to Computability\n\nTuring and Church were certainly not the only people to tackle the\nproblem of analyzing the concept of effectiveness. This section\nsurveys some other important proposals made during the twentieth and\ntwenty-first centuries.\n3.1 G\u00f6del\n\nG\u00f6del was led to the problem of analyzing effectiveness by his\nsearch for a means to generalize his 1931 incompleteness\nresults (which in their original form applied specifically to the\nformal system set out by Whitehead and Russell in their Principia\nMathematica). In 1934, he considered an analysis in terms of his\ngeneralized concept of recursion\u2014about a year before Church\nfirst publicly announced his thesis that \u201cthe notion of an\neffectively calculable function of positive integers should be\nidentified with that of a recursive function\u201d (Church 1935a;\nG\u00f6del 1934, fn. 3; Davis 1982).\n\nBut G\u00f6del was doubtful: \u201cI was, at the time \u2026 not at\nall convinced that my concept of recursion comprises all possible\nrecursions\u201d (G\u00f6del 1965b). It was Turing\u2019s analysis,\nG\u00f6del emphasized, that finally enabled him to generalize his\nincompleteness theorems:\n\n\ndue to A. M. Turing\u2019s work, a precise and unquestionably\nadequate definition of the general concept of formal system can now be\ngiven. (G\u00f6del 1965a: 71)\n\n\nHe explained:\n\n\nTuring\u2019s work gives an analysis of the concept of\n\u201cmechanical procedure\u201d (alias \u201calgorithm\u201d or\n\u201ccomputation procedure\u201d or \u201cfinite combinatorial\nprocedure\u201d). This concept is shown to be equivalent with that of\na \u201cTuring machine\u201d. A formal system can simply be defined\nto be any mechanical procedure for producing formulas, called provable\nformulas. (G\u00f6del 1965a: 71\u201372)\n\n\nArmed with this definition, incompleteness can, G\u00f6del said,\n\u201cbe proved rigorously for every consistent formal\nsystem containing a certain amount of finitary number theory\u201d\n(1965a: 71).\n3.2 Post\n\nBy 1936, Post had arrived independently at an analysis of\neffectiveness that was substantially the same as Turing\u2019s (Post\n1936; Davis & Sieg 2015). Post\u2019s idealized human\n\u201cworker\u201d\u2014or \u201cproblem\nsolver\u201d\u2014operated in a \u201csymbol space\u201d\nconsisting of \u201ca two way infinite sequence of spaces or\nboxes\u201d. A box admitted\n\n\nof but two possible conditions, i.e., being empty or unmarked, and\nhaving a single mark in it, say a vertical stroke. (Post 1936:\n103)\n\n\nThe problem solver worked in accordance with \u201ca fixed\nunalterable set of directions\u201d and could perform a small number\nof \u201cprimitive acts\u201d (Post 1936: 103), namely:\n\ndetermine whether the box that is presently occupied is marked or\nnot;\nerase any mark in the box that is presently occupied;\nmark the box that is presently occupied if it is unmarked;\nmove to the box to the right of the present position; and\nmove to the box to the left of the present position.\n\n\nPost\u2019s paper was submitted for publication in October 1936, some\nfive months after Turing\u2019s. It contained no analog of\nTuring\u2019s universal computing machine, and nor did it anticipate\nChurch\u2019s and Turing\u2019s result that the Entscheidungsproblem\nis unsolvable. Curiously, though, Post had achieved far more than he\nlet on in his 1936 paper. In an article subtitled \u201cAccount of an\nAnticipation\u201d, published in 1965 but written in about 1941, he\nexplained that during the early 1920s he had devised a system\u2014he\ncalled it the \u201ccomplete normal system\u201d, because \u201cin\na way, it contains all normal systems\u201d\u2014and this, he said,\n\u201ccorrespond[ed]\u201d to Turing\u2019s universal machine (Post\n1965: 412). Furthermore, he argued during the same period that the\ndecision problem is unsolvable in the case of his \u201cnormal\nsystems\u201d (1965: 405ff). But it seems he did not extend this\nargument to anticipate the Church-Turing result that the decision\nproblem for the predicate calculus is unsolvable (1965: 407).\n\nTuring later generously acknowledged Post\u2019s 1936 paper,\ndescribing Turing machines as \u201cthe logical computing machines\nintroduced by Post and the author\u201d (Turing 1950b: 491).\n3.3 Hilbert and Bernays\n\nIn 1939, in Volume II of their titanic work Grundlagen der\nMathematik (Foundations of Mathematics), Hilbert and Bernays\nproposed a logic-based analysis of effectiveness. According to this\nanalysis, effectively calculable numerical functions are numerical\nfunctions that can be evaluated in what they called a\n\u201cregelrecht\u201d manner (Hilbert & Bernays 1939:\n392\u2013421). In this context, the German word\n\u201cregelrecht\u201d can be translated\n\u201crule-governed\u201d. Hilbert and Bernays offered the concept\nof the rule-governed evaluation of a numerical function as a\n\u201csharpening of the concept of computable\u201d (1939: 417).\n\nThe basic idea is this: To evaluate a numerical function (such as\naddition or multiplication) in a rule-governed way is to calculate the\nvalues of the function, step by logical step, in a suitable deductive\nlogical system. On this approach, effective calculability is analysed\nas calculability in a logic. (Both Church and Turing had\npreviously discussed the approach\u2014see\n Section 4.4.)\n\nThe logical system Hilbert and Bernays used to flesh out this idea was\nan equational calculus, reminiscent of a calculus that\nG\u00f6del had detailed in lectures he gave in Princeton in 1934\n(G\u00f6del 1934). The theorems of an equational calculus are (as the\nname says) equations\u2014for example \\(2^3 = 8\\) and \\(x^2\n+ 1 = x(x + 1) - (x - 1),\\) or in general \\(\\mathrm{f}(m) = n.\\) The\nHilbert-Bernays equational calculus contains no logical symbols (such\nas negation, conjunction, implication, or quantifiers), and every\nformula is simply an equation between terms. Three types of equation\nare permitted as the initial formulae (or premisses) of deductions in\nthe system; and the system is required to satisfy three general\nconditions that Hilbert and Bernays called \u201crecursivity\nconditions\u201d. The rules of the calculus concern substitutions\nwithin equations and are very simple, allowing steps such as:\n\n\\[ a = b, f(a) \\vdash f(b) \\]\n\n\nOn the basis of this calculus (which they called \\(Z^0\\)) Hilbert and\nBernays established an equivalence result: The numerical functions\nthat are capable of rule-governed evaluation coincide with the\n(primitive) recursive functions (1939: 403 and 393n).\n\nIt is perhaps unsurprising that Hilbert, the founder of proof theory,\nultimately selected an analysis of effective calculability as\ncalculability within a logic, even though Church and Turing\nhad already presented their analyses in terms of recursive functions\nand Turing machines respectively. Hilbert and Bernays went on to use\ntheir analysis to give a new proof of the unsolvability of the\nEntscheidungsproblem (Hilbert & Bernays 1939: 416\u2013421). This\nproof quietly marks what must have been an unsettling, even painful,\nshift of perspective for them. The idea of a decision procedure for\nmathematics had until the Church-Turing result been central to their\nthinking, and in Volume 1 of the Grundlagen, published in\n1934, they had assumed the Entscheidungsproblem to be solvable.\n3.4 Modern axiomatic analyses\n\nChurch reported a discussion he had had with G\u00f6del at the time\nwhen it was still wide open how the intuitive concept of effective\ncalculability should be formalized (probably during 1934). G\u00f6del\nsuggested that\n\n\nit might be possible, in terms of effective calculability as an\nundefined notion, to state a set of axioms which would embody the\ngenerally accepted properties of this notion, and to do something on\nthat basis. (Church 1935b)\n\n\nLogicians frequently analyse a concept of interest, e.g., universal\nquantification, not by defining it in terms of other concepts, but by\nstating a set of axioms that collectively embody the generally\naccepted properties of (say) universal quantification. To follow this\napproach in the case of effectiveness, we would \u201cwrite down some\naxioms about computable functions which most people would agree are\nevidently true\u201d (Shoenfield 1993: 26). Shoenfield continued,\n\u201cIt might be possible to prove Church\u2019s Thesis from such\naxioms\u201d, but added: \u201cHowever, despite strenuous efforts,\nno one has succeeded in doing this\u201d.\n\nMoving on a few years, a meeting on The Prospects for Mathematical\nLogic in the Twenty-First Century, held at the turn of the\nmillennium, included the following among leading open problems:\n\n\n\u201cProve\u201d the Church-Turing thesis by finding intuitively\nobvious or at least clearly acceptable properties of computation that\nsuffice to guarantee that any function so computed is recursive [and\ntherefore can be computed by a Turing machine]. (Shore in Buss et al.\n2001: 174\u2013175)\n\n\nThe axiomatic type of approach sketched by G\u00f6del has by now been\ndeveloped in a number of quite different ways. These axiomatic\nframeworks go a long way toward countering Montague\u2019s complaint\nof over 60 years ago that \u201cDiscussion of Church\u2019s thesis\nhas suffered for lack of a precise general framework within which it\ncould be conducted\u201d (Montague 1960: 432). Some examples of the\naxiomatic approach are as follows (in chronological order):\n\n\n\nGandy (Turing\u2019s only PhD student) pointed out that\nTuring\u2019s analysis of human computation does not immediately\napply to computing machines strongly dissimilar from Turing machines.\n(See\n Section 4.3\n below for details of Turing\u2019s analysis.) For example,\nTuring\u2019s analysis does not obviously apply to parallel machines\nwhich, unlike a Turing machine, are able to process an arbitrary\nnumber of symbols simultaneously. Seeking a generalized form of\nTuring\u2019s analysis that applies equally well to Turing machines\nand massively parallel machines, Gandy (1980) stated four axioms\ngoverning the behaviour of what he called discrete deterministic\nmechanical devices. (He formulated the axioms in terms of\nhereditarily finite sets.) Gandy was then able to prove that every\ndevice satisfying these axioms can be simulated by a Turing machine:\nDiscrete deterministic mechanical devices, even massively parallel\nones, are no more powerful than Turing machines, in the sense that\nwhatever computations such a device is able to perform can also be\ndone by the universal Turing machine. (For more on Gandy\u2019s\nanalysis, see\n Section 6.4.2.)\n\n\n\nEngeler axiomatized the concept of an algorithmic function by using\ncombinators (Engeler 1983: ch. III). Combinators were\noriginally introduced by Sch\u00f6nfinkel in 1924, in a paper that a\nrecent book on combinators described as \u201cpresenting a formalism\nfor universal computation for the very first time\u201d\n(Sch\u00f6nfinkel 1924; Wolfram 2021: 214). Sch\u00f6nfinkel\u2019s\ncombinators were extensively developed by Curry (Curry 1929, 1930a,b,\n1932; Curry & Feys 1958). Examples of combinators are the\n\u201cpermutator\u201d \\(\\mathrm{C}\\) and the\n\u201ccancellator\u201d \\(\\mathrm{K}\\). These produce the following\neffects: \\(\\mathrm{C}xyz = xzy\\) and \\(\\mathrm{K}xy = x\\). \n\n\nSieg formalized Turing\u2019s analysis of human computation by means\nof four axioms (Sieg 2008). The result, Sieg said, is an axiomatic\ncharacterization of \u201cthe concept \u2018mechanical\nprocedure\u2019\u201d, and he observed that his system\n\u201csubstantiates G\u00f6del\u2019s remarks\u201d (above) that\none should try to find a set of axioms embodying the generally\naccepted properties of the concept of effectiveness (Sieg 2008:\n150). \n\n\nDershowitz and Gurevich (2008) stated three very general axioms,\ntreating computations as discrete, deterministic,\nsequentially-evolving structures of states. They called these\nstructures \u201cstate-transition systems\u201d, and called the\nthree axioms the \u201cSequential Postulates\u201d. They also used a\nfourth axiom, stipulating that \u201cOnly undeniably computable\noperations are available in initial states\u201d (2008: 306). From\ntheir four axioms, they proved a proposition they called\nChurch\u2019s thesis: \u201cEvery numeric function computed by a\nstate-transition system satisfying the Sequential Postulates, and\nprovided initially with only basic arithmetic, is partial\nrecursive\u201d (2008: 327). \n\n\nReturning to the very idea of proving the Church-Turing\nthesis, it is important to note that the proposition Dershowitz and\nGurevich call Church\u2019s thesis is in fact not the thesis\nstated by Church, viz. \u201cA function of positive integers is\neffectively calculable only if recursive\u201d. Crucially, their\nversion of Church\u2019s thesis does not even mention the key concept\nof effective calculability. The entire project of trying to prove\nChurch\u2019s (or Turing\u2019s) actual thesis has its share of\nphilosophical difficulties. For example, suppose someone were to lay\ndown some axioms expressing claims about effective calculability (as\nSieg for instance has done), and suppose it is possible to prove from\nthese axioms that a function of positive integers is effectively\ncalculable only if recursive. Church\u2019s thesis would have been\nproved from the axioms, but whether the axioms form a satisfactory\naccount of effective calculability is a further question. If\nthey do not, then this \u201cproof\u201d of Church\u2019s thesis\ncould carry no conviction. Which is to say, a proof of this sort will\nbe convincing only to one who accepts another thesis, namely that the\naxioms are indeed a satisfactory account of effective calculability.\nThis is a Churchian meta-thesis. Church\u2019s thesis would have been\nproved, but only at the expense of throwing up another, unproved,\nthesis seemingly of the same nature.\n\nThere is further discussion of difficulties associated with the idea\nof proving the Church-Turing thesis in\n Section 4.3.5,\n Section 4.5, and\n Section 4.6.\n4. The Case for the Church-Turing Thesis\n4.1 The inductive and equivalence arguments\n\nAlthough there have from time to time been attempts to call the\nChurch-Turing thesis into question (for example by Kalm\u00e1r in\nhis 1959; Mendelson replied in his 1963), the summary of the situation\nthat Turing gave in 1948 is no less true today: \u201cit is now\nagreed amongst logicians that \u2018calculable by L.C.M.\u2019 is\nthe correct accurate rendering\u201d of the informal concept of\neffectiveness.\n\nIn 1936, both Church and Turing gave various grounds for accepting\ntheir respective theses. Church argued:\n\n\nThe fact \u2026 that two such widely different and (in the opinion\nof the author) equally natural definitions of effective calculability\n[i.e., in terms of \u03bb-definability and recursion] turn out to be\nequivalent adds to the strength of the reasons adduced below\nfor believing that they constitute as general a characterization of\nthis notion as is consistent with the usual intuitive understanding of\nit. (Church 1936a: 346, emphasis added)\n\n\nChurch\u2019s \u201creasons adduced below\u201d comprised two not\nwholly convincing arguments. Both suffered from the same weakness,\ndiscussed in\n Section 4.4.4.\n\nTuring, on the other hand, marshalled a formidable case for the\nthesis. Unlike Church, he offered inductive evidence for it, showing\nthat large classes of numbers \u201cwhich would naturally be regarded\nas computable\u201d are computable in his sense (1936: 74\u201375).\nTuring proved, for example, that the limit of a computably convergent\nsequence is computable; that all real algebraic numbers are\ncomputable; that the real zeroes of the Bessel functions are\ncomputable; and that (as previously noted) \u03c0 and e are computable\n(1936: 79\u201383). But most importantly of all, Turing gave profound\nlogico-philosophical arguments for the thesis. He referred to these\narguments simply as \u201cI\u201d, \u201cII\u201d and\n\u201cIII\u201d. They are described in\n Section 4.3\n and\n Section 4.4.\n\nBy about 1950, considerable evidence had amassed for the thesis. One\nof the fullest surveys of this evidence is to be found in chapters 12\nand 13 of Kleene\u2019s 1952. As well as discussing Turing\u2019s\nargument I, and Church\u2019s two arguments mentioned above, Kleene\nbolstered Church\u2019s just quoted equivalence argument,\npointing out that \u201cSeveral other characterizations \u2026 have\nturned out to be equivalent\u201d (1952: 320). As well as the\ncharacterizations mentioned by Church, Kleene included computability\nby Turing machine, Post\u2019s canonical and normal systems (Post\n1943, 1946), and G\u00f6del\u2019s notion of reckonability\n(G\u00f6del 1936). (Turing\u2019s student and lifelong friend Robin\nGandy picturesquely called Church\u2019s equivalence argument the\n\u201cargument by confluence\u201d [Gandy 1988: 78].)\n\nIn modern times, the equivalence argument can be presented even more\nforcefully: All attempts to give an exact characterization of the\nintuitive notion of an effectively calculable function have turned out\nto be equivalent, in the sense that each characterization\noffered has been proved to pick out the same class of functions,\nnamely those that are computable by Turing machine. The equivalence\nargument is often considered to be very strong evidence for the\nthesis, because of the diversity of the various formal\ncharacterizations involved. Apart from the many different\ncharacterizations already mentioned in\n Section 1\n and\n Section 3,\n there are also analyses in terms of register machines (Shepherdson\n& Sturgis 1963), Markov algorithms (Markov 1951), and other\nformalisms.\n\nThe equivalence argument may be summed up by saying that the concept\nof effective calculability\u2014or the concept of computability\nsimpliciter\u2014has turned out to be\nformalism-transcendent, or even \u201cformalism-free\u201d\n(Kennedy 2013: 362), in that all these different formal approaches\npick out exactly the same class of functions.\n\nIndeed, there is not even a need to distinguish, within any given\nformal approach, systems of different orders or types. G\u00f6del\nnoted in an abstract published in 1936 that the concept\n\u201ccomputable\u201d is absolute, in the sense that all\nthe computable functions are specifiable in one and the same system,\nthere being no need to introduce a hierarchy of systems of different\norders\u2014as is done, for example, in Tarskian analyses of the\nconcept \u201ctrue\u201d, and standardly in the case of the concept\n\u201cprovable\u201d (G\u00f6del 1936: 24). Ten years later,\ncommenting on Turing\u2019s work, G\u00f6del emphasized that\n\u201cthe great importance \u2026 [of] Turing\u2019s\ncomputability\u201d is\n\n\nlargely due to the fact that with this concept one has for the first\ntime succeeded in giving an absolute definition of an interesting\nepistemological notion, i.e., one not depending on the formalism\nchosen. In all other cases treated previously, such as demonstrability\nor definability, one has been able to define them only relative to a\ngiven language\u2026. (G\u00f6del 1946: 150)\n\n\nIn his 1952 survey, Kleene also developed Turing\u2019s inductive\nargument (1952: 319\u2013320). To summarize:\n\nEvery effectively calculable function that has been investigated\nin this respect has turned out to be computable by Turing\nmachine.\nAll known methods or operations for obtaining new effectively\ncalculable functions from given effectively calculable functions are\nparalleled by methods for constructing new Turing machines from given\nTuring machines.\n\n\nInductive evidence for the thesis has continued to accumulate. For\nexample, Gurevich points out that\n\n\nAs far as the input-output relation is concerned, synchronous parallel\nalgorithms and interactive sequential algorithms can be simulated by\nTuring machines. This gives additional confirmation of the\nChurch-Turing thesis. (Gurevich 2012: 33)\n\n4.2 Skepticism about the inductive and equivalence arguments\n\nIt is a general feature of inductive arguments that, while they may\nsupply strong evidence, they nevertheless do not establish their\nconclusions with certainty. A stronger argument for the Church-Turing\nthesis is to be desired. Gandy said that the inductive argument\n\n\ncannot settle the philosophical (or foundational) question. It might\nhappen that one day some genius established an entirely new sort of\ncalculation. (Gandy 1988: 79)\n\n\nDershowitz and Gurevich highlighted the difficulty:\n\n\nHistory is full of examples of delayed discoveries. Aristotelian and\nNewtonian mechanics lasted much longer than the seventy years that\nhave elapsed since Church proposed identifying effectiveness with\nrecursiveness, but still those physical theories were eventually found\nlacking. (Dershowitz & Gurevich 2008: 304)\n\n\nDershowitz and Gurevich presented a highly relevant example of delayed\ndiscovery (following Barendregt 1997: 187): Any hope that the\neffectively calculable functions could be identified with the\nprimitive recursive functions\u2014introduced in 1923\n(Skolem 1923; P\u00e9ter 1935)\u2014evaporated a few years later,\nwhen Ackermann described an effectively calculable function that is\nnot primitive recursive (Ackermann 1928).\n\nThe equivalence argument has also been deemed unsatisfactory.\nDershowitz and Gurevich call it \u201cweak\u201d (2008: 304). After\nall, the fact that a number of statements are equivalent does not show\nthe statements are true, only that if one is true, all are\u2014and\nif one is false, all are. Kreisel wrote:\n\n\nThe support for Church\u2019s thesis \u2026 certainly does not\nconsist in \u2026 the equivalence of different characterizations:\nwhat excludes the case of a systematic error? (Kreisel 1965:\n144)\n\n\nMendelson put the point more mildly, saying that the equivalence\nargument is \u201cnot conclusive\u201d:\n\n\nIt is conceivable that all the equivalent notions define a concept\nthat is related to, but not identical with, effective computability.\n(Mendelson 1990: 228)\n\n\nClearly, what is required is a direct argument for the thesis from\nfirst principles. Turing\u2019s argument I fills this role.\n4.3 Turing\u2019s argument I\n\nThe logico-philosophical arguments that Turing gave in Section 9 of\n\u201cOn Computable Numbers\u201d are outstanding among the reasons\nfor accepting the thesis.\n\nHe introduced argument I as \u201conly an elaboration\u201d of\nremarks at the beginning of his 1936 paper\u2014such as:\n\n\nWe may compare a man in the process of computing a real number to a\nmachine which is only capable of a finite number of conditions\n\\(q_1,\\) \\(q_2,\\)\u2026, \\(q_R\\) which will be called\n\u201c\\(m\\)-configurations\u201d. (Turing 1936 [2004: 59, 75])\n\n\nHe also described argument I as a \u201cdirect appeal to\nintuition\u201d (Turing 1936 [2004: 75]). The appeal he is talking\nabout concerns our understanding of which features of human\ncomputation are the essential features (some examples of\ninessential features are that human computers eat, breathe,\nand sleep).\n\nIn outline, argument I runs as follows: Given that human computation\nhas these (and only these) essential features\u2014and here\nTuring supplied a list of features\u2014then, whichever human\ncomputation is specified, a Turing machine can be designed to carry\nout the computation. Therefore, the Turing-machine computable numbers\ninclude all numbers that would naturally be regarded as computable\n(Turing\u2019s thesis).\n4.3.1 Turing\u2019s analysis\n\nTuring\u2019s list of the essential features of human computation is\nas follows (Turing 1936 [2004: 75\u201376]):\n\nComputers write symbols on two-dimensional sheets of\npaper, which may be considered to be (or may actually be) divided up\ninto squares, each square containing no more than a single individual\nsymbol.\nThe computer is not able to recognize, or print,\nmore than a finite number of different types of individual\nsymbol.\nThe computer is not able to observe an unlimited\nnumber of squares all at once\u2014if he or she wishes to observe\nmore squares than can be taken in at one time, then successive\nobservations must be made. (Say the maximum number of squares the\ncomputer can observe at any one moment is \\(B\\), where \\(B\\) is some\npositive integer.)\nWhen the computer makes a fresh observation in order\nto view more squares, none of the newly observed squares will be more\nthan a certain fixed distance away from the nearest previously\nobserved square. (Say this fixed distance consists of \\(L\\) squares,\nwhere \\(L\\) is some positive integer.)\nIn order to alter a symbol (e.g., to replace it by a\ndifferent symbol), the computer needs to be actually observing the\nsquare containing the symbol.\nThe computer\u2019s behavior at any moment is\ndetermined by the symbols that he or she is observing and his or her\n\u201cstate of mind\u201d at that moment. Moreover, the\ncomputer\u2019s state of mind at any given moment, together with the\nsymbols he or she is observing at that moment, determine the\ncomputer\u2019s state of mind at the next moment.\nThe number of states of mind that need to be taken\ninto account when describing the computer\u2019s behavior is\nfinite.\nThe operations the computer performs can be split up\ninto elementary operations. These are so simple that no more than one\nsymbol is altered in a single elementary operation.\nAll elementary operations are of one or other of the\nfollowing forms:\n\n\nA change of state of mind.\nA change of observed squares, together with a possible change of\nstate of mind.\nA change of symbol, together with a possible change of state of\nmind.\n \n\n4.3.2 Next step: \\(B\\)-\\(L\\)-type Turing machines\n\nThe next step of argument I is to establish that if human computation\nhas those and only those essential features, then, whatever human\ncomputation is specified, a Turing machine can be designed to perform\nthe computation. In order to show this, Turing introduced a modified\nform of Turing machine, which can be called a\n\u201c\\(B\\)-\\(L\\)-type\u201d Turing machine. A \\(B\\)-\\(L\\)-type\nTuring machine has much in common with an ordinary Turing machine:\n\nA\u00a0\\(B\\)-\\(L\\)-type Turing machine consists of a scanner and a\none-dimensional paper tape; the tape is divided into squares.\nThe scanner contains mechanisms that enable it to move the tape to\nthe left or right.\nThe scanner\u2019s mechanisms also enable it recognize, delete,\nand print symbols.\nThe scanner is able to recognize and print only a finite number of\ndifferent types of individual symbol.\nAt any moment, the control mechanism of the scanner will be in any\none of a finite number of internal states. Turing terms these\n\u201c\\(m\\)-configurations\u201d. He included an explanatory remark\nabout \\(m\\)-configurations in a summary in French of the central ideas\nof \u201cOn Computable Numbers\u201d: Inside the machine,\n\u201clevers, wheels, et cetera can be arranged in several ways,\ncalled \u2018\\(m\\)-configurations\u2019\u201d. (The complete\nsummary is translated in Copeland & Fan 2022.)\nThe machine\u2019s behavior at any moment is determined by its\n\\(m\\)-configuration and the symbols it is observing (i.e.,\nscanning).\nThe machine\u2019s possible behaviors are limited to moving the\ntape, deleting the symbol on an observed square, and printing a symbol\non an observed square. Each of these behaviors may be accompanied by a\nchange in \\(m\\)-configuration.\n\n\nMoving on now to the differences between ordinary Turing machines and\n\\(B\\)-\\(L\\)-type machines:\n\nThe scanner of a \\(B\\)-\\(L\\)-type machine can observe up to \\(B\\)\nsquares at once; whereas the scanner of an ordinary Turing machine can\nobserve only a single square of the tape at any one moment. A Turing\nmachine that is able to survey a sequence of squares all at once like\nthis is sometimes known by the (perhaps inelegant) term \u201cstring\nmachine\u201d.\nThe scanner of a \\(B\\)-\\(L\\)-type machine can, in a single\noperation, move the tape up to \\(L\\) squares at once (to the left or\nright of any one of the immediately previously observed squares);\nwhereas the scanner of an ordinary machine can move the tape by only\none square in a single elementary operation.\n\n\nReturning to the argument, Turing asserted that, given his account\n1\u20139 of the essential features of human computation, a\n\\(B\\)-\\(L\\)-type machine can \u201cdo the work\u201d of any human\ncomputer (1936: 77). This is because the \\(B\\)-\\(L\\)-type machine\neither duplicates or can simulate each of\n features 1\u20139.\n Let us take these features in turn.\n\nFeature 1\n is simulated by the machine: The \\(B\\)-\\(L\\)-type machine uses its\none-dimensional tape to mimic the computer\u2019s two-dimensional\nsheets of paper. Turing said:\n\n\nI think it will be agreed that the two-dimensional character of paper\nis no essential of computation. (Turing 1936 [2004: 75])\n\n\nHowever, some commentators note that there is room for doubt about\nthis matter. Gandy complained that Turing here argued \u201cmuch too\nbriefly\u201d, saying:\n\n\nIt is not totally obvious that calculations carried out in two (or\nthree) dimensions can be put on a one-dimensional tape and yet\npreserve the \u201clocal\u201d properties. (Gandy 1988: 81,\n82\u201383)\n\n\nDershowitz and Gurevich ask:\n\n\n[H]ow certain is it that each and every elaborate data structure used\nduring a computation can be encoded as a string, and its operations\nsimulated by effective string manipulations? (Dershowitz &\nGurevich 2008: 305)\n\n\nProgressing to the other features on Turing\u2019s list: 2, 3, 4 and\n5 are straightforwardly duplicated in the machine.\n Features 6 and 7\n are simulated, by letting the machine\u2019s \\(m\\)-configurations do\nduty for the computer\u2019s states of mind (more on that below).\n Feature 8\n is duplicated in the machine: the machine\u2019s complex operations\n(such as long multiplication and division) are built up out of\nelementary operations. Feature 9 is simulated, again by letting the\n\\(m\\)-configurations to do duty for human states of mind.\n4.3.3 Final step\n\nThe next and final step of argument I involves the statement that any\ncomputation done by a \\(B\\)-\\(L\\)-type machine can also be done by an\nordinary Turing machine. This is straightforward, since by means of a\nsequence of single-square moves, the ordinary machine can simulate a\n\\(B\\)-\\(L\\)-type machine\u2019s tape-moves of up to \\(L\\) squares at\nonce; and the ordinary machine can also simulate the \\(B\\)-\\(L\\)-type\nmachine\u2019s scanning of up to \\(B\\) squares at once, by means of a\nsequence of single-square scannings (interspersed where necessary with\nchanges of \\(m\\)-configuration). Thus, if a \\(B\\)-\\(L\\)-type machine\ncan \u201cdo the work\u201d of a human computer, so can an ordinary\nTuring machine.\n\nIn summary, Turing has shown the following\u2014provided his claim is\naccepted that \u201cTo each state of mind of the computer corresponds\nan \u2018\\(m\\)-configuration\u2019 of the machine\u201d: Given\nthe above account of the essential features of human computation, an\nordinary Turing machine is able to do the work of any human\ncomputer. In other words: Subject to that proviso and that given,\nhe has established his thesis that the numbers computable by an\nordinary Turing machine include all numbers which would naturally be\nregarded as computable.\n4.3.4 States of mind, and argument III\n\nBut should Turing\u2019s claim about the correspondence of states of\nmind and \\(m\\)-configurations be accepted? Might not human states of\nmind greatly surpass arrangements of levers and wheels? Might not the\ncomputer\u2019s states of mind sometimes determine him or her to\nchange the symbols in a way that a \\(B\\)-\\(L\\)-type machine\ncannot?\n\nTuring addressed worries about the correspondence between states of\nmind and \\(m\\)-configurations in his supplementary argument III, which\nhe said \u201cmay be regarded as a modification of I\u201d (1936:\n79). Here he argued that reference to the computer\u2019s states of\nmind can be avoided altogether, by talking instead about what he\ncalled a \u201cnote of instructions\u201d. A note of instructions,\nhe said, is \u201ca more definite and physical counterpart\u201d of\na state of mind. Each step of the human computation can be regarded as\nbeing governed by a note of instructions\u2014by means of following\nthe instructions in the note, the computer will know what operation to\nperform at that step (erase, print, or move). Turing envisaged the\ncomputer preparing new notes on the fly, as the computation\nprogresses: \u201cThe note of instructions must enable him [the\ncomputer] to carry out one step and write the next note\u201d. Each\nnote is in effect a tiny computer program, which both carries out a\nsingle step of the computation and also writes the program that is to\nbe used at the next step.\n\nOnce instruction notes are in the picture, there is no need to refer\nto the human computer\u2019s states of mind:\n\n\nthe state of progress of the computation at any stage is completely\ndetermined by the note of instructions and the symbols on the tape.\n(Turing 1936 [2004: 79])\n\n\nAnother\u2014related\u2014way of answering the worry that human\nstates of mind might surpass the machine\u2019s \\(m\\)-configurations\nis to point out that, even if this were true, it would make no\nessential difference to argument I. This is because of\n feature 3\n and\n feature 7\n (Section 4.3.1): The number of states of mind that need to be taken\ninto account is finite, and the maximum number of squares that the\ncomputer can observe at any one moment is \\(B\\) (a finite number).\n\nGiven\n feature 7,\n it follows that no matter how fancy a state of mind might be, the\ncomputer\u2019s relevant behaviors when in that state of mind can be\nencapsulated by means of finite table. Each row of the table will be\nof the following form: If the observed symbols are such-and-such, then\nperform elementary operation so-and-so (where the elementary\noperations are as specified in\n feature 9).\n Since only a finite number of states of mind are in consideration\n (feature 3)\u2014say\n \\(n\\)\u2014all necessary information about the computer\u2019s\nstates of mind can be encapsulated in a list of \\(n\\) such tables.\nThis list consists of finitely many symbols, and therefore it can be\nplaced on the tape of a \\(B\\)-\\(L\\)-type machine in advance of the\nmachine beginning its emulation of the human computer. (This is akin\nto writing a program on the tape of a universal Turing machine.) The\n\\(B\\)-\\(L\\)-type machine consults the list at each step of the\ncomputation, and the machine\u2019s behavior at every step is\ncompletely determined by the list together with the currently observed\nsymbols.\n\nTo conclude: no matter what powers might be accorded to the human\ncomputer\u2019s states of mind, a \\(B\\)-\\(L\\)-type machine can\nnevertheless \u201cdo the work\u201d of the computer, so long as\nonly finitely many states of mind need be taken into consideration\n(given, of course, the remainder of Turing\u2019s account of the\nessential features of computation).\n4.3.5 Turing\u2019s theorem\n\nNow that the proviso mentioned above about states of mind has been\ncleared out of the way, Turing\u2019s achievement in argument I can\nbe summed up like this: He has, in Gandy\u2019s phrase,\n\u201coutlined a proof\u201d of a theorem (Gandy 1980: 124).\n\n\nTuring\u2019s computation theorem:\n\nThis account of the essential features of human computation implies\nTuring\u2019s thesis.\n\n\nIt should by now be completely clear why Turing called argument I a\n\u201cdirect appeal to intuition\u201d. If one\u2019s intuition\ntells one that Turing\u2019s account of the essential features of\nhuman computation is correct, then the theorem can be applied and\nTuring\u2019s thesis is secured.\n\nHowever, Turing\u2019s account is not immune from skepticism. Some\nskeptical questions are: Might there be aspects of human computation\nthat Turing has overlooked? Might a computer who is limited by\n1\u20139 be unable to perform some calculations that can be\ndone by a human computer not so restricted? Also, must the number of\nstates of mind that need to be taken into account when describing the\ncomputer\u2019s behavior always be finite? G\u00f6del thought the\nnumber of Turing\u2019s \u201cdistinguishable states of mind\u201d\nmay \u201cconverge toward infinity\u201d, saying\n\n\nWhat Turing disregards completely is the fact that mind, in its\nuse, is not static, but constantly developing. (G\u00f6del 1972:\n306)\n\n\nIndeed, what are the grounds supposed to be for thinking that\n1\u20139 are true? Are these claims supposed to be grounded in the\nnature and limitations of the human sense organs and the human mind?\nOr are they supposed to be grounded in some other way, e.g., in the\nfundamental nature of effective methods?\n\nTuring\u2019s argument I is a towering landmark and there is now a\nsizable literature on these and other questions concerning it. For\nmore about this important argument see, for starters, Sieg 1994, 2008;\nShagrir 2006; and Copeland & Shagrir 2013.\n4.4 Turing\u2019s argument II\n4.4.1 Calculating in a logic\n\nKleene, in his survey of evidence for the Church-Turing thesis, listed\na type of argument based on symbolic logic (Kleene 1952: 322\u20133).\n(He called these category \u201cD\u201d arguments.) Arguments of\nthis type commence by introducing a plausible alternative method of\ncharacterizing effectively calculable functions (or, in Turing\u2019s\ncase, computable functions or numbers). The alternative method\ninvolves derivability in one or another symbolic logic: The concept of\neffective calculability (or of computability) is characterized in\nterms of calculability within the logic (see\n Section 3.3).\n Schematically, the characterization is of the form: A function is\neffectively calculable (or computable) if each successive value of the\nfunction is derivable within the logic. The next step of the argument\nis then to establish that the new characterization (whatever it is) is\nequivalent to the old. In Church\u2019s case, this amounts to arguing\nthat the new characterization is equivalent to his characterization in\nterms of either recursiveness or \u03bb-definability. Finally, the\nconclusion that the new and previous characterizations are equivalent\nis claimed as further evidence in favor of the Church-Turing\nthesis.\n\nIn his survey, Kleene illustrated this approach by describing an\nargument of Church\u2019s (Church 1936a: 357\u2013358).\nTuring\u2019s argument II is also of this type, but, curiously,\nKleene did not mention it (despite assigning five pages of his 1952\nsurvey to Turing\u2019s argument I).\n4.4.2 Church\u2019s \u201cstep-by-step\u201d argument\n\nIt is instructive to examine Church\u2019s argument\u2014which Gandy\ndubbed the \u201cstep-by-step\u201d argument (Gandy 1988:\n77)\u2014before considering Turing\u2019s II. Church introduced the\nfollowing alternative method, describing it as among the\n\u201cmethods which naturally suggest themselves\u201d in connection\nwith defining effective calculability:\n\n\na function \\(F\\) (of one positive integer) [is defined] to be\neffectively calculable if, for every positive integer \\(m\\), there\nexists a positive integer \\(n\\) such that \\(F(m) = n\\) is a provable\ntheorem. (Church 1936a: 358)\n\n\nChurch did not specify any particular symbolic logic. He merely\nstipulated a number of general conditions that the logic must satisfy\n(1936a: 357). These included the stipulations that the list of axioms\nof the logic must be either finite or enumerably infinite, and that\neach rule of the logic must specify an \u201ceffectively calculable\noperation\u201d (the latter is necessary, he said, if the logic\n\u201cis to serve at all the purposes for which a system of symbolic\nlogic is usually intended\u201d). Having introduced this alternative\nmethod of characterizing effective calculability, Church then went on\nto argue that every function (of one positive integer) that is\n\u201ccalculable within the logic\u201d in this way is also\nrecursive. He concluded, in support of Church\u2019s thesis, that the\nnew method produces \u201cno more general definition of effective\ncalculability than that proposed\u201d, i.e., in terms of\nrecursiveness (1936a: 358).\n4.4.3 Turing\u2019s variant\n\nTuring\u2019s prefatory remarks to argument II bring out its broad\nsimilarity to Church\u2019s argument. Turing described II as being a\n\u201cproof of the equivalence of two definitions\u201d,\nadding\u2014\u201cin case the new definition has a greater intuitive\nappeal\u201d (1936 [2004: 75]).\n\nTuring\u2019s argument, unlike Church\u2019s, does involve a\nspecific symbolic logic, namely Hilbert\u2019s first-order predicate\ncalculus. Argument II hinges on a proposition that can be called\n\n\nTuring\u2019s provability theorem:\n\nEvery formula provable in Hilbert\u2019s first-order predicate\ncalculus can be proved by the universal Turing machine. (See Turing\n1936 [2004: 77].)\n\n\nThe alternative method considered by Turing (which is similar to\nChurch\u2019s) characterizes a computable number (or sequence) in\nterms of statements each of which supplies the next digit of the\nnumber (or sequence). The number (sequence) is said to be computable\nif each such statement is provable in Hilbert\u2019s calculus (the\nidea being that, if this is so, then Hilbert\u2019s calculus may be\nused to calculate\u2014or compute\u2014the digits of the number one\nby one). Employing the provability theorem, Turing then showed the\nfollowing: Every number that is computable according to this\nalternative definition is also computable according to the\nTuring-machine definition (i.e., the digits of the number can be\nwritten out progressively by a Turing machine), and vice versa (Turing\n1936 [2004: 78]). In other words, he proved the equivalence of the two\ndefinitions, as promised.\n4.4.4 Comparing the Church and Turing arguments\n\nReturning to Church\u2019s step-by-step argument, there is an air of\njiggery-pokery about it. Church wished to conclude that functions\n\u201ccalculable within the logic\u201d are recursive, and, in the\ncourse of arguing for this, he found it necessary to assert that each\nrule of the logic is a recursive operation, on the basis that each\nrule is required to be an effectively calculable operation. In a\ndifferent context, he might have supported this assertion by appealing\nto Church\u2019s thesis (which says, after all, that what is\neffectively calculable is recursive). But in the present context, such\nan appeal would naturally be question-begging.\n\nNor did Church make any such appeal. (Sieg described Church\u2019s\nreasoning as \u201csemi-circular\u201d, but this seems too\nharsh\u2014there is nothing circular about it; Sieg 1994: 87, 2002:\n394.) But nor did Church offer any compelling reasons in support of\nhis assertion. He merely gave examples of systems whose rules\nare recursive operations; and also said\u2014having\nstipulated that each rule of procedure must be an effectively\ncalculable operation\u2014that he will \u201cinterpret this to\nmean that \u2026 each rule of procedure must be a recursive\noperation\u201d (1936: 357, italics added.) In short, a crucial step\nof Church\u2019s argument for Church\u2019s thesis receives\ninadequate support. Sieg famously dubbed this step the\n\u201cstumbling block\u201d in Church\u2019s argument (Sieg 1994:\n87).\n\nThere is no such difficulty in Turing\u2019s argument. Having\nselected a specific logic (Hilbert\u2019s calculus), Turing was able\nspecify a Turing machine that would \u201cfind all the provable\nformulae of the calculus\u201d, so making it indubitable that\nfunctions calculable in the logic are Turing-machine computable\n(Turing 1936 [2004: 77]). For this reason, Turing\u2019s argument II\nis to be preferred to Church\u2019s step-by-step argument.\n4.5 Kripke\u2019s version of argument II\n\nA significant recent contribution to the area has been made by Kripke\n(2013). A conventional view of the status of the Church-Turing thesis\nis that, while \u201cvery considerable intuitive evidence\u201d has\namassed for the thesis, the thesis is \u201cnot a precise enough\nissue to be itself susceptible to mathematical treatment\u201d\n(Kripke 2013: 77). Kleene gave an early expression of this now\nconventional view:\n\n\nSince our original notion of effective calculability of a function\n\u2026 is a somewhat vague intuitive one, the thesis cannot be\nproved. \u2026 While we cannot prove Church\u2019s thesis, since\nits role is to delimit precisely an hitherto vaguely conceived\ntotality, we require evidence \u2026. (Kleene 1952: 318)\n\n\nRejecting the conventional view, Kripke suggests that, on the\ncontrary, the Church-Turing thesis is susceptible to mathematical\nproof. Furthermore, he canvasses the idea that Turing himself sketched\nan argument that serves to prove the thesis.\n\nKripke attempts to build a mathematical demonstration of the\nChurch-Turing thesis around Turing\u2019s argument II. He claims that\nhis demonstration is \u201cvery close\u201d to Turing\u2019s\n(Kripke 2013: 80). However, this is debatable, since, in its detail,\nthe Kripke argument differs considerably from argument II. But one can\nat least say that Kripke\u2019s argument was inspired by\nTuring\u2019s argument II, and belongs in Kleene\u2019s category\n\u201cD\u201d (along with II and Church\u2019s step-by-step\nargument).\n\nKripke argues that the Church-Turing thesis is a corollary of\nG\u00f6del\u2019s completeness theorem for first-order predicate\ncalculus with identity. Put somewhat crudely, the latter theorem\nstates that every valid deduction (couched in the language of\nfirst-order predicate calculus with identity) is provable in\nthe calculus. In other words, the deduction of \\(B\\) from premises\n\\(A_{1},\\) \\(A_{2},\\) \u2026 \\(A_{n}\\) (where statements \\(A_{1},\\)\n\\(A_{2},\\) \u2026 \\(A_{n},\\) \\(B\\) are all in the language of\nfirst-order predicate calculus with identity) is logically valid if\nand only if \\(B\\) can be proved from \\(A_{1},\\) \\(A_{2},\\) \u2026\n\\(A_{n}\\) in the calculus.\n\nThe first step of the Kripke argument is his claim that (error-free,\nhuman) computation is itself a form of deduction:\n\n\n[A] computation is a special form of mathematical argument. One is\ngiven a set of instructions, and the steps in the computation are\nsupposed to follow\u2014follow deductively\u2014from the\ninstructions as given. So a computation is just another\nmathematical deduction, albeit one of a very specialized form.\n(Kripke 2013: 80)\n\n\nThe following two-line program in pseudo-code illustrates\nKripke\u2019s claim. The symbol \u201c\\(\\rightarrow\\)\u201d is read\n\u201cbecomes\u201d, and \u201c=\u201d as usual means identity.\nThe first instruction in the program is \\(r \\rightarrow 2\\). This\ntells the computer to place the value 2 in storage location \\(r\\)\n(assumed to be initially empty). The second instruction \\(r\n\\rightarrow r + 3\\) tells the computer to add 3 to the content of\n\\(r\\) and store the result in \\(r\\) (over-writing the previous content\nof \\(r\\)). The execution of this two-line program can be represented\nas a deduction:\n\n\n{Execution of \\(r \\rightarrow 2\\), followed immediately by execution\nof \\(r \\rightarrow r + 3\\)} logically entails that \\(r = 5\\) in the\nimmediately resulting state.\n\n\nIn the case of Turing-machine programs, Turing developed a detailed\nlogical notation for expressing all such deductions (Turing 1936).\n\n(In fact, the successful execution of any string of\ninstructions can be represented deductively in this\nfashion\u2014Kripke has not drawn attention to a feature special to\ncomputation. The instructions do not need to be ones that a computer\ncan carry out.)\n\nThe second step of Kripke\u2019s argument is to appeal to what he\nrefers to as Hilbert\u2019s thesis: this is the thesis that\nthe steps of any mathematical argument can be expressed \u201cin a\nlanguage based on first-order logic (with identity)\u201d (Kripke\n2013: 81). The practice of calling this claim \u201cHilbert\u2019s\nthesis\u201d originated in Barwise (1977: 41), but it should be noted\nthat since Hilbert regarded second-order logic as indispensable (see,\ne.g., Hilbert & Ackermann 1928: 86), the name\n\u201cHilbert\u2019s thesis\u201d is potentially misleading.\n\nApplying \u201cHilbert\u2019s thesis\u201d to Kripke\u2019s above\nquoted claim that \u201ca computation is just another mathematical\ndeduction\u201d (2013: 80) yields:\n\n\nevery (human) computation can be formalized as a valid deduction\ncouched in the language of first-order predicate calculus with\nidentity.\n\n\nNow, applying G\u00f6del\u2019s completeness theorem to this yields\nin turn:\n\n\nevery (human) computation is provable in first-order predicate\ncalculus with identity, in the sense that, given an appropriate\nformalization, each step of the computation can be derived from the\ninstructions (possibly in conjunction with ancillary premises, e.g.,\nwell-known mathematical premises, or premises concerning numbers that\nare supplied to the computer at the start of the computation).\n\n\nFinally, applying Turing\u2019s provability theorem to this\nintermediate conclusion yields the Church-Turing thesis:\n\n\nevery (human) computation can be done by Turing machine.\n\n4.6 Turing on the status of the thesis\n\nAs\n Section 3.4\n mentioned, Dershowitz and Gurevich have also argued that the\nChurch-Turing thesis is susceptible to mathematical proof (Dershowitz\n& Gurevich 2008). They offer \u201ca proof of Church\u2019s\nThesis, as G\u00f6del and others suggested may be possible\u201d\n(2008: 299), and they add:\n\n\nIn a similar way, but with a different set of basic operations, one\ncan prove Turing\u2019s Thesis, \u2026 . (Dershowitz & Gurevich\n2008: 299)\n\n\nYet Turing\u2019s own view of the status of his thesis is very\ndifferent from that expressed by Kripke, Dershowitz and Gurevich.\nAccording to Turing, his thesis is not susceptible to mathematical\nproof. He did not consider either argument I or argument II to be a\nmathematical demonstration of his thesis: he asserted that I and II,\nand indeed \u201c[a]ll arguments which can be given\u201d for the\nthesis, are\n\n\nfundamentally, appeals to intuition, and for this reason rather\nunsatisfactory mathematically. (Turing 1936 [2004: 74])\n\n\nIndeed, Turing might have regarded \u201cHilbert\u2019s\nthesis\u201d as itself an example of a proposition that can be\njustified only by appeals to intuition.\n\nTuring discussed a thesis closely related to Turing\u2019s thesis,\nnamely for every systematic method there is a corresponding\nsubstitution-puzzle (where \u201csubstitution-puzzle\u201d,\nlike \u201ccomputable by Turing machine\u201d, is a rigorously\ndefined concept). He said:\n\n\nThe statement is \u2026 one which one does not attempt to prove.\nPropaganda is more appropriate to it than proof, for its status is\nsomething between a theorem and a definition. (Turing 1954 [2004:\n588])\n\n\nProbably Turing would have taken this remark to apply equally to the\nthesis (Turing\u2019s thesis) that for every systematic method\nthere is a corresponding Turing machine.\n\nTuring also said (in handwritten material published in 2004) that the\nphrase \u201csystematic method\u201d\n\n\nis a phrase which, like many others e.g., \u201cvegetable\u201d one\nunderstands well enough in the ordinary way. But one can have\ndifficulties when speaking to greengrocers or microbiologists or when\nplaying \u201ctwenty questions\u201d. Are rhubarb and tomatoes\nvegetables or fruits? Is coal vegetable or mineral? What about coal\ngas, marrow, fossilised trees, streptococci, viruses? Has the lettuce\nI ate at lunch yet become animal? \u2026 The same sort of difficulty\narises about question c) above [Is there a systematic method by\nwhich I can answer such-and-such questions?]. An ordinary sort of\nacquaintance with the meaning of the phrase \u201csystematic\nmethod\u201d won\u2019t do, because one has got to be able to say\nquite clearly about any kind of method that might be proposed whether\nit is allowable or not. (Turing in Copeland 2004: 590)\n\n\nHere Turing is emphasizing that the term \u201csystematic\nmethod\u201d is not exact, and so in that respect is like the term\n\u201cvegetable\u201d, and unlike mathematically precise terms such\nas \u201c\u03bb-definable\u201d, \u201cTuring-machine\ncomputable\u201d, and \u201csubstitution-puzzle\u201d. Kleene\nclaimed that, since terms like \u201csystematic method\u201d and\n\u201ceffectively calculable\u201d are not exact, theses involving\nthem cannot be proved (op. cit.). Turing however did not voice a\nsimilar argument (perhaps because he saw a difficulty). The fact that\nthe term \u201csystematic method\u201d is inexact is not\nenough to show that there could be no mathematically acceptable proof\nof a thesis involving the term. Mendelson gave a graphic statement of\nthis point, writing about what is called above \u201cthe converse\nof Church\u2019s thesis\u201d\n (Section 1.5):\n\n\nThe assumption that a proof connecting intuitive and precise\nmathematical notions is impossible is patently false. In fact, half of\nCT (the \u201ceasier\u201d half), the assertion that all\npartial-recursive functions are effectively computable, is\nacknowledged to be obvious in all textbooks in recursion theory. A\nstraightforward argument can be given for it\u2026. This simple\nargument is as clear a proof as I have seen in mathematics, and it is\na proof in spite of the fact that it involves the intuitive notion of\neffective computability. (Mendelson 1990: 232\u2013233)\n\n\nYet the point that the \u201cintuitive\u201d nature of some of its\nterms does not rule out the thesis\u2019s being provable is not to\nsay that the thesis is provable. If the status of the\nChurch-Turing thesis is \u201csomething between a theorem and a\ndefinition\u201d, then the definition is presumably Church\u2019s\nproposal to \u201cdefine the notion \u2026 of an effectively\ncalculable function\u201d\n (Section 1.5)\n and the theorem is Turing\u2019s computation theorem\n (Section 4.3.5),\n i.e., that given Turing\u2019s account of the essential features of\nhuman computation, Turing\u2019s thesis is true. This theorem is\ndemonstrable, but to prove the thesis itself from the theorem, it\nwould be necessary to show, with mathematical certainty, that\nTuring\u2019s account of the essential features of human computation\nis correct. So far, no one has done this. Propaganda does seem more\nappropriate than proof.\n5. The Church-Turing Thesis and the Limits of Machines\n5.1 Two distinct theses\n\nCan the universal Turing machine perfectly simulate the behavior of\neach and any machine? The Church-Turing thesis is sometimes\nregarded as providing a statement of the logical limits of machinery,\nto the effect that the universal Turing machine is the most general\nmachine possible (and so the answer to the question just posed is\nyes.) For example:\n\n\nThat there exists a most general formulation of machine and that it\nleads to a unique set of input-output functions has come to be called\nChurch\u2019s thesis. (Newell 1980: 150)\n\n\nYet the Church-Turing thesis is a thesis about the extent of\neffective methods (therein lies its mathematical importance).\nPutting this another way, the thesis concerns what a human\nbeing can achieve when calculating by rote, using paper and\npencil (absent contingencies such as boredom, death, or insufficiency\nof paper). What a human rote-worker can achieve, and what a machine\ncan achieve, may be different.\n\nGandy was perhaps the first to distinguish explicitly between\nTuring\u2019s thesis and the very different proposition that\nwhatever can be calculated by a machine can be calculated by a\nTuring machine (Gandy 1980). Gandy called this proposition\n\u201cThesis M\u201d. He pointed out that Thesis M is in fact false\nin the case of some \u201cmachines obeying Newtonian\nmechanics\u201d, where \u201cthere may be rigid rods of arbitrary\nlengths and messengers travelling with arbitrary large\nvelocities\u201d (1980: 145). He also pointed out that Thesis M fails\nto apply to what he calls \u201cessentially analogue machines\u201d\n(1980: 125). A most interesting question is whether Thesis M is true\nof all discrete (i.e., non-analogue) machines that are\nconsistent with the actual laws of physics. This question is\ndiscussed in\n Section 6.4.\n\nThesis M is imprecise, since Gandy never explicitly specified quite\nwhat he meant by \u201ccalculated by a machine\u201d. It is useful\nto state a more definite proposition that captures the spirit of\nThesis M. This might be called the strong Church-Turing\nthesis, but on balance it seems preferable to avoid that name,\nsince the proposition in question is very different from the\nChurch-Turing thesis of 1936. The proposition will be called the\n\u201cmaximality thesis\u201d.\n\nSome more terminology: A machine \\(m\\) will be said to\ngenerate (borrowing this word from Turing 1937: 153) a\ncertain function (e.g., \\(x\\) squared) if \\(m\\) can be set up so that,\nif \\(m\\) is presented with any of the function\u2019s arguments\n(e.g., 4), \\(m\\) will carry out some sequence of processing steps, at\nthe end of which \\(m\\) produces the corresponding value of the\nfunction (16 in the example). Mutatis mutandis for functions\nthat, like addition, demand more than one argument.\n\n\nMaximality thesis:\n\nAll functions that can be generated by machine are effectively\ncomputable.\n\n\n\u201cEffectively computable\u201d is a commonly used term: A\nfunction is said to be effectively computable if (and only if) there\nis an effective method for obtaining its values. When phrased in terms\nof effective computability, the Church-Turing thesis says: All\neffectively computable functions are Turing-machine computable.\n\nClearly the Church-Turing thesis and the maximality thesis are\ndifferent theses.\n5.2 The \u201cequivalence fallacy\u201d\n\nA common argument for the maximality thesis, or an equivalent, cites\nthe fact, noted above, that many different attempts to analyse the\ninformal notion of computability in precise terms\u2014attempts by\nTuring, Church, Post, Markov, and others\u2014turned out to be\nequivalent to one another, in the sense that each analysis\nprovably picks out the same class of functions, namely those functions\ncomputable by Turing machines.\n\nAs previously mentioned, this convergence of analyses is often\nconsidered strong evidence for the Church-Turing thesis (this is the\nequivalence argument for the\n thesis\u2014Section 4.1).\n Some go further and take this convergence to be evidence also for the\nmaximality thesis. Newell, for example, presented the convergence of\nthe analyses given by Turing, Church, Post, Markov, et al., as showing\nthat\n\n\nall attempts to \u2026 formulate \u2026 general notions of\nmechanism \u2026 lead to classes of machines that are equivalent in\nthat they encompass in toto exactly the same set of\ninput-output functions. (Newell 1980: 150)\n\n\nThe various equivalent analyses, said Newell, constitute a\n\n\nlarge zoo of different formulations of maximal classes of machines.\n(ibid.)\n\n\nArguably there is a fallacy here. The analyses Newell is discussing\nare of the concept of an effective method: The equivalence of the\nanalyses bears only on the question of the extent of what is\nhumanly computable, not on the further question whether\nfunctions generatable by machines could extend beyond what is\nin principle humanly computable.\n5.3 Watching our words\n\nIt may be helpful at this point to survey some standard technical\nterminology that could set traps for the unwary.\n5.3.1 The word \u201ccomputable\u201d\n\nAs already emphasized, when Turing talks about computable numbers, he\nis talking about humanly computable numbers. He says: \u201cComputing\nis normally done by writing certain symbols on paper\u201d (1936\n[2004: 75])\u2014and normally done \u201cby human clerical labour,\nworking to fixed rules\u201d (1945 [2005: 386]). \u201cThe\ncomputer\u201d, he says, might proceed \u201cin such a desultory\nmanner that he never does more than one step at a sitting\u201d (1936\n[2004: 79]). The work of the human computer is mechanizable: \u201cWe\nmay now construct a machine\u201d\u2014the Turing\nmachine\u2014\u201cto do the work of this computer\u201d (1936\n[2004: 77]). See also\n Section 7\n for more quotations relating to this crucial point.\n\nThus, the various results in \u201cOn Computable Numbers\u201d to\nthe effect that such-and-such functions are uncomputable are\naccordingly about human computers. Turing should not be construed as\nintending to state results about the limitations of machinery. Gandy\nwrote:\n\n\nit is by no means obvious that the limitations described in\n [Section 4.3\n above] apply to mechanical devices; Turing does not claim this.\n(Gandy 1988: 84)\n\n5.3.2 Two instructive quotations\n\n\n[C]ertain functions are uncomputable in an absolute sense:\nuncomputable even by [Turing machine], and, therefore, uncomputable by\nany past, present, or future real machine. (Boolos & Jeffrey 1974:\n55)\n\n\nIn the technical logical literature, the term \u201ccomputable\u201d\nis usually used to mean \u201ceffectively computable\u201d (although\nnot always\u2014see\n Section 5.3.3).\n (\u201cEffectively computable\u201d was defined in\n Section 5.1.)\n Since Boolos and Jeffrey are using \u201ccomputable\u201d to mean\n\u201ceffectively computable\u201d, what they are saying in this\nquotation comes down to the statement that the functions in question\nare not effectively computable by any past, present, or\nfuture real machine\u2014which is true, since the functions are,\nex hypothesi, not effectively computable. However,\nto a casual reader of the literature, this statement (and others like\nit) might appear to say more than it in fact does. That a function is\nuncomputable (i.e., is effectively uncomputable), by any\npast, present, or future real machine, does not entail per se\nthat the function in question cannot be generated by some\nreal machine.\n\nThe second quotation:\n\n\nFORMAL LIMITS OF MACHINE BEHAVIORS \u2026 There are certain\nbehaviors that are \u201cuncomputable\u201d\u2014behaviors for\nwhich no formal specification can be given for a machine that\nwill exhibit that behavior. The classic example of this sort of\nlimitation is Turing\u2019s famous Halting Problem: can we\ngive a formal specification for a machine which, when provided with\nthe description of any other machine together with its\ninitial state, will \u2026 determine whether or not that machine\nwill reach its halt state? Turing proved that no such machine can be\nspecified. (Langton 1989: 12)\n\n\nWhat is proved is that no Turing machine can always\ndetermine, when provided with the description of any Turing\nmachine together with its initial state, whether or not that machine\nwill reach its halt state. Turing certainly proved nothing entailing\nthat it is impossible to specify a machine of some sort or\nother that can do what Langton describes. Thus, the\nconsiderations Langton presents do not impose any general formal\nlimits on machine behaviors\u2014only on the behaviors of Turing\nmachines. Yet the quotation gives a different impression. (In passing,\nit is worth pointing out that although the Halting Problem is very\ncommonly attributed to Turing, as Langton does here, Turing did not in\nfact formulate it. The Halting Problem originated with Davis in the\nearly 1950s (Davis 1958: 70).)\n5.3.3 Beyond effective\n\nSome authors use phrases such as \u201ccomputation in a broad\nsense\u201d, or simply \u201ccomputation\u201d, to refer to\ncomputation of a type that potentially transcends effective\ncomputation (e.g., Doyle 2002; MacLennan 2003; Shagrir & Pitowsky\n2003; Siegelmann 2003; Andr\u00e9ka, N\u00e9meti, &\nN\u00e9meti 2009; Copeland & Shagrir 2019).\n\nDoyle, for instance, suggested that equilibrating systems\nwith discrete spectra (e.g., molecules or other quantum many-body\nsystems) may illustrate a concept of computation that is wider than\neffective computation. Since \u201cequilibrating can be so easily,\nreproducibly, and mindlessly accomplished\u201d, Doyle said, we may\n\u201ctake the operation of equilibrating\u201d to be a\ncomputational operation, even if the functions computable in principle\nusing Turing-machine operations plus equilibrating include\nfunctions that are not computable by an unaided Turing machine (Doyle\n2002: 519).\n5.3.4 The word \u201cmechanical\u201d\n\nThere is a world of difference between the technical and everyday\nmeanings of \u201cmechanical\u201d. In the technical literature,\n\u201cmechanical\u201d and \u201ceffective\u201d are usually used\ninterchangeably: A \u201cmechanical\u201d procedure is simply an\neffective procedure. Gandy 1988 outlines the history of this use of\nthe word \u201cmechanical\u201d.\n\nStatements like the following occur in the literature:\n\n\nTuring proposed that a certain class of abstract machines [Turing\nmachines] could perform any \u201cmechanical\u201d computing\nprocedure. (Mendelson 1964: 229)\n\n\nThis could be mistaken for Thesis M. However, \u201cmechanical\u201d\nis here being used in its technical sense, and the statement is\nnothing more than the Church-Turing thesis:\n\n\nTuring proposed that a certain class of abstract machines could\nperform any effective computing procedure.\n\n\nThe technical usage of \u201cmechanical\u201d has a tendency to\nobscure the conceptual possibility that not all machine-generatable\nfunctions are Turing-machine computable. The question \u201cCan a\nmachine implement a procedure that is not mechanical?\u201d\nmay appear self-answering\u2014yet this is what is being asked if\nThesis M and the maximality thesis are questioned.\n5.4 The strong maximality thesis\n\nThe maximality thesis has two interpretations, depending whether the\nphrase \u201ccan be generated by machine\u201d is taken in the sense\nof \u201ccan be generated by a machine conforming to the physical\nlaws of the actual world\u201d (the weak form of the thesis), or in a\nsense that quantifies over all machines, irrespective of\nconformity to the actual laws of physics (the strong form). (The\nstrong-weak terminology reflects the fact that the strong form entails\nthe weak, but not vice versa.)\n\nThe weak form will be discussed in\n Section 6.4.\n The strong form is known to be false. This can be shown by giving an\nexample of a notional machine that is capable of generating a function\nthat is not effectively computable. A single example will be provided\nhere; further examples may be found in Andr\u00e9ka et al. 2009,\nDavies 2001, Hogarth 1994, Pitowsky 1990, Siegelmann 2003, and other\npapers mentioned below.\n5.4.1 Accelerating Turing machines\n\nAccelerating Turing machines (ATMs) are exactly like standard Turing\nmachines except that their speed of operation accelerates as the\ncomputation proceeds (Stewart 1991; Copeland 1998a,b, 2002a; Copeland\n& Shagrir 2011). An ATM performs the second operation called for\nby its program in half the time taken to perform the first, the third\nin half the time taken to perform the second, and so on.\n\nIf the time taken to perform the first operation is called one\n\u201cmoment\u201d, then the second operation is performed in half a\nmoment, the third operation in quarter of a moment, and so on.\nSince \n\\[ \\frac{1}{2} + \\frac{1}{4} + \\frac{1}{8} + \\ldots + \\frac{1}{2n} + \\frac{1}{2n+1} + \\ldots \\le 1, \\]\n\n\nan ATM is able to perform infinitely many operations in two moments of\noperating time. This enables ATMs to generate functions that cannot be\ncomputed by any standard Turing machine (and so, by the Church-Turing\nthesis, these functions are not effectively computable).\n\nOne example of such a function is the halting function \\(h\\).\n\\(h(n) = 1\\) if the \\(n\\)th Turing machine halts, and \\(h(n) = 0\\) if\nthe \\(n\\)th Turing machine runs on endlessly. It is well known that no\nstandard Turing machine can compute this function (Davis 1958); but an\nATM can produce any of the function\u2019s values in a finite period\nof time.\n\nWhen computing \\(h(n)\\), the ATM\u2019s first step is write\n\u201c0\u201d on a square of the tape called the answer square\n(\\(A\\)). The ATM then proceeds to simulate the actions of the \\(n\\)th\nTuring machine. If the ATM finds that the \\(n\\)th machine halts, then\nthe ATM goes on to erase the \u201c0\u201d it previously wrote on\n\\(A\\), replacing this by \u201c1\u201d. If, on the other hand, the\n\\(n\\)th machine does not halt, the ATM never returns to square \\(A\\)\nto erase the \u201c0\u201d originally written there. Either way,\nonce two moments of operating time have elapsed, \\(A\\) contains the\nvalue \\(h(n)\\) (Copeland 1998a).\n\nThis notional machine is a counterexample to the strong maximality\nthesis.\n6. Modern Versions of the Church-Turing Thesis\n6.1 The algorithmic version\n\nIn modern computer science, algorithms and effective procedures are\nassociated not primarily with humans but with machines. Accordingly,\nmany computer science textbooks formulate the Church-Turing thesis\nwithout mentioning human computers (e.g., Hopcroft & Ullman 1979;\nLewis & Papadimitriou 1981). This is despite the fact that the\nconcept of human computation lay at the heart of Turing\u2019s and\nChurch\u2019s analyses.\n\nThe variety of algorithms studied by modern computer science eclipses\nthe field as it was in Turing\u2019s day. There are now parallel\nalgorithms, distributed algorithms, interactive algorithms, analog\nalgorithms, hybrid algorithms, quantum algorithms, enzymatic\nalgorithms, bacterial foraging algorithms, slime-mold algorithms and\nmore (see e.g., Gurevich 2012; Copeland & Shagrir 2019). The\nuniversal Turing machine cannot even perform the atomic steps of\nalgorithms carried out by, e.g., a parallel system where every cell\nupdates simultaneously (in contrast to the serial Turing machine), or\nan enzymatic system (where the atomic steps involve operations such as\nselective enzyme binding).\n\nNevertheless, the universal Turing machine is still able to\ncalculate the behavior of parallel systems and enzymematic\nsystems. The algorithmic version of the Church-Turing thesis\nstates that this is true of every algorithmic system. Thus\nLewis and Papadimitriou said: \u201cwe take the Turing machine to be\na precise formal equivalent of the intuitive notion of\n\u2018algorithm\u2019\u201d (1981: 223). David Harel gave the\nfollowing (famous) formulation of the algorithmic version of the\nthesis:\n\n\nany algorithmic problem for which we can find an algorithm that can be\nprogrammed in some programming language, any language,\n\u2026 is also solvable by a Turing machine. This statement is one\nversion of the so-called Church/Turing thesis. (Harel 1992: 233)\n\n\nGiven the extent to which the concept of an algorithm has evolved\nsince the 1930s\u2014from the step-by-step labors of human computers\nto the growth of slime mold\u2014interesting questions arise. Will\nthe concept continue to evolve? What are the limits, if any, on this\nevolution? Could the concept evolve in such that a way that the\nalgorithmic version of the Church-Turing thesis is no longer\nuniversally true? Returning to Doyle\u2019s suggestions about\nequilibrating systems (in\n Section 5.3.3),\n Doyle\u2019s claim is essentially that the operation of\nequilibrating could reasonably be regarded as a basic step of some\neffective procedures or algorithms\u2014whether or not the\nresulting algorithms satisfy the algorithmic version of the\nChurch-Turing thesis. (See Copeland & Shagrir 2019 for further\ndiscussion.)\n\nIn summary, the algorithmic version of the Church-Turing thesis is\nbroader than the original thesis, in that Church and Turing considered\nessentially only a single type of algorithm, effective step-by-step\ncalculations on paper. The algorithmic version is also perhaps less\nsecure than the original thesis.\n6.2 Computational complexity: the Extended Church-Turing thesis\n\nThe Turing machine now holds a central place not only in computability\ntheory but also in complexity theory. Quantum computation researchers\nBernstein and Vazirani say:\n\n\nJust as the theory of computability has its foundations in the\nChurch-Turing thesis, computational complexity theory rests upon a\nmodern strengthening of this thesis. (Bernstein & Vazirani 1997:\n1411)\n\n\nThere are in fact two different complexity-theoretic versions of the\nChurch-Turing thesis in the modern computer science literature. Both\nare referred to as the \u201cExtended Church-Turing thesis\u201d.\nThe first was presented by Yao in 2003:\n\n\nThe Extended Church-Turing Thesis (ECT) makes the \u2026\nassertion that the Turing machine model is also as efficient as any\ncomputing device can be. That is, if a function is computable by some\nhardware device in time \\(T(n)\\) for input of size \\(n\\), then it is\ncomputable by a Turing machine in time \\((T(n))^k\\) for some fixed\n\\(k\\) (dependent on the problem). (Yao 2003: 100\u2013101)\n\n\nYao points out that ECT has a powerful implication:\n\n\nat least in principle, to make future computers more efficient, one\nonly needs to focus on improving the implementation technology of\npresent-day computer designs. (2003: 101)\n\n\nUnlike the original Church-Turing thesis (whose status is\n\u201csomething between\u201d a theorem and a definition) ECT is\nneither a logico-mathematical theorem nor a definition. If it is true,\nthen its truth is a consequence of the laws of physics\u2014and it\nmight not be true. (Although it is trivial if, contrary to a standard\nbut unproved assumption in computer science, P = NP.)\n\nThe second complexity-theoretic version of the thesis involves the\nconcept of a probabilistic Turing machine (due to Rabin &\nScott 1959). Vazirani and Aharonov state the thesis:\n\n\n[T]he extended Church-Turing thesis \u2026 asserts that any\nreasonable computational model can be simulated efficiently by the\nstandard model of classical computation, namely, a probabilistic\nTuring machine. (Aharonov & Vazirani 2013: 329)\n\n\nThese two related theses differ considerably from the original\nChurch-Turing thesis, not least in that both extended theses are\nempirical hypotheses. Moreover, there is ongoing debate as to\nwhether quantum computers in fact falsify these theses. (For an\nintroduction to this debate see Copeland & Shagrir 2019, and for a\nmore detailed treatment see Aharonov & Vazirani 2013.)\n6.3 Brain simulation and the Church-Turing thesis\n\nIt is sometimes said that the Church-Turing thesis has implications\nconcerning the scope of computational simulation. For example, Searle\nwrites:\n\n\nCan the operations of the brain be simulated on a digital computer?\n\u2026 The answer seems to me \u2026 demonstrably\n\u201cYes\u201d \u2026 That is, naturally interpreted, the\nquestion means: Is there some description of the brain such that under\nthat description you could do a computational simulation of the\noperations of the brain. But given Church\u2019s thesis that anything\nthat can be given a precise enough characterization as a set of steps\ncan be simulated on a digital computer, it follows trivially that the\nquestion has an affirmative answer. (Searle 1992: 200)\n\n\nAnother example:\n\n\nwe can depend on there being a Turing machine that captures the\nfunctional relations of the brain,\n\n\nfor so long as\n\n\nthese relations between input and output are functionally well-behaved\nenough to be describable by \u2026 mathematical relationships\n\u2026 we know that some specific version of a Turing machine will\nbe able to mimic them. (Guttenplan 1994: 595)\n\n\nAndr\u00e9ka, N\u00e9meti and N\u00e9meti state a more general\nthesis about the power of Turing machines to simulate other\nsystems:\n\n\n[T]he Physical Church-Turing Thesis \u2026 is the conjecture that\nwhatever physical computing device (in the broader sense) or physical\nthought-experiment will be designed by any future civilization, it\nwill always be simulateable by a Turing machine. (Andr\u00e9ka,\nN\u00e9meti, & N\u00e9meti 2009: 500)\n\n\nAndr\u00e9ka, N\u00e9meti, and N\u00e9meti even say that the\nthesis they state here \u201cwas formulated and generally accepted in\nthe 1930s\u201d (ibid.).\n\nYet it was not a thesis about the simulation of physical\nsystems that Church and Turing formulated in the 1930s, but rather a\ncompletely different thesis concerning human computation\u2014and it\nwas the latter thesis that became generally accepted during the 1930s\nand 1940s.\n\nIt certainly muddies the waters to call a thesis about simulation\n\u201cChurch\u2019s thesis\u201d or the \u201cChurch-Turing\nthesis\u201d, because the arguments that Church and Turing used to\nsupport their actual theses go no way at all towards supporting the\ntheses set out in the several quotations above. Nevertheless, what can\nbe termed the \u201cSimulation thesis\u201d has its place in the\npresent catalogue of modern forms of the Church-Turing thesis:\n\n\nSimulation thesis:\n\nAny system whose operations can be characterized as a set of steps\n(Searle) or whose input-output relations are describable by\nmathematical relationships (Guttenplan) can be simulated by a Turing\nmachine.\n\n\nIf the Simulation thesis is intended to cover all possible systems\nthen it is surely false, since Doyle\u2019s envisaged equilibrating\nsystems falsify it\n (Section 5.3.3).\n If, on the other hand, the thesis is intended to cover only actual\nphysical systems, including brains, then the Simulation thesis is,\nlike the Extended Church-Turing thesis, an empirical\nthesis\u2014and so is very different from Turing\u2019s thesis and\nChurch\u2019s thesis. The truth of the \u201cactual physical\nsystems\u201d version of the Simulation thesis depends on the laws of\nphysics.\n\nOne potential objection that any upholder of the Simulation thesis\nwill need to confront parallels a difficulty that Gandy raised for\nThesis M\n (Section 5.1).\n Physical systems that are not discrete\u2014such as Gandy\u2019s\n\u201cessentially analogue machines\u201d\u2014appear to falsify\nthe Simulation thesis, since the variables of a system with continuous\ndynamics take arbitrary real numbers as their values, whereas a Turing\nmachine is restricted to computable real numbers, and so\ncannot fully simulate the continuous system.\n\nThis brings the discussion squarely to one of the most interesting\ntopics in the area, so-called \u201cphysical versions\u201d of the\nChurch-Turing thesis.\n6.4 The Church-Turing thesis and physics\n6.4.1 The Deutsch-Wolfram thesis\n\nIn 1985, Wolfram formulated a thesis that he described as \u201ca\nphysical form of the Church-Turing hypothesis\u201d:\n\n\n[U]niversal computers are as powerful in their computational\ncapacities as any physically realizable system can be, so that they\ncan simulate any physical system. (Wolfram 1985: 735)\n\n\nDeutsch (who laid the foundations of quantum computation)\nindependently stated a similar thesis, again in 1985, and also\ndescribed it as a \u201cphysical version\u201d of the Church-Turing\nthesis:\n\n\nI can now state the physical version of the Church-Turing principle:\n\u201cEvery finitely realizable physical system can be perfectly\nsimulated by a universal model computing machine operating by finite\nmeans\u201d. This formulation is both better defined and more\nphysical than Turing\u2019s own way of expressing it. (Deutsch 1985:\n99)\n\n\nThis thesis is certainly \u201cmore physical\u201d than\nTuring\u2019s thesis. It is, however, a completely different\nclaim from Turing\u2019s own, so it is potentially confusing to\npresent it as a \u201cbetter defined\u201d version of what Turing\nsaid. As already emphasized, Turing was talking about effective\nmethods, whereas the theses presented by Deutsch and Wolfram\nconcern all (finitely realizable) physical systems\u2014no matter\nwhether or not the system\u2019s activity is effective.\n\nIn the wake of this early work by Deutsch and Wolfram, the phrases\n\u201cphysical form of the Church-Turing thesis\u201d,\n\u201cphysical version of the Church-Turing thesis\u201d\u2014and\neven \u201cthe physical Church-Turing\nthesis\u201d\u2014are now quite common in the current literature.\nHowever, such terms are probably better avoided, since these physical\ntheses are very distant from Turing\u2019s thesis and Church\u2019s\nthesis.\n\nIn his 1985 paper, Deutsch went on to point out that if the\ndescription \u201ca universal model computing machine operating by\nfinite means\u201d is replaced in his physical thesis by \u201ca\nuniversal Turing machine\u201d, then the result:\n\n\nEvery finitely realizable physical system can be perfectly simulated\nby a universal Turing machine\n\n\nis not true. His reason for saying so is the point discussed at the\nend of\n Section 6.3,\n concerning non-discrete physical systems. Deutsch argued that a\nuniversal Turing machine \u201ccannot perfectly simulate any\nclassical dynamical system\u201d, since \u201c[o]wing to the\ncontinuity of classical dynamics, the possible states of a classical\nsystem necessarily form a continuum\u201d, whereas the universal\nTuring machine is a discrete system (Deutsch 1985: 100). Deutsch then\nwent on to introduce the important concept of a universal quantum\ncomputer, saying (but without proof) that this is \u201ccapable of\nperfectly simulating every finite, realizable physical system\u201d\n(1985: 102).\n\nThe following formulation differs in its details from both\nWolfram\u2019s and Deutsch\u2019s theses, but arguably captures the\nspirit of both. In view of the Deutsch-Gandy point about continuous\nsystems, the idea of perfect simulation is replaced by the concept of\nsimulation to any desired degree of accuracy:\n\n\nDeutsch-Wolfram Thesis:\n\nEvery finite physical system can be simulated to any specified degree\nof accuracy by a universal Turing machine. (Copeland & Shagrir\n2019)\n\n\nRelated physical theses were advanced by Earman 1986, Pour-El and\nRichards 1989, Pitowsky 1990, Blum et al. 1998, and others. The\nDeutsch-Wolfram thesis is closely related to Gandy\u2019s Thesis M,\nand to the weak maximality thesis\n (Section 5.4).\n In fact the Deutsch-Wolfram thesis entails the latter (but not vice\nversa, since the maximality thesis concerns only machines,\nwhereas the Deutsch-Wolfram thesis concerns the behavior of\nall finite physical systems\u2014although any who think that\nevery finite physical system is a computing machine will disagree; see\ne.g., Pitowsky 1990).\n\nIs the Deutsch-Wolfram thesis true? This is an open question (Copeland\n& Shagrir 2020)\u2014so too for the weak maximality thesis. One\nfocus of debate is whether physical randomness, if it exists,\nfalsifies these theses (Calude et al. 2010; Calude & Svozil 2008;\nCopeland 2000). But even in the case of non-random systems,\nspeculation stretches back over at least six decades that there may be\nreal physical processes (and so, potentially, machine-operations)\nwhose behavior is neither computable nor approximable by a universal\nTuring machine. See, for example, Scarpellini 1963, Pour-El and\nRichards 1979, 1981, Kreisel 1967, 1974, 1982, Geroch and Hartle 1986,\nPitowsky 1990, Stannett 1990, da Costa and Doria 1991, 1994, Hogarth\n1994, Siegelmann and Sontag 1994, Copeland and Sylvan 1999, Kieu 2004,\n2006 (see Other Internet Resources), Penrose 1994, 2011, 2016.\n\nTo select, by way of example, just one paper from this list: Pour-El\nand Richards showed in their 1981 article that a system evolving from\ncomputable initial conditions in accordance with the familiar\nthree-dimensional wave equation is capable of exhibiting behavior that\nfalsifies the Deutsch-Wolfram thesis. However, now as then, it is an\nopen question whether these initial conditions are physically\npossible.\n6.4.2 The \u201cGandy argument\u201d\n\nGandy (1980) gave a profound discussion of whether there could be\ndeterministic, discrete systems whose behavior cannot be calculated by\na universal Turing machine. The now famous \u201cGandy\nargument\u201d aims to show that, given certain reasonable physical\nassumptions, the behavior of every discrete deterministic\nmechanism is calculable by Turing machine. In some respects, the Gandy\nargument resembles and extends Turing\u2019s argument I, and Gandy\nregarded it as an improved and more general alternative to\nTuring\u2019s I (1980: 145). He emphasized that (unlike\nTuring\u2019s argument), his argument takes \u201cparallel working\ninto account\u201d (1980: 124\u20135); and it is this that accounts\nfor much of the additional complexity of Gandy\u2019s analysis as\ncompared to Turing\u2019s.\n\nGandy viewed the conclusion of his argument (that the behavior of\nevery discrete deterministic mechanism is calculable by Turing\nmachine) as relatively a priori, provable on the basis of a\nset-theoretic derivation that makes very general physical assumptions\n(namely, the four axioms mentioned in\n Section 3.4).\n These assumptions include, for instance, a lower bound on the\ndimensions of a mechanism\u2019s components, and an upper bound on\nthe speed of propagation of effects and signals. (The argument aims to\ncover only mechanisms obeying the principles of Relativity.) Gandy\nexpressed his various physical assumptions set-theoretically, by means\nof precise axioms, which he called Principles I \u2013 IV. Principle\nIII, for example, captures the idea that there is a bound on the\nnumber of types of basic parts (atoms) from which the states of the\nmachine are uniquely assembled; and Principle IV\u2014which Gandy\ncalled the \u201cprinciple of local causation\u201d\u2014captures\nthe idea that each state-transition must be determined by the\nlocal environments of the parts of the mechanism that change\nin the transition.\n\nGandy was very clear that his argument does not apply to continuous\nsystems\u2014analogue machines, as he called them\u2014and\nnon-relativistic systems. (Extracts from unpublished work by Gandy, in\nwhich he attempted to develop a companion argument for analogue\nmachines, are included in Copeland & Shagrir 2007.) However, the\nscope of the Gandy argument is also limited in other ways, not noted\nby Gandy himself. For example, some asynchronous algorithms fall\noutside the scope of Gandy\u2019s principles (Gurevich 2012; Copeland\n& Shagrir 2007). Gurevich concludes that Gandy has not shown\n\u201cthat his axioms are satisfied by all discrete mechanical\ndevices\u201d, and Shagrir says there is no \u201cbasis for claiming\nthat Gandy characterized finite machine computation\u201d (Gurevich\n2012: 36, Shagrir 2002: 234). It will be useful to give some examples\nof discrete deterministic systems that, in one way or another, evade\nGandy\u2019s conclusion that the behavior of every such system is\ncalculable by Turing machine.\n\nFirst, it is relatively trivial that mechanisms satisfying\nGandy\u2019s four principles may nevertheless produce uncomputable\noutput from computable input if embedded in a universe whose physical\nlaws have Turing-uncomputability built into them, e.g., via a temporal\nvariable (Copeland & Shagrir 2007). Moreover, some asynchronous\nalgorithms fall outside the scope of Gandy\u2019s principles\n(Gurevich 2012; Copeland & Shagrir 2007). Second, certain\n(notional) discrete deterministic \u201crelativistic computers\u201d\nalso fall outside the scope of Gandy\u2019s principles. Relativistic\ncomputers were described in a 1987 lecture by Pitowsky (Pitowsky\n1990), and in Hogarth 1994 and Etesi & N\u00e9meti 2002. The\nidea is outlined in the entry on\n computation in physical systems;\n for further discussion see Shagrir and Pitowsky 2003, Copeland and\nShagrir 2020.\n\nThe N\u00e9meti relativistic computer makes use of gravitational\ntime-dilation effects in order to compute (in a broad sense) a\nfunction that provably cannot be computed by a universal Turing\nmachine (e.g., the halting function). N\u00e9meti and his colleagues\nemphasize that the N\u00e9meti computer is \u201cnot in conflict\nwith presently accepted scientific principles\u201d and that, in\nparticular, \u201cthe principles of quantum mechanics are not\nviolated\u201d. They suggest moreover that humans might \u201ceven\nbuild\u201d a relativistic computer \u201csometime in the\nfuture\u201d (Andr\u00e9ka, N\u00e9meti, & N\u00e9meti\n2009: 501).\n\nAccording to Gandy,\n\n\u201cA discrete deterministic mechanical device satisfies\nprinciples I-IV\u201d (he called this \u201cThesis P\u201d; Gandy\n1980: 126), and\n\u201cWhat can be calculated by a device satisfying principles\nI-IV is computable\u201d (he labelled this\n\u201cTheorem\u201d).\n\n\n1 and 2 together yield: What can be calculated by a discrete\ndeterministic mechanical device is (Turing-machine)\ncomputable.\n\nHowever, the N\u00e9meti computer is a discrete, deterministic\nmechanical device, and yet is able to calculate functions that are not\nTuring-machine computable. That is to say, relativistic computers are\ncounterexamples to Gandy\u2019s Thesis P. In brief, the reason for\nthis is that the sense of \u201cdeterministic\u201d implicitly\nspecified in Gandy\u2019s Principles\n(\u201cGandy-deterministic\u201d) is narrower than the intuitive\nsense of \u201cdeterministic\u201d, where a deterministic system is\none obeying laws that involve no randomness or stochasticity.\nRelativistic computers are deterministic but not Gandy-deterministic.\n(For a fuller discussion, see Copeland, Shagrir, & Sprevak\n2018.)\n\nIn conclusion, Gandy\u2019s analysis has made a considerable\ncontribution to the current understanding of machine computation. But,\nimportant and illuminating though the Gandy argument is, it certainly\ndoes not settle the question whether the Deutsch-Wolfram thesis is\ntrue.\n6.4.3 Quantum effects and the \u201cTotal\u201d thesis\n\nThere is a stronger form of the\n Deutsch-Wolfram thesis,\n dubbed the \u201cTotal thesis\u201d in Copeland and Shagrir\n2019.\n\n\nThe Total Thesis:\n\nEvery physical aspect of the behavior of any physical system can be\ncalculated (to any specified degree of accuracy) by a universal Turing\nmachine.\n\n\nLogically, the Total thesis is counter-exampled by the universal\nTuring machine itself (assuming that the universal machine, with its\nindefinitely long tape, is at least a notional physical system; see\nCopeland & Shagrir 2020 for discussion of this assumption). This\nis because there is no algorithm for calculating whether a universal\nTuring machine halts on every given input\u2014i.e., there is no\nalgorithm for calculating that aspect of the machine\u2019s behavior.\nThe question remains, however, whether the Total thesis is infringed\nby any systems that are \u201cmore physical\u201d than the universal\nmachine. (Notice that such systems, if any exist, do not necessarily\nalso infringe the Deutsch-Wolfram thesis, since it is possible that,\neven though answers to certain physical questions about the system are\nuncomputable, the system is nevertheless able to be simulated by a\nTuring machine.)\n\nInterestingly, recent work in condensed matter quantum physics\nindicates that\u2014possibly\u2014quantum many-body systems could\ninfringe the Total thesis. In 2012, Eisert, M\u00fcller and Gogolin\nestablished the surprising result that\n\n\nthe very natural physical problem of determining whether certain\noutcome sequences cannot occur in repeated quantum measurements is\nundecidable, even though the same problem for classical measurements\nis readily decidable. (Eisert, M\u00fcller & Gogolin 2012:\n260501.1)\n\n\nThis was a curtain-raiser to a series of dramatic results about the\nuncomputability of quantum phase transitions, by Cubitt and his group\n(Cubitt, Perez-Garcia, & Wolf 2015; Bausch, Cubitt, Lucia, &\nPerez-Garcia 2020; Bausch, Cubitt, & Watson 2021). These results\nconcern the \u201cspectral gap\u201d, an important determinant of\nthe properties of a substance. A quantum many-body system is said to\nbe \u201cgapped\u201d if the system has a well-defined next least\nenergy-level above the system\u2019s ground energy-level, and is said\nto be \u201cgapless\u201d otherwise (i.e., if the energy spectrum is\ncontinuous). The \u201cspectral gap problem\u201d is the problem of\ndetermining whether a given many-body system is gapped or gapless.\n\nThe uncomputability results of Cubitt et al. stem from their discovery\nthat the halting problem can be encoded in the spectral gap problem.\nDeciding whether a model system of the type they have studied is\ngapped or gapless, given a description of the local interactions, is\n\u201cat least as hard as solving the Halting Problem\u201d (Bausch,\nCubitt, & Watson 2021: 2). Moreover, this is not just a case of\nuncomputability in, uncomputability out. Uncomputability\narises even though the initial conditions are computable (as with the\nnotional system described in Pour-El and Richards 1981, mentioned in\n Section 6.4.1).\n Cubitt et al. emphasize:\n\n\nthe phase diagram is uncomputable even for computable (or\neven algebraic) values of its parameter \\(\\phi\\). Indeed, it is\nuncomputable at a countably-infinite set of computable (or algebraic)\nvalues of \\(\\phi\\). (Bausch, Cubitt, & Watson 2019: 8)\n\n\nHowever, Cubitt admits that the models used in the proofs are somewhat\nartificial:\n\n\nWhether the results can be extended to more natural models is yet to\nbe determined. (Cubitt, Perez-Garcia & Wolf 2015: 211)\n\n\nIn short, it is an open\u2014and fascinating\u2014question whether\nthere are realistic physical systems that fail to satisfy the Total\nthesis.\n7. Some Key Remarks by Turing and Church\n7.1 Turing machines\n\nTuring prefaced his first description of a Turing machine with the\nwords:\n\n\nWe may compare a man in the process of computing a \u2026 number to\na machine. (Turing 1936 [2004: 59])\n\n\nThe Turing machine is a model, idealized in certain respects, of a\nhuman being calculating in accordance with an effective\nmethod.\n\nWittgenstein put this point in a striking way:\n\n\nTuring\u2019s \u201cMachines\u201d. These machines are\nhumans who calculate. (Wittgenstein 1947 [1980: 1096])\n\n\nIt is a point that Turing was to emphasize, in various forms, again\nand again. For example:\n\n\nA man provided with paper, pencil, and rubber, and subject to strict\ndiscipline, is in effect a universal machine. (Turing 1948 [2004:\n416])\n\n\nIn order to understand Turing\u2019s \u201cOn Computable\nNumbers\u201d and later texts, it is essential to keep in mind that\nwhen he used the words \u201ccomputer\u201d,\n\u201ccomputable\u201d and \u201ccomputation\u201d, he employed\nthem not in their modern sense as pertaining to machines, but as\npertaining to human calculators. For example:\n\n\nComputers always spend just as long in writing numbers down and\ndeciding what to do next as they do in actual multiplications, and it\nis just the same with ACE [the Automatic Computing Engine] \u2026\n[T]he ACE will do the work of about 10,000 computers \u2026\nComputers will still be employed on small calculations \u2026\n(Turing 1947 [2004: 387, 391])\n\n\nTuring\u2019s ACE, an early electronic stored-program digital\ncomputer, was built at the National Physical Laboratory, London; a\npilot version\u2014at the time the fastest functioning computer in\nthe world\u2014first ran in 1950, and a commercial model, the DEUCE,\nwas marketed very successfully by English Electric.\n7.2 Human computation and machine computation\n\nThe electronic stored-program digital computers for which the\nuniversal Turing machine was a blueprint are, each of them,\ncomputationally equivalent to a Turing machine, and so they too are,\nin a sense, models of human beings engaged in computation. Turing\nchose to emphasize this when explaining these electronic machines in a\nmanner suitable for an audience of uninitiates:\n\n\nThe idea behind digital computers may be explained by saying that\nthese machines are intended to carry out any operations which could be\ndone by a human computer. (Turing 1950a [2004: 444])\n\n\nHe made the point a little more precisely in the technical document\ncontaining his design for the ACE:\n\n\nThe class of problems capable of solution by the machine [the ACE] can\nbe defined fairly specifically. They are [a subset of] those problems\nwhich can be solved by human clerical labour, working to fixed rules,\nand without understanding. (Turing 1945 [2005: 386])\n\n\nTuring went on to characterize this subset in terms of the\namount of paper and time available to the human clerk.\n\nIt was presumably because he considered the point to be essential for\nunderstanding the nature of the new electronic machines that he chose\nto begin his Programmers\u2019 Handbook for Manchester Electronic\nComputer Mark II with this explanation:\n\n\nElectronic computers are intended to carry out any definite rule of\nthumb process which could have been done by a human operator working\nin a disciplined but unintelligent manner. (Turing c1950:\n1)\n\n\nIt was not some deficiency of imagination that led Turing to model his\nL.C.M.s on what could be achieved by a human computer. The\npurpose for which he invented the Turing machine demanded it. The\nEntscheidungsproblem is the problem of finding a humanly\nexecutable method of a certain sort, and, as was explained\nearlier, Turing\u2019s aim was to show that there is no such method\nin the case of the full first-order predicate calculus.\n7.3 Church and the human computer\n\nTuring placed the human computer center stage in his 1936 paper. Not\nso Church. Church did not mention computation or human computers\nexplicitly in either of his two groundbreaking papers on the\nEntscheidungsproblem (Church 1936a,b). He spoke of \u201ceffective\ncalculability\u201d, taking it for granted his readers would\nunderstand this term to be referring to human calculation. He\nalso used the term \u201ceffective method\u201d, again taking it for\ngranted that readers would understand him to be speaking of a humanly\nexecutable method.\n\nChurch also used the term \u201calgorithm\u201d, saying\n\n\nIt is clear that for any recursive function of positive integers there\nexists an algorithm using which any required particular value of the\nfunction can be effectively calculated. (Church 1936a: 351)\n\n\nHe said further that the notion of effective calculability could be\nspelled out as follows:\n\n\nby defining a function to be effectively calculable if there exists an\nalgorithm for the calculation of its values. (Church 1936a: 358)\n\n\nIt was in Church\u2019s review of Turing\u2019s 1936 paper that he\nbrought the human computer out of the shadows. He wrote:\n\n\n[A] human calculator, provided with pencil and paper and explicit\ninstructions, can be regarded as a kind of Turing machine. It is thus\nimmediately clear that computability, so defined [i.e., computability\nby a Turing machine], can be identified with (especially, is no less\ngeneral than) the notion of effectiveness as it appears in certain\nmathematical problems \u2026 and in general any problem which\nconcerns the discovery of an algorithm. (Church 1937a: 43)\n\n7.4 Turing\u2019s use of \u201cmachine\u201d\n\nIt is important to note that, when Turing used the word\n\u201cmachine\u201d, he often meant not machine-in-general but, as\nwe would now say, Turing machine. At one point he explicitly drew\nattention to this usage:\n\n\nThe expression \u201cmachine process\u201d of course means one which\ncould be carried out by the type of machine I was considering [in\n\u201cOn Computable Numbers\u201d]. (Turing 1947 [2004:\n378\u20139])\n\n\nThus when, a few pages later, Turing asserted that \u201cmachine\nprocesses and rule of thumb processes are synonymous\u201d (1947\n[2004: 383]), he is to be understood as advancing the Church-Turing\nthesis (and its converse), not a version of the maximality thesis.\nUnless his intended usage is borne in mind, misunderstanding could\nensue. Especially liable to mislead are statements like the following,\nwhich a casual reader might mistake for a formulation of the\nmaximality thesis:\n\n\nThe importance of the universal machine is clear. We do not need to\nhave an infinity of different machines doing different jobs. A single\none will suffice. The engineering problem of producing various\nmachines for various jobs is replaced by the office work of\n\u201cprogramming\u201d the universal machine to do these jobs.\n(Turing 1948 [2004: 414])\n\n\nIn context it is perfectly clear that these remarks concern machines\nequivalent to Turing machines; the passage is embedded in a discussion\nof L.C.M.s.\n\nWhether or not Turing would, if queried, have assented to the weak\nmaximality thesis is unknown. There is certainly no textual evidence\nin favor of the view that he did so assent. The same is true of the\n Deutsch-Wolfram thesis\n and its cognates: there is no textual evidence that Turing would have\nassented to any such thesis.\n7.5 Church\u2019s version of Turing\u2019s thesis\n\nInterestingly, the summary of Turing\u2019s account of computability\ngiven by Church in his 1937 review was not entirely correct. Church\nsaid:\n\n\nThe author [Turing] proposes as a criterion that an infinite sequence\nof digits 0 and 1 be \u201ccomputable\u201d that it shall be\npossible to devise a computing machine, occupying a finite space and\nwith working parts of a finite size, which will write down the\nsequence to any desired number of terms if allowed to run for a\nsufficiently long time. (Church 1937a: 42)\n\n\nHowever, there was no requirement proposed in Turing\u2019s 1936\npaper that Turing machines occupy \u201ca finite space\u201d or have\n\u201cworking parts of a finite size\u201d. Nor did Turing couch\nmatters in terms of the machine\u2019s writing down \u201cany\ndesired number of terms\u201d of the sequence, \u201cif allowed to\nrun for a sufficiently long time\u201d. Turing said, on the contrary,\nthat a sequence is \u201ccomputable if it can be computed by a\ncircle-free machine\u201d (Turing 1936 [2004: 61]); where a machine\nis circle-free if it is not one that\n\n\nnever writes down more than a finite number of symbols [0s and 1s].\n(Turing 1936 [2004: 60])\n\n\nIn consequence, Church\u2019s version of Turing\u2019s thesis is\nsubtly different from Turing\u2019s own:\n\n\nChurch\u2019s Turing\u2019s thesis:\n\nAn infinite sequence of digits is \u201ccomputable\u201d if (and\nonly if) it is possible to devise a computing machine, occupying a\nfinite space and with working parts of a finite size, that will write\ndown the sequence to any desired number of terms if allowed to run for\na sufficiently long time.\n\n\nIn so far as Church includes these three finiteness requirements\n(i.e., that the machine occupy a finite space, have finite-sized\nparts, and produce finite numbers of digits), his version of\nTuring\u2019s thesis can perhaps be said to be \u201cmore\nphysical\u201d than any of Turing\u2019s formulations of the thesis.\nChurch\u2019s finiteness requirements are in some respects\nreminiscent of Gandy\u2019s idea that the states of a discrete\ndeterministic calculating machine must be built up iteratively from a\nbounded number of types of basic components, the dimensions of which\nhave a lower bound (see\n Section 6.4.2).\n Although, as explained there, Gandy imposes further requirements on a\ndiscrete deterministic calculating machine, and these go far beyond\nChurch\u2019s finiteness requirements.\n\nNotwithstanding Church\u2019s efforts to inject additional physical\nrealism into the concept of a Turing machine, it is\u2014as in\nTuring\u2019s case\u2014unknown whether Church would, if queried,\nhave assented to the\n Deutsch-Wolfram thesis\n or any cognate thesis. There seems to be no textual evidence either\nway. Church was simply silent about such matters.\n",
    "bibliography": {
        "categories": [],
        "cat_ref_text": {
            "ref_list": [
                "Ackermann, Wilhelm, 1928, \u201cZum Hilbertschen Aufbau der\nreellen Zahlen\u201d, <em>Mathematische Annalen</em>, 99(1):\n118\u2013133. doi:10.1007/BF01459088",
                "Aharonov, Dorit and Umesh V. Vazirani, 2013, \u201cIs Quantum\nMechanics Falsifiable? A Computational Perspective on the Foundations\nof Quantum Mechanics\u201d, in Copeland, Posy, and Shagrir 2013:\n329\u2013349 (ch. 11).",
                "Andr\u00e9ka, Hajnal, Istv\u00e1n N\u00e9meti, and\nP\u00e9ter N\u00e9meti, 2009, \u201cGeneral Relativistic\nHypercomputing and Foundation of Mathematics\u201d, <em>Natural\nComputing</em>, 8(3): 499\u2013516.\ndoi:10.1007/s11047-009-9114-3",
                "Baldwin, J. Mark, 1902, \u201cLogical Machine\u201d, in J. Mark\nBaldwin (ed.), <em>Dictionary of Philosophy and Psychology</em>,\nvolume 2, New York: Macmillan, 28\u201330.",
                "Barendregt, Henk, 1997, \u201cThe Impact of the Lambda Calculus\nin Logic and Computer Science\u201d, <em>Bulletin of Symbolic\nLogic</em>, 3(2): 181\u2013215. doi:10.2307/421013",
                "Barrett, Lindsay and Matthew Connell, 2005, \u201cJevons and the\nLogic \u2018Piano\u2019\u201d, <em>The Rutherford Journal</em>, 1:\narticle 3.\n [<a href=\"http://www.rutherfordjournal.org/article010103.html\" target=\"other\">Barrett &amp; Connell 2005 available online</a>]",
                "Barwise, Jon, 1977, \u201cAn Introduction to First-Order\nLogic\u201d, in Jon Barwise (ed.), <em>Handbook of Mathematical\nLogic</em>, Amsterdam: North-Holland, 5\u201346.",
                "Bausch, Johannes, Toby S. Cubitt, Angelo Lucia, and David\nPerez-Garcia, 2020, \u201cUndecidability of the Spectral Gap in One\nDimension\u201d, <em>Physical Review X</em>, 10(3): 031038.\ndoi:10.1103/PhysRevX.10.031038",
                "Bausch, Johannes, Toby S. Cubitt, and James D. Watson, 2019,\n\u201cUncomputability of Phase Diagrams\u201d,\narXiv:1910.01631.",
                "\u2013\u2013\u2013, 2021, \u201cUncomputability of Phase\nDiagrams\u201d, <em>Nature Communications</em>, 12(1): article 452.\ndoi:10.1038/s41467-020-20504-6",
                "Behmann, Heinrich, 1921 [2015], \u201cEntscheidungsproblem und\nAlgebra der Logik\u201d, Lecture, 10 May 1921, to the G\u00f6ttingen\nMathematical Society. In Mancosu and Zach 2015: 177\u2013187, with a\npartial translation by Richard Zach in the same (2015:\n173\u2013177).",
                "\u2013\u2013\u2013, 1922, \u201cBeitr\u00e4ge zur Algebra der\nLogik, insbesondere zum Entscheidungsproblem\u201d, <em>Mathematische\nAnnalen</em>, 88(1\u20132): 168\u2013168.\ndoi:10.1007/BF01448447",
                "Bernays, Paul, 1918, \u201cBeitr\u00e4ge zur axiomatischen\nBehandlung des Logik-Kalk\u00fcls\u201d, Habilitationsschrift,\nUniversity of G\u00f6ttingen. Bernays Papers, ETH Zurich (Hs\n973.192).",
                "Bernays, Paul and Moses Sch\u00f6nfinkel, 1928, \u201cZum\nEntscheidungsproblem der mathematischen Logik\u201d,\n<em>Mathematische Annalen</em>, 99(1): 342\u2013372.\ndoi:10.1007/BF01459101",
                "Bernstein, Ethan and Umesh Vazirani, 1997, \u201cQuantum\nComplexity Theory\u201d, <em>SIAM Journal on Computing</em>, 26(5):\n1411\u20131473. doi:10.1137/S0097539796300921",
                "Blum, Lenore, Felipe Cucker, Michael Shub, and Steve Smale, 1998,\n<em>Complexity and Real Computation</em>, New York: Springer.\ndoi:10.1007/978-1-4612-0701-6",
                "Boolos, George and Richard C. Jeffrey, 1974, <em>Computability and\nLogic</em>, New York: Cambridge University Press.",
                "Buss, Samuel R., Alexander S. Kechris, Anand Pillay, and Richard\nA. Shore, 2001, \u201cThe Prospects for Mathematical Logic in the\nTwenty-First Century\u201d, <em>Bulletin of Symbolic Logic</em>,\n7(2): 169\u2013196. doi:10.2307/2687773",
                "Calude, Cristian S. and Karl Svozil, 2008, \u201cQuantum\nRandomness and Value Indefiniteness\u201d, <em>Advanced Science\nLetters</em>, 1(2): 165\u2013168. doi:10.1166/asl.2008.016",
                "Calude, Cristian S., Michael J. Dinneen, Monica Dumitrescu, and\nKarl Svozil, 2010, \u201cExperimental Evidence of Quantum Randomness\nIncomputability\u201d, <em>Physical Review A</em>, 82(2): 022102.\ndoi:10.1103/PhysRevA.82.022102",
                "Cantor, Georg, 1874, \u201cUeber eine Eigenschaft des Inbegriffs\naller reellen algebraischen Zahlen\u201d, <em>Journal f\u00fcr die\nreine und angewandte Mathematik</em>, 77: 258\u2013262.\ndoi:10.1515/crll.1874.77.258",
                "Carnap, Rudolf, 1935, \u201cEin G\u00fcltigkeitskriterium\nf\u00fcr die S\u00e4tze der klassischen Mathematik\u201d,\n<em>Monatshefte f\u00fcr Mathematik und Physik</em>, 42:\n163\u2013190. doi:10.1007/BF01733289",
                "Cassirer, Ernst, 1929, <em>Philosophie der symbolischen\nFormen</em> (Volume 3: <em>Ph\u00e4nomenologie der Erkenntnis</em>),\nBerlin: Bruno Cassirer.",
                "Church, Alonzo, 1932, \u201cA Set of Postulates for the\nFoundation of Logic\u201d, <em>Annals of Mathematics</em>, second\nseries 33(2): 346\u2013366. doi:10.2307/1968337",
                "\u2013\u2013\u2013, 1933, \u201cA Set of Postulates For the\nFoundation of Logic (2)\u201d, <em>Annals of Mathematics</em>, second\nseries 34(4): 839\u2013864. doi:10.2307/1968702",
                "\u2013\u2013\u2013, 1935a, \u201cAn Unsolvable Problem of\nElementary Number Theory, Preliminary Report\u201d (abstract),\n<em>Bulletin of the American Mathematical Society</em>, 41(6):\n332\u2013333. Full paper in Church 1936b.",
                "\u2013\u2013\u2013, 1935b, letter to Kleene, 29 November 1935.\nExcerpt in Davis 1982: 9.",
                "\u2013\u2013\u2013, 1935c, \u201cA Proof of Freedom from\nContradiction\u201d, <em>Proceedings of the National Academy of\nSciences</em>, 21(5): 275\u2013281. doi:10.1073/pnas.21.5.275",
                "\u2013\u2013\u2013, 1936a, \u201cAn Unsolvable Problem of\nElementary Number Theory\u201d, <em>American Journal of\nMathematics</em>, 58(2): 345\u2013363. doi:10.2307/2371045",
                "\u2013\u2013\u2013, 1936b, \u201cA Note on the\nEntscheidungsproblem\u201d, <em>The Journal of Symbolic Logic</em>,\n1(1): 40\u201341. doi:10.2307/2269326",
                "\u2013\u2013\u2013, 1937a, Review of Turing 1936, <em>The\nJournal of Symbolic Logic</em>, 2(1): 42\u201343.\ndoi:10.1017/S002248120003958X",
                "\u2013\u2013\u2013, 1937b, Review of Post 1936, <em>The Journal\nof Symbolic Logic</em>, 2(1): 43. doi:10.1017/S0022481200039591",
                "\u2013\u2013\u2013, 1941, <em>The Calculi of\nLambda-Conversion</em>, Princeton, NJ: Princeton University\nPress.",
                "Church, Alonzo and J. Barkley Rosser, 1936, \u201cSome Properties\nof Conversion\u201d, <em>Transactions of the American Mathematical\nSociety</em>, 39(3): 472\u2013482.\ndoi:10.1090/S0002-9947-1936-1501858-0",
                "Copeland, B. Jack, 1998a, \u201cEven Turing Machines Can Compute\nUncomputable Functions\u201d, in <em>Unconventional Models of\nComputation, Proceedings of the 1st International Conference, New\nZealand</em>, Christian S. Calude, John Casti, and Michael J. Dinneen\n(eds), London: Springer-Verlag, 150\u2013164.",
                "\u2013\u2013\u2013, 1998b, \u201cSuper Turing-Machines\u201d,\n<em>Complexity</em>, 4(1): 30\u201332.\ndoi:10.1002/(SICI)1099-0526(199809/10)4:1&lt;30::AID-CPLX9&gt;3.0.CO;2-8",
                "\u2013\u2013\u2013, 2000, \u201cNarrow versus Wide Mechanism:\nIncluding a Re-Examination of Turing\u2019s Views on the Mind-Machine\nIssue\u201d, <em>The Journal of Philosophy</em>, 97(1): 5\u201332.\ndoi:10.2307/2678472",
                "\u2013\u2013\u2013, 2002a, \u201cAccelerating Turing\nMachines\u201d, <em>Minds and Machines</em>, 12(2): 281\u2013300.\n(In a special issue on the Church-Turing thesis, edited by Carol\nCleland.) doi:10.1023/A:1015607401307",
                "\u2013\u2013\u2013 (ed.), 2004, <em>The Essential Turing:\nSeminal Writings in Computing, Logic, Philosophy, Artificial\nIntelligence, and Artificial Life</em>, Oxford: Clarendon Press.\ndoi:10.1093/oso/9780198250791.001.0001",
                "Copeland, B. Jack and Zhao Fan, 2022, \u201cDid Turing Stand on\nG\u00f6del\u2019s Shoulders?\u201d, <em>The Mathematical\nIntelligencer</em>, 44: 308\u2013319.\ndoi:10.1007/s00283-022-10177-y",
                "\u2013\u2013\u2013, 2023, \u201cTuring and von Neumann: From\nLogic to the Computer\u201d, <em>Philosophies</em>, 8(2):\n1\u201330.",
                "Copeland, B. Jack, Carl J. Posy, and Oron Shagrir (eds), 2013,\n<em>Computability: Turing, G\u00f6del, Church, and Beyond</em>,\nCambridge, MA: The MIT Press.",
                "Copeland, B. Jack and Oron Shagrir, 2007, \u201cPhysical\nComputation: How General Are Gandy\u2019s Principles for\nMechanisms?\u201d, <em>Minds and Machines</em>, 17(2): 217\u2013231.\ndoi:10.1007/s11023-007-9058-2",
                "\u2013\u2013\u2013, 2011, \u201cDo Accelerating Turing\nMachines Compute the Uncomputable?\u201d, <em>Minds and\nMachines</em>, 21(2): 221\u2013239.\ndoi:10.1007/s11023-011-9238-y",
                "\u2013\u2013\u2013, 2013, \u201cTuring versus G\u00f6del on\nComputability and the Mind\u201d, in Copeland, Posy, and Shagrir\n2013: 1\u201333 (ch. 1).",
                "\u2013\u2013\u2013, 2019, \u201cThe Church-Turing Thesis:\nLogical Limit or Breachable Barrier?\u201d, <em>Communications of the\nACM</em>, 62(1): 66\u201374. doi:10.1145/3198448",
                "\u2013\u2013\u2013, 2020, \u201cPhysical Computability\nTheories\u201d, in <em>Quantum, Probability, Logic: The Work and\nInfluence of Itamar Pitowsky</em>, Meir Hemmo and Orly Shenker (eds),\nCham: Springer: 217\u2013231.",
                "Copeland, B. Jack, Oron Shagrir, and Mark Sprevak, 2018,\n\u201cZuse\u2019s Thesis, Gandy\u2019s Thesis, and Penrose\u2019s\nThesis\u201d, in <em>Physical Perspectives on Computation,\nComputational Perspectives on Physics</em>, Michael E. Cuffaro and\nSamuel C. Fletcher (eds), Cambridge: Cambridge University Press,\n39\u201359. doi:10.1017/9781316759745.003",
                "Copeland, B. Jack and Richard Sylvan, 1999, \u201cBeyond the\nUniversal Turing Machine\u201d, <em>Australasian Journal of\nPhilosophy</em>, 77(1): 46\u201366.\ndoi:10.1080/00048409912348801",
                "Couturat, Louis (ed.), 1903, <em>Opuscules et Fragments\nIn\u00e9dits de Leibniz</em>, Paris: Alcan. Facsimile of the 1903\nedition, Hildesheim: G. Olms, 1961.",
                "Cubitt, Toby S., David Perez-Garcia, and Michael M. Wolf, 2015,\n\u201cUndecidability of the Spectral Gap\u201d, <em>Nature</em>,\n528(7581): 207\u2013211. doi:10.1038/nature16059",
                "Curry, Haskell B., 1929, \u201cAn Analysis of Logical\nSubstitution\u201d, <em>American Journal of Mathematics</em>, 51(3):\n363\u2013384. doi:10.2307/2370728",
                "\u2013\u2013\u2013, 1930a, \u201cGrundlagen der\nkombinatorischen Logik, Teil 1\u201d, <em>American Journal of\nMathematics</em>, 52(3): 509\u2013536. doi:10.2307/2370619",
                "\u2013\u2013\u2013, 1930b, \u201cGrundlagen der\nkombinatorischen Logik, Teil 2\u201d, <em>American Journal of\nMathematics</em>, 52(4): 789\u2013834. doi:10.2307/2370716",
                "\u2013\u2013\u2013, 1932, \u201cSome Additions to the Theory\nof Combinators\u201d, <em>American Journal of Mathematics</em>,\n54(3): 551\u2013558. doi:10.2307/2370900",
                "Curry, Haskell B. and Robert Feys, 1958, <em>Combinatory\nLogic</em>, Amsterdam: North-Holland.",
                "da Costa, Newton C. A. and Francisco A. Doria, 1991,\n\u201cClassical Physics and Penrose\u2019s Thesis\u201d,\n<em>Foundations of Physics Letters</em>, 4(4): 363\u2013373.\ndoi:10.1007/BF00665895",
                "\u2013\u2013\u2013, 1994, \u201cUndecidable Hopf Bifurcation\nwith Undecidable Fixed Point\u201d, <em>International Journal of\nTheoretical Physics</em>, 33(9): 1885\u20131903.\ndoi:10.1007/BF00671031",
                "Davies, E. Brian, 2001, \u201cBuilding Infinite Machines\u201d,\n<em>The British Journal for the Philosophy of Science</em>, 52(4):\n671\u2013682. doi:10.1093/bjps/52.4.671",
                "Davis, Martin, 1958, <em>Computability and Unsolvability</em>, New\nYork: McGraw-Hill.",
                "\u2013\u2013\u2013 (ed.), 1965, <em>The Undecidable: Basic\nPapers on Undecidable Propositions, Unsolvable Problems and Computable\nFunctions</em>, Hewlett, NY: Raven Press.",
                "\u2013\u2013\u2013, 1982, \u201cWhy G\u00f6del Didn\u2019t\nHave Church\u2019s Thesis\u201d, <em>Information and Control</em>,\n54(1\u20132): 3\u201324. doi:10.1016/S0019-9958(82)91226-8",
                "Davis, Martin and Wilfried Sieg, 2015, \u201cConceptual\nConfluence in 1936: Post and Turing\u201d, in <em>Turing\u2019s\nRevolution</em>, Giovanni Sommaruga and Thomas Strahm (eds), Cham:\nBirkh\u00e4user, 3\u201327. doi:10.1007/978-3-319-22156-4_1",
                "Dawson, John W., 2006, \u201cG\u00f6del and the Origins of\nComputer Science\u201d, in <em>Logical Approaches to Computational\nBarriers</em>, Arnold Beckmann, Ulrich Berger, Benedikt L\u00f6we, and\nJohn V. Tucker (eds), (Lecture Notes in Computer Science 3988),\nBerlin/Heidelberg: Springer, 133\u2013136.\ndoi:10.1007/11780342_14",
                "Dedekind, Richard, 1888, <em>Was Sind und was Sollen die\nZahlen?</em> Braunschweig: Vieweg.",
                "Dershowitz, Nachum and Yuri Gurevich, 2008, \u201cA Natural\nAxiomatization of Computability and Proof of Church\u2019s\nThesis\u201d, <em>Bulletin of Symbolic Logic</em>, 14(3):\n299\u2013350. doi:10.2178/bsl/1231081370",
                "Deutsch, David, 1985, \u201cQuantum Theory, the\nChurch\u2013Turing Principle and the Universal Quantum\nComputer\u201d, <em>Proceedings of the Royal Society of London.\nSeries A. Mathematical and Physical Sciences</em>, 400(1818):\n97\u2013117. doi:10.1098/rspa.1985.0070",
                "Doyle, Jon, 1982, \u201cWhat is Church\u2019s Thesis? An\nOutline\u201d, Laboratory for Computer Science, MIT.",
                "\u2013\u2013\u2013, 2002, \u201cWhat Is Church\u2019s Thesis?\nAn Outline\u201d, <em>Minds and Machines</em>, 12(4): 519\u2013520.\ndoi:10.1023/A:1021126521437",
                "Earman, John, 1986, <em>A Primer on Determinism</em>, Dordrecht:\nReidel.",
                "Eisert, Jens, Markus P. M\u00fcller, and Christian Gogolin, 2012,\n\u201cQuantum Measurement Occurrence Is Undecidable\u201d,\n<em>Physical Review Letters</em>, 108(26): 260501 (5 pages).\ndoi:10.1103/PhysRevLett.108.260501",
                "Engeler, Erwin, 1983 [1993], <em>Metamathematik der\nElementarmathematik</em>, Berlin: Springer. Translated as\n<em>Foundations of Mathematics: Questions of Analysis, Geometry &amp;\nAlgorithmics</em>, Charles B. Thomas (trans.), Berlin/New York:\nSpringer-Verlag.",
                "Etesi, G\u00e1bor and Istv\u00e1n N\u00e9meti, 2002,\n\u201cNon-Turing Computations via Malament-Hogarth\nSpace-Times\u201d, <em>International Journal of Theoretical\nPhysics</em>, 41(2): 341\u2013370. doi:10.1023/A:1014019225365",
                "Frankena, William and Arthur W. Burks, 1964, \u201cCooper Harold\nLangford 1895\u20131964\u201d, <em>Proceedings and Addresses of the\nAmerican Philosophical Association</em>, 38: 99\u2013101.",
                "Gandy, Robin, 1980, \u201cChurch\u2019s Thesis and Principles\nfor Mechanisms\u201d, in <em>The Kleene Symposium</em>, Jon Barwise,\nH. Jerome Keisler, and Kenneth Kunen (eds), Amsterdam: North-Holland,\n123\u2013148. doi:10.1016/S0049-237X(08)71257-6",
                "\u2013\u2013\u2013, 1988, \u201cThe Confluence of Ideas in\n1936\u201d, in <em>The Universal Turing Machine: A Half-Century\nSurvey</em>, Rolf Herken (ed.), New York: Oxford University Press,\n51\u2013102.",
                "Geroch, Robert and James B. Hartle, 1986, \u201cComputability and\nPhysical Theories\u201d, <em>Foundations of Physics</em>, 16(6):\n533\u2013550. doi:10.1007/BF01886519",
                "G\u00f6del, Kurt, 1930, \u201cDie Vollst\u00e4ndigkeit der Axiome\ndes logischen Funktionenkalk\u00fcls\u201d, <em>Monatshefte f\u00fcr\nMathematik und Physik</em>, 37: 349\u2013360.\ndoi:10.1007/BF01696781",
                "\u2013\u2013\u2013, 1931, \u201c\u00dcber formal\nunentscheidbare S\u00e4tze der Principia Mathematica und verwandter\nSysteme I\u201d, <em>Monatshefte f\u00fcr Mathematik und Physik</em>,\n38: 173\u2013198. doi:10.1007/BF01700692",
                "\u2013\u2013\u2013, 1933, \u201cZum Entscheidungsproblem des\nlogischen Funktionenkalk\u00fcls\u201d, <em>Monatshefte f\u00fcr\nMathematik und Physik</em>, 40: 433\u2013443.\ndoi:10.1007/BF01708881",
                "\u2013\u2013\u2013, 1934 [1965], \u201cOn Undecidable\nPropositions of Formal Mathematical Systems\u201d, Lecture notes\ntaken by Stephen Kleene and J. Barkley Rosser at the Institute for\nAdvanced Study, in Davis 1965: 39\u201374.",
                "\u2013\u2013\u2013, 1936, \u201c\u00dcber die L\u00e4nge von\nBeweisen\u201d, <em>Ergebnisse eirtes mathematischen\nKolloquiums</em>, 7: 23\u201324.",
                "\u2013\u2013\u2013, 193?, \u201cUndecidable Diophantine\nPropositions\u201d, in G\u00f6del 1995: 164\u2013175.",
                "\u2013\u2013\u2013, 1946, \u201cRemarks Before the Princeton\nBicentennial Conference\u201d, in G\u00f6del 1990:\n150\u2013153.",
                "\u2013\u2013\u2013, 1951, \u201cSome Basic Theorems on the\nFoundations of Mathematics and Their Implications\u201d, in\nG\u00f6del 1995: 304\u2013323.",
                "\u2013\u2013\u2013, 1965a, \u201cPostscriptum\u201d to\nG\u00f6del 1934, in Davis 1965: 71\u201373.",
                "\u2013\u2013\u2013, 1965b, letter to Davis, 15 February 1965.\nExcerpt in Davis 1982: 8.",
                "\u2013\u2013\u2013, <em>Kurt G\u00f6del: Collected Works</em>,\n5 volumes, Solomon Feferman et al. (eds), Oxford: Clarendon Press.\n\n<ul class=\"hanging\">\n1986, <em>Volume 1: Publications 1929\u20131936</em>\n1990, <em>Volume 2: Publications 1938\u20131974</em>\n1995, <em>Volume 3: Unpublished Essays and Lectures</em>\n</ul> ",
                "1986, <em>Volume 1: Publications 1929\u20131936</em>",
                "1990, <em>Volume 2: Publications 1938\u20131974</em>",
                "1995, <em>Volume 3: Unpublished Essays and Lectures</em>",
                "Gurevich, Yuri, 2012, \u201cWhat Is an Algorithm?\u201d, in\n<em>SOFSEM 2012: Theory and Practice of Computer Science</em>,\nM\u00e1ria Bielikov\u00e1, Gerhard Friedrich, Georg Gottlob,\nStefan Katzenbeisser, and Gy\u00f6rgy Tur\u00e1n (eds), (Lecture\nNotes in Computer Science 7147), Berlin/Heidelberg: Springer,\n31\u201342. doi:10.1007/978-3-642-27660-6_3",
                "Guttenplan, Samuel D. (ed.), 1994, <em>A Companion to the\nPhilosophy of Mind</em>, Oxford/Cambridge, MA: Blackwell Reference.\ndoi:10.1002/9781405164597.",
                "Hardy, G. H., 1929, \u201cMathematical Proof\u201d,\n<em>Mind</em>, 38(149): 1\u201325.\ndoi:10.1093/mind/XXXVIII.149.1",
                "Harel, David, 1992, <em>Algorithmics: The Spirit of\nComputing</em>, second edition, Reading, MA: Addison-Wesley.",
                "Herbrand, Jacques, 1930a, <em>Recherches sur la Th\u00e9orie de\nla D\u00e9monstration</em>, doctoral thesis, University of Paris. In\nHerbrand 1968.",
                "\u2013\u2013\u2013, 1930b, \u201cLes bases de la logique\nHilbertienne\u201d, <em>Revue de M\u00e9taphysique et de\nMorale</em>, 37(2): 243\u2013255.",
                "\u2013\u2013\u2013, 1931a, \u201cSur le Probl\u00e8me\nFondamental de la Logique Math\u00e9matique\u201d, <em>Sprawozdania\nz Posiedze\u0144 Towarzystwa Naukowego Warszawskiego, Wydzia\u0142\nIII</em>, 24: 12\u201356.",
                "\u2013\u2013\u2013, 1931b, Precis of Herbrand 1930a,\n<em>Annales de l\u2019Universit\u00e9 de Paris</em>, 6:\n186\u2013189. In Herbrand 1968.",
                "\u2013\u2013\u2013, 1932, \u201cSur la non-contradiction de\nl\u2019Arithm\u00e9tique\u201d, <em>Journal f\u00fcr die reine und\nangewandte Mathematik</em>, 166: 1\u20138.\ndoi:10.1515/crll.1932.166.1",
                "\u2013\u2013\u2013, 1968, <em>\u00c9crits Logiques</em>,\nParis: Presses Universitaires de France.",
                "Hermes, Hans, 1969, \u201cIdeen von Leibniz zur\nGrundlagenforschung: Die Ars inveniendi und die Ars iudicandi\u201d,\nin <em>Systemprinzip und Vielheit der Wissenschaften</em>, Udo W.\nBargenda and J\u00fcrgen Bl\u00fchdorn (eds), Wiesbaden: Franz\nSteiner: 78\u201388.",
                "Hilbert, David, 1899, <em>Grundlagen der Geometrie</em>, Leipzig:\nTeubner.",
                "\u2013\u2013\u2013, 1900 [1902], \u201cMathematische\nProbleme\u201d, <em>Nachrichten von der Gesellschaft der\nWissenschaften zu G\u00f6ttingen, Mathematisch-Physikalische\nKlasse</em>, 3: 253\u2013297. Translated in 1902 as\n\u201cMathematical Problems\u201d, Mary Winston Newson (trans.),\n<em>Bulletin of the American Mathematical Society</em>, 8(10):\n437\u2013480. doi:10.1090/S0002-9904-1902-00923-3",
                "\u2013\u2013\u2013, 1917, \u201cAxiomatisches Denken\u201d,\n<em>Mathematische Annalen</em>, 78(1\u20134): 405\u2013415.\ndoi:10.1007/BF01457115",
                "\u2013\u2013\u2013, 1922, \u201cNeubegr\u00fcndung der\nMathematik. Erste Mitteilung\u201d, <em>Abhandlungen aus dem\nMathematischen Seminar der Universit\u00e4t Hamburg</em>, 1:\n157\u2013177. doi:10.1007/BF02940589",
                "\u2013\u2013\u2013, 1926 [1967], \u201c\u00dcber das\nUnendliche\u201d, <em>Mathematische Annalen</em>, 95(1):\n161\u2013190. Translated as \u201cOn the Infinite\u201d in van\nHeijenoort 1967: 367\u2013392. doi:10.1007/BF01206605",
                "\u2013\u2013\u2013, 1930a, \u201cProbleme der Grundlegung der\nMathematik\u201d, <em>Mathematische Annalen</em>, 102(1): 1\u20139.\ndoi:10.1007/BF01782335",
                "\u2013\u2013\u2013, 1930b, \u201cNaturerkennen und\nLogik\u201d, <em>Die Naturwissenschaften</em>, 18(47\u201349):\n959\u2013963. doi:10.1007/BF01492194",
                "Hilbert, David and Wilhelm Ackermann, 1928, <em>Grundz\u00fcge der\nTheoretischen Logik</em>, Berlin: Springer.",
                "\u2013\u2013\u2013, 1938, <em>Grundz\u00fcge der Theoretischen\nLogik</em>, Berlin: Springer. Second edition.",
                "Hilbert, David and Paul Bernays, 1934, <em>Grundlagen der\nMathematik</em>, Volume 1, Berlin: Springer.",
                "\u2013\u2013\u2013, 1939, <em>Grundlagen der Mathematik</em>,\nVolume 2, Berlin: Springer.",
                "Hobbes, Thomas, 1655 [1839], <em>De Corpore</em>, in\n<em>Thom\u00e6 Hobbes Malmesburiensis: Opera Philosophica</em>\n(Volume 1), William Molesworth (ed.), London: J. Bohn, 1839.",
                "Hogarth, Mark, 1994, \u201cNon-Turing Computers and Non-Turing\nComputability\u201d, <em>PSA: Proceedings of the Biennial Meeting of\nthe Philosophy of Science Association</em>, 1994(1): 126\u2013138.\ndoi:10.1086/psaprocbienmeetp.1994.1.193018",
                "\u2013\u2013\u2013, 2004, \u201cDeciding Arithmetic Using\n<em>SAD</em> Computers\u201d, <em>The British Journal for the\nPhilosophy of Science</em>, 55(4): 681\u2013691.\ndoi:10.1093/bjps/55.4.681",
                "Hopcroft, John E. and Jeffrey D. Ullman, 1979, <em>Introduction to\nAutomata Theory, Languages, and Computation</em>, Reading, MA:\nAddison-Wesley.",
                "Houser, Nathan, Don D. Roberts, and James Van Evra (eds), 1997,\n<em>Studies in the Logic of Charles Sanders Peirce</em>, Bloomington,\nIN: Indiana University Press.",
                "Jevons, W. Stanley, 1870, \u201cOn the Mechanical Performance of\nLogical Inference\u201d, <em>Philosophical Transactions of the Royal\nSociety of London</em>, 160: 497\u2013518.\ndoi:10.1098/rstl.1870.0022",
                "\u2013\u2013\u2013, 1880, letter to Venn, 18 August 1880, Venn\nCollection, Gonville and Caius College, Cambridge, C 45/4 (quoted by\npermission of the Master and Fellows of Gonville and Caius).",
                "Kalm\u00e1r, L\u00e1szl\u00f3, 1959, \u201cAn Argument\nAgainst the Plausibility of Church\u2019s Thesis\u201d, in\n<em>Constructivity in Mathematics: Proceedings of the colloquium held\nat Amsterdam 1957</em>, Arend Heyting (ed.), Amsterdam: North-Holland:\n72\u201380.",
                "Kennedy, Juliette, 2013, \u201cOn Formalism Freeness:\nImplementing G\u00f6del\u2019s 1946 Princeton Bicentennial\nLecture\u201d, <em>Bulletin of Symbolic Logic</em>, 19(3):\n351\u2013393. doi:10.1017/S1079898600010684",
                "Ketner, Kenneth L. and Arthur F. Stewart, 1984, \u201cThe Early\nHistory of Computer Design: Charles Sanders Peirce and\nMarquand\u2019s Logical Machines\u201d, <em>The Princeton University\nLibrary Chronicle</em>, 45(3): 187\u2013224.\ndoi:10.2307/26402393",
                "Kieu, Tien D., 2004, \u201cHypercomputation with Quantum\nAdiabatic Processes\u201d, <em>Theoretical Computer Science</em>,\n317(1\u20133): 93\u2013104. doi:10.1016/j.tcs.2003.12.006",
                "Kleene, Stephen C., 1934, \u201cProof by Cases in Formal\nLogic\u201d, <em>Annals of Mathematics</em>, second series 35(3):\n529\u2013544. doi:10.2307/1968749",
                "\u2013\u2013\u2013, 1935a, \u201cA Theory of Positive Integers\nin Formal Logic. Part I\u201d, <em>American Journal of\nMathematics</em>, 57(1): 153\u2013173. doi:10.2307/2372027",
                "\u2013\u2013\u2013, 1935b, \u201cA Theory of Positive Integers\nin Formal Logic. Part II\u201d, <em>American Journal of\nMathematics</em>, 57(2): 219\u2013244. doi:10.2307/2371199",
                "\u2013\u2013\u2013, 1936a, \u201cGeneral Recursive Functions\nof Natural Numbers\u201d, <em>Mathematische Annalen</em>, 112(1):\n727\u2013742. doi:10.1007/BF01565439",
                "\u2013\u2013\u2013, 1936b, \u201c\u03bb-Definability and\nRecursiveness\u201d, <em>Duke Mathematical Journal</em>, 2(2):\n340\u2013353. doi:10.1215/S0012-7094-36-00227-2",
                "\u2013\u2013\u2013, 1952, <em>Introduction to\nMetamathematics</em>, Amsterdam: North-Holland.",
                "\u2013\u2013\u2013, 1967, <em>Mathematical Logic</em>, New\nYork: Wiley.",
                "\u2013\u2013\u2013, 1981, \u201cOrigins of Recursive Function\nTheory\u201d, <em>IEEE Annals of the History of Computing</em>, 3(1):\n52\u201367. doi:10.1109/MAHC.1981.10004",
                "\u2013\u2013\u2013, 1986, \u201cIntroductory Note to\n<em>1930b</em>, <em>1931</em> and <em>1932b</em>\u201d, in G\u00f6del\n1986: 126\u2013141.",
                "\u2013\u2013\u2013, 1987, \u201cReflections on Church\u2019s\nThesis\u201d, <em>Notre Dame Journal of Formal Logic</em>, 28(4):\n490\u2013498. doi:10.1305/ndjfl/1093637645",
                "Kleene, Stephen C. and J. Barkley Rosser, 1935, \u201cThe\nInconsistency of Certain Formal Logics\u201d, <em>Annals of\nMathematics</em>, second series 36(3): 630\u2013636.\ndoi:10.2307/1968646",
                "Kreisel, Georg, 1965, \u201cMathematical Logic\u201d, in\n<em>Lectures on Modern Mathematics, Volume 3</em>, Thomas L. Saaty\n(ed.), New York: Wiley, 95\u2013195.",
                "\u2013\u2013\u2013, 1967, \u201cMathematical Logic: What Has\nit Done For the Philosophy of Mathematics?\u201d, in <em>Bertrand\nRussell: Philosopher of the Century</em>, Ralph Schoenman (ed.),\nLondon: George Allen and Unwin: 201\u2013272.",
                "\u2013\u2013\u2013, 1974, \u201cA Notion of Mechanistic\nTheory\u201d, <em>Synthese</em>, 29(1\u20134): 11\u201326.\ndoi:10.1007/BF00484949",
                "\u2013\u2013\u2013, 1982, Review of Pour-El and Richards 1979\nand 1981, <em>The Journal of Symbolic Logic</em>, 47(4):\n900\u2013902. doi:10.2307/2273108",
                "Kripke, Saul A., 2013, \u201cThe Church-Turing\n\u2018Thesis\u2019 as a Special Corollary of G\u00f6del\u2019s\nCompleteness Theorem\u201d, in Copeland, Posy, and Shagrir 2013:\n77\u2013104 (ch. 4).",
                "Langford, C. Harold, 1926a, \u201cSome Theorems on\nDeducibility\u201d, <em>Annals of Mathematics</em>, second series\n28(1/4): 16\u201340. doi:10.2307/1968352",
                "\u2013\u2013\u2013, 1926b, \u201cAnalytic Completeness of Sets\nof Postulates\u201d, <em>Proceedings of the London Mathematical\nSociety</em>, second series 25: 115\u2013142.\ndoi:10.1112/plms/s2-25.1.115",
                "\u2013\u2013\u2013, 1927, \u201cTheorems on Deducibility\n(Second Paper)\u201d, <em>Annals of Mathematics</em>, second series\n28(1/4): 459\u2013471. doi:10.2307/1968390",
                "Langton, Christopher G., 1989, \u201cArtificial Life\u201d, in\n<em>Artificial Life: The Proceedings of An Interdisciplinary Workshop\non the Synthesis and Simulation of Living Systems, Held September,\n1987 in Los Alamos, New Mexico</em>, Christopher G. Langton (ed.),\nRedwood City, CA: Addison-Wesley, 1\u201347.",
                "Leibniz, Gottfried Wilhelm, 1666 [2020], <em>Dissertatio de Arte\nCombinatoria</em>, Leipzig. Translated in <em>Leibniz: Dissertation on\nCombinatorial Art</em>, Massimo Mugnai, Han van Ruler, and Martin\nWilson (eds), Oxford: Oxford University Press, 2020.",
                "\u2013\u2013\u2013, 1671 [1926], letter to Herzog, October(?)\n1671, in Erich Hochstetter, Willy Kabitz and Paul Ritter (eds),\n<em>Gottfried Wilhelm Leibniz: S\u00e4mtliche Schriften und\nBriefe,</em> second series: <em>Philosophischer Briefwechsel</em>\n(Volume 1), <em>1663\u20131685</em>, Darmstadt: O. Reichl, 1926:\n159\u2013165 (facsimile of the 1926 edition, Hildesheim: G. Olms,\n1972).",
                "\u2013\u2013\u2013, 1679 [1903], \u201cConsilium de\nEncyclopaedia Nova Conscribenda Methodo Inventoria\u201d, in Couturat\n1903: 30\u201341.",
                "\u2013\u2013\u2013, 1685 [1951], \u201cL\u2019Art\nd\u2019Inventer\u201d, in Couturat 1903. Translated as \u201cThe\nArt of Discovery\u201d in Philip P. Wiener (ed.),<em>Leibniz\nSelections</em>, New York: Scribner, 1951: 50\u201358.",
                "\u2013\u2013\u2013, 1710, \u201c<em>Brevis descriptio machinae\narithmeticae, cum figura</em>\u201d, in <em>Miscellanea Berolinensia\nad incrementum scientiarum</em>, pp. 317\u201319 (and Fig. 73),\nBerlin: Johann Christoph Papenius.",
                "\u2013\u2013\u2013, 1714 [1969], letter to Remond, 10 January\n1714, in Leroy E. Loemker (ed.), <em>Gottfried Wilhelm Leibniz:\nPhilosophical Papers and Letters</em>, second edition, Dordrecht:\nReidel, 1969: 654\u2013655.",
                "\u2013\u2013\u2013, <em>n.d.</em>1 [1903], \u201cDe Machina\nCombinatoria\u201d, in Couturat 1903: 572.",
                "\u2013\u2013\u2013, <em>n.d.</em>2 [1890], \u201cDiscours\ntouchant la methode de la certitude et l\u2019art d\u2019inventer\npour finir les disputes et pour faire en peu de temps des grands\nprogr\u00e9s\u201d, in Carl J. Gerhardt (ed.), <em>Die\nphilosophischen Schriften von Gottfried Wilhelm Leibniz</em> (Volume\n7), Berlin, 1890: 174\u2013183 (facsimile of the 1890 edition,\nHildesheim: G. Olms, 1965).",
                "Lewis, Harry R. and Christos H. Papadimitriou, 1981, <em>Elements\nof the Theory of Computation</em>, Englewood Cliffs, NJ:\nPrentice-Hall.",
                "Llull, Ramon, 1645 [1970], <em>Ars Generalis Ultima</em>, Palma\nMalorca, facsimile of the 1645 edition, Frankfurt: Minerva, 1970.",
                "\u2013\u2013\u2013, 1986, <em>Poesies</em>, Josep Romeu i\nFigueras (ed.), Barcelona: Enciclop\u00e8dia Catalana.",
                "L\u00f6wenheim, Leopold, 1915, \u201c\u00dcber M\u00f6glichkeiten\nim Relativkalk\u00fcl\u201d, <em>Mathematische Annalen</em>, 76(4):\n447\u2013470. doi:10.1007/BF01458217",
                "MacLennan, Bruce J., 2003, \u201cTranscending Turing\nComputability\u201d, <em>Minds and Machines</em>, 13(1): 3\u201322.\ndoi:10.1023/A:1021397712328",
                "Mancosu, Paolo and Richard Zach, 2015, \u201cHeinrich\nBehmann\u2019s 1921 Lecture on the Decision Problem and the Algebra\nof Logic\u201d, <em>Bulletin of Symbolic Logic</em>, 21(2):\n164\u2013187. doi:10.1017/bsl.2015.10",
                "Markov, Andrey A., 1951,\n\u201c\u0422\u0435\u043e\u0440\u0438\u044f\n\u0410\u043b\u0433\u043e\u0440\u0438\u0444\u043c\u043e\u0432\u201d,\n<em>Trudy Matematicheskogo Instituta imeni V. A. Steklova</em>, 38:\n176\u2013189. Translation by Edwin Hewitt, 1960, \u201cThe Theory of\nAlgorithms\u201d, <em>American Mathematical Society\nTranslations</em>, Series 2, 15: 1\u201314.",
                "Marquand, Allan, 1881, \u201cOn Logical Diagrams for <em>n</em>\nTerms\u201d, <em>The London, Edinburgh, and Dublin Philosophical\nMagazine and Journal of Science</em>, fifth series, 12(75):\n266\u2013270. doi:10.1080/14786448108627104",
                "\u2013\u2013\u2013, 1883, \u201cA Machine for Producing\nSyllogistic Variations\u201d, in <em>Studies in Logic</em>, Charles\nS. Peirce (ed.), Boston: Little, Brown, 12\u201315.\ndoi:10.1037/12811-002",
                "\u2013\u2013\u2013, 1885, \u201cA New Logical Machine\u201d,\n<em>Proceedings of the American Academy of Arts and Sciences</em>, 21:\n303\u2013307.",
                "Massey, Gerald J., 1966, \u201cAn Extension of Venn\nDiagrams\u201d, <em>Notre Dame Journal of Formal Logic</em>, 7(3):\n239\u2013250. doi:10.1305/ndjfl/1093958619",
                "Mays, Wolfe and Desmond P. Henry, 1951, \u201cLogical Machines:\nNew Light on W. Stanley Jevons\u201d, <em>Manchester Guardian</em>,\nno. 32677 (14 July 1951) B, 4.",
                "\u2013\u2013\u2013, 1953, \u201cJevons and Logic\u201d,\n<em>Mind</em>, 62(248): 484\u2013505.\ndoi:10.1093/mind/LXII.248.484",
                "Mays, W. and Dietrich G. Prinz, 1950, \u201cA Relay Machine for\nthe Demonstration of Symbolic Logic\u201d, <em>Nature</em>,\n165(4188): 197\u2013198. doi:10.1038/165197a0",
                "Mendelson, Elliott, 1963, \u201cOn Some Recent Criticism of\nChurch\u2019s Thesis.\u201d, <em>Notre Dame Journal of Formal\nLogic</em>, 4(3): 201\u2013205. doi:10.1305/ndjfl/1093957577",
                "\u2013\u2013\u2013, 1964, <em>Introduction to Mathematical\nLogic</em>, Princeton, NJ: Van Nostrand.",
                "\u2013\u2013\u2013, 1990, \u201cSecond Thoughts about\nChurch\u2019s Thesis and Mathematical Proofs\u201d, <em>The Journal\nof Philosophy</em>, 87(5): 225\u2013233. doi:10.2307/2026831",
                "Montague, Richard, 1960, \u201cTowards a General Theory of\nComputability\u201d, <em>Synthese</em>, 12(4): 429\u2013438.\ndoi:10.1007/BF00485427",
                "N\u00e9meti, Istv\u00e1n and Gyula D\u00e1vid, 2006,\n\u201cRelativistic Computers and the Turing Barrier\u201d,\n<em>Applied Mathematics and Computation</em>, 178(1): 118\u2013142.\ndoi:10.1016/j.amc.2005.09.075",
                "Newell, Allen, 1980, \u201cPhysical Symbol Systems\u201d,\n<em>Cognitive Science</em>, 4(2): 135\u2013183.\ndoi:10.1207/s15516709cog0402_2",
                "Newman, Maxwell H.A., 1923, \u201cThe Foundations of Mathematics\nfrom the Standpoint of Physics\u201d, fellowship dissertation, in the\nRecords of St John\u2019s College, Cambridge, SJCR/SJAC/2/1/5/1\n(quoted by permission of the Master and Fellows of St\nJohn\u2019s).",
                "\u2013\u2013\u2013, 1955, \u201cAlan Mathison Turing,\n1912\u20131954\u201d, <em>Biographical Memoirs of Fellows of the\nRoyal Society</em>, 1(November): 253\u2013263.\ndoi:10.1098/rsbm.1955.0019",
                "\u2013\u2013\u2013, <em>c</em>1977, Newman in interview with\nChristopher Evans, <em>n.d.</em>, \u201cThe Pioneers of Computing: An\nOral History of Computing\u201d, London: Science Museum;\ntranscription by Copeland in Copeland 2004: 206.",
                "Olszewski, Adam, Jan Wole\u0144ski, and Robert Janusz (eds), 2006,\n<em>Church\u2019s Thesis after 70 Years</em>, Frankfurt/New\nBrunswick, NJ: Ontos. doi:10.1515/9783110325461",
                "Peirce, Charles S., 1886, letter to Marquand, 30 December 1886, in\nPeirce 1993: item 58, pp. 422\u2013424.",
                "\u2013\u2013\u2013, 1887, \u201cLogical Machines\u201d,\n<em>The American Journal of Psychology</em>, 1(1): 165\u2013170.",
                "\u2013\u2013\u2013, 1903a, \u201cThe 1903 Lowell Institute\nLectures I\u2013V\u201d, in Peirce 2021: 137\u2013310.",
                "\u2013\u2013\u2013, 1903b, R S32, draft of last part of the 2nd\nLowell Lecture, in Peirce 2021.",
                "\u2013\u2013\u2013, 1903c, R 462, 2nd draft of the 3rd Lowell\nLecture, in Peirce 2021.",
                "\u2013\u2013\u2013, 1903d, R 464, 3rd draft of the 3rd Lowell\nLecture, in Peirce 2021.",
                "\u2013\u2013\u2013, <em>n.d.</em>, R 831, untitled, Charles S.\nPeirce Papers, Houghton Library, Harvard.",
                "\u2013\u2013\u2013, 1908, \u201cSome Amazing Mazes\n(conclusion)\u201d, <em>Monist</em>, 18(3): 416\u2013464.\ndoi:10.5840/monist190818326",
                "\u2013\u2013\u2013, 1993, <em>Writings of Charles S. Peirce: A\nChronological Edition, Volume 5: 1884\u20131886</em>, Christian J.W.\nKloesel (ed.), Bloomington, IN: Indiana University Press.",
                "\u2013\u2013\u2013, 2021, <em>Charles S. Peirce: Logic of the\nFuture, Writings on the Existential Graphs, Volume 2/2: The 1903\nLowell Lectures</em>, Ahti-Veikko Pietarinen (ed.), Berlin: de\nGruyter.",
                "Penrose, Roger, 1994, <em>Shadows of the Mind: A Search for the\nMissing Science of Consciousness</em>, Oxford/New York: Oxford\nUniversity Press.",
                "\u2013\u2013\u2013, 2011, \u201cG\u00f6del, the Mind, and the\nLaws of Physics\u201d, in <em>Kurt G\u00f6del and the Foundations of\nMathematics</em>, Matthias Baaz, Christos H. Papadimitriou, Hilary W.\nPutnam, Dana S. Scott, and Charles L. Harper, Jr (eds), Cambridge:\nCambridge University Press, 339\u2013358.\ndoi:10.1017/CBO9780511974236.019",
                "\u2013\u2013\u2013, 2016, \u201cOn Attempting to Model the\nMathematical Mind\u201d, in <em>The Once and Future Turing: Computing\nthe World</em>, S. Barry Cooper and Andrew Hodges (eds), Cambridge:\nCambridge University Press, 361\u2013378.\ndoi:10.1017/CBO9780511863196.022",
                "P\u00e9ter, R\u00f3zsa, 1935, \u201c\u00dcber den\nZusammenhang der verschiedenen Begriffe der rekursiven\nFunktion\u201d, <em>Mathematische Annalen</em>, 110(1):\n612\u2013632. doi:10.1007/BF01448046",
                "Pitowski, Itamar, 1990, \u201cThe Physical Church Thesis and\nPhysical Computational Complexity\u201d, <em>Iyyun</em>, 39:\n81\u201399.",
                "Post, Emil L., 1936, \u201cFinite Combinatory\nProcesses\u2014Formulation 1\u201d, <em>The Journal of Symbolic\nLogic</em>, 1(3): 103\u2013105. doi:10.2307/2269031",
                "\u2013\u2013\u2013, 1943, \u201cFormal Reductions of the\nGeneral Combinatorial Decision Problem\u201d, <em>American Journal of\nMathematics</em>, 65(2): 197\u2013215. doi:10.2307/2371809",
                "\u2013\u2013\u2013, 1946, \u201cA Variant of a Recursively\nUnsolvable Problem\u201d, <em>Bulletin of the American Mathematical\nSociety</em>, 52(4): 264\u2013268.\ndoi:10.1090/S0002-9904-1946-08555-9",
                "\u2013\u2013\u2013, 1965, \u201cAbsolutely Unsolvable Problems\nand Relatively Undecidable Propositions\u2014Account of an\nAnticipation\u201d, in Davis 1965: 340\u2013433.",
                "Pour-El, Marian Boykan and Ian Richards, 1979, \u201cA Computable\nOrdinary Differential Equation Which Possesses No Computable\nSolution\u201d, <em>Annals of Mathematical Logic</em>, 17(1\u20132):\n61\u201390. doi:10.1016/0003-4843(79)90021-4",
                "\u2013\u2013\u2013, 1981, \u201cThe Wave Equation with\nComputable Initial Data Such That Its Unique Solution Is Not\nComputable\u201d, <em>Advances in Mathematics</em>, 39(3):\n215\u2013239. doi:10.1016/0001-8708(81)90001-3",
                "\u2013\u2013\u2013, 1989, <em>Computability in Analysis and\nPhysics</em>, Berlin: Springer.\n [<a href=\"https://projecteuclid.org/eBooks/perspectives-in-logic/Computability-in-Analysis-and-Physics/toc/pl/1235422916\" target=\"other\">Pour-El and Richards 1989 available online</a>]",
                "Quine, Willard Van Orman, 1950, <em>Methods of Logic</em>, New\nYork: Holt.",
                "\u2013\u2013\u2013, 1951, <em>Mathematical Logic</em>, revised\nedition, Cambridge, MA: Harvard University Press.",
                "Rabin, Michael O. and Dana S. Scott, 1959, \u201cFinite Automata\nand Their Decision Problems\u201d, <em>IBM Journal of Research and\nDevelopment</em>, 3(2): 114\u2013125. doi:10.1147/rd.32.0114",
                "Ramsey, Frank P., 1930, \u201cOn a Problem of Formal\nLogic\u201d, <em>Proceedings of the London Mathematical Society</em>,\nsecond series 30(1): 264\u2013286. doi:10.1112/plms/s2-30.1.264",
                "Roberts, Don D., 1973, <em>The Existential Graphs of Charles S.\nPeirce</em>, Hague: Mouton.",
                "\u2013\u2013\u2013, 1997, \u201cA Decision Method for\nExistential Graphs\u201d, in Houser, Roberts, &amp; Van Evra 1997:\n387\u2013401.",
                "Rosser, J. Barkley, 1935a, \u201cA Mathematical Logic Without\nVariables. I\u201d, <em>Annals of Mathematics</em>, second series\n36(1): 127\u2013150. doi:10.2307/1968669",
                "\u2013\u2013\u2013, 1935b, \u201cA Mathematical Logic without\nVariables. II\u201d, <em>Duke Mathematical Journal</em>, 1(3):\n328\u2013355. doi:10.1215/S0012-7094-35-00123-5",
                "Scarpellini, Bruno, 1963, \u201cZwei Unentscheidbare Probleme Der\nAnalysis\u201d, <em>Zeitschrift f\u00fcr Mathematische Logik und\nGrundlagen der Mathematik</em>, 9(18\u201320): 265\u2013289.\ndoi:10.1002/malq.19630091802",
                "\u2013\u2013\u2013, 2003, \u201cComments on \u2018Two\nUndecidable Problems of Analysis\u2019\u201d, <em>Minds and\nMachines</em>, 13(1): 79\u201385. doi:10.1023/A:1021364916624",
                "Schiemer, Georg, Richard Zach, and Erich Reck, 2017,\n\u201cCarnap\u2019s Early Metatheory: Scope and Limits\u201d,\n<em>Synthese</em>, 194(1): 33\u201365.\ndoi:10.1007/s11229-015-0877-z",
                "Schmidhuber, J\u00fcrgen, 2012, \u201cTuring in Context\u201d,\n<em>Science</em>, 336(6089): 1638\u20131639.\ndoi:10.1126/science.336.6089.1638-c",
                "Sch\u00f6nfinkel, Moses, 192?, \u201cZum Entscheidungsproblem der\nmathematischen Logik\u201d, <em>n.d.</em>, Heft I, <em>Bernays\nPapers</em>, ETH Zurich (Hs 974.282).",
                "\u2013\u2013\u2013, 1924, \u201c\u00dcber die Bausteine der\nmathematischen Logik\u201d, <em>Mathematische Annalen</em>,\n92(3\u20134): 305\u2013316. doi:10.1007/BF01448013",
                "Searle, John R., 1992, <em>The Rediscovery of the Mind</em>,\nCambridge, MA: MIT Press.",
                "Shagrir, Oron, 2002, \u201cEffective Computation by Humans and\nMachines\u201d, <em>Minds and Machines</em>, 12(2): 221\u2013240.\ndoi:10.1023/A:1015694932257",
                "\u2013\u2013\u2013, 2006, \u201cG\u00f6del on Turing on\nComputability\u201d, in Olszewski, Wolenski, and Janusz 2006:\n393\u2013419. doi:10.1515/9783110325461.393",
                "Shagrir, Oron and Itamar Pitowsky, 2003, \u201cPhysical\nHypercomputation and the Church\u2013Turing Thesis\u201d, <em>Minds\nand Machines</em>, 13(1): 87\u2013101.\ndoi:10.1023/A:1021365222692",
                "Shepherdson, John C. and Howard E. Sturgis, 1963,\n\u201cComputability of Recursive Functions\u201d, <em>Journal of the\nACM</em>, 10(2): 217\u2013255. doi:10.1145/321160.321170",
                "Shoenfield, Joseph R., 1993, <em>Recursion Theory</em>, Berlin/New\nYork: Springer.",
                "Sieg, Wilfried, 1994, \u201cMechanical Procedures and\nMathematical Experience\u201d, in <em>Mathematics and Mind</em>,\nAlexander George (ed.), Oxford: Oxford University Press:\n71\u2013117.",
                "\u2013\u2013\u2013, 2002, \u201cCalculations by Man and\nMachine: Conceptual Analysis\u201d, in <em>Reflections on the\nFoundations of Mathematics: Essays in Honor of Solomon Feferman</em>,\nWilfried Sieg, Richard Sommer, and Carolyn Talcott (eds), Urbana, IL:\nAssociation for Symbolic Logic, 390\u2013409.",
                "\u2013\u2013\u2013, 2008, \u201cChurch Without Dogma: Axioms\nfor Computability\u201d, in <em>New Computational Paradigms</em>, S.\nBarry Cooper, Benedikt L\u00f6we, and Andrea Sorbi (eds), New York,\nNY: Springer New York, 139\u2013152.\ndoi:10.1007/978-0-387-68546-5_7",
                "Siegelmann, Hava T., 2003, \u201cNeural and Super-Turing\nComputing\u201d, <em>Minds and Machines</em>, 13(1): 103\u2013114.\ndoi:10.1023/A:1021376718708",
                "Siegelmann, Hava T. and Eduardo D. Sontag, 1992, \u201cOn the\nComputational Power of Neural Nets\u201d, in <em>Proceedings of the\nFifth Annual Workshop on Computational Learning Theory - COLT\n\u201992</em>, Pittsburgh, PA: ACM Press, 440\u2013449.\ndoi:10.1145/130385.130432",
                "\u2013\u2013\u2013, 1994, \u201cAnalog Computation via Neural\nNetworks\u201d, <em>Theoretical Computer Science</em>, 131(2):\n331\u2013360. doi:10.1016/0304-3975(94)90178-3",
                "Skolem, Thoralf, 1923, \u201cBegr\u00fcndung der elementaren\nArithmetik\u201d, <em>Videnskapsselskapets Skrifter, I.\nMatematisk-naturvidenskabelig Klasse</em>, 6: 3\u201338.",
                "Smithies, Frank, 1934, \u201cFoundations of Mathematics. Mr.\nNewman\u201d, lecture notes, St John\u2019s College Library,\nCambridge, GB 275 Smithies/H/H57.",
                "Stannett, Mike, 1990, \u201cX-Machines and the Halting Problem:\nBuilding a Super-Turing Machine\u201d, <em>Formal Aspects of\nComputing</em>, 2(1): 331\u2013341. doi:10.1007/BF01888233",
                "Stewart, Ian, 1991, \u201cDeciding the Undecidable\u201d,\n<em>Nature</em>, 352(6337): 664\u2013665. doi:10.1038/352664a0",
                "Stjernfelt, Frederik, 2022, <em>Sheets, Diagrams, and Realism in\nPeirce</em>, Berlin: De Gruyter. doi:10.1515/9783110793628",
                "Syropoulos, Apostolos, 2008, <em>Hypercomputation: Computing\nbeyond the Church-Turing Barrier</em>, New York: Springer.\ndoi:10.1007/978-0-387-49970-3",
                "Turing, Alan M., 1936 [2004], \u201cOn Computable Numbers, with\nan Application to the Entscheidungsproblem\u201d, <em>Proceedings of\nthe London Mathematical Society</em>, 1936, second series, 42(1):\n230\u2013265. Reprinted in Copeland 2004: 58\u201390 (ch. 1).\ndoi:10.1112/plms/s2-42.1.230",
                "\u2013\u2013\u2013, 1937, \u201cComputability and\n\u03bb-Definability\u201d, <em>The Journal of Symbolic Logic</em>,\n2(4): 153\u2013163. doi:10.2307/2268280",
                "\u2013\u2013\u2013, 1939 [2004], \u201cSystems of Logic Based\non Ordinals\u201d, <em>Proceedings of the London Mathematical\nSociety</em>, second series, 45(1): 161\u2013228. Reprinted in\nCopeland 2004: 146\u2013204 (ch. 3).\ndoi:10.1112/plms/s2-45.1.161",
                "\u2013\u2013\u2013, c.1940 [2004], letter to Newman, n.d., in\nCopeland 2004: 214\u2013216 (ch. 4).",
                "\u2013\u2013\u2013, 1945 [2005], \u201cProposed Electronic\nCalculator\u201d, National Physical Laboratory Report, in Copeland\n2005: 369\u2013454 (ch. 20).\ndoi:10.1093/acprof:oso/9780198565932.003.0021",
                "\u2013\u2013\u2013, 1947 [2004], \u201cLecture on the\nAutomatic Computing Engine\u201d, London Mathematical Society, in\nCopeland 2004: 378\u2013394 (ch. 9).",
                "\u2013\u2013\u2013, 1948 [2004], \u201cIntelligent\nMachinery\u201d, National Physical Laboratory Report, in Copeland\n2004: 410\u2013432 (ch. 10).",
                "\u2013\u2013\u2013, 1950a [2004], \u201cComputing Machinery\nand Intelligence\u201d, <em>Mind</em>, 59(236): 433\u2013460.\nReprinted in Copeland 2004: 441\u2013464 (ch. 11).\ndoi:10.1093/mind/LIX.236.433",
                "\u2013\u2013\u2013, 1950b, \u201cThe Word Problem in\nSemi-Groups With Cancellation\u201d, <em>Annals of Mathematics</em>,\nsecond series 52(2): 491\u2013505. doi:10.2307/1969481",
                "\u2013\u2013\u2013, c.1950, <em>Programmers\u2019 Handbook for\nManchester Electronic Computer Mark II</em>, Computing Machine\nLaboratory, University of Manchester.\n [<a href=\"http://www.AlanTuring.net/programmers_handbook\" target=\"other\">Turing c.1950 available online</a>]",
                "\u2013\u2013\u2013, 1954 [2004], \u201cSolvable and Unsolvable\nProblems\u201d, <em>Science News</em> (Penguin Books), 31:\n7\u201323. Reprinted in Copeland 2004: 582\u2013595 (ch. 17).",
                "van Heijenoort, Jean, 1967, <em>From Frege to G\u00f6del: A Source\nBook in Mathematical Logic, 1879\u20131931</em>, Cambridge, MA:\nHarvard University Press.",
                "Venn, John, 1880, \u201cOn the Diagrammatic and Mechanical\nRepresentation of Propositions and Reasonings\u201d, <em>The London,\nEdinburgh, and Dublin Philosophical Magazine and Journal of\nScience</em>, fifth series, 10(59): 1\u201318.\ndoi:10.1080/14786448008626877",
                "von Neumann, John, 1927, \u201cZur Hilbertschen\nBeweistheorie\u201d, <em>Mathematische Zeitschrift</em>, 26(1):\n1\u201346. doi:10.1007/BF01475439",
                "\u2013\u2013\u2013, 1931, \u201cDie formalistische Grundlegung\nder Mathematik\u201d, <em>Erkenntnis</em>, 2(1): 116\u2013121.\ndoi:10.1007/BF02028144",
                "Wang, Hao, 1974, <em>From Mathematics to Philosophy</em>, New\nYork: Humanities Press.",
                "\u2013\u2013\u2013, 1996, <em>A Logical Journey: From\nG\u00f6del to Philosophy</em>, Cambridge, MA: MIT Press.",
                "Weyl, Hermann, 1927 [1949], \u201cPhilosophie der Mathematik und\nNaturwissenschaft\u201d, <em>Handbuch der Philosophie</em>, Munich:\nOldenbourg. Published in English as <em>Philosophy of Mathematics and\nNatural Science</em>, Princeton, NJ: Princeton University Press,\n1949.",
                "Wittgenstein, Ludwig, 1947 [1980], <em>Bemerkungen \u00fcber die\nPhilosophie der Psychologie</em>. Translated as <em>Remarks on the\nPhilosophy of Psychology</em>, Volume 1, Anscombe, G. Elizabeth M. and\nGeorg Henrik von Wright (eds), Oxford: Blackwell, 1980.",
                "Wolfram, Stephen, 1985, \u201cUndecidability and Intractability\nin Theoretical Physics\u201d, <em>Physical Review Letters</em>,\n54(8): 735\u2013738. doi:10.1103/PhysRevLett.54.735",
                "\u2013\u2013\u2013, 2021, <em>Combinators: A Centennial\nView</em>, Champaign, IL: Wolfram Media.",
                "Yao, Andrew C.-C., 2003, \u201cClassical Physics and the\nChurch-Turing Thesis\u201d, <em>Journal of the ACM</em>, 50(1):\n100\u2013105. doi:10.1145/602382.602411",
                "Zach, Richard, 1999, \u201cCompleteness Before Post: Bernays,\nHilbert, and the Development of Propositional Logic\u201d,\n<em>Bulletin of Symbolic Logic</em>, 5(3): 331\u2013366.\ndoi:10.2307/421184",
                "\u2013\u2013\u2013, 2003, \u201cThe Practice of Finitism:\nEpsilon Calculus and Consistency Proofs in Hilbert\u2019s\nProgram\u201d, <em>Synthese</em>, 137(1/2): 211\u2013259.\ndoi:10.1023/A:1026247421383",
                "Zanichelli, Nicola (ed.), 1929, <em>Atti del Congresso\nInternazionale dei Matematici, Bologna, 3\u201310 Settembre 1928,\nVolume 1: Rendiconto del Congresso Conferenze</em>, Bologna:\nSociet\u00e0 Tipografica."
            ]
        },
        "raw_text": "<div id=\"bibliography\">\n<h2 id=\"Bib\">Bibliography</h2>\n<ul class=\"hanging\">\n<li>Ackermann, Wilhelm, 1928, \u201cZum Hilbertschen Aufbau der\nreellen Zahlen\u201d, <em>Mathematische Annalen</em>, 99(1):\n118\u2013133. doi:10.1007/BF01459088</li>\n<li>Aharonov, Dorit and Umesh V. Vazirani, 2013, \u201cIs Quantum\nMechanics Falsifiable? A Computational Perspective on the Foundations\nof Quantum Mechanics\u201d, in Copeland, Posy, and Shagrir 2013:\n329\u2013349 (ch. 11).</li>\n<li>Andr\u00e9ka, Hajnal, Istv\u00e1n N\u00e9meti, and\nP\u00e9ter N\u00e9meti, 2009, \u201cGeneral Relativistic\nHypercomputing and Foundation of Mathematics\u201d, <em>Natural\nComputing</em>, 8(3): 499\u2013516.\ndoi:10.1007/s11047-009-9114-3</li>\n<li>Baldwin, J. Mark, 1902, \u201cLogical Machine\u201d, in J. Mark\nBaldwin (ed.), <em>Dictionary of Philosophy and Psychology</em>,\nvolume 2, New York: Macmillan, 28\u201330.</li>\n<li>Barendregt, Henk, 1997, \u201cThe Impact of the Lambda Calculus\nin Logic and Computer Science\u201d, <em>Bulletin of Symbolic\nLogic</em>, 3(2): 181\u2013215. doi:10.2307/421013</li>\n<li>Barrett, Lindsay and Matthew Connell, 2005, \u201cJevons and the\nLogic \u2018Piano\u2019\u201d, <em>The Rutherford Journal</em>, 1:\narticle 3.\n [<a href=\"http://www.rutherfordjournal.org/article010103.html\" target=\"other\">Barrett &amp; Connell 2005 available online</a>]</li>\n<li>Barwise, Jon, 1977, \u201cAn Introduction to First-Order\nLogic\u201d, in Jon Barwise (ed.), <em>Handbook of Mathematical\nLogic</em>, Amsterdam: North-Holland, 5\u201346.</li>\n<li>Bausch, Johannes, Toby S. Cubitt, Angelo Lucia, and David\nPerez-Garcia, 2020, \u201cUndecidability of the Spectral Gap in One\nDimension\u201d, <em>Physical Review X</em>, 10(3): 031038.\ndoi:10.1103/PhysRevX.10.031038</li>\n<li>Bausch, Johannes, Toby S. Cubitt, and James D. Watson, 2019,\n\u201cUncomputability of Phase Diagrams\u201d,\narXiv:1910.01631.</li>\n<li>\u2013\u2013\u2013, 2021, \u201cUncomputability of Phase\nDiagrams\u201d, <em>Nature Communications</em>, 12(1): article 452.\ndoi:10.1038/s41467-020-20504-6</li>\n<li>Behmann, Heinrich, 1921 [2015], \u201cEntscheidungsproblem und\nAlgebra der Logik\u201d, Lecture, 10 May 1921, to the G\u00f6ttingen\nMathematical Society. In Mancosu and Zach 2015: 177\u2013187, with a\npartial translation by Richard Zach in the same (2015:\n173\u2013177).</li>\n<li>\u2013\u2013\u2013, 1922, \u201cBeitr\u00e4ge zur Algebra der\nLogik, insbesondere zum Entscheidungsproblem\u201d, <em>Mathematische\nAnnalen</em>, 88(1\u20132): 168\u2013168.\ndoi:10.1007/BF01448447</li>\n<li>Bernays, Paul, 1918, \u201cBeitr\u00e4ge zur axiomatischen\nBehandlung des Logik-Kalk\u00fcls\u201d, Habilitationsschrift,\nUniversity of G\u00f6ttingen. Bernays Papers, ETH Zurich (Hs\n973.192).</li>\n<li>Bernays, Paul and Moses Sch\u00f6nfinkel, 1928, \u201cZum\nEntscheidungsproblem der mathematischen Logik\u201d,\n<em>Mathematische Annalen</em>, 99(1): 342\u2013372.\ndoi:10.1007/BF01459101</li>\n<li>Bernstein, Ethan and Umesh Vazirani, 1997, \u201cQuantum\nComplexity Theory\u201d, <em>SIAM Journal on Computing</em>, 26(5):\n1411\u20131473. doi:10.1137/S0097539796300921</li>\n<li>Blum, Lenore, Felipe Cucker, Michael Shub, and Steve Smale, 1998,\n<em>Complexity and Real Computation</em>, New York: Springer.\ndoi:10.1007/978-1-4612-0701-6</li>\n<li>Boolos, George and Richard C. Jeffrey, 1974, <em>Computability and\nLogic</em>, New York: Cambridge University Press.</li>\n<li>Buss, Samuel R., Alexander S. Kechris, Anand Pillay, and Richard\nA. Shore, 2001, \u201cThe Prospects for Mathematical Logic in the\nTwenty-First Century\u201d, <em>Bulletin of Symbolic Logic</em>,\n7(2): 169\u2013196. doi:10.2307/2687773</li>\n<li>Calude, Cristian S. and Karl Svozil, 2008, \u201cQuantum\nRandomness and Value Indefiniteness\u201d, <em>Advanced Science\nLetters</em>, 1(2): 165\u2013168. doi:10.1166/asl.2008.016</li>\n<li>Calude, Cristian S., Michael J. Dinneen, Monica Dumitrescu, and\nKarl Svozil, 2010, \u201cExperimental Evidence of Quantum Randomness\nIncomputability\u201d, <em>Physical Review A</em>, 82(2): 022102.\ndoi:10.1103/PhysRevA.82.022102</li>\n<li>Cantor, Georg, 1874, \u201cUeber eine Eigenschaft des Inbegriffs\naller reellen algebraischen Zahlen\u201d, <em>Journal f\u00fcr die\nreine und angewandte Mathematik</em>, 77: 258\u2013262.\ndoi:10.1515/crll.1874.77.258</li>\n<li>Carnap, Rudolf, 1935, \u201cEin G\u00fcltigkeitskriterium\nf\u00fcr die S\u00e4tze der klassischen Mathematik\u201d,\n<em>Monatshefte f\u00fcr Mathematik und Physik</em>, 42:\n163\u2013190. doi:10.1007/BF01733289</li>\n<li>Cassirer, Ernst, 1929, <em>Philosophie der symbolischen\nFormen</em> (Volume 3: <em>Ph\u00e4nomenologie der Erkenntnis</em>),\nBerlin: Bruno Cassirer.</li>\n<li>Church, Alonzo, 1932, \u201cA Set of Postulates for the\nFoundation of Logic\u201d, <em>Annals of Mathematics</em>, second\nseries 33(2): 346\u2013366. doi:10.2307/1968337</li>\n<li>\u2013\u2013\u2013, 1933, \u201cA Set of Postulates For the\nFoundation of Logic (2)\u201d, <em>Annals of Mathematics</em>, second\nseries 34(4): 839\u2013864. doi:10.2307/1968702</li>\n<li>\u2013\u2013\u2013, 1935a, \u201cAn Unsolvable Problem of\nElementary Number Theory, Preliminary Report\u201d (abstract),\n<em>Bulletin of the American Mathematical Society</em>, 41(6):\n332\u2013333. Full paper in Church 1936b.</li>\n<li>\u2013\u2013\u2013, 1935b, letter to Kleene, 29 November 1935.\nExcerpt in Davis 1982: 9.</li>\n<li>\u2013\u2013\u2013, 1935c, \u201cA Proof of Freedom from\nContradiction\u201d, <em>Proceedings of the National Academy of\nSciences</em>, 21(5): 275\u2013281. doi:10.1073/pnas.21.5.275</li>\n<li>\u2013\u2013\u2013, 1936a, \u201cAn Unsolvable Problem of\nElementary Number Theory\u201d, <em>American Journal of\nMathematics</em>, 58(2): 345\u2013363. doi:10.2307/2371045</li>\n<li>\u2013\u2013\u2013, 1936b, \u201cA Note on the\nEntscheidungsproblem\u201d, <em>The Journal of Symbolic Logic</em>,\n1(1): 40\u201341. doi:10.2307/2269326</li>\n<li>\u2013\u2013\u2013, 1937a, Review of Turing 1936, <em>The\nJournal of Symbolic Logic</em>, 2(1): 42\u201343.\ndoi:10.1017/S002248120003958X</li>\n<li>\u2013\u2013\u2013, 1937b, Review of Post 1936, <em>The Journal\nof Symbolic Logic</em>, 2(1): 43. doi:10.1017/S0022481200039591</li>\n<li>\u2013\u2013\u2013, 1941, <em>The Calculi of\nLambda-Conversion</em>, Princeton, NJ: Princeton University\nPress.</li>\n<li>Church, Alonzo and J. Barkley Rosser, 1936, \u201cSome Properties\nof Conversion\u201d, <em>Transactions of the American Mathematical\nSociety</em>, 39(3): 472\u2013482.\ndoi:10.1090/S0002-9947-1936-1501858-0</li>\n<li>Copeland, B. Jack, 1998a, \u201cEven Turing Machines Can Compute\nUncomputable Functions\u201d, in <em>Unconventional Models of\nComputation, Proceedings of the 1st International Conference, New\nZealand</em>, Christian S. Calude, John Casti, and Michael J. Dinneen\n(eds), London: Springer-Verlag, 150\u2013164.</li>\n<li>\u2013\u2013\u2013, 1998b, \u201cSuper Turing-Machines\u201d,\n<em>Complexity</em>, 4(1): 30\u201332.\ndoi:10.1002/(SICI)1099-0526(199809/10)4:1&lt;30::AID-CPLX9&gt;3.0.CO;2-8</li>\n<li>\u2013\u2013\u2013, 2000, \u201cNarrow versus Wide Mechanism:\nIncluding a Re-Examination of Turing\u2019s Views on the Mind-Machine\nIssue\u201d, <em>The Journal of Philosophy</em>, 97(1): 5\u201332.\ndoi:10.2307/2678472</li>\n<li>\u2013\u2013\u2013, 2002a, \u201cAccelerating Turing\nMachines\u201d, <em>Minds and Machines</em>, 12(2): 281\u2013300.\n(In a special issue on the Church-Turing thesis, edited by Carol\nCleland.) doi:10.1023/A:1015607401307</li>\n<li>\u2013\u2013\u2013 (ed.), 2004, <em>The Essential Turing:\nSeminal Writings in Computing, Logic, Philosophy, Artificial\nIntelligence, and Artificial Life</em>, Oxford: Clarendon Press.\ndoi:10.1093/oso/9780198250791.001.0001</li>\n<li>Copeland, B. Jack and Zhao Fan, 2022, \u201cDid Turing Stand on\nG\u00f6del\u2019s Shoulders?\u201d, <em>The Mathematical\nIntelligencer</em>, 44: 308\u2013319.\ndoi:10.1007/s00283-022-10177-y</li>\n<li>\u2013\u2013\u2013, 2023, \u201cTuring and von Neumann: From\nLogic to the Computer\u201d, <em>Philosophies</em>, 8(2):\n1\u201330.</li>\n<li>Copeland, B. Jack, Carl J. Posy, and Oron Shagrir (eds), 2013,\n<em>Computability: Turing, G\u00f6del, Church, and Beyond</em>,\nCambridge, MA: The MIT Press.</li>\n<li>Copeland, B. Jack and Oron Shagrir, 2007, \u201cPhysical\nComputation: How General Are Gandy\u2019s Principles for\nMechanisms?\u201d, <em>Minds and Machines</em>, 17(2): 217\u2013231.\ndoi:10.1007/s11023-007-9058-2</li>\n<li>\u2013\u2013\u2013, 2011, \u201cDo Accelerating Turing\nMachines Compute the Uncomputable?\u201d, <em>Minds and\nMachines</em>, 21(2): 221\u2013239.\ndoi:10.1007/s11023-011-9238-y</li>\n<li>\u2013\u2013\u2013, 2013, \u201cTuring versus G\u00f6del on\nComputability and the Mind\u201d, in Copeland, Posy, and Shagrir\n2013: 1\u201333 (ch. 1).</li>\n<li>\u2013\u2013\u2013, 2019, \u201cThe Church-Turing Thesis:\nLogical Limit or Breachable Barrier?\u201d, <em>Communications of the\nACM</em>, 62(1): 66\u201374. doi:10.1145/3198448</li>\n<li>\u2013\u2013\u2013, 2020, \u201cPhysical Computability\nTheories\u201d, in <em>Quantum, Probability, Logic: The Work and\nInfluence of Itamar Pitowsky</em>, Meir Hemmo and Orly Shenker (eds),\nCham: Springer: 217\u2013231.</li>\n<li>Copeland, B. Jack, Oron Shagrir, and Mark Sprevak, 2018,\n\u201cZuse\u2019s Thesis, Gandy\u2019s Thesis, and Penrose\u2019s\nThesis\u201d, in <em>Physical Perspectives on Computation,\nComputational Perspectives on Physics</em>, Michael E. Cuffaro and\nSamuel C. Fletcher (eds), Cambridge: Cambridge University Press,\n39\u201359. doi:10.1017/9781316759745.003</li>\n<li>Copeland, B. Jack and Richard Sylvan, 1999, \u201cBeyond the\nUniversal Turing Machine\u201d, <em>Australasian Journal of\nPhilosophy</em>, 77(1): 46\u201366.\ndoi:10.1080/00048409912348801</li>\n<li>Couturat, Louis (ed.), 1903, <em>Opuscules et Fragments\nIn\u00e9dits de Leibniz</em>, Paris: Alcan. Facsimile of the 1903\nedition, Hildesheim: G. Olms, 1961.</li>\n<li>Cubitt, Toby S., David Perez-Garcia, and Michael M. Wolf, 2015,\n\u201cUndecidability of the Spectral Gap\u201d, <em>Nature</em>,\n528(7581): 207\u2013211. doi:10.1038/nature16059</li>\n<li>Curry, Haskell B., 1929, \u201cAn Analysis of Logical\nSubstitution\u201d, <em>American Journal of Mathematics</em>, 51(3):\n363\u2013384. doi:10.2307/2370728</li>\n<li>\u2013\u2013\u2013, 1930a, \u201cGrundlagen der\nkombinatorischen Logik, Teil 1\u201d, <em>American Journal of\nMathematics</em>, 52(3): 509\u2013536. doi:10.2307/2370619</li>\n<li>\u2013\u2013\u2013, 1930b, \u201cGrundlagen der\nkombinatorischen Logik, Teil 2\u201d, <em>American Journal of\nMathematics</em>, 52(4): 789\u2013834. doi:10.2307/2370716</li>\n<li>\u2013\u2013\u2013, 1932, \u201cSome Additions to the Theory\nof Combinators\u201d, <em>American Journal of Mathematics</em>,\n54(3): 551\u2013558. doi:10.2307/2370900</li>\n<li>Curry, Haskell B. and Robert Feys, 1958, <em>Combinatory\nLogic</em>, Amsterdam: North-Holland.</li>\n<li>da Costa, Newton C. A. and Francisco A. Doria, 1991,\n\u201cClassical Physics and Penrose\u2019s Thesis\u201d,\n<em>Foundations of Physics Letters</em>, 4(4): 363\u2013373.\ndoi:10.1007/BF00665895</li>\n<li>\u2013\u2013\u2013, 1994, \u201cUndecidable Hopf Bifurcation\nwith Undecidable Fixed Point\u201d, <em>International Journal of\nTheoretical Physics</em>, 33(9): 1885\u20131903.\ndoi:10.1007/BF00671031</li>\n<li>Davies, E. Brian, 2001, \u201cBuilding Infinite Machines\u201d,\n<em>The British Journal for the Philosophy of Science</em>, 52(4):\n671\u2013682. doi:10.1093/bjps/52.4.671</li>\n<li>Davis, Martin, 1958, <em>Computability and Unsolvability</em>, New\nYork: McGraw-Hill.</li>\n<li>\u2013\u2013\u2013 (ed.), 1965, <em>The Undecidable: Basic\nPapers on Undecidable Propositions, Unsolvable Problems and Computable\nFunctions</em>, Hewlett, NY: Raven Press.</li>\n<li>\u2013\u2013\u2013, 1982, \u201cWhy G\u00f6del Didn\u2019t\nHave Church\u2019s Thesis\u201d, <em>Information and Control</em>,\n54(1\u20132): 3\u201324. doi:10.1016/S0019-9958(82)91226-8</li>\n<li>Davis, Martin and Wilfried Sieg, 2015, \u201cConceptual\nConfluence in 1936: Post and Turing\u201d, in <em>Turing\u2019s\nRevolution</em>, Giovanni Sommaruga and Thomas Strahm (eds), Cham:\nBirkh\u00e4user, 3\u201327. doi:10.1007/978-3-319-22156-4_1</li>\n<li>Dawson, John W., 2006, \u201cG\u00f6del and the Origins of\nComputer Science\u201d, in <em>Logical Approaches to Computational\nBarriers</em>, Arnold Beckmann, Ulrich Berger, Benedikt L\u00f6we, and\nJohn V. Tucker (eds), (Lecture Notes in Computer Science 3988),\nBerlin/Heidelberg: Springer, 133\u2013136.\ndoi:10.1007/11780342_14</li>\n<li>Dedekind, Richard, 1888, <em>Was Sind und was Sollen die\nZahlen?</em> Braunschweig: Vieweg.</li>\n<li>Dershowitz, Nachum and Yuri Gurevich, 2008, \u201cA Natural\nAxiomatization of Computability and Proof of Church\u2019s\nThesis\u201d, <em>Bulletin of Symbolic Logic</em>, 14(3):\n299\u2013350. doi:10.2178/bsl/1231081370</li>\n<li>Deutsch, David, 1985, \u201cQuantum Theory, the\nChurch\u2013Turing Principle and the Universal Quantum\nComputer\u201d, <em>Proceedings of the Royal Society of London.\nSeries A. Mathematical and Physical Sciences</em>, 400(1818):\n97\u2013117. doi:10.1098/rspa.1985.0070</li>\n<li>Doyle, Jon, 1982, \u201cWhat is Church\u2019s Thesis? An\nOutline\u201d, Laboratory for Computer Science, MIT.</li>\n<li>\u2013\u2013\u2013, 2002, \u201cWhat Is Church\u2019s Thesis?\nAn Outline\u201d, <em>Minds and Machines</em>, 12(4): 519\u2013520.\ndoi:10.1023/A:1021126521437</li>\n<li>Earman, John, 1986, <em>A Primer on Determinism</em>, Dordrecht:\nReidel.</li>\n<li>Eisert, Jens, Markus P. M\u00fcller, and Christian Gogolin, 2012,\n\u201cQuantum Measurement Occurrence Is Undecidable\u201d,\n<em>Physical Review Letters</em>, 108(26): 260501 (5 pages).\ndoi:10.1103/PhysRevLett.108.260501</li>\n<li>Engeler, Erwin, 1983 [1993], <em>Metamathematik der\nElementarmathematik</em>, Berlin: Springer. Translated as\n<em>Foundations of Mathematics: Questions of Analysis, Geometry &amp;\nAlgorithmics</em>, Charles B. Thomas (trans.), Berlin/New York:\nSpringer-Verlag.</li>\n<li>Etesi, G\u00e1bor and Istv\u00e1n N\u00e9meti, 2002,\n\u201cNon-Turing Computations via Malament-Hogarth\nSpace-Times\u201d, <em>International Journal of Theoretical\nPhysics</em>, 41(2): 341\u2013370. doi:10.1023/A:1014019225365</li>\n<li>Frankena, William and Arthur W. Burks, 1964, \u201cCooper Harold\nLangford 1895\u20131964\u201d, <em>Proceedings and Addresses of the\nAmerican Philosophical Association</em>, 38: 99\u2013101.</li>\n<li>Gandy, Robin, 1980, \u201cChurch\u2019s Thesis and Principles\nfor Mechanisms\u201d, in <em>The Kleene Symposium</em>, Jon Barwise,\nH. Jerome Keisler, and Kenneth Kunen (eds), Amsterdam: North-Holland,\n123\u2013148. doi:10.1016/S0049-237X(08)71257-6</li>\n<li>\u2013\u2013\u2013, 1988, \u201cThe Confluence of Ideas in\n1936\u201d, in <em>The Universal Turing Machine: A Half-Century\nSurvey</em>, Rolf Herken (ed.), New York: Oxford University Press,\n51\u2013102.</li>\n<li>Geroch, Robert and James B. Hartle, 1986, \u201cComputability and\nPhysical Theories\u201d, <em>Foundations of Physics</em>, 16(6):\n533\u2013550. doi:10.1007/BF01886519</li>\n<li>G\u00f6del, Kurt, 1930, \u201cDie Vollst\u00e4ndigkeit der Axiome\ndes logischen Funktionenkalk\u00fcls\u201d, <em>Monatshefte f\u00fcr\nMathematik und Physik</em>, 37: 349\u2013360.\ndoi:10.1007/BF01696781</li>\n<li>\u2013\u2013\u2013, 1931, \u201c\u00dcber formal\nunentscheidbare S\u00e4tze der Principia Mathematica und verwandter\nSysteme I\u201d, <em>Monatshefte f\u00fcr Mathematik und Physik</em>,\n38: 173\u2013198. doi:10.1007/BF01700692</li>\n<li>\u2013\u2013\u2013, 1933, \u201cZum Entscheidungsproblem des\nlogischen Funktionenkalk\u00fcls\u201d, <em>Monatshefte f\u00fcr\nMathematik und Physik</em>, 40: 433\u2013443.\ndoi:10.1007/BF01708881</li>\n<li>\u2013\u2013\u2013, 1934 [1965], \u201cOn Undecidable\nPropositions of Formal Mathematical Systems\u201d, Lecture notes\ntaken by Stephen Kleene and J. Barkley Rosser at the Institute for\nAdvanced Study, in Davis 1965: 39\u201374.</li>\n<li>\u2013\u2013\u2013, 1936, \u201c\u00dcber die L\u00e4nge von\nBeweisen\u201d, <em>Ergebnisse eirtes mathematischen\nKolloquiums</em>, 7: 23\u201324.</li>\n<li>\u2013\u2013\u2013, 193?, \u201cUndecidable Diophantine\nPropositions\u201d, in G\u00f6del 1995: 164\u2013175.</li>\n<li>\u2013\u2013\u2013, 1946, \u201cRemarks Before the Princeton\nBicentennial Conference\u201d, in G\u00f6del 1990:\n150\u2013153.</li>\n<li>\u2013\u2013\u2013, 1951, \u201cSome Basic Theorems on the\nFoundations of Mathematics and Their Implications\u201d, in\nG\u00f6del 1995: 304\u2013323.</li>\n<li>\u2013\u2013\u2013, 1965a, \u201cPostscriptum\u201d to\nG\u00f6del 1934, in Davis 1965: 71\u201373.</li>\n<li>\u2013\u2013\u2013, 1965b, letter to Davis, 15 February 1965.\nExcerpt in Davis 1982: 8.</li>\n<li>\u2013\u2013\u2013, <em>Kurt G\u00f6del: Collected Works</em>,\n5 volumes, Solomon Feferman et al. (eds), Oxford: Clarendon Press.\n\n<ul class=\"hanging\">\n<li>1986, <em>Volume 1: Publications 1929\u20131936</em></li>\n<li>1990, <em>Volume 2: Publications 1938\u20131974</em></li>\n<li>1995, <em>Volume 3: Unpublished Essays and Lectures</em></li>\n</ul> </li>\n<li>Gurevich, Yuri, 2012, \u201cWhat Is an Algorithm?\u201d, in\n<em>SOFSEM 2012: Theory and Practice of Computer Science</em>,\nM\u00e1ria Bielikov\u00e1, Gerhard Friedrich, Georg Gottlob,\nStefan Katzenbeisser, and Gy\u00f6rgy Tur\u00e1n (eds), (Lecture\nNotes in Computer Science 7147), Berlin/Heidelberg: Springer,\n31\u201342. doi:10.1007/978-3-642-27660-6_3</li>\n<li>Guttenplan, Samuel D. (ed.), 1994, <em>A Companion to the\nPhilosophy of Mind</em>, Oxford/Cambridge, MA: Blackwell Reference.\ndoi:10.1002/9781405164597.</li>\n<li>Hardy, G. H., 1929, \u201cMathematical Proof\u201d,\n<em>Mind</em>, 38(149): 1\u201325.\ndoi:10.1093/mind/XXXVIII.149.1</li>\n<li>Harel, David, 1992, <em>Algorithmics: The Spirit of\nComputing</em>, second edition, Reading, MA: Addison-Wesley.</li>\n<li>Herbrand, Jacques, 1930a, <em>Recherches sur la Th\u00e9orie de\nla D\u00e9monstration</em>, doctoral thesis, University of Paris. In\nHerbrand 1968.</li>\n<li>\u2013\u2013\u2013, 1930b, \u201cLes bases de la logique\nHilbertienne\u201d, <em>Revue de M\u00e9taphysique et de\nMorale</em>, 37(2): 243\u2013255.</li>\n<li>\u2013\u2013\u2013, 1931a, \u201cSur le Probl\u00e8me\nFondamental de la Logique Math\u00e9matique\u201d, <em>Sprawozdania\nz Posiedze\u0144 Towarzystwa Naukowego Warszawskiego, Wydzia\u0142\nIII</em>, 24: 12\u201356.</li>\n<li>\u2013\u2013\u2013, 1931b, Precis of Herbrand 1930a,\n<em>Annales de l\u2019Universit\u00e9 de Paris</em>, 6:\n186\u2013189. In Herbrand 1968.</li>\n<li>\u2013\u2013\u2013, 1932, \u201cSur la non-contradiction de\nl\u2019Arithm\u00e9tique\u201d, <em>Journal f\u00fcr die reine und\nangewandte Mathematik</em>, 166: 1\u20138.\ndoi:10.1515/crll.1932.166.1</li>\n<li>\u2013\u2013\u2013, 1968, <em>\u00c9crits Logiques</em>,\nParis: Presses Universitaires de France.</li>\n<li>Hermes, Hans, 1969, \u201cIdeen von Leibniz zur\nGrundlagenforschung: Die Ars inveniendi und die Ars iudicandi\u201d,\nin <em>Systemprinzip und Vielheit der Wissenschaften</em>, Udo W.\nBargenda and J\u00fcrgen Bl\u00fchdorn (eds), Wiesbaden: Franz\nSteiner: 78\u201388.</li>\n<li>Hilbert, David, 1899, <em>Grundlagen der Geometrie</em>, Leipzig:\nTeubner.</li>\n<li>\u2013\u2013\u2013, 1900 [1902], \u201cMathematische\nProbleme\u201d, <em>Nachrichten von der Gesellschaft der\nWissenschaften zu G\u00f6ttingen, Mathematisch-Physikalische\nKlasse</em>, 3: 253\u2013297. Translated in 1902 as\n\u201cMathematical Problems\u201d, Mary Winston Newson (trans.),\n<em>Bulletin of the American Mathematical Society</em>, 8(10):\n437\u2013480. doi:10.1090/S0002-9904-1902-00923-3</li>\n<li>\u2013\u2013\u2013, 1917, \u201cAxiomatisches Denken\u201d,\n<em>Mathematische Annalen</em>, 78(1\u20134): 405\u2013415.\ndoi:10.1007/BF01457115</li>\n<li>\u2013\u2013\u2013, 1922, \u201cNeubegr\u00fcndung der\nMathematik. Erste Mitteilung\u201d, <em>Abhandlungen aus dem\nMathematischen Seminar der Universit\u00e4t Hamburg</em>, 1:\n157\u2013177. doi:10.1007/BF02940589</li>\n<li>\u2013\u2013\u2013, 1926 [1967], \u201c\u00dcber das\nUnendliche\u201d, <em>Mathematische Annalen</em>, 95(1):\n161\u2013190. Translated as \u201cOn the Infinite\u201d in van\nHeijenoort 1967: 367\u2013392. doi:10.1007/BF01206605</li>\n<li>\u2013\u2013\u2013, 1930a, \u201cProbleme der Grundlegung der\nMathematik\u201d, <em>Mathematische Annalen</em>, 102(1): 1\u20139.\ndoi:10.1007/BF01782335</li>\n<li>\u2013\u2013\u2013, 1930b, \u201cNaturerkennen und\nLogik\u201d, <em>Die Naturwissenschaften</em>, 18(47\u201349):\n959\u2013963. doi:10.1007/BF01492194</li>\n<li>Hilbert, David and Wilhelm Ackermann, 1928, <em>Grundz\u00fcge der\nTheoretischen Logik</em>, Berlin: Springer.</li>\n<li>\u2013\u2013\u2013, 1938, <em>Grundz\u00fcge der Theoretischen\nLogik</em>, Berlin: Springer. Second edition.</li>\n<li>Hilbert, David and Paul Bernays, 1934, <em>Grundlagen der\nMathematik</em>, Volume 1, Berlin: Springer.</li>\n<li>\u2013\u2013\u2013, 1939, <em>Grundlagen der Mathematik</em>,\nVolume 2, Berlin: Springer.</li>\n<li>Hobbes, Thomas, 1655 [1839], <em>De Corpore</em>, in\n<em>Thom\u00e6 Hobbes Malmesburiensis: Opera Philosophica</em>\n(Volume 1), William Molesworth (ed.), London: J. Bohn, 1839.</li>\n<li>Hogarth, Mark, 1994, \u201cNon-Turing Computers and Non-Turing\nComputability\u201d, <em>PSA: Proceedings of the Biennial Meeting of\nthe Philosophy of Science Association</em>, 1994(1): 126\u2013138.\ndoi:10.1086/psaprocbienmeetp.1994.1.193018</li>\n<li>\u2013\u2013\u2013, 2004, \u201cDeciding Arithmetic Using\n<em>SAD</em> Computers\u201d, <em>The British Journal for the\nPhilosophy of Science</em>, 55(4): 681\u2013691.\ndoi:10.1093/bjps/55.4.681</li>\n<li>Hopcroft, John E. and Jeffrey D. Ullman, 1979, <em>Introduction to\nAutomata Theory, Languages, and Computation</em>, Reading, MA:\nAddison-Wesley.</li>\n<li>Houser, Nathan, Don D. Roberts, and James Van Evra (eds), 1997,\n<em>Studies in the Logic of Charles Sanders Peirce</em>, Bloomington,\nIN: Indiana University Press.</li>\n<li>Jevons, W. Stanley, 1870, \u201cOn the Mechanical Performance of\nLogical Inference\u201d, <em>Philosophical Transactions of the Royal\nSociety of London</em>, 160: 497\u2013518.\ndoi:10.1098/rstl.1870.0022</li>\n<li>\u2013\u2013\u2013, 1880, letter to Venn, 18 August 1880, Venn\nCollection, Gonville and Caius College, Cambridge, C 45/4 (quoted by\npermission of the Master and Fellows of Gonville and Caius).</li>\n<li>Kalm\u00e1r, L\u00e1szl\u00f3, 1959, \u201cAn Argument\nAgainst the Plausibility of Church\u2019s Thesis\u201d, in\n<em>Constructivity in Mathematics: Proceedings of the colloquium held\nat Amsterdam 1957</em>, Arend Heyting (ed.), Amsterdam: North-Holland:\n72\u201380.</li>\n<li>Kennedy, Juliette, 2013, \u201cOn Formalism Freeness:\nImplementing G\u00f6del\u2019s 1946 Princeton Bicentennial\nLecture\u201d, <em>Bulletin of Symbolic Logic</em>, 19(3):\n351\u2013393. doi:10.1017/S1079898600010684</li>\n<li>Ketner, Kenneth L. and Arthur F. Stewart, 1984, \u201cThe Early\nHistory of Computer Design: Charles Sanders Peirce and\nMarquand\u2019s Logical Machines\u201d, <em>The Princeton University\nLibrary Chronicle</em>, 45(3): 187\u2013224.\ndoi:10.2307/26402393</li>\n<li>Kieu, Tien D., 2004, \u201cHypercomputation with Quantum\nAdiabatic Processes\u201d, <em>Theoretical Computer Science</em>,\n317(1\u20133): 93\u2013104. doi:10.1016/j.tcs.2003.12.006</li>\n<li>Kleene, Stephen C., 1934, \u201cProof by Cases in Formal\nLogic\u201d, <em>Annals of Mathematics</em>, second series 35(3):\n529\u2013544. doi:10.2307/1968749</li>\n<li>\u2013\u2013\u2013, 1935a, \u201cA Theory of Positive Integers\nin Formal Logic. Part I\u201d, <em>American Journal of\nMathematics</em>, 57(1): 153\u2013173. doi:10.2307/2372027</li>\n<li>\u2013\u2013\u2013, 1935b, \u201cA Theory of Positive Integers\nin Formal Logic. Part II\u201d, <em>American Journal of\nMathematics</em>, 57(2): 219\u2013244. doi:10.2307/2371199</li>\n<li>\u2013\u2013\u2013, 1936a, \u201cGeneral Recursive Functions\nof Natural Numbers\u201d, <em>Mathematische Annalen</em>, 112(1):\n727\u2013742. doi:10.1007/BF01565439</li>\n<li>\u2013\u2013\u2013, 1936b, \u201c\u03bb-Definability and\nRecursiveness\u201d, <em>Duke Mathematical Journal</em>, 2(2):\n340\u2013353. doi:10.1215/S0012-7094-36-00227-2</li>\n<li>\u2013\u2013\u2013, 1952, <em>Introduction to\nMetamathematics</em>, Amsterdam: North-Holland.</li>\n<li>\u2013\u2013\u2013, 1967, <em>Mathematical Logic</em>, New\nYork: Wiley.</li>\n<li>\u2013\u2013\u2013, 1981, \u201cOrigins of Recursive Function\nTheory\u201d, <em>IEEE Annals of the History of Computing</em>, 3(1):\n52\u201367. doi:10.1109/MAHC.1981.10004</li>\n<li>\u2013\u2013\u2013, 1986, \u201cIntroductory Note to\n<em>1930b</em>, <em>1931</em> and <em>1932b</em>\u201d, in G\u00f6del\n1986: 126\u2013141.</li>\n<li>\u2013\u2013\u2013, 1987, \u201cReflections on Church\u2019s\nThesis\u201d, <em>Notre Dame Journal of Formal Logic</em>, 28(4):\n490\u2013498. doi:10.1305/ndjfl/1093637645</li>\n<li>Kleene, Stephen C. and J. Barkley Rosser, 1935, \u201cThe\nInconsistency of Certain Formal Logics\u201d, <em>Annals of\nMathematics</em>, second series 36(3): 630\u2013636.\ndoi:10.2307/1968646</li>\n<li>Kreisel, Georg, 1965, \u201cMathematical Logic\u201d, in\n<em>Lectures on Modern Mathematics, Volume 3</em>, Thomas L. Saaty\n(ed.), New York: Wiley, 95\u2013195.</li>\n<li>\u2013\u2013\u2013, 1967, \u201cMathematical Logic: What Has\nit Done For the Philosophy of Mathematics?\u201d, in <em>Bertrand\nRussell: Philosopher of the Century</em>, Ralph Schoenman (ed.),\nLondon: George Allen and Unwin: 201\u2013272.</li>\n<li>\u2013\u2013\u2013, 1974, \u201cA Notion of Mechanistic\nTheory\u201d, <em>Synthese</em>, 29(1\u20134): 11\u201326.\ndoi:10.1007/BF00484949</li>\n<li>\u2013\u2013\u2013, 1982, Review of Pour-El and Richards 1979\nand 1981, <em>The Journal of Symbolic Logic</em>, 47(4):\n900\u2013902. doi:10.2307/2273108</li>\n<li>Kripke, Saul A., 2013, \u201cThe Church-Turing\n\u2018Thesis\u2019 as a Special Corollary of G\u00f6del\u2019s\nCompleteness Theorem\u201d, in Copeland, Posy, and Shagrir 2013:\n77\u2013104 (ch. 4).</li>\n<li>Langford, C. Harold, 1926a, \u201cSome Theorems on\nDeducibility\u201d, <em>Annals of Mathematics</em>, second series\n28(1/4): 16\u201340. doi:10.2307/1968352</li>\n<li>\u2013\u2013\u2013, 1926b, \u201cAnalytic Completeness of Sets\nof Postulates\u201d, <em>Proceedings of the London Mathematical\nSociety</em>, second series 25: 115\u2013142.\ndoi:10.1112/plms/s2-25.1.115</li>\n<li>\u2013\u2013\u2013, 1927, \u201cTheorems on Deducibility\n(Second Paper)\u201d, <em>Annals of Mathematics</em>, second series\n28(1/4): 459\u2013471. doi:10.2307/1968390</li>\n<li>Langton, Christopher G., 1989, \u201cArtificial Life\u201d, in\n<em>Artificial Life: The Proceedings of An Interdisciplinary Workshop\non the Synthesis and Simulation of Living Systems, Held September,\n1987 in Los Alamos, New Mexico</em>, Christopher G. Langton (ed.),\nRedwood City, CA: Addison-Wesley, 1\u201347.</li>\n<li>Leibniz, Gottfried Wilhelm, 1666 [2020], <em>Dissertatio de Arte\nCombinatoria</em>, Leipzig. Translated in <em>Leibniz: Dissertation on\nCombinatorial Art</em>, Massimo Mugnai, Han van Ruler, and Martin\nWilson (eds), Oxford: Oxford University Press, 2020.</li>\n<li>\u2013\u2013\u2013, 1671 [1926], letter to Herzog, October(?)\n1671, in Erich Hochstetter, Willy Kabitz and Paul Ritter (eds),\n<em>Gottfried Wilhelm Leibniz: S\u00e4mtliche Schriften und\nBriefe,</em> second series: <em>Philosophischer Briefwechsel</em>\n(Volume 1), <em>1663\u20131685</em>, Darmstadt: O. Reichl, 1926:\n159\u2013165 (facsimile of the 1926 edition, Hildesheim: G. Olms,\n1972).</li>\n<li>\u2013\u2013\u2013, 1679 [1903], \u201cConsilium de\nEncyclopaedia Nova Conscribenda Methodo Inventoria\u201d, in Couturat\n1903: 30\u201341.</li>\n<li>\u2013\u2013\u2013, 1685 [1951], \u201cL\u2019Art\nd\u2019Inventer\u201d, in Couturat 1903. Translated as \u201cThe\nArt of Discovery\u201d in Philip P. Wiener (ed.),<em>Leibniz\nSelections</em>, New York: Scribner, 1951: 50\u201358.</li>\n<li>\u2013\u2013\u2013, 1710, \u201c<em>Brevis descriptio machinae\narithmeticae, cum figura</em>\u201d, in <em>Miscellanea Berolinensia\nad incrementum scientiarum</em>, pp. 317\u201319 (and Fig. 73),\nBerlin: Johann Christoph Papenius.</li>\n<li>\u2013\u2013\u2013, 1714 [1969], letter to Remond, 10 January\n1714, in Leroy E. Loemker (ed.), <em>Gottfried Wilhelm Leibniz:\nPhilosophical Papers and Letters</em>, second edition, Dordrecht:\nReidel, 1969: 654\u2013655.</li>\n<li>\u2013\u2013\u2013, <em>n.d.</em>1 [1903], \u201cDe Machina\nCombinatoria\u201d, in Couturat 1903: 572.</li>\n<li>\u2013\u2013\u2013, <em>n.d.</em>2 [1890], \u201cDiscours\ntouchant la methode de la certitude et l\u2019art d\u2019inventer\npour finir les disputes et pour faire en peu de temps des grands\nprogr\u00e9s\u201d, in Carl J. Gerhardt (ed.), <em>Die\nphilosophischen Schriften von Gottfried Wilhelm Leibniz</em> (Volume\n7), Berlin, 1890: 174\u2013183 (facsimile of the 1890 edition,\nHildesheim: G. Olms, 1965).</li>\n<li>Lewis, Harry R. and Christos H. Papadimitriou, 1981, <em>Elements\nof the Theory of Computation</em>, Englewood Cliffs, NJ:\nPrentice-Hall.</li>\n<li>Llull, Ramon, 1645 [1970], <em>Ars Generalis Ultima</em>, Palma\nMalorca, facsimile of the 1645 edition, Frankfurt: Minerva, 1970.</li>\n<li>\u2013\u2013\u2013, 1986, <em>Poesies</em>, Josep Romeu i\nFigueras (ed.), Barcelona: Enciclop\u00e8dia Catalana.</li>\n<li>L\u00f6wenheim, Leopold, 1915, \u201c\u00dcber M\u00f6glichkeiten\nim Relativkalk\u00fcl\u201d, <em>Mathematische Annalen</em>, 76(4):\n447\u2013470. doi:10.1007/BF01458217</li>\n<li>MacLennan, Bruce J., 2003, \u201cTranscending Turing\nComputability\u201d, <em>Minds and Machines</em>, 13(1): 3\u201322.\ndoi:10.1023/A:1021397712328</li>\n<li>Mancosu, Paolo and Richard Zach, 2015, \u201cHeinrich\nBehmann\u2019s 1921 Lecture on the Decision Problem and the Algebra\nof Logic\u201d, <em>Bulletin of Symbolic Logic</em>, 21(2):\n164\u2013187. doi:10.1017/bsl.2015.10</li>\n<li>Markov, Andrey A., 1951,\n\u201c\u0422\u0435\u043e\u0440\u0438\u044f\n\u0410\u043b\u0433\u043e\u0440\u0438\u0444\u043c\u043e\u0432\u201d,\n<em>Trudy Matematicheskogo Instituta imeni V. A. Steklova</em>, 38:\n176\u2013189. Translation by Edwin Hewitt, 1960, \u201cThe Theory of\nAlgorithms\u201d, <em>American Mathematical Society\nTranslations</em>, Series 2, 15: 1\u201314.</li>\n<li>Marquand, Allan, 1881, \u201cOn Logical Diagrams for <em>n</em>\nTerms\u201d, <em>The London, Edinburgh, and Dublin Philosophical\nMagazine and Journal of Science</em>, fifth series, 12(75):\n266\u2013270. doi:10.1080/14786448108627104</li>\n<li>\u2013\u2013\u2013, 1883, \u201cA Machine for Producing\nSyllogistic Variations\u201d, in <em>Studies in Logic</em>, Charles\nS. Peirce (ed.), Boston: Little, Brown, 12\u201315.\ndoi:10.1037/12811-002</li>\n<li>\u2013\u2013\u2013, 1885, \u201cA New Logical Machine\u201d,\n<em>Proceedings of the American Academy of Arts and Sciences</em>, 21:\n303\u2013307.</li>\n<li>Massey, Gerald J., 1966, \u201cAn Extension of Venn\nDiagrams\u201d, <em>Notre Dame Journal of Formal Logic</em>, 7(3):\n239\u2013250. doi:10.1305/ndjfl/1093958619</li>\n<li>Mays, Wolfe and Desmond P. Henry, 1951, \u201cLogical Machines:\nNew Light on W. Stanley Jevons\u201d, <em>Manchester Guardian</em>,\nno. 32677 (14 July 1951) B, 4.</li>\n<li>\u2013\u2013\u2013, 1953, \u201cJevons and Logic\u201d,\n<em>Mind</em>, 62(248): 484\u2013505.\ndoi:10.1093/mind/LXII.248.484</li>\n<li>Mays, W. and Dietrich G. Prinz, 1950, \u201cA Relay Machine for\nthe Demonstration of Symbolic Logic\u201d, <em>Nature</em>,\n165(4188): 197\u2013198. doi:10.1038/165197a0</li>\n<li>Mendelson, Elliott, 1963, \u201cOn Some Recent Criticism of\nChurch\u2019s Thesis.\u201d, <em>Notre Dame Journal of Formal\nLogic</em>, 4(3): 201\u2013205. doi:10.1305/ndjfl/1093957577</li>\n<li>\u2013\u2013\u2013, 1964, <em>Introduction to Mathematical\nLogic</em>, Princeton, NJ: Van Nostrand.</li>\n<li>\u2013\u2013\u2013, 1990, \u201cSecond Thoughts about\nChurch\u2019s Thesis and Mathematical Proofs\u201d, <em>The Journal\nof Philosophy</em>, 87(5): 225\u2013233. doi:10.2307/2026831</li>\n<li>Montague, Richard, 1960, \u201cTowards a General Theory of\nComputability\u201d, <em>Synthese</em>, 12(4): 429\u2013438.\ndoi:10.1007/BF00485427</li>\n<li>N\u00e9meti, Istv\u00e1n and Gyula D\u00e1vid, 2006,\n\u201cRelativistic Computers and the Turing Barrier\u201d,\n<em>Applied Mathematics and Computation</em>, 178(1): 118\u2013142.\ndoi:10.1016/j.amc.2005.09.075</li>\n<li>Newell, Allen, 1980, \u201cPhysical Symbol Systems\u201d,\n<em>Cognitive Science</em>, 4(2): 135\u2013183.\ndoi:10.1207/s15516709cog0402_2</li>\n<li>Newman, Maxwell H.A., 1923, \u201cThe Foundations of Mathematics\nfrom the Standpoint of Physics\u201d, fellowship dissertation, in the\nRecords of St John\u2019s College, Cambridge, SJCR/SJAC/2/1/5/1\n(quoted by permission of the Master and Fellows of St\nJohn\u2019s).</li>\n<li>\u2013\u2013\u2013, 1955, \u201cAlan Mathison Turing,\n1912\u20131954\u201d, <em>Biographical Memoirs of Fellows of the\nRoyal Society</em>, 1(November): 253\u2013263.\ndoi:10.1098/rsbm.1955.0019</li>\n<li>\u2013\u2013\u2013, <em>c</em>1977, Newman in interview with\nChristopher Evans, <em>n.d.</em>, \u201cThe Pioneers of Computing: An\nOral History of Computing\u201d, London: Science Museum;\ntranscription by Copeland in Copeland 2004: 206.</li>\n<li>Olszewski, Adam, Jan Wole\u0144ski, and Robert Janusz (eds), 2006,\n<em>Church\u2019s Thesis after 70 Years</em>, Frankfurt/New\nBrunswick, NJ: Ontos. doi:10.1515/9783110325461</li>\n<li>Peirce, Charles S., 1886, letter to Marquand, 30 December 1886, in\nPeirce 1993: item 58, pp. 422\u2013424.</li>\n<li>\u2013\u2013\u2013, 1887, \u201cLogical Machines\u201d,\n<em>The American Journal of Psychology</em>, 1(1): 165\u2013170.</li>\n<li>\u2013\u2013\u2013, 1903a, \u201cThe 1903 Lowell Institute\nLectures I\u2013V\u201d, in Peirce 2021: 137\u2013310.</li>\n<li>\u2013\u2013\u2013, 1903b, R S32, draft of last part of the 2nd\nLowell Lecture, in Peirce 2021.</li>\n<li>\u2013\u2013\u2013, 1903c, R 462, 2nd draft of the 3rd Lowell\nLecture, in Peirce 2021.</li>\n<li>\u2013\u2013\u2013, 1903d, R 464, 3rd draft of the 3rd Lowell\nLecture, in Peirce 2021.</li>\n<li>\u2013\u2013\u2013, <em>n.d.</em>, R 831, untitled, Charles S.\nPeirce Papers, Houghton Library, Harvard.</li>\n<li>\u2013\u2013\u2013, 1908, \u201cSome Amazing Mazes\n(conclusion)\u201d, <em>Monist</em>, 18(3): 416\u2013464.\ndoi:10.5840/monist190818326</li>\n<li>\u2013\u2013\u2013, 1993, <em>Writings of Charles S. Peirce: A\nChronological Edition, Volume 5: 1884\u20131886</em>, Christian J.W.\nKloesel (ed.), Bloomington, IN: Indiana University Press.</li>\n<li>\u2013\u2013\u2013, 2021, <em>Charles S. Peirce: Logic of the\nFuture, Writings on the Existential Graphs, Volume 2/2: The 1903\nLowell Lectures</em>, Ahti-Veikko Pietarinen (ed.), Berlin: de\nGruyter.</li>\n<li>Penrose, Roger, 1994, <em>Shadows of the Mind: A Search for the\nMissing Science of Consciousness</em>, Oxford/New York: Oxford\nUniversity Press.</li>\n<li>\u2013\u2013\u2013, 2011, \u201cG\u00f6del, the Mind, and the\nLaws of Physics\u201d, in <em>Kurt G\u00f6del and the Foundations of\nMathematics</em>, Matthias Baaz, Christos H. Papadimitriou, Hilary W.\nPutnam, Dana S. Scott, and Charles L. Harper, Jr (eds), Cambridge:\nCambridge University Press, 339\u2013358.\ndoi:10.1017/CBO9780511974236.019</li>\n<li>\u2013\u2013\u2013, 2016, \u201cOn Attempting to Model the\nMathematical Mind\u201d, in <em>The Once and Future Turing: Computing\nthe World</em>, S. Barry Cooper and Andrew Hodges (eds), Cambridge:\nCambridge University Press, 361\u2013378.\ndoi:10.1017/CBO9780511863196.022</li>\n<li>P\u00e9ter, R\u00f3zsa, 1935, \u201c\u00dcber den\nZusammenhang der verschiedenen Begriffe der rekursiven\nFunktion\u201d, <em>Mathematische Annalen</em>, 110(1):\n612\u2013632. doi:10.1007/BF01448046</li>\n<li>Pitowski, Itamar, 1990, \u201cThe Physical Church Thesis and\nPhysical Computational Complexity\u201d, <em>Iyyun</em>, 39:\n81\u201399.</li>\n<li>Post, Emil L., 1936, \u201cFinite Combinatory\nProcesses\u2014Formulation 1\u201d, <em>The Journal of Symbolic\nLogic</em>, 1(3): 103\u2013105. doi:10.2307/2269031</li>\n<li>\u2013\u2013\u2013, 1943, \u201cFormal Reductions of the\nGeneral Combinatorial Decision Problem\u201d, <em>American Journal of\nMathematics</em>, 65(2): 197\u2013215. doi:10.2307/2371809</li>\n<li>\u2013\u2013\u2013, 1946, \u201cA Variant of a Recursively\nUnsolvable Problem\u201d, <em>Bulletin of the American Mathematical\nSociety</em>, 52(4): 264\u2013268.\ndoi:10.1090/S0002-9904-1946-08555-9</li>\n<li>\u2013\u2013\u2013, 1965, \u201cAbsolutely Unsolvable Problems\nand Relatively Undecidable Propositions\u2014Account of an\nAnticipation\u201d, in Davis 1965: 340\u2013433.</li>\n<li>Pour-El, Marian Boykan and Ian Richards, 1979, \u201cA Computable\nOrdinary Differential Equation Which Possesses No Computable\nSolution\u201d, <em>Annals of Mathematical Logic</em>, 17(1\u20132):\n61\u201390. doi:10.1016/0003-4843(79)90021-4</li>\n<li>\u2013\u2013\u2013, 1981, \u201cThe Wave Equation with\nComputable Initial Data Such That Its Unique Solution Is Not\nComputable\u201d, <em>Advances in Mathematics</em>, 39(3):\n215\u2013239. doi:10.1016/0001-8708(81)90001-3</li>\n<li>\u2013\u2013\u2013, 1989, <em>Computability in Analysis and\nPhysics</em>, Berlin: Springer.\n [<a href=\"https://projecteuclid.org/eBooks/perspectives-in-logic/Computability-in-Analysis-and-Physics/toc/pl/1235422916\" target=\"other\">Pour-El and Richards 1989 available online</a>]</li>\n<li>Quine, Willard Van Orman, 1950, <em>Methods of Logic</em>, New\nYork: Holt.</li>\n<li>\u2013\u2013\u2013, 1951, <em>Mathematical Logic</em>, revised\nedition, Cambridge, MA: Harvard University Press.</li>\n<li>Rabin, Michael O. and Dana S. Scott, 1959, \u201cFinite Automata\nand Their Decision Problems\u201d, <em>IBM Journal of Research and\nDevelopment</em>, 3(2): 114\u2013125. doi:10.1147/rd.32.0114</li>\n<li>Ramsey, Frank P., 1930, \u201cOn a Problem of Formal\nLogic\u201d, <em>Proceedings of the London Mathematical Society</em>,\nsecond series 30(1): 264\u2013286. doi:10.1112/plms/s2-30.1.264</li>\n<li>Roberts, Don D., 1973, <em>The Existential Graphs of Charles S.\nPeirce</em>, Hague: Mouton.</li>\n<li>\u2013\u2013\u2013, 1997, \u201cA Decision Method for\nExistential Graphs\u201d, in Houser, Roberts, &amp; Van Evra 1997:\n387\u2013401.</li>\n<li>Rosser, J. Barkley, 1935a, \u201cA Mathematical Logic Without\nVariables. I\u201d, <em>Annals of Mathematics</em>, second series\n36(1): 127\u2013150. doi:10.2307/1968669</li>\n<li>\u2013\u2013\u2013, 1935b, \u201cA Mathematical Logic without\nVariables. II\u201d, <em>Duke Mathematical Journal</em>, 1(3):\n328\u2013355. doi:10.1215/S0012-7094-35-00123-5</li>\n<li>Scarpellini, Bruno, 1963, \u201cZwei Unentscheidbare Probleme Der\nAnalysis\u201d, <em>Zeitschrift f\u00fcr Mathematische Logik und\nGrundlagen der Mathematik</em>, 9(18\u201320): 265\u2013289.\ndoi:10.1002/malq.19630091802</li>\n<li>\u2013\u2013\u2013, 2003, \u201cComments on \u2018Two\nUndecidable Problems of Analysis\u2019\u201d, <em>Minds and\nMachines</em>, 13(1): 79\u201385. doi:10.1023/A:1021364916624</li>\n<li>Schiemer, Georg, Richard Zach, and Erich Reck, 2017,\n\u201cCarnap\u2019s Early Metatheory: Scope and Limits\u201d,\n<em>Synthese</em>, 194(1): 33\u201365.\ndoi:10.1007/s11229-015-0877-z</li>\n<li>Schmidhuber, J\u00fcrgen, 2012, \u201cTuring in Context\u201d,\n<em>Science</em>, 336(6089): 1638\u20131639.\ndoi:10.1126/science.336.6089.1638-c</li>\n<li>Sch\u00f6nfinkel, Moses, 192?, \u201cZum Entscheidungsproblem der\nmathematischen Logik\u201d, <em>n.d.</em>, Heft I, <em>Bernays\nPapers</em>, ETH Zurich (Hs 974.282).</li>\n<li>\u2013\u2013\u2013, 1924, \u201c\u00dcber die Bausteine der\nmathematischen Logik\u201d, <em>Mathematische Annalen</em>,\n92(3\u20134): 305\u2013316. doi:10.1007/BF01448013</li>\n<li>Searle, John R., 1992, <em>The Rediscovery of the Mind</em>,\nCambridge, MA: MIT Press.</li>\n<li>Shagrir, Oron, 2002, \u201cEffective Computation by Humans and\nMachines\u201d, <em>Minds and Machines</em>, 12(2): 221\u2013240.\ndoi:10.1023/A:1015694932257</li>\n<li>\u2013\u2013\u2013, 2006, \u201cG\u00f6del on Turing on\nComputability\u201d, in Olszewski, Wolenski, and Janusz 2006:\n393\u2013419. doi:10.1515/9783110325461.393</li>\n<li>Shagrir, Oron and Itamar Pitowsky, 2003, \u201cPhysical\nHypercomputation and the Church\u2013Turing Thesis\u201d, <em>Minds\nand Machines</em>, 13(1): 87\u2013101.\ndoi:10.1023/A:1021365222692</li>\n<li>Shepherdson, John C. and Howard E. Sturgis, 1963,\n\u201cComputability of Recursive Functions\u201d, <em>Journal of the\nACM</em>, 10(2): 217\u2013255. doi:10.1145/321160.321170</li>\n<li>Shoenfield, Joseph R., 1993, <em>Recursion Theory</em>, Berlin/New\nYork: Springer.</li>\n<li>Sieg, Wilfried, 1994, \u201cMechanical Procedures and\nMathematical Experience\u201d, in <em>Mathematics and Mind</em>,\nAlexander George (ed.), Oxford: Oxford University Press:\n71\u2013117.</li>\n<li>\u2013\u2013\u2013, 2002, \u201cCalculations by Man and\nMachine: Conceptual Analysis\u201d, in <em>Reflections on the\nFoundations of Mathematics: Essays in Honor of Solomon Feferman</em>,\nWilfried Sieg, Richard Sommer, and Carolyn Talcott (eds), Urbana, IL:\nAssociation for Symbolic Logic, 390\u2013409.</li>\n<li>\u2013\u2013\u2013, 2008, \u201cChurch Without Dogma: Axioms\nfor Computability\u201d, in <em>New Computational Paradigms</em>, S.\nBarry Cooper, Benedikt L\u00f6we, and Andrea Sorbi (eds), New York,\nNY: Springer New York, 139\u2013152.\ndoi:10.1007/978-0-387-68546-5_7</li>\n<li>Siegelmann, Hava T., 2003, \u201cNeural and Super-Turing\nComputing\u201d, <em>Minds and Machines</em>, 13(1): 103\u2013114.\ndoi:10.1023/A:1021376718708</li>\n<li>Siegelmann, Hava T. and Eduardo D. Sontag, 1992, \u201cOn the\nComputational Power of Neural Nets\u201d, in <em>Proceedings of the\nFifth Annual Workshop on Computational Learning Theory - COLT\n\u201992</em>, Pittsburgh, PA: ACM Press, 440\u2013449.\ndoi:10.1145/130385.130432</li>\n<li>\u2013\u2013\u2013, 1994, \u201cAnalog Computation via Neural\nNetworks\u201d, <em>Theoretical Computer Science</em>, 131(2):\n331\u2013360. doi:10.1016/0304-3975(94)90178-3</li>\n<li>Skolem, Thoralf, 1923, \u201cBegr\u00fcndung der elementaren\nArithmetik\u201d, <em>Videnskapsselskapets Skrifter, I.\nMatematisk-naturvidenskabelig Klasse</em>, 6: 3\u201338.</li>\n<li>Smithies, Frank, 1934, \u201cFoundations of Mathematics. Mr.\nNewman\u201d, lecture notes, St John\u2019s College Library,\nCambridge, GB 275 Smithies/H/H57.</li>\n<li>Stannett, Mike, 1990, \u201cX-Machines and the Halting Problem:\nBuilding a Super-Turing Machine\u201d, <em>Formal Aspects of\nComputing</em>, 2(1): 331\u2013341. doi:10.1007/BF01888233</li>\n<li>Stewart, Ian, 1991, \u201cDeciding the Undecidable\u201d,\n<em>Nature</em>, 352(6337): 664\u2013665. doi:10.1038/352664a0</li>\n<li>Stjernfelt, Frederik, 2022, <em>Sheets, Diagrams, and Realism in\nPeirce</em>, Berlin: De Gruyter. doi:10.1515/9783110793628</li>\n<li>Syropoulos, Apostolos, 2008, <em>Hypercomputation: Computing\nbeyond the Church-Turing Barrier</em>, New York: Springer.\ndoi:10.1007/978-0-387-49970-3</li>\n<li>Turing, Alan M., 1936 [2004], \u201cOn Computable Numbers, with\nan Application to the Entscheidungsproblem\u201d, <em>Proceedings of\nthe London Mathematical Society</em>, 1936, second series, 42(1):\n230\u2013265. Reprinted in Copeland 2004: 58\u201390 (ch. 1).\ndoi:10.1112/plms/s2-42.1.230</li>\n<li>\u2013\u2013\u2013, 1937, \u201cComputability and\n\u03bb-Definability\u201d, <em>The Journal of Symbolic Logic</em>,\n2(4): 153\u2013163. doi:10.2307/2268280</li>\n<li>\u2013\u2013\u2013, 1939 [2004], \u201cSystems of Logic Based\non Ordinals\u201d, <em>Proceedings of the London Mathematical\nSociety</em>, second series, 45(1): 161\u2013228. Reprinted in\nCopeland 2004: 146\u2013204 (ch. 3).\ndoi:10.1112/plms/s2-45.1.161</li>\n<li>\u2013\u2013\u2013, c.1940 [2004], letter to Newman, n.d., in\nCopeland 2004: 214\u2013216 (ch. 4).</li>\n<li>\u2013\u2013\u2013, 1945 [2005], \u201cProposed Electronic\nCalculator\u201d, National Physical Laboratory Report, in Copeland\n2005: 369\u2013454 (ch. 20).\ndoi:10.1093/acprof:oso/9780198565932.003.0021</li>\n<li>\u2013\u2013\u2013, 1947 [2004], \u201cLecture on the\nAutomatic Computing Engine\u201d, London Mathematical Society, in\nCopeland 2004: 378\u2013394 (ch. 9).</li>\n<li>\u2013\u2013\u2013, 1948 [2004], \u201cIntelligent\nMachinery\u201d, National Physical Laboratory Report, in Copeland\n2004: 410\u2013432 (ch. 10).</li>\n<li>\u2013\u2013\u2013, 1950a [2004], \u201cComputing Machinery\nand Intelligence\u201d, <em>Mind</em>, 59(236): 433\u2013460.\nReprinted in Copeland 2004: 441\u2013464 (ch. 11).\ndoi:10.1093/mind/LIX.236.433</li>\n<li>\u2013\u2013\u2013, 1950b, \u201cThe Word Problem in\nSemi-Groups With Cancellation\u201d, <em>Annals of Mathematics</em>,\nsecond series 52(2): 491\u2013505. doi:10.2307/1969481</li>\n<li>\u2013\u2013\u2013, c.1950, <em>Programmers\u2019 Handbook for\nManchester Electronic Computer Mark II</em>, Computing Machine\nLaboratory, University of Manchester.\n [<a href=\"http://www.AlanTuring.net/programmers_handbook\" target=\"other\">Turing c.1950 available online</a>]</li>\n<li>\u2013\u2013\u2013, 1954 [2004], \u201cSolvable and Unsolvable\nProblems\u201d, <em>Science News</em> (Penguin Books), 31:\n7\u201323. Reprinted in Copeland 2004: 582\u2013595 (ch. 17).</li>\n<li>van Heijenoort, Jean, 1967, <em>From Frege to G\u00f6del: A Source\nBook in Mathematical Logic, 1879\u20131931</em>, Cambridge, MA:\nHarvard University Press.</li>\n<li>Venn, John, 1880, \u201cOn the Diagrammatic and Mechanical\nRepresentation of Propositions and Reasonings\u201d, <em>The London,\nEdinburgh, and Dublin Philosophical Magazine and Journal of\nScience</em>, fifth series, 10(59): 1\u201318.\ndoi:10.1080/14786448008626877</li>\n<li>von Neumann, John, 1927, \u201cZur Hilbertschen\nBeweistheorie\u201d, <em>Mathematische Zeitschrift</em>, 26(1):\n1\u201346. doi:10.1007/BF01475439</li>\n<li>\u2013\u2013\u2013, 1931, \u201cDie formalistische Grundlegung\nder Mathematik\u201d, <em>Erkenntnis</em>, 2(1): 116\u2013121.\ndoi:10.1007/BF02028144</li>\n<li>Wang, Hao, 1974, <em>From Mathematics to Philosophy</em>, New\nYork: Humanities Press.</li>\n<li>\u2013\u2013\u2013, 1996, <em>A Logical Journey: From\nG\u00f6del to Philosophy</em>, Cambridge, MA: MIT Press.</li>\n<li>Weyl, Hermann, 1927 [1949], \u201cPhilosophie der Mathematik und\nNaturwissenschaft\u201d, <em>Handbuch der Philosophie</em>, Munich:\nOldenbourg. Published in English as <em>Philosophy of Mathematics and\nNatural Science</em>, Princeton, NJ: Princeton University Press,\n1949.</li>\n<li>Wittgenstein, Ludwig, 1947 [1980], <em>Bemerkungen \u00fcber die\nPhilosophie der Psychologie</em>. Translated as <em>Remarks on the\nPhilosophy of Psychology</em>, Volume 1, Anscombe, G. Elizabeth M. and\nGeorg Henrik von Wright (eds), Oxford: Blackwell, 1980.</li>\n<li>Wolfram, Stephen, 1985, \u201cUndecidability and Intractability\nin Theoretical Physics\u201d, <em>Physical Review Letters</em>,\n54(8): 735\u2013738. doi:10.1103/PhysRevLett.54.735</li>\n<li>\u2013\u2013\u2013, 2021, <em>Combinators: A Centennial\nView</em>, Champaign, IL: Wolfram Media.</li>\n<li>Yao, Andrew C.-C., 2003, \u201cClassical Physics and the\nChurch-Turing Thesis\u201d, <em>Journal of the ACM</em>, 50(1):\n100\u2013105. doi:10.1145/602382.602411</li>\n<li>Zach, Richard, 1999, \u201cCompleteness Before Post: Bernays,\nHilbert, and the Development of Propositional Logic\u201d,\n<em>Bulletin of Symbolic Logic</em>, 5(3): 331\u2013366.\ndoi:10.2307/421184</li>\n<li>\u2013\u2013\u2013, 2003, \u201cThe Practice of Finitism:\nEpsilon Calculus and Consistency Proofs in Hilbert\u2019s\nProgram\u201d, <em>Synthese</em>, 137(1/2): 211\u2013259.\ndoi:10.1023/A:1026247421383</li>\n<li>Zanichelli, Nicola (ed.), 1929, <em>Atti del Congresso\nInternazionale dei Matematici, Bologna, 3\u201310 Settembre 1928,\nVolume 1: Rendiconto del Congresso Conferenze</em>, Bologna:\nSociet\u00e0 Tipografica.</li>\n</ul>\n</div>"
    },
    "related_entries": {
        "entry_list": [
            "Church, Alonzo",
            "computability and complexity",
            "computation: in physical systems",
            "computer science, philosophy of",
            "computing: modern history of",
            "G\u00f6del, Kurt: incompleteness theorems",
            "Llull, Ramon",
            "mind: computational theory of",
            "Turing, Alan",
            "Turing machines"
        ],
        "entry_link": [
            {
                "../church/": "Church, Alonzo"
            },
            {
                "../computability/": "computability and complexity"
            },
            {
                "../computation-physicalsystems/": "computation: in physical systems"
            },
            {
                "../computer-science/": "computer science, philosophy of"
            },
            {
                "../computing-history/": "computing: modern history of"
            },
            {
                "../goedel-incompleteness/": "G\u00f6del, Kurt: incompleteness theorems"
            },
            {
                "../llull/": "Llull, Ramon"
            },
            {
                "../computational-mind/": "mind: computational theory of"
            },
            {
                "../turing/": "Turing, Alan"
            },
            {
                "../turing-machine/": "Turing machines"
            }
        ]
    },
    "academic_tools": {
        "listed_text": [
            "<img alt=\"sep man icon\" src=\"../../symbols/sepman-icon.jpg\"/>",
            "<a href=\"https://plato.stanford.edu/cgi-bin/encyclopedia/archinfo.cgi?entry=church-turing\" target=\"other\">How to cite this entry</a>.",
            "<img alt=\"sep man icon\" src=\"../../symbols/sepman-icon.jpg\"/>",
            "<a href=\"https://leibniz.stanford.edu/friends/preview/church-turing/\" target=\"other\">Preview the PDF version of this entry</a> at the\n <a href=\"https://leibniz.stanford.edu/friends/\" target=\"other\">Friends of the SEP Society</a>.",
            "<img alt=\"inpho icon\" src=\"../../symbols/inpho.png\"/>",
            "<a href=\"https://www.inphoproject.org/entity?sep=church-turing&amp;redirect=True\" target=\"other\">Look up topics and thinkers related to this entry</a>\n at the Internet Philosophy Ontology Project (InPhO).",
            "<img alt=\"phil papers icon\" src=\"../../symbols/pp.gif\"/>",
            "<a href=\"https://philpapers.org/sep/church-turing/\" target=\"other\">Enhanced bibliography for this entry</a>\nat <a href=\"https://philpapers.org/\" target=\"other\">PhilPapers</a>, with links to its database."
        ],
        "listed_links": [
            {
                "https://plato.stanford.edu/cgi-bin/encyclopedia/archinfo.cgi?entry=church-turing": "How to cite this entry"
            },
            {
                "https://leibniz.stanford.edu/friends/preview/church-turing/": "Preview the PDF version of this entry"
            },
            {
                "https://leibniz.stanford.edu/friends/": "Friends of the SEP Society"
            },
            {
                "https://www.inphoproject.org/entity?sep=church-turing&redirect=True": "Look up topics and thinkers related to this entry"
            },
            {
                "https://philpapers.org/sep/church-turing/": "Enhanced bibliography for this entry"
            },
            {
                "https://philpapers.org/": "PhilPapers"
            }
        ]
    },
    "other_internet_resources": {
        "listed_text": [
            "<a href=\"http://www.alanturing.net/\" target=\"other\">The Turing Archive for the History of Computing</a>",
            "Kieu, Tien D., 2006,\n \u201c<a href=\"https://arxiv.org/pdf/quant-ph/0602214v2.pdf\" target=\"other\">Reply to Andrew Hodges</a>\u201d,\n arXiv:quant-ph/0602214v2."
        ],
        "listed_links": [
            {
                "http://www.alanturing.net/": "The Turing Archive for the History of Computing"
            },
            {
                "https://arxiv.org/pdf/quant-ph/0602214v2.pdf": "Reply to Andrew Hodges"
            }
        ]
    }
}