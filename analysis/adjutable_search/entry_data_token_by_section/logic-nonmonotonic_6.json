{
    "main_text": "Non-monotonic formalisms || The closed-world assumption\n3.1 The closed-world assumption\n\nIf one of the goals of non-monotonic logic is to provide a materially\nadequate account of defeasible reasoning, it is important to rely on a\nrich supply of examples to guide and hone intuitions. Database theory\nwas one of the earliest sources of such examples, especially as\nregards the closed world assumption. Suppose a travel agent\nwith access to a flight database needs to answer a client\u2019s query\nabout the best way to get from Oshkosh to Minsk. The agents queries\nthe database and, not surprisingly, responds that there are no direct\nflights. How does the travel agent know? \n\nIt is quite clear that, in a strong sense of \u201cknow,\u201d the\ntravel agent does not know that there are no such flights. What\nis at work here is a tacit assumption that the database is\ncomplete, and that since the database does not list any direct\nflights between the two cities, there are none. A useful way to look\nat this process is as a kind of minimization, i.e., an attempt\nto minimize the extension of a given predicate\n(\u201cflight-between,\u201d in this case). Moreover, on pain of\ninconsistencies, such a minimization needs to take place not with\nrespect to what the database explicitly contains but with respect to\nwhat it implies. \n\nThe idea of minimization is at the basis of one of the earliest\nnon-monotonic formalisms, McCarthy\u2019s circumscription\n (McCarthy 1980).\n Circumscription makes explicit the intuition that, all other things\nbeing equal, extensions of certain predicates should be\nminimal. Consider principles such as \u201call normal birds\nfly\u201d. Implicit in this principle is the idea that specimens\nshould not be considered to be abnormal unless there is positive\ninformation to that effect. McCarthy\u2019s idea was to represent this\nformally, using second-order logic (SOL). In SOL, in contrast to\nfirst-order logic (FOL), one is allowed to explicitly quantify over\npredicates, forming sentences such as \\(\\exists P \\forall x Px\\)\n(\u201cthere is a universal predicate\u201d) or \\(\\forall P (Pa\n\\equiv Pb)\\) (\u201ca and b are indiscernible\u201d).\n\n\nIn circumscription, given predicates P and Q, we\nabbreviate \\(\\forall x(Px \\supset Qx)\\) as \\(P \\le Q\\); similarly, we\nabbreviate \\(P \\le Q \\wedge \\neg(Q \\le P)\\) as \\(P < Q\\). If\n\\(A(P)\\) is a formula containing occurrences of a predicate P,\nthen the circumscription of P in A is the second-order\nsentence \\(A^{\\star}(P)\\): \n\n\n\\(A(P) \\wedge \\neg\\exists Q[A(Q) \\wedge Q < P]\\) \n\n\n\\(A^{\\star}(P)\\) expresses that P satisfies A, and that\nno smaller predicate does. Let \\(Px\\) be the predicate \u201cx\nis abnormal,\u201d and let \\(A(P)\\) be the sentence \u201cAll birds\nthat are not abnormal fly.\u201d Then the sentence \u201cTweety is a\nbird,\u201d together with \\(A^{\\star}(P)\\) implies \u201cTweety\nflies,\u201d for the circumscription axiom forces the extension of\nP to be empty, so that \u201cTweety is normal\u201d is\nautomatically true. \n\nIn terms of consequence relations, circumscription allows us to\ndefine, for each predicate P, a non-monotonic relation \\(A(P)\n\\nc \\phi\\) that holds precisely when \\(A^{\\star}(P) \\vDash \\phi\\).\n(This basic form of circumscription has been generalized, for, in\npractice, one needs to minimize the extension of a predicate, while\nallowing the extension of certain other predicates to vary.) From the\npoint of view of applications, however, circumscription has a major\ncomputational shortcoming, which is due to the nature of the\nsecond-order language in which circumscription is formulated (see the\nentry on\n Second-order and Higher-order Logic\n for details). The problem is that SOL, contrary to FOL, lacks a\ncomplete inference procedure: the price one pays for the greater\nexpressive power of SOL is that there are no complete axiomatizations,\nas we have for FOL. It follows that there is no way to list, in an\neffective manner, all SOL validities, and hence to determine whether\n\\(A(P) \\nc \\phi\\). \n\nAnother influential mechanism realizing the closed world assumption is\nNegation as Failure\n\n (or Default Negation). It can nicely be explained if we take a\nlook at Logic Programming. A logic program consists of a list\nof rules such as: \n\n\n\\(\\tau ~~ \\leftarrow ~~ \\phi_1, \\dotsc, \\phi_n, \\mathit{not}~ \\psi_1,\n\\dotsc, \\mathit{not}~ \\psi_m\\) \n\n\nIn basic logic programs \\(\\tau\\) is a logical atom and \\(\\phi_1,\n\\dotsc, \\phi_n, \\psi_1, \\dotsc, \\psi_m\\) are logical literals (i.e.,\natoms or negated atoms). The logical form or rules in such programs\nhave been generalized in various ways (e.g.,\n Alferes et al. 1995)\n and many ways of interpreting rules have been proposed. To understand\nthe meaning of the default negation not we consider a concrete\nexample for a rule, namely: \n\n\nflies \\(~~\\leftarrow~~\\) bird, not penguin\n\n\n\nSuch rules read as expected, but with a small twist. As usual, the\nrule licenses its conclusion if the formulas in the antecedent (right\nhand side) hold. The twist is that the falsity of (default) negated\nformulas such as penguin need not be positively established:\ntheir falsity is assumed in the absence of a proof of the opposite. In\nour example, if penguin cannot be proved then not\npenguin is considered to hold (\u201cby default\u201d). A logic program for\nour Tweety example may consist of the rule above and \n\n\nnot-flies \\(~~\\leftarrow~~\\) penguin\n\nbird \\(~~\\leftarrow~~\\) penguin \n\n\nSuppose first all we know is bird. The latter two rules will\nnot be triggered. The first rule will be applicable:  bird  is\nthe case and we have no proof of penguin whence not\npenguin is assumed. This allows us to infer flies. Now\nsuppose we know penguin. In this case the first rule is not\napplicable since the default negation of penguin is false, but\nthe latter two rules are triggered and we derive bird and\nnot-flies. \n",
    "section_title": "3.1 The closed-world assumption",
    "entry_title": "Non-monotonic Logic",
    "hierarchy_title": "Non-monotonic Logic || Non-monotonic formalisms || The closed-world assumption",
    "tokenized_text": [
        "nonmonotonic",
        "formalism",
        "closedworld",
        "assumption",
        "closedworld",
        "assumption",
        "one",
        "goal",
        "nonmonotonic",
        "logic",
        "provide",
        "materially",
        "adequate",
        "account",
        "defeasible",
        "reasoning",
        "important",
        "rely",
        "rich",
        "supply",
        "example",
        "guide",
        "hone",
        "intuition",
        "database",
        "theory",
        "one",
        "earliest",
        "source",
        "example",
        "especially",
        "regard",
        "closed",
        "world",
        "assumption",
        "suppose",
        "travel",
        "agent",
        "access",
        "flight",
        "database",
        "need",
        "answer",
        "client",
        "query",
        "best",
        "way",
        "get",
        "oshkosh",
        "minsk",
        "agent",
        "query",
        "database",
        "surprisingly",
        "responds",
        "direct",
        "flight",
        "travel",
        "agent",
        "know",
        "quite",
        "clear",
        "strong",
        "sense",
        "know",
        "travel",
        "agent",
        "know",
        "flight",
        "work",
        "tacit",
        "assumption",
        "database",
        "complete",
        "since",
        "database",
        "list",
        "direct",
        "flight",
        "two",
        "city",
        "none",
        "useful",
        "way",
        "look",
        "process",
        "kind",
        "minimization",
        "ie",
        "attempt",
        "minimize",
        "extension",
        "given",
        "predicate",
        "flightbetween",
        "case",
        "moreover",
        "pain",
        "inconsistency",
        "minimization",
        "need",
        "take",
        "place",
        "respect",
        "database",
        "explicitly",
        "contains",
        "respect",
        "implies",
        "idea",
        "minimization",
        "basis",
        "one",
        "earliest",
        "nonmonotonic",
        "formalism",
        "mccarthy",
        "circumscription",
        "mccarthy",
        "circumscription",
        "make",
        "explicit",
        "intuition",
        "thing",
        "equal",
        "extension",
        "certain",
        "predicate",
        "minimal",
        "consider",
        "principle",
        "normal",
        "bird",
        "fly",
        "implicit",
        "principle",
        "idea",
        "specimen",
        "considered",
        "abnormal",
        "unless",
        "positive",
        "information",
        "effect",
        "mccarthy",
        "idea",
        "represent",
        "formally",
        "using",
        "secondorder",
        "logic",
        "sol",
        "sol",
        "contrast",
        "firstorder",
        "logic",
        "fol",
        "one",
        "allowed",
        "explicitly",
        "quantify",
        "predicate",
        "forming",
        "sentence",
        "exists",
        "p",
        "forall",
        "x",
        "px",
        "universal",
        "predicate",
        "forall",
        "p",
        "pa",
        "equiv",
        "pb",
        "b",
        "indiscernible",
        "circumscription",
        "given",
        "predicate",
        "p",
        "q",
        "abbreviate",
        "forall",
        "x",
        "px",
        "supset",
        "qx",
        "p",
        "le",
        "q",
        "similarly",
        "abbreviate",
        "p",
        "le",
        "q",
        "wedge",
        "neg",
        "q",
        "le",
        "p",
        "p",
        "q",
        "p",
        "formula",
        "containing",
        "occurrence",
        "predicate",
        "p",
        "circumscription",
        "p",
        "secondorder",
        "sentence",
        "a",
        "star",
        "p",
        "p",
        "wedge",
        "negexists",
        "q",
        "q",
        "wedge",
        "q",
        "p",
        "a",
        "star",
        "p",
        "express",
        "p",
        "satisfies",
        "smaller",
        "predicate",
        "let",
        "px",
        "predicate",
        "x",
        "abnormal",
        "let",
        "p",
        "sentence",
        "bird",
        "abnormal",
        "fly",
        "sentence",
        "tweety",
        "bird",
        "together",
        "a",
        "star",
        "p",
        "implies",
        "tweety",
        "fly",
        "circumscription",
        "axiom",
        "force",
        "extension",
        "p",
        "empty",
        "tweety",
        "normal",
        "automatically",
        "true",
        "term",
        "consequence",
        "relation",
        "circumscription",
        "allows",
        "u",
        "define",
        "predicate",
        "p",
        "nonmonotonic",
        "relation",
        "p",
        "nc",
        "phi",
        "hold",
        "precisely",
        "a",
        "star",
        "p",
        "vdash",
        "phi",
        "basic",
        "form",
        "circumscription",
        "generalized",
        "practice",
        "one",
        "need",
        "minimize",
        "extension",
        "predicate",
        "allowing",
        "extension",
        "certain",
        "predicate",
        "vary",
        "point",
        "view",
        "application",
        "however",
        "circumscription",
        "major",
        "computational",
        "shortcoming",
        "due",
        "nature",
        "secondorder",
        "language",
        "circumscription",
        "formulated",
        "see",
        "entry",
        "secondorder",
        "higherorder",
        "logic",
        "detail",
        "problem",
        "sol",
        "contrary",
        "fol",
        "lack",
        "complete",
        "inference",
        "procedure",
        "price",
        "one",
        "pay",
        "greater",
        "expressive",
        "power",
        "sol",
        "complete",
        "axiomatizations",
        "fol",
        "follows",
        "way",
        "list",
        "effective",
        "manner",
        "sol",
        "validity",
        "hence",
        "determine",
        "whether",
        "p",
        "nc",
        "phi",
        "another",
        "influential",
        "mechanism",
        "realizing",
        "closed",
        "world",
        "assumption",
        "negation",
        "failure",
        "default",
        "negation",
        "nicely",
        "explained",
        "take",
        "look",
        "logic",
        "programming",
        "logic",
        "program",
        "consists",
        "list",
        "rule",
        "tau",
        "leftarrow",
        "phi_",
        "dotsc",
        "phi_n",
        "mathit",
        "psi_",
        "dotsc",
        "mathit",
        "psi_m",
        "basic",
        "logic",
        "program",
        "tau",
        "logical",
        "atom",
        "phi_",
        "dotsc",
        "phi_n",
        "psi_",
        "dotsc",
        "psi_m",
        "logical",
        "literal",
        "ie",
        "atom",
        "negated",
        "atom",
        "logical",
        "form",
        "rule",
        "program",
        "generalized",
        "various",
        "way",
        "eg",
        "alferes",
        "et",
        "al",
        "many",
        "way",
        "interpreting",
        "rule",
        "proposed",
        "understand",
        "meaning",
        "default",
        "negation",
        "consider",
        "concrete",
        "example",
        "rule",
        "namely",
        "fly",
        "leftarrow",
        "bird",
        "penguin",
        "rule",
        "read",
        "expected",
        "small",
        "twist",
        "usual",
        "rule",
        "license",
        "conclusion",
        "formula",
        "antecedent",
        "right",
        "hand",
        "side",
        "hold",
        "twist",
        "falsity",
        "default",
        "negated",
        "formula",
        "penguin",
        "need",
        "positively",
        "established",
        "falsity",
        "assumed",
        "absence",
        "proof",
        "opposite",
        "example",
        "penguin",
        "proved",
        "penguin",
        "considered",
        "hold",
        "default",
        "logic",
        "program",
        "tweety",
        "example",
        "may",
        "consist",
        "rule",
        "notflies",
        "leftarrow",
        "penguin",
        "bird",
        "leftarrow",
        "penguin",
        "suppose",
        "first",
        "know",
        "bird",
        "latter",
        "two",
        "rule",
        "triggered",
        "first",
        "rule",
        "applicable",
        "bird",
        "case",
        "proof",
        "penguin",
        "whence",
        "penguin",
        "assumed",
        "allows",
        "u",
        "infer",
        "fly",
        "suppose",
        "know",
        "penguin",
        "case",
        "first",
        "rule",
        "applicable",
        "since",
        "default",
        "negation",
        "penguin",
        "false",
        "latter",
        "two",
        "rule",
        "triggered",
        "derive",
        "bird",
        "notflies"
    ]
}