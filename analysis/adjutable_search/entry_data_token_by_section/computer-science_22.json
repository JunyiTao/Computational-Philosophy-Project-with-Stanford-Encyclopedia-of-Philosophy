{
    "main_text": "Verification || Testing and Experiments\n6.2 Testing and Experiments\n\nTesting is the more \u2018empirical\u2019 process of launching a\nprogram and observing its executions in order to evaluate whether they\ncomply with the supplied property specifications. Such technique is\nextensively used in the software development process. Philosophers and\nphilosophically-minded computer scientists have considered software\ntesting under the light of traditional methodological approaches in\nscientific discovery (Snelting 1998; Gagliardi 2007; Northover et\nal. 2008; Angius 2014) and questioned whether software tests can\nbe acknowledged as scientific experiments evaluating the\ncorrectness of programs (Schiaffonati and Verdicchio 2014,\nSchiaffonati 2015; Tedre 2015).\n\nDijkstra\u2019s well-known dictum \u201cProgram testing can be used\nto show the presence of bugs, but never to show their absence\u201d\n(Dijkstra 1970, p.7), introduces Popper\u2019s (1959) principle of\nfalsifiability into computer science (Snelting 1998). Testing\na program against an advanced property specification for a given\ninterval of time may exhibit some failures, but if no failure occurs\nwhile observing the running program one cannot conclude that the\nprogram is correct. An incorrect execution might be observed at the\nvery next system\u2019s run. The reason is that testers can only\nlaunch the program with a finite subset of the potential\nprogram\u2019s input set and only for a finite interval of time;\naccordingly, not all potential executions of the program to be tested\ncan be empirically observed. For this reason, the aim of software\ntesting is to detect programs\u2019 faults and not to guarantee their\nabsence (Ammann and Offutt 2008, p. 11). A program is falsifiable in\nthat tests can reveal faults (Northover et al. 2008). Hence,\ngiven a computational system and a property specification, a test is\nakin to a scientific experiment which, by observing the system\u2019s\nbehaviors, tries to falsify the hypothesis that the program is correct\nwith respect to the interested specification.\n\nHowever, other methodological and epistemological traits\ncharacterizing scientific experiments are not shared by software\ntests. A first methodological distinction can be recognized in that a\nfalsifying test leads to the revision of the computational system, not\nof the hypothesis, as in the case of testing scientific hypotheses.\nThis is due to the difference in the intentional stance of\nspecifications and empirical hypotheses in science (Turner 2011).\nSpecifications are requirements whose violation demands for program\nrevisions until the program becomes a correct instantiation of the\nspecifications.\n\nFor this, among other reasons, the traditional notion of scientific\nexperiment needs to be \u2018stretched\u2019 in order to be applied\nto software testing activities (Schiaffonati 2015). Theory-driven\nexperiments, characterizing most of the experimental sciences,\nfind no counterpart in actual computer science practice. If one\nexcludes the cases wherein testing is combined with formal methods,\nmost experiments performed by software engineers are rather\nexplorative, i.e. aimed at \u2018exploring\u2019\n\u201cthe realm of possibilities pertaining to the functioning of an\nartefact and its interaction with the environment in the absence of a\nproper theory or theoretical background\u201d (Schiaffonati 2015:\n662). Software testers often do not have theoretical control on the\nexperiments they perform; exploration on the behaviors of the\ncomputational system interacting with users and environments rather\nallows testers to formulate theoretical generalizations on the\nobserved behaviors. Explorative experiments in computer science are\nalso characterized by the fact that programs are often tested in a\nreal-like environment wherein testers play the role of users. However,\nit is an essential feature of theory-driven experiments that\nexperimenters do not take part in the experiment to be carried\nout.\n\nAs a result, while some software testing activities are closer to the\nexperimental activities one finds in empirical sciences, some others\nrather define a new typology of experiment that turns out to belong to\nthe software development process. Five typologies of experiments can\nbe distinguished in the process of specifying, implementing, and\nevaluating computational systems (Tedre 2015):\n\nfeasibility experiments are performed to evaluate whether\na system performs the functions specified by users and\nstakeholders;\ntrial experiments are carried out to evaluate isolated\ncapabilities of the system given some set of initial conditions;\nfield experiments are performed in real environments and\nnot in simulated ones;\ncomparison experiments test similar systems,\ninstantiating in different ways the same function, to evaluate which\ninstantiation better performs the desired function both in real-like\nand real environments;\nfinally, controlled experiments are used to appraise\nadvanced hypotheses on the behaviors of the testing computational\nsystem and are the only ones on a par with scientific theory-driven\nexperiments, in that they are carried out on the basis of some\ntheoretical hypotheses under evaluation.\n\n",
    "section_title": "6.2 Testing and Experiments",
    "entry_title": "The Philosophy of Computer Science",
    "hierarchy_title": "The Philosophy of Computer Science || Verification || Testing and Experiments",
    "tokenized_text": [
        "verification",
        "testing",
        "experiment",
        "testing",
        "experiment",
        "testing",
        "empirical",
        "process",
        "launching",
        "program",
        "observing",
        "execution",
        "order",
        "evaluate",
        "whether",
        "comply",
        "supplied",
        "property",
        "specification",
        "technique",
        "extensively",
        "used",
        "software",
        "development",
        "process",
        "philosopher",
        "philosophicallyminded",
        "computer",
        "scientist",
        "considered",
        "software",
        "testing",
        "light",
        "traditional",
        "methodological",
        "approach",
        "scientific",
        "discovery",
        "snelting",
        "gagliardi",
        "northover",
        "et",
        "al",
        "angius",
        "questioned",
        "whether",
        "software",
        "test",
        "acknowledged",
        "scientific",
        "experiment",
        "evaluating",
        "correctness",
        "program",
        "schiaffonati",
        "verdicchio",
        "schiaffonati",
        "tedre",
        "dijkstra",
        "wellknown",
        "dictum",
        "program",
        "testing",
        "used",
        "show",
        "presence",
        "bug",
        "never",
        "show",
        "absence",
        "dijkstra",
        "p",
        "introduces",
        "popper",
        "principle",
        "falsifiability",
        "computer",
        "science",
        "snelting",
        "testing",
        "program",
        "advanced",
        "property",
        "specification",
        "given",
        "interval",
        "time",
        "may",
        "exhibit",
        "failure",
        "failure",
        "occurs",
        "observing",
        "running",
        "program",
        "one",
        "conclude",
        "program",
        "correct",
        "incorrect",
        "execution",
        "might",
        "observed",
        "next",
        "system",
        "run",
        "reason",
        "tester",
        "launch",
        "program",
        "finite",
        "subset",
        "potential",
        "program",
        "input",
        "set",
        "finite",
        "interval",
        "time",
        "accordingly",
        "potential",
        "execution",
        "program",
        "tested",
        "empirically",
        "observed",
        "reason",
        "aim",
        "software",
        "testing",
        "detect",
        "program",
        "fault",
        "guarantee",
        "absence",
        "ammann",
        "offutt",
        "p",
        "program",
        "falsifiable",
        "test",
        "reveal",
        "fault",
        "northover",
        "et",
        "al",
        "hence",
        "given",
        "computational",
        "system",
        "property",
        "specification",
        "test",
        "akin",
        "scientific",
        "experiment",
        "observing",
        "system",
        "behavior",
        "try",
        "falsify",
        "hypothesis",
        "program",
        "correct",
        "respect",
        "interested",
        "specification",
        "however",
        "methodological",
        "epistemological",
        "trait",
        "characterizing",
        "scientific",
        "experiment",
        "shared",
        "software",
        "test",
        "first",
        "methodological",
        "distinction",
        "recognized",
        "falsifying",
        "test",
        "lead",
        "revision",
        "computational",
        "system",
        "hypothesis",
        "case",
        "testing",
        "scientific",
        "hypothesis",
        "due",
        "difference",
        "intentional",
        "stance",
        "specification",
        "empirical",
        "hypothesis",
        "science",
        "turner",
        "specification",
        "requirement",
        "whose",
        "violation",
        "demand",
        "program",
        "revision",
        "program",
        "becomes",
        "correct",
        "instantiation",
        "specification",
        "among",
        "reason",
        "traditional",
        "notion",
        "scientific",
        "experiment",
        "need",
        "stretched",
        "order",
        "applied",
        "software",
        "testing",
        "activity",
        "schiaffonati",
        "theorydriven",
        "experiment",
        "characterizing",
        "experimental",
        "science",
        "find",
        "counterpart",
        "actual",
        "computer",
        "science",
        "practice",
        "one",
        "excludes",
        "case",
        "wherein",
        "testing",
        "combined",
        "formal",
        "method",
        "experiment",
        "performed",
        "software",
        "engineer",
        "rather",
        "explorative",
        "ie",
        "aimed",
        "exploring",
        "realm",
        "possibility",
        "pertaining",
        "functioning",
        "artefact",
        "interaction",
        "environment",
        "absence",
        "proper",
        "theory",
        "theoretical",
        "background",
        "schiaffonati",
        "software",
        "tester",
        "often",
        "theoretical",
        "control",
        "experiment",
        "perform",
        "exploration",
        "behavior",
        "computational",
        "system",
        "interacting",
        "user",
        "environment",
        "rather",
        "allows",
        "tester",
        "formulate",
        "theoretical",
        "generalization",
        "observed",
        "behavior",
        "explorative",
        "experiment",
        "computer",
        "science",
        "also",
        "characterized",
        "fact",
        "program",
        "often",
        "tested",
        "reallike",
        "environment",
        "wherein",
        "tester",
        "play",
        "role",
        "user",
        "however",
        "essential",
        "feature",
        "theorydriven",
        "experiment",
        "experimenter",
        "take",
        "part",
        "experiment",
        "carried",
        "result",
        "software",
        "testing",
        "activity",
        "closer",
        "experimental",
        "activity",
        "one",
        "find",
        "empirical",
        "science",
        "others",
        "rather",
        "define",
        "new",
        "typology",
        "experiment",
        "turn",
        "belong",
        "software",
        "development",
        "process",
        "five",
        "typology",
        "experiment",
        "distinguished",
        "process",
        "specifying",
        "implementing",
        "evaluating",
        "computational",
        "system",
        "tedre",
        "feasibility",
        "experiment",
        "performed",
        "evaluate",
        "whether",
        "system",
        "performs",
        "function",
        "specified",
        "user",
        "stakeholder",
        "trial",
        "experiment",
        "carried",
        "evaluate",
        "isolated",
        "capability",
        "system",
        "given",
        "set",
        "initial",
        "condition",
        "field",
        "experiment",
        "performed",
        "real",
        "environment",
        "simulated",
        "one",
        "comparison",
        "experiment",
        "test",
        "similar",
        "system",
        "instantiating",
        "different",
        "way",
        "function",
        "evaluate",
        "instantiation",
        "better",
        "performs",
        "desired",
        "function",
        "reallike",
        "real",
        "environment",
        "finally",
        "controlled",
        "experiment",
        "used",
        "appraise",
        "advanced",
        "hypothesis",
        "behavior",
        "testing",
        "computational",
        "system",
        "one",
        "par",
        "scientific",
        "theorydriven",
        "experiment",
        "carried",
        "basis",
        "theoretical",
        "hypothesis",
        "evaluation"
    ]
}