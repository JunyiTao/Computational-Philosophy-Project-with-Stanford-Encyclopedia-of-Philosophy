{
    "main_text": "Computability Theory || The Recursion Theorem\n3.4 The Recursion Theorem\n\nThe result which is now most often referred to as Kleene\u2019s\nRecursion Theorem can be used to unify a number of effective\ndiagonal arguments similar to that underlying\n Theorem 3.3\n and has a wide range of applications both in computability theory and\nother areas of mathematical logic and computer\n science.[22]\n Although its statement is straightforward, both its significance and\nthe following proof become clearer upon considering subsequent\napplications.\n\n\nTheorem 3.5 (Kleene 1938): Suppose that \\(f(x)\\) is a\ntotal computable function. Then there is a number \\(n \\in \\mathbb{N}\\)\nsuch that \\(\\phi_n(y) \\simeq \\phi_{f(n)}(y)\\).\n\n\n\nProof: Consider the function \\(g(x,y)\\) defined as follows:\n \n\\[\\begin{aligned}\ng(x,y) = \\begin{cases} \\phi_{\\phi_x(x)}(y) & \\text{if } \\phi_x(x) \\darrow \\\\ \\uarrow & \\text{otherwise} \\end{cases} \\end{aligned}\\]\n\n\nAs it is evident that \\(g(x,y)\\) is partial computable, \\(g(x,y)\n\\simeq \\phi_e(x,y)\\) for some \\(e\\). It thus follows by the\n s-m-n Theorem (3.1)\n that \\(\\phi_e(x,y) \\simeq \\phi_{s^2_1(e,x)}(y)\\). Let \\(b(x) =\ns^2_1(e,x)\\) and note that we then have \\(\\phi_{b(x)}(y)\\) is the same\nfunction as \\(\\phi_{\\phi_x(x)}(y)\\) provided that \\(\\phi_x(x)\\) is\ndefined. Note that \\(b(x)\\) is a total computable function and is\ndefined independently of the given function \\(f(x)\\).\n\nNext let \\(k\\) be an index for the composition of \\(f(x)\\) with\n\\(b(x)\\)\u2014i.e., \\(\\phi_k(x) \\simeq f(b(x))\\). We now claim that\n\\(n = b(k)\\) is the number called for in the statement of the theorem.\nFor first note that since \\(b(x)\\) and \\(f(x)\\) are both total,\n\\(\\phi_k(x)\\) is also total and thus \\(\\phi_k(k)\\) is defined. From\nthis it follows that \\(\\phi_{b(k)}(y) \\simeq \\phi_{\\phi_k(k)}(y)\\). We\nnow have the following sequence of functional identities: \n\n\\[\\phi_n(y) \\simeq \\phi_{b(k)}(y) \\simeq  \\phi_{\\phi_k(k)}(y) \\simeq \\phi_{f(b(k))}(y) \\simeq \\phi_{f(n)}(y)\\]\n\n\n\u25a1\n\n\nThe Recursion Theorem is sometimes also referred to as the Fixed\nPoint Theorem. Note, however, that\n Theorem 3.5\n does not guarantee the existence of an extensional fixed point for\nthe given function \\(f(x)\\)\u2014i.e., a number \\(n\\) such that\n\\(f(n) = n\\). (In fact it is evident that there are computable\nfunctions for which no such value exists\u2014e.g., \\(f(x) = x+1\\).)\nBut suppose we view \\(f(x)\\) instead as a mapping on indices to\npartial computable functions or, more figuratively, as a means of\ntransforming a program for computing a partial computable\nfunction into another program. On this interpretation, the theorem\nexpresses that for every such computable transformation there is some\nprogram \\(n\\) such that the function \\(\\phi_n(y)\\) which it computes\nis the same as the function \\(\\phi_{f(n)}(y)\\) computed by its image\n\\(f(n)\\) under the transformation.\n\nAs it may at first appear such an \\(n\\) is defined in a circular\nmanner, it is also prima facie unclear why such a program\nmust exist. Indeed Soare (2016, 28\u201329) remarks that the\nforegoing proof of the Recursion Theorem is \u201cvery short but\nmysterious\u201d and is \u201cbest visualized as a diagonal argument\nthat fails\u201d. In order to clarify both this comment and the\nproof, consider the matrix depicted in Figure 1 whose rows \\(R_i\\)\nenumerate not the values of partial computable functions but rather\nthe functions themselves\u2014i.e., the row \\(R_i\\) will contain the\nfunctions \\(\\phi_{\\phi_i(0)}, \\phi_{\\phi_i(1)}, \\ldots\\) with the\nunderstanding that if \\(\\phi_i(j) \\uarrow\\), then \\(\\phi_{\\phi_i(j)}\\)\ndenotes the totally undefined function. (Such a depiction is\noriginally due to Owings 1973.)\n\n\n\n\\[\\begin{matrix}\n\\phi_{\\phi_{0}(0)} & \\phi_{\\phi_{0}(1)} &  \\ldots &  \\phi_{\\phi_{0}(i)} & \\ldots& \\phi_{\\phi_{0}(d)} & \\ldots& \\phi_{\\phi_{0}(h_{f}(i))}& \\ldots\\\\\n\\phi_{\\phi_{1}(0)} & \\phi_{\\phi_{1}(1)} & \\ldots & \\phi_{\\phi_{1}(i)} &  \\ldots& \\phi_{\\phi_{1}(d)} & \\ldots& \\phi_{\\phi_{1}(h_{f}(i))}& \\ldots\\\\\n\u22ee&& \u22f1 &&&&&\u22ee\\\\\n \\phi_{\\phi_{i}(0)} & \\ldots & \\ldots & \\phi_{\\phi_{i}(i)} & \\ldots &  \\phi_{\\phi_{i}(d)} & \\ldots&  \\phi_{\\phi_{i}(h_{f}(i))} & \\ldots \\\\\n\u22ee& & & & \u22f1 & &&\u22ee\\\\\n \\phi_{\\phi_{d}(0)} & \\ldots&  \\ldots& \\phi_{\\phi_{d}(i)} & \\ldots&  \\phi_{\\phi_{d}(d)} & \\ldots&  \\phi_{\\phi_{d}(h_{f}(i))}& \\ldots& \\phi_{\\phi_{d}(h_{f}(d))} \\ldots\\\\\n\u22ee& & & & & & \u22f1 & &&\\uarrow\\\\\n \\phi_{\\phi_{h_{f}(i)}(0)}& \\ldots & \\ldots&  \\phi_{\\phi_{h_{f}(i)}(i)}& \\ldots& \\phi_{\\phi_{h_{f}(i)}(d)}&  \\ldots& \\phi_{\\phi_{h_{f}(i)}(h_{f}(i))}& \\ldots &= \\\\\n\u22ee& & & & & && & \u22f1 &\\darrow\\\\\n\\phi_{\\phi_{h_{f}(d)}(0)}& \\ldots& \\ldots& \\phi_{\\phi_{h_{f}(d)}(i)}& \\ldots& \\phi_{\\phi_{h_{f}(d)}(d)}& \\ldots& \\phi_{\\phi_{h_{f}(d)}(h_{f}(i))}&\n    \\ldots&   \\phi_{\\phi_{h_{f}(d)}(h_{f}(d))} \\ldots\\\\\n \u22ee\\\\\n\\end{matrix}\\]\n\n\n\nFigure 1: The matrix of partial\ncomputable functions employed in the proof of the\n  Recursion Theorem (3.5)\n\n\n\nWe may think of the function \\(f(x)\\) given in\n Theorem 3.5\n as inducing a transformation on the rows so that \\(R_i\\) is mapped to\n\\(R_{f(i)}\\). To this end, let \\(h_f(x)\\) be an index to the total\ncomputable function which composes \\(f\\) with \\(\\phi_x\\) so that we\nhave  \n\\[\\begin{aligned}\n\\phi_{h_f(x)}(y) \\simeq f(\\phi_x(y))\\end{aligned}\\]\n\n\nNext consider the diagonal of this matrix\u2014i.e., \\(D =\n\\phi_{\\phi_0(0)}, \\phi_{\\phi_1(1)}, \\ldots\\) Since the indices to the\nfunctions which comprise \\(D\\) are given effectively, it must be the\ncase that \\(D\\) itself corresponds to some row \\(R_d\\)\u2014i.e.,\n \n\\[\\begin{align} \\label{dr} \n\\phi_{\\phi_d(i)}(y) \\simeq \\phi_{\\phi_i(i)}(y) \\text{ for all } i \\in \\mathbb{N}\n\\end{align}\\]\n\n\nBut now consider the image of \\(R_d\\) under \\(f\\)\u2014i.e., the row\n\\(R_{h_f(d)} = \\phi_{\\phi_{h_f(d)}(0)}, \\phi_{\\phi_{h_f(d)}(1)},\n\\ldots\\) It follows from (\\ref{dr}) that we must have \n\n\\[\\begin{equation} \\label{lastrecthm1}\n\\phi_{\\phi_d(h_f(d))}(y) \\simeq  \\phi_{\\phi_{h_f(d)}(h_f(d))}(y)\n\\end{equation}\\]\n\n\nBut note that by the definition of \\(h_f\\), \\(\\phi_{h_f(d)}(h_f(d)) =\nf(\\phi_d(h_f(d))\\) and thus also from (\\ref{lastrecthm1}) \n\n\\[\\begin{equation} \\label{lastrecthm2}\n\\phi_{\\phi_d(h_f(d))}(y) \\simeq  \\phi_{f(\\phi_d(h_f(d))}(y)\n\\end{equation}\\]\n\n\nBut now note that since \\(f,\\phi_d\\) and \\(h_f\\) are all total, the\nvalue \\(\\phi_d(h_f(d))\\) is defined. Thus setting \\(n =\n\\phi_d(h_f(d))\\) it follows from (\\ref{lastrecthm2}) that \\(\\phi_n(y)\n\\simeq \\phi_{f(n)}(y)\\) as desired.\n\nAs mentioned above, the Recursion Theorem may often be used to present\ncompact proofs of results which would traditionally be described as\ninvolving self-reference. For instance, an immediate\nconsequence is that for every \\(f(x)\\) there is an \\(n\\) such that\n\\(W_n = W_{f(n)}\\). To see this note that\n Theorem 3.5\n entails the existence of such an \\(n\\) such that \\(\\phi_n(x) \\simeq\n\\phi_{f(n)}\\) for every computable \\(f(x)\\). But since the domains of\nthe functions must then coincide, it follows that \\(W_n =\nW_{f(n)}\\).\n\nIt is useful to record the following alternative form of the Recursion\nTheorem:\n\n\nCorollary 3.2: For every partial computable function\n\\(f(x,y)\\), there is an index \\(n\\) such that \\(\\phi_n(y) \\simeq\nf(n,y)\\).\n\n\n\nProof: By the\n s-m-n Theorem (3.1),\n \\(f(x,y) \\simeq \\phi_{s^2_1(i,x)}(y)\\) for some \\(i\\). But then the\nexistence of the required \\(n\\) follows by applying\n Theorem 3.5\n to \\(s^2_1(i,x)\\). \u25a1\n\n\nHere are some easy consequences in the spirit described above which\nmake use of this formulation:\n\n\n\nThere is a number \\(n\\) such that \\(\\phi_n(x) = x + n\\). (This follows\nby taking \\(f(x,y) = x + n\\) in\n Corollary 3.2.\n Analogous observations yield the existence of \\(n\\) such that\n\\(\\phi_n(x) = x \\times n, \\phi_n(x) = x^n\\), etc.)\n\n\nThere is a number \\(n\\) such that \\(W_n = \\{n\\}\\). (Take \n\n\\[f(x,y) = \\begin{cases}\n0 & \\text{if } x = y \\\\\n \\uarrow & \\text{otherwise} \n\\end{cases}\\]\n\n\nin\n Corollary 3.2.)\n\n\nConsider a term \\(\\tau\\) corresponding to a \u201cprogram\u201d\nwhich determines the partial computable program with index \\(\\ulcorner\n\\tau \\urcorner\\) (as described in\n Section 2.2.2).\n We say that such a program is self-reproducing if for all\ninputs \\(x\\), the computation of \\(\\tau\\) on \\(x\\) outputs \\(\\ulcorner\n\\tau \\urcorner\\). Since in order to construct \\(\\tau\\) it would seem\nthat we need to know \\(\\ulcorner \\tau \\urcorner\\) in advance, it might\nappear that self-reproducing programs need not exist. Note, however,\nthat transposed back into our official terminology, the existence of\nsuch a program is equivalent to the existence of a number \\(n\\) such\nthat \\(\\phi_n(x) = n\\). And this is guaranteed by applying\n Corollary 3.2\n to the function \\(f(x,y) = x\\).\n\n\nFor further discussions of the Recursion Theorem in regard to\nself-reference and more advanced applications in computability theory\nsee, e.g., Cutland (1980, ch. 11), Rogers (1987, ch. 11), Odifreddi\n(1989, ch. II.2), and Y. Moschovakis (2010).\n\nBefore leaving the Recursion Theorem, it will finally be useful to\nreflect on how it bears on the general concept of recursive\ndefinability as discussed in\n Sections 1 and 2.\n Consider, for instance, a simple definition such as \n\n\\[\\begin{align} \\label{recex}\nh(0) & = k \\\\ \\nonumber\nh(y+1) & = g(h(y))\n\\end{align}\\]\n\n\nIn the case that \\(f(y)\\) and \\(g(y)\\) are primitive recursive, we\nhave remarked that it is possible to show that there exists a unique\nfunction \\(h(y)\\) satisfying (\\ref{recex}) by an external\nset-theoretic argument. But we may also consider the case in which\n\\(g(y)\\) is assumed to be computable relative to a model of\ncomputation \\(\\mathbf{M}\\) which differs from the partial recursive\nfunctions in that it does not natively support recursion as a mode of\ncomputation\u2014e.g., the Turing Machine model \\(\\mathbf{T}\\) or\nUnlimited Register Machine model \\(\\mathbf{U}\\). If we simply set down\n(\\ref{recex}) as a definition in this case, we would have no a\npriori assurance that \\(h(y)\\) is computable relative to\n\\(\\mathbf{M}\\) even if \\(g(x)\\) is.\n\nUpon examination, however, it is clear that the only features of a\nmodel of computation on which the proof of\n Theorem 3.5\n relies are the existence of an indexation for which a version of the\n s-m-n Theorem (3.1)\n is available. If \\(\\mathbf{M}\\) satisfies these conditions, the claim\nthat \\(h(y)\\) is computable relative to \\(\\mathbf{M}\\) is equivalent\nto \\(h(y) \\simeq \\phi_n(y)\\) where \\(n\\) is an index drawn from some\nsuitable indexation of the \\(\\mathbf{M}\\)-computable functions. But\nsince the s-m-n Theorem for \\(\\mathbf{M}\\) allows us to treat\nan index as a variable, we can also consider the function defined by\n \n\\[\\begin{aligned}\nf(x,0) & = k \\\\ \\nonumber\nf(x,y+1) & = g(\\phi_x(y))\\end{aligned}\\]\n\n\nNow note that the existence of an \\(n\\) such that \\(f(n,y) \\simeq\n\\phi_n(y)\\) is again guaranteed by\n Corollary 3.2.\n This in turn yields  \n\\[\\begin{aligned}\n\\phi_n(0) & = k \\\\ \\nonumber\n\\phi_n(y+1) & = g(\\phi_n(y))\\end{aligned}\\]\n\n\nThis illustrates how the existence of a computable function satisfying\na recursive definition such as (\\ref{recex}) follows from the\nRecursion Theorem even if we have not started out by characterizing a\n\u201ccomputable function\u201d as one defined\n\u201crecursively\u201d in the informal sense discussed in\n Section 1.\n And this in turn helps to explain why\n Theorem 3.5\n has come to be known as the Recursion Theorem.\n",
    "section_title": "3.4 The Recursion Theorem",
    "entry_title": "Recursive Functions",
    "hierarchy_title": "Recursive Functions || Computability Theory || The Recursion Theorem",
    "tokenized_text": [
        "computability",
        "theory",
        "recursion",
        "theorem",
        "recursion",
        "theorem",
        "result",
        "often",
        "referred",
        "kleene",
        "recursion",
        "theorem",
        "used",
        "unify",
        "number",
        "effective",
        "diagonal",
        "argument",
        "similar",
        "underlying",
        "theorem",
        "wide",
        "range",
        "application",
        "computability",
        "theory",
        "area",
        "mathematical",
        "logic",
        "computer",
        "science",
        "although",
        "statement",
        "straightforward",
        "significance",
        "following",
        "proof",
        "become",
        "clearer",
        "upon",
        "considering",
        "subsequent",
        "application",
        "theorem",
        "kleene",
        "suppose",
        "f",
        "x",
        "total",
        "computable",
        "function",
        "number",
        "n",
        "in",
        "mathbb",
        "n",
        "phi_n",
        "simeq",
        "phi_",
        "f",
        "n",
        "proof",
        "consider",
        "function",
        "g",
        "x",
        "defined",
        "follows",
        "begin",
        "aligned",
        "g",
        "x",
        "begin",
        "case",
        "phi_",
        "phi_x",
        "x",
        "text",
        "phi_x",
        "x",
        "darrow",
        "uarrow",
        "text",
        "otherwise",
        "end",
        "case",
        "end",
        "aligned",
        "evident",
        "g",
        "x",
        "partial",
        "computable",
        "g",
        "x",
        "simeq",
        "phi_e",
        "x",
        "e",
        "thus",
        "follows",
        "smn",
        "theorem",
        "phi_e",
        "x",
        "simeq",
        "phi_",
        "s_",
        "e",
        "x",
        "let",
        "b",
        "x",
        "s_",
        "e",
        "x",
        "note",
        "phi_",
        "b",
        "x",
        "function",
        "phi_",
        "phi_x",
        "x",
        "provided",
        "phi_x",
        "x",
        "defined",
        "note",
        "b",
        "x",
        "total",
        "computable",
        "function",
        "defined",
        "independently",
        "given",
        "function",
        "f",
        "x",
        "next",
        "let",
        "k",
        "index",
        "composition",
        "f",
        "x",
        "b",
        "x",
        "ie",
        "phi_k",
        "x",
        "simeq",
        "f",
        "b",
        "x",
        "claim",
        "n",
        "b",
        "k",
        "number",
        "called",
        "statement",
        "theorem",
        "first",
        "note",
        "since",
        "b",
        "x",
        "f",
        "x",
        "total",
        "phi_k",
        "x",
        "also",
        "total",
        "thus",
        "phi_k",
        "k",
        "defined",
        "follows",
        "phi_",
        "b",
        "k",
        "simeq",
        "phi_",
        "phi_k",
        "k",
        "following",
        "sequence",
        "functional",
        "identity",
        "phi_n",
        "simeq",
        "phi_",
        "b",
        "k",
        "simeq",
        "phi_",
        "phi_k",
        "k",
        "simeq",
        "phi_",
        "f",
        "b",
        "k",
        "simeq",
        "phi_",
        "f",
        "n",
        "recursion",
        "theorem",
        "sometimes",
        "also",
        "referred",
        "fixed",
        "point",
        "theorem",
        "note",
        "however",
        "theorem",
        "guarantee",
        "existence",
        "extensional",
        "fixed",
        "point",
        "given",
        "function",
        "f",
        "x",
        "ie",
        "number",
        "n",
        "f",
        "n",
        "n",
        "fact",
        "evident",
        "computable",
        "function",
        "value",
        "existseg",
        "f",
        "x",
        "x",
        "suppose",
        "view",
        "f",
        "x",
        "instead",
        "mapping",
        "index",
        "partial",
        "computable",
        "function",
        "figuratively",
        "mean",
        "transforming",
        "program",
        "computing",
        "partial",
        "computable",
        "function",
        "another",
        "program",
        "interpretation",
        "theorem",
        "express",
        "every",
        "computable",
        "transformation",
        "program",
        "n",
        "function",
        "phi_n",
        "computes",
        "function",
        "phi_",
        "f",
        "n",
        "computed",
        "image",
        "f",
        "n",
        "transformation",
        "may",
        "first",
        "appear",
        "n",
        "defined",
        "circular",
        "manner",
        "also",
        "prima",
        "facie",
        "unclear",
        "program",
        "must",
        "exist",
        "indeed",
        "soare",
        "remark",
        "foregoing",
        "proof",
        "recursion",
        "theorem",
        "short",
        "mysterious",
        "best",
        "visualized",
        "diagonal",
        "argument",
        "fails",
        "order",
        "clarify",
        "comment",
        "proof",
        "consider",
        "matrix",
        "depicted",
        "figure",
        "whose",
        "row",
        "r_i",
        "enumerate",
        "value",
        "partial",
        "computable",
        "function",
        "rather",
        "function",
        "themselvesie",
        "row",
        "r_i",
        "contain",
        "function",
        "phi_",
        "phi_i",
        "phi_",
        "phi_i",
        "ldots",
        "understanding",
        "phi_i",
        "j",
        "uarrow",
        "phi_",
        "phi_i",
        "j",
        "denotes",
        "totally",
        "undefined",
        "function",
        "depiction",
        "originally",
        "due",
        "owings",
        "begin",
        "matrix",
        "phi_",
        "phi_",
        "phi_",
        "phi_",
        "ldots",
        "phi_",
        "phi_",
        "ldots",
        "phi_",
        "phi_",
        "ldots",
        "phi_",
        "phi_",
        "h_",
        "f",
        "ldots",
        "phi_",
        "phi_",
        "phi_",
        "phi_",
        "ldots",
        "phi_",
        "phi_",
        "ldots",
        "phi_",
        "phi_",
        "ldots",
        "phi_",
        "phi_",
        "h_",
        "f",
        "ldots",
        "phi_",
        "phi_",
        "ldots",
        "ldots",
        "phi_",
        "phi_",
        "ldots",
        "phi_",
        "phi_",
        "ldots",
        "phi_",
        "phi_",
        "h_",
        "f",
        "ldots",
        "phi_",
        "phi_",
        "ldots",
        "ldots",
        "phi_",
        "phi_",
        "ldots",
        "phi_",
        "phi_",
        "ldots",
        "phi_",
        "phi_",
        "h_",
        "f",
        "ldots",
        "phi_",
        "phi_",
        "h_",
        "f",
        "ldots",
        "uarrow",
        "phi_",
        "phi_",
        "h_",
        "f",
        "ldots",
        "ldots",
        "phi_",
        "phi_",
        "h_",
        "f",
        "ldots",
        "phi_",
        "phi_",
        "h_",
        "f",
        "ldots",
        "phi_",
        "phi_",
        "h_",
        "f",
        "h_",
        "f",
        "ldots",
        "darrow",
        "phi_",
        "phi_",
        "h_",
        "f",
        "ldots",
        "ldots",
        "phi_",
        "phi_",
        "h_",
        "f",
        "ldots",
        "phi_",
        "phi_",
        "h_",
        "f",
        "ldots",
        "phi_",
        "phi_",
        "h_",
        "f",
        "h_",
        "f",
        "ldots",
        "phi_",
        "phi_",
        "h_",
        "f",
        "h_",
        "f",
        "ldots",
        "end",
        "matrix",
        "figure",
        "matrix",
        "partial",
        "computable",
        "function",
        "employed",
        "proof",
        "recursion",
        "theorem",
        "may",
        "think",
        "function",
        "f",
        "x",
        "given",
        "theorem",
        "inducing",
        "transformation",
        "row",
        "r_i",
        "mapped",
        "r_",
        "f",
        "end",
        "let",
        "h_f",
        "x",
        "index",
        "total",
        "computable",
        "function",
        "composes",
        "f",
        "phi_x",
        "begin",
        "aligned",
        "phi_",
        "h_f",
        "x",
        "simeq",
        "f",
        "phi_x",
        "end",
        "aligned",
        "next",
        "consider",
        "diagonal",
        "matrixie",
        "phi_",
        "phi_",
        "phi_",
        "phi_",
        "ldots",
        "since",
        "index",
        "function",
        "comprise",
        "d",
        "given",
        "effectively",
        "must",
        "case",
        "d",
        "corresponds",
        "row",
        "r_d",
        "ie",
        "begin",
        "align",
        "label",
        "dr",
        "phi_",
        "phi_d",
        "simeq",
        "phi_",
        "phi_i",
        "text",
        "in",
        "mathbb",
        "n",
        "end",
        "align",
        "consider",
        "image",
        "r_d",
        "f",
        "ie",
        "row",
        "r_",
        "h_f",
        "phi_",
        "phi_",
        "h_f",
        "phi_",
        "phi_",
        "h_f",
        "ldots",
        "follows",
        "ref",
        "dr",
        "must",
        "begin",
        "equation",
        "label",
        "lastrecthm",
        "phi_",
        "phi_d",
        "h_f",
        "simeq",
        "phi_",
        "phi_",
        "h_f",
        "h_f",
        "end",
        "equation",
        "note",
        "definition",
        "h_f",
        "phi_",
        "h_f",
        "h_f",
        "f",
        "phi_d",
        "h_f",
        "thus",
        "also",
        "ref",
        "lastrecthm",
        "begin",
        "equation",
        "label",
        "lastrecthm",
        "phi_",
        "phi_d",
        "h_f",
        "simeq",
        "phi_",
        "f",
        "phi_d",
        "h_f",
        "end",
        "equation",
        "note",
        "since",
        "f",
        "phi_d",
        "h_f",
        "total",
        "value",
        "phi_d",
        "h_f",
        "defined",
        "thus",
        "setting",
        "n",
        "phi_d",
        "h_f",
        "follows",
        "ref",
        "lastrecthm",
        "phi_n",
        "simeq",
        "phi_",
        "f",
        "n",
        "desired",
        "mentioned",
        "recursion",
        "theorem",
        "may",
        "often",
        "used",
        "present",
        "compact",
        "proof",
        "result",
        "would",
        "traditionally",
        "described",
        "involving",
        "selfreference",
        "instance",
        "immediate",
        "consequence",
        "every",
        "f",
        "x",
        "n",
        "w_n",
        "w_",
        "f",
        "n",
        "see",
        "note",
        "theorem",
        "entail",
        "existence",
        "n",
        "phi_n",
        "x",
        "simeq",
        "phi_",
        "f",
        "n",
        "every",
        "computable",
        "f",
        "x",
        "since",
        "domain",
        "function",
        "must",
        "coincide",
        "follows",
        "w_n",
        "w_",
        "f",
        "n",
        "useful",
        "record",
        "following",
        "alternative",
        "form",
        "recursion",
        "theorem",
        "corollary",
        "every",
        "partial",
        "computable",
        "function",
        "f",
        "x",
        "index",
        "n",
        "phi_n",
        "simeq",
        "f",
        "n",
        "proof",
        "smn",
        "theorem",
        "f",
        "x",
        "simeq",
        "phi_",
        "s_",
        "x",
        "i",
        "existence",
        "required",
        "n",
        "follows",
        "applying",
        "theorem",
        "s_",
        "x",
        "easy",
        "consequence",
        "spirit",
        "described",
        "make",
        "use",
        "formulation",
        "number",
        "n",
        "phi_n",
        "x",
        "x",
        "n",
        "follows",
        "taking",
        "f",
        "x",
        "x",
        "n",
        "corollary",
        "analogous",
        "observation",
        "yield",
        "existence",
        "n",
        "phi_n",
        "x",
        "x",
        "times",
        "n",
        "phi_n",
        "x",
        "xn",
        "etc",
        "number",
        "n",
        "w_n",
        "n",
        "take",
        "f",
        "x",
        "begin",
        "case",
        "text",
        "x",
        "uarrow",
        "text",
        "otherwise",
        "end",
        "case",
        "corollary",
        "consider",
        "term",
        "tau",
        "corresponding",
        "program",
        "determines",
        "partial",
        "computable",
        "program",
        "index",
        "ulcorner",
        "tau",
        "urcorner",
        "described",
        "section",
        "say",
        "program",
        "selfreproducing",
        "input",
        "x",
        "computation",
        "tau",
        "x",
        "output",
        "ulcorner",
        "tau",
        "urcorner",
        "since",
        "order",
        "construct",
        "tau",
        "would",
        "seem",
        "need",
        "know",
        "ulcorner",
        "tau",
        "urcorner",
        "advance",
        "might",
        "appear",
        "selfreproducing",
        "program",
        "need",
        "exist",
        "note",
        "however",
        "transposed",
        "back",
        "official",
        "terminology",
        "existence",
        "program",
        "equivalent",
        "existence",
        "number",
        "n",
        "phi_n",
        "x",
        "n",
        "guaranteed",
        "applying",
        "corollary",
        "function",
        "f",
        "x",
        "x",
        "discussion",
        "recursion",
        "theorem",
        "regard",
        "selfreference",
        "advanced",
        "application",
        "computability",
        "theory",
        "see",
        "eg",
        "cutland",
        "ch",
        "rogers",
        "ch",
        "odifreddi",
        "ch",
        "ii",
        "y",
        "moschovakis",
        "leaving",
        "recursion",
        "theorem",
        "finally",
        "useful",
        "reflect",
        "bear",
        "general",
        "concept",
        "recursive",
        "definability",
        "discussed",
        "section",
        "consider",
        "instance",
        "simple",
        "definition",
        "begin",
        "align",
        "label",
        "recex",
        "h",
        "k",
        "nonumber",
        "h",
        "y",
        "g",
        "h",
        "end",
        "align",
        "case",
        "f",
        "g",
        "primitive",
        "recursive",
        "remarked",
        "possible",
        "show",
        "exists",
        "unique",
        "function",
        "h",
        "satisfying",
        "ref",
        "recex",
        "external",
        "settheoretic",
        "argument",
        "may",
        "also",
        "consider",
        "case",
        "g",
        "assumed",
        "computable",
        "relative",
        "model",
        "computation",
        "mathbf",
        "differs",
        "partial",
        "recursive",
        "function",
        "natively",
        "support",
        "recursion",
        "mode",
        "computationeg",
        "turing",
        "machine",
        "model",
        "mathbf",
        "unlimited",
        "register",
        "machine",
        "model",
        "mathbf",
        "u",
        "simply",
        "set",
        "ref",
        "recex",
        "definition",
        "case",
        "would",
        "priori",
        "assurance",
        "h",
        "computable",
        "relative",
        "mathbf",
        "even",
        "g",
        "x",
        "upon",
        "examination",
        "however",
        "clear",
        "feature",
        "model",
        "computation",
        "proof",
        "theorem",
        "relies",
        "existence",
        "indexation",
        "version",
        "smn",
        "theorem",
        "available",
        "mathbf",
        "satisfies",
        "condition",
        "claim",
        "h",
        "computable",
        "relative",
        "mathbf",
        "equivalent",
        "h",
        "simeq",
        "phi_n",
        "n",
        "index",
        "drawn",
        "suitable",
        "indexation",
        "mathbf",
        "computable",
        "function",
        "since",
        "smn",
        "theorem",
        "mathbf",
        "allows",
        "u",
        "treat",
        "index",
        "variable",
        "also",
        "consider",
        "function",
        "defined",
        "begin",
        "aligned",
        "f",
        "x",
        "k",
        "nonumber",
        "f",
        "x",
        "y",
        "g",
        "phi_x",
        "end",
        "aligned",
        "note",
        "existence",
        "n",
        "f",
        "n",
        "simeq",
        "phi_n",
        "guaranteed",
        "corollary",
        "turn",
        "yield",
        "begin",
        "aligned",
        "phi_n",
        "k",
        "nonumber",
        "phi_n",
        "y",
        "g",
        "phi_n",
        "end",
        "aligned",
        "illustrates",
        "existence",
        "computable",
        "function",
        "satisfying",
        "recursive",
        "definition",
        "ref",
        "recex",
        "follows",
        "recursion",
        "theorem",
        "even",
        "started",
        "characterizing",
        "computable",
        "function",
        "one",
        "defined",
        "recursively",
        "informal",
        "sense",
        "discussed",
        "section",
        "turn",
        "help",
        "explain",
        "theorem",
        "come",
        "known",
        "recursion",
        "theorem"
    ]
}