{
    "main_text": "On computational complexity || A preliminary example\n1.1 A preliminary example\n A familiar example of a computational problem is that of primality testing \u2013 i.e. that of deciding \\(n \\in \\sc{PRIMES} \\)?  This problem was intensely studied in mathematics long before the development of digital computers.  (See, e.g., (Williams 1998) for a history of primality testing and  (Crandall and Pomerance 2005) for a recent survey of the state of the art.)   After a number of preliminary results in the 19th and 20th centuries, the problem \\(\\sc{PRIMES}\\) was shown in 2004 to possess a so-called polynomial time decision algorithm \u2013 i.e. the so-called AKS primality test (Agrawal, Kayal, and Saxena 2004). This qualifies \\(\\sc{PRIMES}\\) as feasibly decidable relative to the standards which are now widely accepted in complexity theory and algorithmic analysis (see \n Section 2.2).\nTwo related problems can be used to illustrate the sort of contrasts in difficulty which complexity theorists seek to analyze:\n\\(\\sc{RELATIVE}\\ \\sc{PRIMALITY}\\ \\) Given natural\nnumbers \\(x\\) and \\(y\\), do  \\(x\\) and \\(y\\) possess greatest common divisor \\(1\\)?  (I.e. are  \\(x\\) and \\(y\\)  relatively prime?)\n\n\\(\\sc{FACTORIZATION}\\ \\) Given natural numbers \\(x\\)\nand \\(y\\), does there exist \\(1 \\lt d \\leq y\\) such that \\(d \\mid\nx\\)?\n\\(\\sc{RELATIVE}\\ \\sc{PRIMALITY}\\) can be solved by applying Euclid\u2019s greatest common divisor algorithm \u2013 i.e. on input \\(y \\leq x\\), repeatedly compute the remainders \\(r_0 = \\text{rem}(x,y)\\), \\(r_1 = \\text{rem}(y, r_0)\\), \\(r_2 = \\text{rem}(r_0, r_1)\\) \u2026, until \\(r_i = 0\\) and then return \u2018yes\u2019 if \\(r_{i-1} = 1\\) and \u2018no\u2019 otherwise. It may be shown that the number of steps in this sequence is always less than or equal to \n \\(5 \\cdot \\log_{10}(x)\\).[2] \n This means that in order to determine if \\(x\\) and \\(y\\) are relatively prime, it suffices to calculate a number of remainders which is proportional to the number of digits in the decimal representation of the smaller of the two numbers. As this may also be accomplished by an efficient algorithm (e.g. long division), it may plausibly be maintained that if we are capable of inscribing a pair of numbers \\(x,y\\) \u2013 e.g. by writing their numerical representations in binary or decimal notation on a blackboard or by storing such numerals in the memory of a digital computer of current design \u2013 then either we or such a computer will also be able to carry out these algorithms in order to decide whether \\(x\\) and \\(y\\) are relatively prime. This is the hallmark of a feasibly decidable problem \u2013 i.e. one which can be decided in the \u2018in practice\u2019 sense of everyday concretely embodied computation.\n\\(\\sc{FACTORIZATION}\\) is a decision variant of the familiar problem of finding the prime factorization of a given number \\(x\\) \u2013 i.e. the unique sequence of primes \\(p_i\\) and exponents \\(a_i\\) such that \\(x = p_1^{a_1} \\cdot \\ldots \\cdot p_k^{a_k}\\). It is not difficult to see that if there existed an efficient algorithm for deciding \\(\\sc{FACTORIZATION}\\), then there would also exist an efficient algorithm for determining prime \n factorizations.[3] \n It is also easy to see that the function taking \\(x\\) to its prime factorization is effectively computable in the traditional sense of computability theory. For instance, it can be computed by the trial division algorithm.\nIn its simplest form, trial division operates by successively testing \\(x\\) for divisibility by each integer smaller than \\(x\\) and keeping track of the divisors which have been found thus far. As the number of divisions required by this procedure is proportional to \\(x\\) itself, it might at first seem that it is not a particularly onerous task to employ this method to factor numbers of moderate size using paper and pencil calculation \u2013 say \\(x \\lt 100000\\). Note, however, that we conventionally denote natural numbers using positional notations such as binary or decimal numerals. A consequence of this is that the length of the expression which is typically supplied as an input to a numerical algorithm to represent an input \\(x \\in \\mathbb{N}\\) is proportional not to \\(x\\) itself, but rather to \\(\\log_b(x)\\) where \\(b \\geq 2\\) is the base of the notation system in \n question.[4] \n As a consequence it is possible to concretely inscribe positional numerals of moderate length which denote astronomically large numbers. For instance a binary numeral of 60 digits denotes a number which is larger than the estimated age of the universe in seconds and a binary numeral of 250 digits denotes a number which is larger than the estimated age of the universe in Planck \n times.[5]\nThere are thus natural numbers whose binary representations we can easily inscribe, but for which no human mathematician or foreseeable computing device can carry out the trial division algorithm. This again might not seem particularly troubling as this algorithm is indeed \u2018naive\u2019 in the sense that it admits to several obvious improvements \u2013 e.g. we need only test \\(x\\) for divisibility by the numbers \\(2, \\ldots, \\sqrt{x}\\) to find an initial factor, and of these we need only test those which are themselves prime (finitely many of which can be stored in a lookup table). Nonetheless, mathematicians have been attempting to find more efficient methods of factorization for several hundred years. The most efficient factorization algorithm yet developed is similar to the trial division algorithm in that it requires a number of primitive steps which grows roughly in proportion to \\(x\\) (i.e. the size of its input, as opposed to the length of its binary \n representation).[6]   \n A consequence of these observations is that there exist concretely inscribable numbers \u2013 say on the order of 400 decimal digits \u2013 with the following properties: (i) we are currently unaware of their factorizations; and (ii) it is highly unlikely we could currently find them even if we had access to whatever combination of currently available computing equipment and algorithms we wish.\n Like the problems introduced above, \\(\\sc{FACTORIZATION}\\) is of considerable practical importance, perhaps most famously because the security of well known cryptographic protocols assume that it is intractable in the general case (see, e.g., Cormen, Leiserson, and Rivest 2005).  But the foregoing observations still do not entail any fundamental limitation on our ability to know a number\u2019s prime factorization. For it might still be hoped that further research will yield a more efficient algorithm which will allow us to determine the prime factorization of every number \\(x\\) in which we might take a practical interest. A comparison of Euclid\u2019s algorithm and trial division again provides a useful context for describing the properties which we might expect such an algorithm to possess. For note that the prior observations suggest that we ought to measure the size of the input  \\(x \\in \\mathbb{N}\\) to a numerical algorithm not by  \\(x\\) itself, but rather in terms of the length of \\(x\\)\u2019s binary representation. If we let \\(\\lvert x\\rvert =_{df} \\log_2(x)\\) denote this quantity, then it is easy to see that the efficiency of Euclid\u2019s algorithm is given by a function which grows proportionally to \\(\\lvert x\\rvert^{c_1}\\) for fixed \\(c_1\\) (in fact, \\(c_1 = 1\\)), whereas the efficiency of trial division is given by a function proportional \\(c_2^{\\lvert x\\rvert}\\) for fixed \\(c_2\\) (in fact, \\(c_2 = 2\\)).\nThe difference in the growth rate of these functions illustrates the contrast between polynomial time complexity \u2013 which is currently taken by complexity theorists as the touchstone of feasibility \u2013 and exponential time complexity \u2013 which has traditionally been taken as the touchstone of intractability. For instance, if it could be shown that no polynomial time factorization algorithm exists, it might then seem reasonable to conclude that \\(\\sc{FACTORIZATION}\\) is a genuinely intractable problem.\nAlthough it is currently unknown whether this is the case, contemporary results provide circumstantial evidence that \\(\\sc{FACTORIZATION}\\) is indeed intractable (see \n Section 3.4.1).  Stronger evidence can be adduced for the intractability of conjecture  \\(\\sc{SAT}\\), \\(\\sc{TSP}\\), and \\(\\sc{INTEGER}\\ \\sc{PROGRAMMING}\\) (and similarly for a great many other problems of practical interest in subjects like logic, graph theory, linear algebra, formal language theory, game theory, and combinatorics). The technical development of complexity theory aims to make such comparisons of  computational difficulty precise and to show that the classification of certain problems as intractable admits to rigorous mathematical analysis.\n",
    "section_title": "1.1 A preliminary example",
    "entry_title": "Computational Complexity Theory",
    "hierarchy_title": "Computational Complexity Theory || On computational complexity || A preliminary example",
    "tokenized_text": [
        "computational",
        "complexity",
        "preliminary",
        "example",
        "preliminary",
        "example",
        "familiar",
        "example",
        "computational",
        "problem",
        "primality",
        "testing",
        "ie",
        "deciding",
        "n",
        "in",
        "sc",
        "prime",
        "problem",
        "intensely",
        "studied",
        "mathematics",
        "long",
        "development",
        "digital",
        "computer",
        "see",
        "eg",
        "williams",
        "history",
        "primality",
        "testing",
        "crandall",
        "pomerance",
        "recent",
        "survey",
        "state",
        "art",
        "number",
        "preliminary",
        "result",
        "th",
        "th",
        "century",
        "problem",
        "sc",
        "prime",
        "shown",
        "posse",
        "socalled",
        "polynomial",
        "time",
        "decision",
        "algorithm",
        "ie",
        "socalled",
        "ak",
        "primality",
        "test",
        "agrawal",
        "kayal",
        "saxena",
        "qualifies",
        "sc",
        "prime",
        "feasibly",
        "decidable",
        "relative",
        "standard",
        "widely",
        "accepted",
        "complexity",
        "theory",
        "algorithmic",
        "analysis",
        "see",
        "section",
        "two",
        "related",
        "problem",
        "used",
        "illustrate",
        "sort",
        "contrast",
        "difficulty",
        "complexity",
        "theorist",
        "seek",
        "analyze",
        "sc",
        "relative",
        "sc",
        "primality",
        "given",
        "natural",
        "number",
        "x",
        "y",
        "x",
        "y",
        "posse",
        "greatest",
        "common",
        "divisor",
        "ie",
        "x",
        "y",
        "relatively",
        "prime",
        "sc",
        "factorization",
        "given",
        "natural",
        "number",
        "x",
        "y",
        "exist",
        "lt",
        "leq",
        "y",
        "mid",
        "x",
        "sc",
        "relative",
        "sc",
        "primality",
        "solved",
        "applying",
        "euclid",
        "greatest",
        "common",
        "divisor",
        "algorithm",
        "ie",
        "input",
        "leq",
        "x",
        "repeatedly",
        "compute",
        "remainder",
        "r_",
        "text",
        "rem",
        "x",
        "r_",
        "text",
        "rem",
        "r_",
        "r_",
        "text",
        "rem",
        "r_",
        "r_",
        "r_i",
        "return",
        "yes",
        "r_",
        "i",
        "otherwise",
        "may",
        "shown",
        "number",
        "step",
        "sequence",
        "always",
        "le",
        "equal",
        "cdot",
        "log_",
        "x",
        "mean",
        "order",
        "determine",
        "x",
        "y",
        "relatively",
        "prime",
        "suffices",
        "calculate",
        "number",
        "remainder",
        "proportional",
        "number",
        "digit",
        "decimal",
        "representation",
        "smaller",
        "two",
        "number",
        "may",
        "also",
        "accomplished",
        "efficient",
        "algorithm",
        "eg",
        "long",
        "division",
        "may",
        "plausibly",
        "maintained",
        "capable",
        "inscribing",
        "pair",
        "number",
        "x",
        "y",
        "eg",
        "writing",
        "numerical",
        "representation",
        "binary",
        "decimal",
        "notation",
        "blackboard",
        "storing",
        "numeral",
        "memory",
        "digital",
        "computer",
        "current",
        "design",
        "either",
        "computer",
        "also",
        "able",
        "carry",
        "algorithm",
        "order",
        "decide",
        "whether",
        "x",
        "y",
        "relatively",
        "prime",
        "hallmark",
        "feasibly",
        "decidable",
        "problem",
        "ie",
        "one",
        "decided",
        "practice",
        "sense",
        "everyday",
        "concretely",
        "embodied",
        "computation",
        "sc",
        "factorization",
        "decision",
        "variant",
        "familiar",
        "problem",
        "finding",
        "prime",
        "factorization",
        "given",
        "number",
        "x",
        "ie",
        "unique",
        "sequence",
        "prime",
        "p_i",
        "exponent",
        "a_i",
        "x",
        "p_",
        "a_",
        "cdot",
        "ldots",
        "cdot",
        "p_k",
        "a_k",
        "difficult",
        "see",
        "existed",
        "efficient",
        "algorithm",
        "deciding",
        "sc",
        "factorization",
        "would",
        "also",
        "exist",
        "efficient",
        "algorithm",
        "determining",
        "prime",
        "factorization",
        "also",
        "easy",
        "see",
        "function",
        "taking",
        "x",
        "prime",
        "factorization",
        "effectively",
        "computable",
        "traditional",
        "sense",
        "computability",
        "theory",
        "instance",
        "computed",
        "trial",
        "division",
        "algorithm",
        "simplest",
        "form",
        "trial",
        "division",
        "operates",
        "successively",
        "testing",
        "x",
        "divisibility",
        "integer",
        "smaller",
        "x",
        "keeping",
        "track",
        "divisor",
        "found",
        "thus",
        "far",
        "number",
        "division",
        "required",
        "procedure",
        "proportional",
        "x",
        "might",
        "first",
        "seem",
        "particularly",
        "onerous",
        "task",
        "employ",
        "method",
        "factor",
        "number",
        "moderate",
        "size",
        "using",
        "paper",
        "pencil",
        "calculation",
        "say",
        "x",
        "lt",
        "note",
        "however",
        "conventionally",
        "denote",
        "natural",
        "number",
        "using",
        "positional",
        "notation",
        "binary",
        "decimal",
        "numeral",
        "consequence",
        "length",
        "expression",
        "typically",
        "supplied",
        "input",
        "numerical",
        "algorithm",
        "represent",
        "input",
        "x",
        "in",
        "mathbb",
        "n",
        "proportional",
        "x",
        "rather",
        "log_b",
        "x",
        "b",
        "geq",
        "base",
        "notation",
        "system",
        "question",
        "consequence",
        "possible",
        "concretely",
        "inscribe",
        "positional",
        "numeral",
        "moderate",
        "length",
        "denote",
        "astronomically",
        "large",
        "number",
        "instance",
        "binary",
        "numeral",
        "digit",
        "denotes",
        "number",
        "larger",
        "estimated",
        "age",
        "universe",
        "second",
        "binary",
        "numeral",
        "digit",
        "denotes",
        "number",
        "larger",
        "estimated",
        "age",
        "universe",
        "planck",
        "time",
        "thus",
        "natural",
        "number",
        "whose",
        "binary",
        "representation",
        "easily",
        "inscribe",
        "human",
        "mathematician",
        "foreseeable",
        "computing",
        "device",
        "carry",
        "trial",
        "division",
        "algorithm",
        "might",
        "seem",
        "particularly",
        "troubling",
        "algorithm",
        "indeed",
        "naive",
        "sense",
        "admits",
        "several",
        "obvious",
        "improvement",
        "eg",
        "need",
        "test",
        "x",
        "divisibility",
        "number",
        "ldots",
        "sqrt",
        "x",
        "find",
        "initial",
        "factor",
        "need",
        "test",
        "prime",
        "finitely",
        "many",
        "stored",
        "lookup",
        "table",
        "nonetheless",
        "mathematician",
        "attempting",
        "find",
        "efficient",
        "method",
        "factorization",
        "several",
        "hundred",
        "year",
        "efficient",
        "factorization",
        "algorithm",
        "yet",
        "developed",
        "similar",
        "trial",
        "division",
        "algorithm",
        "requires",
        "number",
        "primitive",
        "step",
        "grows",
        "roughly",
        "proportion",
        "x",
        "ie",
        "size",
        "input",
        "opposed",
        "length",
        "binary",
        "representation",
        "consequence",
        "observation",
        "exist",
        "concretely",
        "inscribable",
        "number",
        "say",
        "order",
        "decimal",
        "digit",
        "following",
        "property",
        "currently",
        "unaware",
        "factorization",
        "ii",
        "highly",
        "unlikely",
        "could",
        "currently",
        "find",
        "even",
        "access",
        "whatever",
        "combination",
        "currently",
        "available",
        "computing",
        "equipment",
        "algorithm",
        "wish",
        "like",
        "problem",
        "introduced",
        "sc",
        "factorization",
        "considerable",
        "practical",
        "importance",
        "perhaps",
        "famously",
        "security",
        "well",
        "known",
        "cryptographic",
        "protocol",
        "assume",
        "intractable",
        "general",
        "case",
        "see",
        "eg",
        "cormen",
        "leiserson",
        "rivest",
        "foregoing",
        "observation",
        "still",
        "entail",
        "fundamental",
        "limitation",
        "ability",
        "know",
        "number",
        "prime",
        "factorization",
        "might",
        "still",
        "hoped",
        "research",
        "yield",
        "efficient",
        "algorithm",
        "allow",
        "u",
        "determine",
        "prime",
        "factorization",
        "every",
        "number",
        "x",
        "might",
        "take",
        "practical",
        "interest",
        "comparison",
        "euclid",
        "algorithm",
        "trial",
        "division",
        "provides",
        "useful",
        "context",
        "describing",
        "property",
        "might",
        "expect",
        "algorithm",
        "posse",
        "note",
        "prior",
        "observation",
        "suggest",
        "ought",
        "measure",
        "size",
        "input",
        "x",
        "in",
        "mathbb",
        "n",
        "numerical",
        "algorithm",
        "x",
        "rather",
        "term",
        "length",
        "x",
        "binary",
        "representation",
        "let",
        "lvert",
        "xrvert",
        "_",
        "df",
        "log_",
        "x",
        "denote",
        "quantity",
        "easy",
        "see",
        "efficiency",
        "euclid",
        "algorithm",
        "given",
        "function",
        "grows",
        "proportionally",
        "lvert",
        "xrvert",
        "c_",
        "fixed",
        "c_",
        "fact",
        "c_",
        "whereas",
        "efficiency",
        "trial",
        "division",
        "given",
        "function",
        "proportional",
        "c_",
        "lvert",
        "xrvert",
        "fixed",
        "c_",
        "fact",
        "c_",
        "difference",
        "growth",
        "rate",
        "function",
        "illustrates",
        "contrast",
        "polynomial",
        "time",
        "complexity",
        "currently",
        "taken",
        "complexity",
        "theorist",
        "touchstone",
        "feasibility",
        "exponential",
        "time",
        "complexity",
        "traditionally",
        "taken",
        "touchstone",
        "intractability",
        "instance",
        "could",
        "shown",
        "polynomial",
        "time",
        "factorization",
        "algorithm",
        "exists",
        "might",
        "seem",
        "reasonable",
        "conclude",
        "sc",
        "factorization",
        "genuinely",
        "intractable",
        "problem",
        "although",
        "currently",
        "unknown",
        "whether",
        "case",
        "contemporary",
        "result",
        "provide",
        "circumstantial",
        "evidence",
        "sc",
        "factorization",
        "indeed",
        "intractable",
        "see",
        "section",
        "stronger",
        "evidence",
        "adduced",
        "intractability",
        "conjecture",
        "sc",
        "sat",
        "sc",
        "tsp",
        "sc",
        "integer",
        "sc",
        "programming",
        "similarly",
        "great",
        "many",
        "problem",
        "practical",
        "interest",
        "subject",
        "like",
        "logic",
        "graph",
        "theory",
        "linear",
        "algebra",
        "formal",
        "language",
        "theory",
        "game",
        "theory",
        "combinatorics",
        "technical",
        "development",
        "complexity",
        "theory",
        "aim",
        "make",
        "comparison",
        "computational",
        "difficulty",
        "precise",
        "show",
        "classification",
        "certain",
        "problem",
        "intractable",
        "admits",
        "rigorous",
        "mathematical",
        "analysis"
    ]
}