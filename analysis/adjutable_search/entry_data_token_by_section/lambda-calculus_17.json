{
    "main_text": "Extensions and Variations || Combinatory logic\n8.1 Combinatory logic\n\nA sister formalism of the \\(\\lambda\\)-calculus, developed slightly\nearlier, deals with variable-free combinations.\nCombinatory logic is indeed even simpler\nthan the \\(\\lambda\\)-calculus, since it lacks a notion of variable\nbinding.\n\nThe language of combinatory logic is built up from\ncombinators and variables. There is some\nflexibility in precisely which combinators are chosen as basic, but\nsome standard ones are \\(\\mathbf{I}, \\bK , \\bS, \\mathbf{B}\\) and\n\\(\\mathbf{C}\\). (The names are not arbitrary.)\n\nAs with the \\(\\lambda\\)-calculus, with combinatory logic one is\ninterested in reducibility and provability. The\nprincipal reduction relations are:\n\n\nCombinator\nReduction Axiom\n\n\\(\\bI\\)\n\\(\\bI x = x\\) \n\n\\(\\bK\\)\n\\(\\bK xy = x\\) \n\n\\(\\bS\\)\n\\(\\bS xyz = xz(yz)\\) \n\n\\(\\bB\\)\n\\(\\bB xyz = x(yz)\\) \n\n\\(\\bC\\)\n\\(\\bC xyz = xzy\\) \n\n\nThere is a passage from \\(\\lambda\\)-calculus to combinatory logic via\ntranslation. It turns out that although combinatory logic lacks a\nnotion of abstraction, one can define such a notion and thereby\nsimulate the \\(\\lambda\\)-calculus in combinatory logic. Here is one\ntranslation; it is defined recursively.\n\n\nRule\nExpression\nTranslation\nCondition \n\n1\n\\(x\\)\n\\(x\\)\n(unconditional) \n\n2\n\\(MN\\)\nM\\(^*\\)N\\(^*\\)\n(unconditional) \n\n3\n\\(\\lambda x[M]\\)\n\\(\\bK\\)M\n\\(x\\) does not occur freely in M \n\n4\n\\(\\lambda x[x]\\)\n\\(\\bI\\)\n(unconditional) \n\n5\n\\(\\lambda x[Mx]\\)\nM\n\\(x\\) does not occur freely in M \n\n6\n\\(\\lambda x[MN]\\)\n\\(\\bB M(\\lambda x[N)]^*\\)\n\\(x\\) does not occur freely in M \n\n7\n\\(\\lambda x[MN]\\)\n\\(\\bC (\\lambda x[M])^*\\)N\n\\(x\\) does not occur freely in \\(N\\) \n\n8\n\\(\\lambda x[MN]\\)\n\\(\\bS M^*N^*\\)\n\\(x\\) occurs freely in both \\(M\\) and \\(N\\) \n\n\nThis translation works inside-out, rather than outside-in. To\nillustrate:\n\n\n\nThe translation of the term \\(\\lambda y[y]\\), a representative of the\nidentity function, is mapped by this translation to the identity\ncombinator \\(\\bI\\) (because of Rule 4), as expected.\n\n\nThe \\(\\lambda\\)-term \\(\\lambda x[\\lambda y[x]]\\) that we have been\ncalling \u2018\\(\\bK\\)\u2019is mapped by this translation to:\n\n\\[\\begin{align}\n\\lambda x[\\lambda y[x]] \n  &\\equiv \\lambda x[\\bK x]  &\\langle \\text{Rule 1}\\rangle \\\\\n  &\\equiv \\bK   &\\langle \\text{Rule 3} \\rangle\n\\end{align}\\]\n \n\n\nThe \\(\\lambda\\)-term \\(\\lambda x[\\lambda y[yx]]\\) that switches its\ntwo arguments is mapped by this translation to: \n\\[\\begin{align}\n\\lambda x[\\lambda y[yx]] \n &\\equiv \\lambda x[\\bC(\\lambda y[y])^* x]  &\\langle\\text{Rule 8}\\rangle \\\\\n &\\equiv \\lambda x[\\bC\\bI x]  &\\langle\\lambda y[y] \\equiv \\bI,\\text{ by Rule 4}\\rangle \\\\\n &\\equiv \\bB\\bC\\bI)(\\lambda x[x])^*  &\\langle\\text{Rule 7}\\rangle \\\\\n &\\equiv \\bB(\\bC\\bI)\\bI  &\\langle(\\lambda x[x])^* \\equiv \\bI,\\text{ by Rule 4}\\rangle\n\\end{align}\\]\n\n\nWe can confirm that the \\(\\lambda\\)-term \\(\\lambda x[\\lambda y[yx]]\\)\nand the translated combinatory logic term \\(\\bB(\\bC\\bI)\\bI\\) have\nanalogous applicative behavior: for all \\(\\lambda\\)-terms \\(P\\) and\n\\(Q\\) we have \n\\[\n(\\lambda x[\\lambda y[yx]])PQ \\rhd (\\lambda y[yP]) \\rhd QP;\n\\]\n\n\nlikewise, for all combinatory logic terms \\(P\\) and \\(Q\\) we have\n\n\\[\n\\bB(\\bC\\bI)\\bI PQ \\rhd (\\bC\\bI)(\\bI P)Q \\rhd \\bI Q(\\bI P) \\rhd Q(\\bI P) \\rhd QP\n\\]\n \n\n\nWe can give but a glimpse of combinatory logic; for more on the\nsubject, consult the entry on\n combinatory logic.\n Many of the issues discussed here for \\(\\lambda\\)-calculus have\nanalogues in combinatory logic, and vice versa.\n",
    "section_title": "8.1 Combinatory logic",
    "entry_title": "The Lambda Calculus",
    "hierarchy_title": "The Lambda Calculus || Extensions and Variations || Combinatory logic",
    "tokenized_text": [
        "extension",
        "variation",
        "combinatory",
        "logic",
        "combinatory",
        "logic",
        "sister",
        "formalism",
        "lambda",
        "calculus",
        "developed",
        "slightly",
        "earlier",
        "deal",
        "variablefree",
        "combination",
        "combinatory",
        "logic",
        "indeed",
        "even",
        "simpler",
        "lambda",
        "calculus",
        "since",
        "lack",
        "notion",
        "variable",
        "binding",
        "language",
        "combinatory",
        "logic",
        "built",
        "combinators",
        "variable",
        "flexibility",
        "precisely",
        "combinators",
        "chosen",
        "basic",
        "standard",
        "one",
        "mathbf",
        "bk",
        "bs",
        "mathbf",
        "b",
        "mathbf",
        "c",
        "name",
        "arbitrary",
        "lambda",
        "calculus",
        "combinatory",
        "logic",
        "one",
        "interested",
        "reducibility",
        "provability",
        "principal",
        "reduction",
        "relation",
        "combinator",
        "reduction",
        "axiom",
        "bi",
        "bi",
        "x",
        "x",
        "bk",
        "bk",
        "xy",
        "x",
        "bs",
        "bs",
        "xyz",
        "xz",
        "yz",
        "bb",
        "bb",
        "xyz",
        "x",
        "yz",
        "bc",
        "bc",
        "xyz",
        "xzy",
        "passage",
        "lambda",
        "calculus",
        "combinatory",
        "logic",
        "via",
        "translation",
        "turn",
        "although",
        "combinatory",
        "logic",
        "lack",
        "notion",
        "abstraction",
        "one",
        "define",
        "notion",
        "thereby",
        "simulate",
        "lambda",
        "calculus",
        "combinatory",
        "logic",
        "one",
        "translation",
        "defined",
        "recursively",
        "rule",
        "expression",
        "translation",
        "condition",
        "x",
        "x",
        "unconditional",
        "mn",
        "m",
        "n",
        "unconditional",
        "lambda",
        "x",
        "bk",
        "x",
        "occur",
        "freely",
        "lambda",
        "x",
        "x",
        "bi",
        "unconditional",
        "lambda",
        "x",
        "mx",
        "x",
        "occur",
        "freely",
        "lambda",
        "x",
        "mn",
        "bb",
        "lambda",
        "x",
        "n",
        "x",
        "occur",
        "freely",
        "lambda",
        "x",
        "mn",
        "bc",
        "lambda",
        "x",
        "n",
        "x",
        "occur",
        "freely",
        "n",
        "lambda",
        "x",
        "mn",
        "bs",
        "m",
        "n",
        "x",
        "occurs",
        "freely",
        "m",
        "n",
        "translation",
        "work",
        "insideout",
        "rather",
        "outsidein",
        "illustrate",
        "translation",
        "term",
        "lambda",
        "representative",
        "identity",
        "function",
        "mapped",
        "translation",
        "identity",
        "combinator",
        "bi",
        "rule",
        "expected",
        "lambda",
        "term",
        "lambda",
        "x",
        "lambda",
        "x",
        "calling",
        "bk",
        "mapped",
        "translation",
        "begin",
        "align",
        "lambda",
        "x",
        "lambda",
        "x",
        "equiv",
        "lambda",
        "x",
        "bk",
        "x",
        "langle",
        "text",
        "rule",
        "rangle",
        "equiv",
        "bk",
        "langle",
        "text",
        "rule",
        "rangle",
        "end",
        "align",
        "lambda",
        "term",
        "lambda",
        "x",
        "lambda",
        "yx",
        "switch",
        "two",
        "argument",
        "mapped",
        "translation",
        "begin",
        "align",
        "lambda",
        "x",
        "lambda",
        "yx",
        "equiv",
        "lambda",
        "x",
        "bc",
        "lambda",
        "x",
        "langletext",
        "rule",
        "rangle",
        "equiv",
        "lambda",
        "x",
        "bcbi",
        "x",
        "langlelambda",
        "equiv",
        "bi",
        "text",
        "rule",
        "rangle",
        "equiv",
        "bbbcbi",
        "lambda",
        "x",
        "x",
        "langletext",
        "rule",
        "rangle",
        "equiv",
        "bb",
        "bcbi",
        "bi",
        "langle",
        "lambda",
        "x",
        "x",
        "equiv",
        "bi",
        "text",
        "rule",
        "rangle",
        "end",
        "align",
        "confirm",
        "lambda",
        "term",
        "lambda",
        "x",
        "lambda",
        "yx",
        "translated",
        "combinatory",
        "logic",
        "term",
        "bb",
        "bcbi",
        "bi",
        "analogous",
        "applicative",
        "behavior",
        "lambda",
        "terms",
        "p",
        "q",
        "lambda",
        "x",
        "lambda",
        "yx",
        "pq",
        "rhd",
        "lambda",
        "yp",
        "rhd",
        "qp",
        "likewise",
        "combinatory",
        "logic",
        "term",
        "p",
        "q",
        "bb",
        "bcbi",
        "bi",
        "pq",
        "rhd",
        "bcbi",
        "bi",
        "p",
        "q",
        "rhd",
        "bi",
        "q",
        "bi",
        "p",
        "rhd",
        "q",
        "bi",
        "p",
        "rhd",
        "qp",
        "give",
        "glimpse",
        "combinatory",
        "logic",
        "subject",
        "consult",
        "entry",
        "combinatory",
        "logic",
        "many",
        "issue",
        "discussed",
        "lambda",
        "calculus",
        "analogue",
        "combinatory",
        "logic",
        "vice",
        "versa"
    ]
}