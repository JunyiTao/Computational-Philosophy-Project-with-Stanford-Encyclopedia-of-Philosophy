{
    "main_text": "Computational Systems || The Method of Levels of Abstractions\n1.2 The Method of Levels of Abstractions\n\nAs shown above, the distinction between software and hardware is not a\nsharp one. A different ontological approach to computational systems\nrelies on the role of abstraction. Abstraction is a crucial element in\ncomputer science, and it takes many different forms. Goguen &\nBurstall (1985) describe some of this variety, of which the following\nexamples are instances. Code can be repeated during programming, by\nnaming text and a parameter, a practice known as procedural\nabstraction. This operation has its formal basis in the abstraction\noperation of the lambda calculus (see the entry on the\n lambda calculus)\n and it allows a formal mechanism known as polymorphism (Hankin 2004).\nAnother example is typing, typical of functional programming, which\nprovides an expressive system of representation for the syntactic\nconstructors of the language. Or else, in object-oriented design,\npatterns (Gamma et al. 1994) are abstracted from the common structures\nthat are found in software systems and used as interfaces between the\nimplementation of an object and its specification.\n\nAll these examples share an underlying methodology in the Levels of\nAbstraction (henceforth LoA), used also in mathematics (Mitchelmore\nand White 2004) and philosophy (Floridi 2008). Abstractions in\nmathematics are piled upon each other in a never-ending search for\nmore and more abstract concepts. On this account, abstraction is\nself-contained: an abstract mathematical object takes its meaning only\nfrom the system within which it is defined and the only constraint is\nthat new objects be related to each other in a consistent system that\ncan be operated on without reference to previous or external meanings.\nSome argue that, in this respect at least, abstraction in computer\nscience is fundamentally different from abstraction in mathematics:\ncomputational abstraction must leave behind an implementation trace\nand this means that information is hidden but not destroyed (Colburn\n& Shute 2007). Any details that are ignored at one LoA must not be\nignored by one of the lower LoAs: for example, programmers need not\nworry about the precise location in memory associated with a\nparticular variable, but the virtual machine is required to handle all\nmemory allocations. This reliance of abstraction on different levels\nis reflected in the property of computational systems to depend upon\nthe existence of an implementation: for example, even though classes\nhide details of their methods, they must have implementations. Hence,\ncomputational abstractions preserve both an abstract guise and an\nimplementation.\n\nA full formulation of LoAs for the ontology of digital computational\nsystems has been devised in Primiero (2016), including:\n\nIntention\nSpecification\nAlgorithm\nHigh-level programming language instructions\nAssembly/machine code operations\nExecution\n\n\nIntention is the cognitive act that defines a computational\nproblem to be solved: it formulates the request to create a\ncomputational process to perform a certain task. Requests of this sort\nare usually provided by customers, users, and other stakeholders\ninvolved in a given software development project.\nSpecification is the formulation of the set of requirements\nnecessary for solving the computational problem at hand: it concerns\nthe possibly formal determination of the operations the software must\nperform, through the process known as requirements elicitation.\nAlgorithm expresses the procedure providing a solution to the\nproposed computational problem, one which must meet the requirements\nof the specification. High-level programming language (such\nas C, Java, or Python) instructions constitute the linguistic\nimplementation of the proposed algorithm, often called the source\ncode, and they can be understood by trained programmers but cannot be\ndirectly executed by a machine. The instructions coded in high-level\nlanguage are compiled, i.e., translated, by a compiler into\nassembly code and then assembled in machine code\noperations, executable by a processor. Finally, the\nexecution LoA is the physical level of the running software,\ni.e., of the computer architecture executing the instructions.\n\nAccording to this view, no LoA taken in isolation is able to define\nwhat a computational system is, nor to determine how to distinguish\nsoftware from hardware. Computational systems are rather defined by\nthe whole abstraction hierarchy; each LoA in itself expresses a\nsemantic level associated with a realization, either linguistic or\nphysical.\n",
    "section_title": "1.2 The Method of Levels of Abstractions",
    "entry_title": "The Philosophy of Computer Science",
    "hierarchy_title": "The Philosophy of Computer Science || Computational Systems || The Method of Levels of Abstractions",
    "tokenized_text": [
        "computational",
        "system",
        "method",
        "level",
        "abstraction",
        "method",
        "level",
        "abstraction",
        "shown",
        "distinction",
        "software",
        "hardware",
        "sharp",
        "one",
        "different",
        "ontological",
        "approach",
        "computational",
        "system",
        "relies",
        "role",
        "abstraction",
        "abstraction",
        "crucial",
        "element",
        "computer",
        "science",
        "take",
        "many",
        "different",
        "form",
        "goguen",
        "burstall",
        "describe",
        "variety",
        "following",
        "example",
        "instance",
        "code",
        "repeated",
        "programming",
        "naming",
        "text",
        "parameter",
        "practice",
        "known",
        "procedural",
        "abstraction",
        "operation",
        "formal",
        "basis",
        "abstraction",
        "operation",
        "lambda",
        "calculus",
        "see",
        "entry",
        "lambda",
        "calculus",
        "allows",
        "formal",
        "mechanism",
        "known",
        "polymorphism",
        "hankin",
        "another",
        "example",
        "typing",
        "typical",
        "functional",
        "programming",
        "provides",
        "expressive",
        "system",
        "representation",
        "syntactic",
        "constructor",
        "language",
        "else",
        "objectoriented",
        "design",
        "pattern",
        "gamma",
        "et",
        "al",
        "abstracted",
        "common",
        "structure",
        "found",
        "software",
        "system",
        "used",
        "interface",
        "implementation",
        "object",
        "specification",
        "example",
        "share",
        "underlying",
        "methodology",
        "level",
        "abstraction",
        "henceforth",
        "loa",
        "used",
        "also",
        "mathematics",
        "mitchelmore",
        "white",
        "philosophy",
        "floridi",
        "abstraction",
        "mathematics",
        "piled",
        "upon",
        "neverending",
        "search",
        "abstract",
        "concept",
        "account",
        "abstraction",
        "selfcontained",
        "abstract",
        "mathematical",
        "object",
        "take",
        "meaning",
        "system",
        "within",
        "defined",
        "constraint",
        "new",
        "object",
        "related",
        "consistent",
        "system",
        "operated",
        "without",
        "reference",
        "previous",
        "external",
        "meaning",
        "argue",
        "respect",
        "least",
        "abstraction",
        "computer",
        "science",
        "fundamentally",
        "different",
        "abstraction",
        "mathematics",
        "computational",
        "abstraction",
        "must",
        "leave",
        "behind",
        "implementation",
        "trace",
        "mean",
        "information",
        "hidden",
        "destroyed",
        "colburn",
        "shute",
        "detail",
        "ignored",
        "one",
        "loa",
        "must",
        "ignored",
        "one",
        "lower",
        "loas",
        "example",
        "programmer",
        "need",
        "worry",
        "precise",
        "location",
        "memory",
        "associated",
        "particular",
        "variable",
        "virtual",
        "machine",
        "required",
        "handle",
        "memory",
        "allocation",
        "reliance",
        "abstraction",
        "different",
        "level",
        "reflected",
        "property",
        "computational",
        "system",
        "depend",
        "upon",
        "existence",
        "implementation",
        "example",
        "even",
        "though",
        "class",
        "hide",
        "detail",
        "method",
        "must",
        "implementation",
        "hence",
        "computational",
        "abstraction",
        "preserve",
        "abstract",
        "guise",
        "implementation",
        "full",
        "formulation",
        "loas",
        "ontology",
        "digital",
        "computational",
        "system",
        "devised",
        "primiero",
        "including",
        "intention",
        "specification",
        "algorithm",
        "highlevel",
        "programming",
        "language",
        "instruction",
        "assemblymachine",
        "code",
        "operation",
        "execution",
        "intention",
        "cognitive",
        "act",
        "defines",
        "computational",
        "problem",
        "solved",
        "formulates",
        "request",
        "create",
        "computational",
        "process",
        "perform",
        "certain",
        "task",
        "request",
        "sort",
        "usually",
        "provided",
        "customer",
        "user",
        "stakeholder",
        "involved",
        "given",
        "software",
        "development",
        "project",
        "specification",
        "formulation",
        "set",
        "requirement",
        "necessary",
        "solving",
        "computational",
        "problem",
        "hand",
        "concern",
        "possibly",
        "formal",
        "determination",
        "operation",
        "software",
        "must",
        "perform",
        "process",
        "known",
        "requirement",
        "elicitation",
        "algorithm",
        "express",
        "procedure",
        "providing",
        "solution",
        "proposed",
        "computational",
        "problem",
        "one",
        "must",
        "meet",
        "requirement",
        "specification",
        "highlevel",
        "programming",
        "language",
        "c",
        "java",
        "python",
        "instruction",
        "constitute",
        "linguistic",
        "implementation",
        "proposed",
        "algorithm",
        "often",
        "called",
        "source",
        "code",
        "understood",
        "trained",
        "programmer",
        "directly",
        "executed",
        "machine",
        "instruction",
        "coded",
        "highlevel",
        "language",
        "compiled",
        "ie",
        "translated",
        "compiler",
        "assembly",
        "code",
        "assembled",
        "machine",
        "code",
        "operation",
        "executable",
        "processor",
        "finally",
        "execution",
        "loa",
        "physical",
        "level",
        "running",
        "software",
        "ie",
        "computer",
        "architecture",
        "executing",
        "instruction",
        "according",
        "view",
        "loa",
        "taken",
        "isolation",
        "able",
        "define",
        "computational",
        "system",
        "determine",
        "distinguish",
        "software",
        "hardware",
        "computational",
        "system",
        "rather",
        "defined",
        "whole",
        "abstraction",
        "hierarchy",
        "loa",
        "express",
        "semantic",
        "level",
        "associated",
        "realization",
        "either",
        "linguistic",
        "physical"
    ]
}