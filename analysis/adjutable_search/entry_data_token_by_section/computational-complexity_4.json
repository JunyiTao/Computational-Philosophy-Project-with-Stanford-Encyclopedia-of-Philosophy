{
    "main_text": "The origins of complexity theory || Church\u2019s Thesis and effective computability\n2.1 Church\u2019s Thesis and effective computability\nThe origins of computational complexity theory lie in computability theory and early developments in algorithmic analysis. The former subject began with the work of G\u00f6del, Church, Turing, Kleene, and Post originally undertaken during the 1930s in attempt to answer Hilbert\u2019s Entscheidungsproblem \u2013 i.e. is the problem \\(\\sc{FO}\\text{-}\\sc{VALID}\\) of determining whether a given formula of first-order logic is valid decidable? At this time, the concept of decidability at issue was that of effective decidability in principle \u2013 i.e. decidability by a rule governed method (or effective procedure) each of whose basic steps can be individually carried out by a finitary mathematical agent but whose execution may require an unbounded number of steps or quantity of memory space.\nWe now understand the Entscheidungsproblem to have been answered in the negative by Church (1936a) and Turing (1937). The solution they provided can be reconstructed as follows: 1) a mathematical definition of a model of computation \\(\\mathfrak{M}\\) was presented; 2) an informal argument was given to show that \\(\\mathfrak{M}\\) contains representatives of all effective procedures; 3) a formal argument was then given to show that no machine \\(M \\in \\mathfrak{M}\\) decides \\(\\sc{FO}\\text{-}\\sc{VALID}\\). Church (1936b) took \\(\\mathfrak{M}\\) to be the class of terms \\(\\Lambda\\) in the untyped lambda calculus, while Turing took \\(\\mathfrak{M}\\) to correspond the class of \\(\\mathfrak{T}\\) of Turing machines. Church also showed the class \\(\\mathcal{F}_{\\Lambda}\\) of lambda-definable functions is extensionally coincident with the class \\(\\mathcal{F}_{\\mathfrak{R}}\\) of general recursive functions (as defined by G\u00f6del 1986b and Kleene 1936). Turing then showed that the class \\(\\mathcal{F}_{\\mathfrak{T}}\\) of functions computable by a Turing machine was extensionally coincident with \\(\\mathcal{F}_{\\Lambda}\\).\nThe extensional coincidence of the classes \\(\\mathcal{F}_{\\Lambda}, \\mathcal{F}_{\\mathfrak{R}}\\), and \\(\\mathcal{F}_{\\mathfrak{T}}\\) provided the first  evidence for what Kleene (1952) would later dub Church\u2019s Thesis \u2013 i.e.\n\n(CT)\n\n  A function \\(f:\\mathbb{N}^k \\rightarrow \\mathbb{N}\\) is effectively computable if and only if \\(f(x_1, \\ldots, x_k)\\) is recursive.\n\n\nCT can be understood to assign a precise epistemological significance to Church and Turing\u2019s negative answer to the Entscheidungsproblem. For if it is acknowledged that \\(\\mathcal{F}_{\\mathfrak{R}}\\) (and hence also \\(\\mathcal{F}_{\\Lambda}\\) and \\(\\mathcal{F}_{\\mathfrak{T}}\\)) contain all effectively computable functions, it then follows that a problem \\(X\\) can be shown to be effectively undecidable \u2013 i.e. undecidable by any algorithm whatsoever, regardless of its efficiency \u2013 by showing that the characteristic function \\(c_X(x)\\) of \\(X\\) is not recursive. CT thus allows us to infer from the fact that problems \\(X\\) for which \\(c_X(x)\\) can be proven to be non-recursive \u2013 e.g. the Halting Problem (Turing 1937) or the word problem for semi-groups (Post 1947) \u2013 are not effectively decidable.\nIt is evident, however, that our justification for such classifications can be no stronger than the stock we place in CT itself. One form of evidence often cited in favor of the thesis is that the coincidence of the class of functions computed by the members of \\(\\Lambda, \\mathfrak{R}\\) and \\(\\mathfrak{T}\\) points to the mathematical robustness of the class of recursive functions. Two related forms of inductive evidence are as follows: (i) many other independently motivated models of computation have subsequently been defined which describe the same class of functions; (ii) the thesis is generally thought to yield a classification of functions which has thus far coincided with our ability to compute them in the relevant \u2018in principle\u2019 sense.\nBut even if the correctness of CT is granted, it is also important to keep in mind that the concept of computability which it seeks to analyze is an idealized one which is divorced in certain respects from our everyday computational practices. For note that CT will classify \\(f(x)\\) as effectively computable even if it is only computable by a Turing machine \\(T\\) with time and space complexity functions \\(t_T(n)\\) and \\(s_T(n)\\) whose values may be astronomically large even for small inputs.[8]\nExamples of this sort notwithstanding, it is often claimed that Turing\u2019s original characterization of effective computability provides a template for a more general analysis of what it could mean for a function to be computable by a mechanical device. For instance,  Gandy (1980) and Sieg (2009) argue that the process by which Turing originally arrived at the definition of a Turing machine can be generalized to yield an abstract characterization of a mechanical computing device.   Such characterizations may in turn be understood as describing the properties which a physical system would have to obey in order for it to be concretely implementable.  For instance the requirement that a Turing machine may only access or modify the tape cell which is currently being scanned by its read-write head may be generalized to allow modification to a machine\u2019s state at a bounded distance from one or more computational loci.  Such a requirement can in turn be understood as reflecting the fact that classical physics does not allow for the possibility of action at a distance.\nOn this basis CT is also sometimes understood as making a prediction about which functions are physically computable \u2013 i.e. are such that their values can be determined by measuring the states of physical systems which we might hope to use as practical computing devices.  We might thus hope that further refinements of the Gandy-Sieg conditions (potentially along the lines of the proposals of Leivant (1994) or Bellantoni and Cook (1992) discussed in  Section 4.5)  will eventually provide insight as to why some mathematical models of computation appear to yield a more accurate account than others of the exigencies of concretely embodied computation which complexity theory seeks to analyze.\n",
    "section_title": "2.1 Church\u2019s Thesis and effective computability",
    "entry_title": "Computational Complexity Theory",
    "hierarchy_title": "Computational Complexity Theory || The origins of complexity theory || Church\u2019s Thesis and effective computability",
    "tokenized_text": [
        "origin",
        "complexity",
        "theory",
        "church",
        "thesis",
        "effective",
        "computability",
        "church",
        "thesis",
        "effective",
        "computability",
        "origin",
        "computational",
        "complexity",
        "theory",
        "lie",
        "computability",
        "theory",
        "early",
        "development",
        "algorithmic",
        "analysis",
        "former",
        "subject",
        "began",
        "work",
        "g\u00f6del",
        "church",
        "turing",
        "kleene",
        "post",
        "originally",
        "undertaken",
        "s",
        "attempt",
        "answer",
        "hilbert",
        "entscheidungsproblem",
        "ie",
        "problem",
        "sc",
        "fo",
        "text",
        "sc",
        "valid",
        "determining",
        "whether",
        "given",
        "formula",
        "firstorder",
        "logic",
        "valid",
        "decidable",
        "time",
        "concept",
        "decidability",
        "issue",
        "effective",
        "decidability",
        "principle",
        "ie",
        "decidability",
        "rule",
        "governed",
        "method",
        "effective",
        "procedure",
        "whose",
        "basic",
        "step",
        "individually",
        "carried",
        "finitary",
        "mathematical",
        "agent",
        "whose",
        "execution",
        "may",
        "require",
        "unbounded",
        "number",
        "step",
        "quantity",
        "memory",
        "space",
        "understand",
        "entscheidungsproblem",
        "answered",
        "negative",
        "church",
        "a",
        "turing",
        "solution",
        "provided",
        "reconstructed",
        "follows",
        "mathematical",
        "definition",
        "model",
        "computation",
        "mathfrak",
        "presented",
        "informal",
        "argument",
        "given",
        "show",
        "mathfrak",
        "contains",
        "representative",
        "effective",
        "procedure",
        "formal",
        "argument",
        "given",
        "show",
        "machine",
        "in",
        "mathfrak",
        "decides",
        "sc",
        "fo",
        "text",
        "sc",
        "valid",
        "church",
        "b",
        "took",
        "mathfrak",
        "class",
        "term",
        "lambda",
        "untyped",
        "lambda",
        "calculus",
        "turing",
        "took",
        "mathfrak",
        "correspond",
        "class",
        "mathfrak",
        "turing",
        "machine",
        "church",
        "also",
        "showed",
        "class",
        "mathcal",
        "f",
        "_",
        "lambda",
        "lambdadefinable",
        "function",
        "extensionally",
        "coincident",
        "class",
        "mathcal",
        "f",
        "_",
        "mathfrak",
        "r",
        "general",
        "recursive",
        "function",
        "defined",
        "g\u00f6del",
        "b",
        "kleene",
        "turing",
        "showed",
        "class",
        "mathcal",
        "f",
        "_",
        "mathfrak",
        "function",
        "computable",
        "turing",
        "machine",
        "extensionally",
        "coincident",
        "mathcal",
        "f",
        "_",
        "lambda",
        "extensional",
        "coincidence",
        "class",
        "mathcal",
        "f",
        "_",
        "lambda",
        "mathcal",
        "f",
        "_",
        "mathfrak",
        "r",
        "mathcal",
        "f",
        "_",
        "mathfrak",
        "provided",
        "first",
        "evidence",
        "kleene",
        "would",
        "later",
        "dub",
        "church",
        "thesis",
        "ie",
        "ct",
        "function",
        "f",
        "mathbb",
        "n",
        "k",
        "rightarrow",
        "mathbb",
        "n",
        "effectively",
        "computable",
        "f",
        "x_",
        "ldots",
        "x_k",
        "recursive",
        "ct",
        "understood",
        "assign",
        "precise",
        "epistemological",
        "significance",
        "church",
        "turing",
        "negative",
        "answer",
        "entscheidungsproblem",
        "acknowledged",
        "mathcal",
        "f",
        "_",
        "mathfrak",
        "r",
        "hence",
        "also",
        "mathcal",
        "f",
        "_",
        "lambda",
        "mathcal",
        "f",
        "_",
        "mathfrak",
        "contain",
        "effectively",
        "computable",
        "function",
        "follows",
        "problem",
        "x",
        "shown",
        "effectively",
        "undecidable",
        "ie",
        "undecidable",
        "algorithm",
        "whatsoever",
        "regardless",
        "efficiency",
        "showing",
        "characteristic",
        "function",
        "c_x",
        "x",
        "x",
        "recursive",
        "ct",
        "thus",
        "allows",
        "u",
        "infer",
        "fact",
        "problem",
        "x",
        "c_x",
        "x",
        "proven",
        "nonrecursive",
        "eg",
        "halting",
        "problem",
        "turing",
        "word",
        "problem",
        "semigroups",
        "post",
        "effectively",
        "decidable",
        "evident",
        "however",
        "justification",
        "classification",
        "stronger",
        "stock",
        "place",
        "ct",
        "one",
        "form",
        "evidence",
        "often",
        "cited",
        "favor",
        "thesis",
        "coincidence",
        "class",
        "function",
        "computed",
        "member",
        "lambda",
        "mathfrak",
        "r",
        "mathfrak",
        "point",
        "mathematical",
        "robustness",
        "class",
        "recursive",
        "function",
        "two",
        "related",
        "form",
        "inductive",
        "evidence",
        "follows",
        "many",
        "independently",
        "motivated",
        "model",
        "computation",
        "subsequently",
        "defined",
        "describe",
        "class",
        "function",
        "ii",
        "thesis",
        "generally",
        "thought",
        "yield",
        "classification",
        "function",
        "thus",
        "far",
        "coincided",
        "ability",
        "compute",
        "relevant",
        "principle",
        "sense",
        "even",
        "correctness",
        "ct",
        "granted",
        "also",
        "important",
        "keep",
        "mind",
        "concept",
        "computability",
        "seek",
        "analyze",
        "idealized",
        "one",
        "divorced",
        "certain",
        "respect",
        "everyday",
        "computational",
        "practice",
        "note",
        "ct",
        "classify",
        "f",
        "x",
        "effectively",
        "computable",
        "even",
        "computable",
        "turing",
        "machine",
        "t",
        "time",
        "space",
        "complexity",
        "function",
        "t_t",
        "n",
        "s_t",
        "n",
        "whose",
        "value",
        "may",
        "astronomically",
        "large",
        "even",
        "small",
        "input",
        "example",
        "sort",
        "notwithstanding",
        "often",
        "claimed",
        "turing",
        "original",
        "characterization",
        "effective",
        "computability",
        "provides",
        "template",
        "general",
        "analysis",
        "could",
        "mean",
        "function",
        "computable",
        "mechanical",
        "device",
        "instance",
        "gandy",
        "sieg",
        "argue",
        "process",
        "turing",
        "originally",
        "arrived",
        "definition",
        "turing",
        "machine",
        "generalized",
        "yield",
        "abstract",
        "characterization",
        "mechanical",
        "computing",
        "device",
        "characterization",
        "may",
        "turn",
        "understood",
        "describing",
        "property",
        "physical",
        "system",
        "would",
        "obey",
        "order",
        "concretely",
        "implementable",
        "instance",
        "requirement",
        "turing",
        "machine",
        "may",
        "access",
        "modify",
        "tape",
        "cell",
        "currently",
        "scanned",
        "readwrite",
        "head",
        "may",
        "generalized",
        "allow",
        "modification",
        "machine",
        "state",
        "bounded",
        "distance",
        "one",
        "computational",
        "locus",
        "requirement",
        "turn",
        "understood",
        "reflecting",
        "fact",
        "classical",
        "physic",
        "allow",
        "possibility",
        "action",
        "distance",
        "basis",
        "ct",
        "also",
        "sometimes",
        "understood",
        "making",
        "prediction",
        "function",
        "physically",
        "computable",
        "ie",
        "value",
        "determined",
        "measuring",
        "state",
        "physical",
        "system",
        "might",
        "hope",
        "use",
        "practical",
        "computing",
        "device",
        "might",
        "thus",
        "hope",
        "refinement",
        "gandysieg",
        "condition",
        "potentially",
        "along",
        "line",
        "proposal",
        "leivant",
        "bellantoni",
        "cook",
        "discussed",
        "section",
        "eventually",
        "provide",
        "insight",
        "mathematical",
        "model",
        "computation",
        "appear",
        "yield",
        "accurate",
        "account",
        "others",
        "exigency",
        "concretely",
        "embodied",
        "computation",
        "complexity",
        "theory",
        "seek",
        "analyze"
    ]
}