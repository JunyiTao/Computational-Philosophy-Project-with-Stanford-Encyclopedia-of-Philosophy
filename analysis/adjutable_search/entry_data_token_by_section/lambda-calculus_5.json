{
    "main_text": "Syntax || Combinators\n2.2 Combinators\n\nAs defined earlier, a combinator is a\n\\(\\lambda\\)-term with no free variables. One can intuitively\nunderstand combinators as \u2018completely specified\u2019\noperations, since they have no free variables. There are a handful of\ncombinators that have proven useful in the history of\n\\(\\lambda\\)-calculus; the next table highlights some of these special\ncombinators. Many more could be given (and obviously there are\ninfinitely many combinators), but the following have concise\ndefinitions and have proved their utility. Below is a table of some\nstandard \\(\\lambda\\)-terms and combinators.\n\n\nName\nDefinition & Comments \n\n\\(\\bS\\)\n\\(\\lambda x[\\lambda y[\\lambda z[xz(yz)]]]\\)\n\nKeep in mind that \u2018\\(xz(yz)\\)\u2019 is to be understood as the\napplication \\((xz)(yz)\\) of \\(xz\\) to \\(yz. \\bS\\) can thus be\nunderstood as a substitute-and-apply operator: \\(z\\)\n\u2018intervenes\u2019 between \\(x\\) and \\(y\\): instead of applying\n\\(x\\) to \\(y\\), we apply \\(xz\\) to \\(yz\\). \n\n\\(\\mathbf{K}\\)\n\\(\\lambda x[\\lambda y[x]]\\)\n\nThe value of \\(\\mathbf{K}M\\) is the constant function whose value for\nany argument is simply \\(M.\\) \n\n\\(\\mathbf{I}\\)\n\\(\\lambda x[x]\\)\n\nThe identity function. \n\n\\(\\mathbf{B}\\)\n\\(\\lambda x[\\lambda y[\\lambda z[x(yz)]]]\\)\n\nRecall that \u2018\\(xyz\\)\u2019 is to be understood as \\((xy)z\\), so\nthis combinator is not a trivial identity function. \n\n\\(\\mathbf{C}\\)\n\\(\\lambda x[\\lambda y[\\lambda z[xzy]]]\\)\n\nSwaps an argument. \n\n\\(\\mathbf{T}\\)\n\\(\\lambda x[\\lambda y[x]]\\)\n\nTruth value true. Identical to \\(\\mathbf{K}\\). We shall see later how\nthese representations of truth values plays a role in the blending of\nlogic and \\(\\lambda\\)-calculus. \n\n\\(\\mathbf{F}\\)\n\\(\\lambda x[\\lambda y[y]]\\)\n\nTruth value false. \n\n\\(\\boldsymbol{\\omega}\\)\n\\(\\lambda x[xx]\\)\n\nSelf-application combinator \n\n\\(\\boldsymbol{\\Omega}\\)\n\\(\\boldsymbol{\\omega \\omega}\\)\n\nSelf-application of the self-application combinator. Reduces to\nitself. \n\n\\(\\mathbf{Y}\\)\n\\(\\lambda f[(\\lambda x[f(xx)])(\\lambda x[f(xx)]\\))]\n\nCurry\u2019s paradoxical combinator. For every \\(\\lambda\\)-term\n\\(X\\), we have: \n\\[\\begin{align}\n\\mathbf{Y}X &\\rhd (\\lambda x[X(xx)])(\\lambda x[X(xx)]) \\\\\n   &\\rhd X((\\lambda x[X(xx)])(\\lambda x[X(xx)]))\n\\end{align}\\]\n The first step in the reduction shows that\n\\(\\mathbf{Y}\\)X reduces to the application term \\((\\lambda\nx[X(xx)])(\\lambda x[X(xx)]\\)), which is recurring in the third step.\nThus, \\(\\mathbf{Y}\\) has the curious property that \\(\\mathbf{Y}\\)X and\nX\\((\\mathbf{Y}\\)X) reduce to a common term. \n\n\\(\\boldsymbol{\\Theta}\\)\n\\((\\lambda x[\\lambda f[f(xxf)]])(\\lambda x[\\lambda f[f(xxf)]]\\))\n\nTuring\u2019s fixed-point combinator. For every \\(\\lambda\\)-term\n\\(X\\), \\(\\boldsymbol{\\Theta}X\\) reduces to\n\\(X(\\boldsymbol{\\Theta}X)\\), which one can confirm by hand.\n(Curry\u2019s paradoxical combinator \\(\\mathbf{Y}\\) does not have\nthis property.) \n\n\nBelow is a table of notational conventions employed in this entry.\n\n\nNotation\nReading & Comments \n\n\\(MN\\)\nThe application of the function \\(M\\) to the argument \\(N\\).\n\n\nUsually, parentheses are used to separate the function from the\nargument, like so: \u2018\\(M(N)\\)\u2019. However, in\n\\(\\lambda\\)-calculus and kindred subjects the parentheses are used as\ngrouping symbols. Thus, it is safe to write the function and the\nargument adjacent to one other. \n\n\\(PQR\\)\nThe application of the function \\(PQ\\)\u2014which is itself the\napplication of the function \\(P\\) to the argument \\(Q\\)\u2014to\n\\(R\\).\n\n\nIf we do not use parentheses to separate function and argument, how\nare we to disambiguate expressions that involve three or more terms,\nsuch as \u2018\\(PQR\\)\u2019? Recall our convention that we are to\nunderstand such officially illegal expressions by working from left to\nright, always putting parentheses around adjacent terms. Thus,\n\u2018\\(PQR\\)\u2019 is to be understood as \\((PQ)R\\).\n\u2018\\(PQRS\\)\u2019 is \\(((PQ)R)S\\). The expression\n\u2018\\((PQ)R\\)\u2019 is disambiguated; by our convention, it is\nidentical to \\(PQR\\). The expression \u2018\\(P(QR)\\)\u2019 is also\nexplicitly disambiguated; it is distinct from \\(PQR\\) because it is\nthe application of \\(P\\) to the argument \\(QR\\) (which is itself the\napplication of the function \\(Q\\) to the argument \\(R)\\).\n\n\n\\((\\lambda x[M])\\)\nThe \\(\\lambda\\) term that binds the\nvariable \\(x\\) in the \\(\\boldsymbol{body}\\) term \\(M\\).\n\n\nThe official vocabulary of the \\(\\lambda\\)-calculus consists of the\nsymbol \u2018\\(\\lambda\\)\u2019, left \u2018(\u2019and right\n\u2018)\u2019 parentheses, and a set of variables (assumed to be\ndistinct from the three symbols \u2018\\(\\lambda\\)\u2019,\n\u2018(\u2019, and \u2018)\u2019 lest we have syntactic\nchaos).\n\nAlternative notation. It is not necessary to include\ntwo kinds of grouping symbols (parentheses and square brackets) in the\nsyntax. Parentheses or square brackets alone would obviously suffice.\nThe two kinds of brackets are employed in this entry for the sake of\nreadability. Given the two kinds of grouping symbols, we could\neconomize further and omit the parentheses from abstraction terms, so\nthat \u2018\\((\\lambda x[M]\\))\u2019 would be written as\n\u2018\\(\\lambda x[M]\\)\u2019.\n\nSome authors write \u2018\\(\\lambda x.M\\)\u2019 or \u2018\\(\\lambda\nx\\cdot M\\)\u2019, with a full stop or a centered dot separating the\nbound variable from the body of the abstraction term. As with the\nsquare brackets, these devices are intended to assist reading\n\\(\\lambda\\)-terms; they are usually not part of the official syntax.\n(One sees this device used in earlier works of logic, such as\nPrincipia Mathematica, where the function of the symbol\n. in expressions such as \u2018\\(\\forall\nx\\).\\(\\phi\\)\u2019 is to get us to read the whole of\nthe formula \\(\\phi\\) as under the scope of the \\(\\forall x\\).)\n\nSome authors write abstraction terms without any device separating the\nbound variable from the body: such terms are crisply written as, e.g.,\n\u2018\\(\\lambda xx\\)\u2019, \u2018\\(\\lambda yx\\)\u2019. The\npractice is not without its merits: it is about as concise as one can\nask for, and permits an even simpler official syntax of the\n\\(\\lambda\\)-calculus. But this practice is not flawless. In\n\u2018\\(\\lambda xyz\\)\u2019, is the bound variable \\(x\\) or is it\n\\(xy\\)? Usually the names of variables are single letters, and\ntheoretically this is clearly sufficient. But it seems unduly\nrestrictive to forbid the practice of giving longer names to\nvariables; indeed, such constructions arise naturally in computer\nprogramming languages.\n\nFor the sake of uniformity, we will adopt the square bracket notation\nin this entry. (Incidentally, this notation is used in (Turing,\n1937).)  \n\n\\(M[x := A]\\)\nThe \\(\\lambda\\)-term that is obtained by substituting the\n\\(\\lambda\\)-term A for all free occurrences of \\(x\\) inside \\(M\\).\n\n\nA bewildering array of notations to represent substitution can be\nfound in the literature on \\(\\lambda\\)-calculus and kindred\nsubjects: \n\\[\nM[x/A], M[A/x], M_{x}^A, M_{A}^x, [x/A]M,\\ldots\n\\]\n\n\nWhich notation to use for substitution seems to be a personal matter.\nIn this entry we use a linear notation, eschewing superscripts and\nsubscripts. The practice of representing substitution with\n\u2018:=\u2019 comes from computer science, where \u2018:=\u2019\nis read in some programming languages as assigning a value to a\nvariable.\n\nAs with the square brackets employed to write abstraction terms, the\nsquare brackets employed to write substitution are not officially part\nof the syntax of the \\(\\lambda\\)-calculus. \\(M\\) and A are terms,\n\\(x\\) is a variable; \\(M[x := A]\\) is another term.  \n\n\\(M \\equiv N\\)\nThe \\(\\lambda\\)-terms \\(M\\) and \\(N\\) are identical: understood\nas sequences of symbols, \\(M\\) and \\(N\\) have the same length and\ncorresponding symbols of the sequences are identical.\n\n\nThe syntactic identity relation \\(\\equiv\\) is not part of the official\nsyntax of \\(\\lambda\\)-calculus; this relation between\n\\(\\lambda\\)-terms belongs to the metatheory of \\(\\lambda\\)-calculus.\nIt is clearly a rather strict notion of equality between\n\\(\\lambda\\)-terms. Thus, it is not the case (if \\(x\\) and \\(y\\) are\ndistinct variables) that \\(\\lambda x[x] \\equiv\n\\lambda y[y]\\), even though these two terms clearly\n\u2018behave\u2019 in the same way in the sense that both are\nexpressions of the identity operation \\(x \\Rightarrow x\\). Later we\nwill develop formal theories of equality of \\(\\lambda\\)-terms with the\naim of capturing this intuitive equality of \\(\\lambda x[x]\\) and\n\\(\\lambda y[y]\\). \n\n",
    "section_title": "2.2 Combinators",
    "entry_title": "The Lambda Calculus",
    "hierarchy_title": "The Lambda Calculus || Syntax || Combinators",
    "tokenized_text": [
        "syntax",
        "combinators",
        "combinators",
        "defined",
        "earlier",
        "combinator",
        "lambda",
        "term",
        "free",
        "variable",
        "one",
        "intuitively",
        "understand",
        "combinators",
        "completely",
        "specified",
        "operation",
        "since",
        "free",
        "variable",
        "handful",
        "combinators",
        "proven",
        "useful",
        "history",
        "lambda",
        "calculus",
        "next",
        "table",
        "highlight",
        "special",
        "combinators",
        "many",
        "could",
        "given",
        "obviously",
        "infinitely",
        "many",
        "combinators",
        "following",
        "concise",
        "definition",
        "proved",
        "utility",
        "table",
        "standard",
        "lambda",
        "terms",
        "combinators",
        "name",
        "definition",
        "comment",
        "bs",
        "lambda",
        "x",
        "lambda",
        "lambda",
        "z",
        "xz",
        "yz",
        "keep",
        "mind",
        "xz",
        "yz",
        "understood",
        "application",
        "xz",
        "yz",
        "xz",
        "yz",
        "bs",
        "thus",
        "understood",
        "substituteandapply",
        "operator",
        "z",
        "intervenes",
        "x",
        "y",
        "instead",
        "applying",
        "x",
        "y",
        "apply",
        "xz",
        "yz",
        "mathbf",
        "k",
        "lambda",
        "x",
        "lambda",
        "x",
        "value",
        "mathbf",
        "k",
        "m",
        "constant",
        "function",
        "whose",
        "value",
        "argument",
        "simply",
        "m",
        "mathbf",
        "lambda",
        "x",
        "x",
        "identity",
        "function",
        "mathbf",
        "b",
        "lambda",
        "x",
        "lambda",
        "lambda",
        "z",
        "x",
        "yz",
        "recall",
        "xyz",
        "understood",
        "xy",
        "z",
        "combinator",
        "trivial",
        "identity",
        "function",
        "mathbf",
        "c",
        "lambda",
        "x",
        "lambda",
        "lambda",
        "z",
        "xzy",
        "swap",
        "argument",
        "mathbf",
        "lambda",
        "x",
        "lambda",
        "x",
        "truth",
        "value",
        "true",
        "identical",
        "mathbf",
        "k",
        "shall",
        "see",
        "later",
        "representation",
        "truth",
        "value",
        "play",
        "role",
        "blending",
        "logic",
        "lambda",
        "calculus",
        "mathbf",
        "f",
        "lambda",
        "x",
        "lambda",
        "truth",
        "value",
        "false",
        "boldsymbol",
        "omega",
        "lambda",
        "x",
        "xx",
        "selfapplication",
        "combinator",
        "boldsymbol",
        "omega",
        "boldsymbol",
        "omega",
        "omega",
        "selfapplication",
        "selfapplication",
        "combinator",
        "reduces",
        "mathbf",
        "lambda",
        "f",
        "lambda",
        "x",
        "f",
        "xx",
        "lambda",
        "x",
        "f",
        "xx",
        "curry",
        "paradoxical",
        "combinator",
        "every",
        "lambda",
        "term",
        "x",
        "begin",
        "align",
        "mathbf",
        "x",
        "rhd",
        "lambda",
        "x",
        "x",
        "xx",
        "lambda",
        "x",
        "x",
        "xx",
        "rhd",
        "x",
        "lambda",
        "x",
        "x",
        "xx",
        "lambda",
        "x",
        "x",
        "xx",
        "end",
        "align",
        "first",
        "step",
        "reduction",
        "show",
        "mathbf",
        "x",
        "reduces",
        "application",
        "term",
        "lambda",
        "x",
        "x",
        "xx",
        "lambda",
        "x",
        "x",
        "xx",
        "recurring",
        "third",
        "step",
        "thus",
        "mathbf",
        "curious",
        "property",
        "mathbf",
        "x",
        "x",
        "mathbf",
        "x",
        "reduce",
        "common",
        "term",
        "boldsymbol",
        "theta",
        "lambda",
        "x",
        "lambda",
        "f",
        "f",
        "xxf",
        "lambda",
        "x",
        "lambda",
        "f",
        "f",
        "xxf",
        "turing",
        "fixedpoint",
        "combinator",
        "every",
        "lambda",
        "term",
        "x",
        "boldsymbol",
        "theta",
        "x",
        "reduces",
        "x",
        "boldsymbol",
        "theta",
        "x",
        "one",
        "confirm",
        "hand",
        "curry",
        "paradoxical",
        "combinator",
        "mathbf",
        "property",
        "table",
        "notational",
        "convention",
        "employed",
        "entry",
        "notation",
        "reading",
        "comment",
        "mn",
        "application",
        "function",
        "m",
        "argument",
        "n",
        "usually",
        "parenthesis",
        "used",
        "separate",
        "function",
        "argument",
        "like",
        "n",
        "however",
        "lambda",
        "calculus",
        "kindred",
        "subject",
        "parenthesis",
        "used",
        "grouping",
        "symbol",
        "thus",
        "safe",
        "write",
        "function",
        "argument",
        "adjacent",
        "one",
        "pqr",
        "application",
        "function",
        "pq",
        "which",
        "application",
        "function",
        "p",
        "argument",
        "q",
        "to",
        "r",
        "use",
        "parenthesis",
        "separate",
        "function",
        "argument",
        "disambiguate",
        "expression",
        "involve",
        "three",
        "term",
        "pqr",
        "recall",
        "convention",
        "understand",
        "officially",
        "illegal",
        "expression",
        "working",
        "left",
        "right",
        "always",
        "putting",
        "parenthesis",
        "around",
        "adjacent",
        "term",
        "thus",
        "pqr",
        "understood",
        "pq",
        "r",
        "pqrs",
        "pq",
        "r",
        "s",
        "expression",
        "pq",
        "r",
        "disambiguated",
        "convention",
        "identical",
        "pqr",
        "expression",
        "p",
        "qr",
        "also",
        "explicitly",
        "disambiguated",
        "distinct",
        "pqr",
        "application",
        "p",
        "argument",
        "qr",
        "application",
        "function",
        "q",
        "argument",
        "r",
        "lambda",
        "x",
        "lambda",
        "term",
        "bind",
        "variable",
        "x",
        "boldsymbol",
        "body",
        "term",
        "m",
        "official",
        "vocabulary",
        "lambda",
        "calculus",
        "consists",
        "symbol",
        "lambda",
        "left",
        "right",
        "parenthesis",
        "set",
        "variable",
        "assumed",
        "distinct",
        "three",
        "symbol",
        "lambda",
        "lest",
        "syntactic",
        "chaos",
        "alternative",
        "notation",
        "necessary",
        "include",
        "two",
        "kind",
        "grouping",
        "symbol",
        "parenthesis",
        "square",
        "bracket",
        "syntax",
        "parenthesis",
        "square",
        "bracket",
        "alone",
        "would",
        "obviously",
        "suffice",
        "two",
        "kind",
        "bracket",
        "employed",
        "entry",
        "sake",
        "readability",
        "given",
        "two",
        "kind",
        "grouping",
        "symbol",
        "could",
        "economize",
        "omit",
        "parenthesis",
        "abstraction",
        "term",
        "lambda",
        "x",
        "would",
        "written",
        "lambda",
        "x",
        "author",
        "write",
        "lambda",
        "xm",
        "lambda",
        "xcdot",
        "m",
        "full",
        "stop",
        "centered",
        "dot",
        "separating",
        "bound",
        "variable",
        "body",
        "abstraction",
        "term",
        "square",
        "bracket",
        "device",
        "intended",
        "assist",
        "reading",
        "lambda",
        "terms",
        "usually",
        "part",
        "official",
        "syntax",
        "one",
        "see",
        "device",
        "used",
        "earlier",
        "work",
        "logic",
        "principia",
        "mathematica",
        "function",
        "symbol",
        "expression",
        "forall",
        "x",
        "phi",
        "get",
        "u",
        "read",
        "whole",
        "formula",
        "phi",
        "scope",
        "forall",
        "x",
        "author",
        "write",
        "abstraction",
        "term",
        "without",
        "device",
        "separating",
        "bound",
        "variable",
        "body",
        "term",
        "crisply",
        "written",
        "eg",
        "lambda",
        "xx",
        "lambda",
        "yx",
        "practice",
        "without",
        "merit",
        "concise",
        "one",
        "ask",
        "permit",
        "even",
        "simpler",
        "official",
        "syntax",
        "lambda",
        "calculus",
        "practice",
        "flawless",
        "lambda",
        "xyz",
        "bound",
        "variable",
        "x",
        "xy",
        "usually",
        "name",
        "variable",
        "single",
        "letter",
        "theoretically",
        "clearly",
        "sufficient",
        "seems",
        "unduly",
        "restrictive",
        "forbid",
        "practice",
        "giving",
        "longer",
        "name",
        "variable",
        "indeed",
        "construction",
        "arise",
        "naturally",
        "computer",
        "programming",
        "language",
        "sake",
        "uniformity",
        "adopt",
        "square",
        "bracket",
        "notation",
        "entry",
        "incidentally",
        "notation",
        "used",
        "turing",
        "x",
        "lambda",
        "term",
        "obtained",
        "substituting",
        "lambda",
        "term",
        "free",
        "occurrence",
        "x",
        "inside",
        "m",
        "bewildering",
        "array",
        "notation",
        "represent",
        "substitution",
        "found",
        "literature",
        "lambda",
        "calculus",
        "kindred",
        "subject",
        "xa",
        "ax",
        "m_",
        "x",
        "a",
        "m_",
        "x",
        "xa",
        "ldots",
        "notation",
        "use",
        "substitution",
        "seems",
        "personal",
        "matter",
        "entry",
        "use",
        "linear",
        "notation",
        "eschewing",
        "superscript",
        "subscript",
        "practice",
        "representing",
        "substitution",
        "come",
        "computer",
        "science",
        "read",
        "programming",
        "language",
        "assigning",
        "value",
        "variable",
        "square",
        "bracket",
        "employed",
        "write",
        "abstraction",
        "term",
        "square",
        "bracket",
        "employed",
        "write",
        "substitution",
        "officially",
        "part",
        "syntax",
        "lambda",
        "calculus",
        "m",
        "term",
        "x",
        "variable",
        "x",
        "another",
        "term",
        "equiv",
        "n",
        "lambda",
        "terms",
        "m",
        "n",
        "identical",
        "understood",
        "sequence",
        "symbol",
        "m",
        "n",
        "length",
        "corresponding",
        "symbol",
        "sequence",
        "identical",
        "syntactic",
        "identity",
        "relation",
        "equiv",
        "part",
        "official",
        "syntax",
        "lambda",
        "calculus",
        "relation",
        "lambda",
        "terms",
        "belongs",
        "metatheory",
        "lambda",
        "calculus",
        "clearly",
        "rather",
        "strict",
        "notion",
        "equality",
        "lambda",
        "terms",
        "thus",
        "case",
        "x",
        "y",
        "distinct",
        "variable",
        "lambda",
        "x",
        "x",
        "equiv",
        "lambda",
        "even",
        "though",
        "two",
        "term",
        "clearly",
        "behave",
        "way",
        "sense",
        "expression",
        "identity",
        "operation",
        "x",
        "rightarrow",
        "x",
        "later",
        "develop",
        "formal",
        "theory",
        "equality",
        "lambda",
        "terms",
        "aim",
        "capturing",
        "intuitive",
        "equality",
        "lambda",
        "x",
        "x",
        "lambda"
    ]
}