{
    "main_text": "Technical development || Reductions and \\(\\textbf{NP}\\)-completeness\n3.3 Reductions and \\(\\textbf{NP}\\)-completeness\nHaving now introduced some of the major classes studied in complexity theory, we next turn to the question of their internal structure. This can be studied using the notions of the reducibility of one problem to another and of a problem being complete for a class. Informally speaking, a problem \\(X\\) is said to be reducible to another problem \\(Y\\) just in case a method for solving \\(Y\\) would also yield a method for solving \\(X\\). The reducibility of \\(X\\) to \\(Y\\) may thus be understood as showing that solving \\(Y\\) is at least as difficult as solving \\(X\\). A problem \\(X\\) is said to be complete for a complexity class \\(\\textbf{C}\\) just in case \\(X\\) is a member of \\(\\textbf{C}\\) and all problems in \\(\\textbf{C}\\) are reducible to \\(X\\). The completeness of \\(X\\) for \\(\\textbf{C}\\) may thus be understood as demonstrating that \\(X\\) is representative of the most difficult problems in \\(\\textbf{C}\\).\nThe concepts of reduction and completeness were originally introduced in computability theory. Therein a number of different definitions of reduction are studied, of which many-one and Turing reducibility are the most familiar (see, e.g., Rogers 1987). Analogues of both of these have been studied in complexity theory under the names polynomial time many-one reducibility \u2013 also known as Karp reducibility (Karp 1972) \u2013 and polynomial time Turing reducibility \u2013 also known as Cook reducibility (Cook 1971). For simplicity we will consider only the former \n here.[15]\n\nDefinition 3.1  \nFor languages \\(X, Y \\subseteq \\{0,1\\}^*\\), \\(X\\) is said to be polynomial time many-one reducible to \\(Y\\) just in case there exists a polynomial time computable function \\(f(x)\\) such that\n\n\\[\n\\text{for all } x \\in \\{0,1\\}^*, x \\in X \\text{ if and only if } f(x) \\in Y\n\\]\n\nIn this case we write \\(X \\leq_P Y\\) and say that \\(f(x)\\) is a polynomial time reduction of \\(X\\) to \\(Y\\).\n\nNote that if \\(X\\) is polynomial time reducible to \\(Y\\) via \\(f(x)\\), then an efficient algorithm \\(A\\) for deciding membership in \\(Y\\) would also yield an efficient algorithm for deciding membership in \\(X\\) as follows: (i) on input \\(x\\), compute \\(f(x)\\); (ii) use \\(A\\) to decide if \\(f(x) \\in Y\\), accepting if so, and rejecting if not.\nIt is easy to see that \\(\\leq_P\\) is a reflexive relation. Since the composition of two polynomial time computable functions is also polynomial time computable, \\(\\leq_P\\) is also transitive. We additionally say that a class \\(\\textbf{C}\\) is closed under \\(\\leq_P\\) if \\(Y \\in \\textbf{C}\\) and \\(X \\leq_P Y\\) implies \\(X \\in \\textbf{C}\\). It is also easy to see that the classes \\(\\textbf{P}, \\textbf{NP}, \\textbf{PSPACE},\\textbf{EXP}, \\textbf{NEXP}\\) and \\(\\textbf{EXPSPACE}\\) are closed under this relation.[16] A problem \\(Y\\) is said to be hard for a class \\(\\textbf{C}\\) if \\(X \\leq_P Y\\) for all \\(X \\in \\textbf{C}\\). Finally \\(Y\\) is said to be complete for \\(\\textbf{C}\\) if it is both hard for \\(\\textbf{C}\\) and also a member of \\(\\textbf{C}\\).\nSince the mid-1970s a major focus of research in complexity theory has been the study of problems which are complete for the class \\(\\textbf{NP}\\) \u2013 i.e. so-called NP-complete problems. A canonical example of such a problem is a time-bounded variant of the Halting Problem for \\(\\mathfrak{N}\\) (whose unbounded deterministic version is also the canonical Turing- and many-one complete problem in computability theory):\n\\(\\sc{BHP}\\ \\) Given the index of a\nnon-deterministic Turing machine \\(N \\in \\mathfrak{N}\\), an input\n\\(x\\), and a time bound \\(t\\) represented as a string \\(1^t\\), does\n\\(N\\) accept \\(x\\) in \\(t\\) steps?\nIt is evident that \\(\\sc{BHP}\\) is in \\(\\textbf{NP}\\) since on input \\(\\langle \\ulcorner N \\urcorner, x,1^t \\rangle\\) an efficient universal non-deterministic machine can determine if \\(N\\) accepts \\(x\\) in time polynomial in \\(\\lvert x\\rvert\\) and \\(t\\). To see that \\(\\sc{BHP}\\) is hard for \\(\\textbf{NP}\\), observe that if \\(Y \\in \\textbf{NP}\\), then \\(Y\\) corresponds to the set of strings accepted by some non-deterministic machine \\(N \\in \\mathfrak{N}\\) with polynomial running time \\(p(n)\\). If we now define \\(f(x) = \\langle \\ulcorner N \\urcorner,x,1^{p(\\lvert x\\rvert)} \\rangle\\), then it is easy to see that \\(f(x)\\) is a polynomial time reduction of \\(Y\\) to \\(\\sc{BHP}\\).\nSince \\(\\sc{BHP}\\) is \\(\\textbf{NP}\\)-complete, it follows from the closure of \\(\\textbf{NP}\\) under \\(\\leq_P\\) that this problem is in \\(\\textbf{P}\\) only if \\(\\textbf{P} = \\textbf{NP}\\). Since this is widely thought not to be the case, this provides some evidence that \\(\\sc{BHP}\\) is an intrinsically difficult computational problem. But since \\(\\sc{BHP}\\) is closely related to the model of computation \\(\\mathfrak{N}\\) itself this may appear to be of little practical significance. It is thus of considerably more interest that a wide range of seemingly unrelated problems originating in many different areas of mathematics are also \\(\\textbf{NP}\\)-complete.\nOne means of demonstrating that a given problem \\(X\\) is \\(\\textbf{NP}\\)-hard is to show that \\(\\sc{BHP}\\) may be reduced to it. But since most mathematically natural problems bear no relationship to Turing machines, it is by no means obvious that such reductions exist. This problem was circumvented at the beginning of the study of \\(\\textbf{NP}\\)-completeness by Cook (1971) and Levin (1973) who independently demonstrated the following:[17]\n\nTheorem 3.4   \\(\\sc{SAT}\\) is \\(\\textbf{NP}\\)-complete.\nWe have already seen that \\(\\sc{SAT}\\) is in \\(\\textbf{NP}\\). In order to demonstrate Theorem 3.4 it thus suffices to show that all problems \\(X \\in \\textbf{NP}\\) are polynomial time reducible to \\(\\sc{SAT}\\). Supposing that \\(X \\in \\textbf{NP}\\) there must again be a non-deterministic Turing machine \\(N = \\langle Q,\\Sigma,\\Delta,s \\rangle\\) accepting \\(X\\) with polynomial time complexity \\(p(n)\\). The proof of Theorem 3.4 then proceeds by showing that for all inputs \\(x\\) of length \\(n\\) for \\(N\\), we can construct a propositional formula \\(\\phi_{N,x}\\) which is satisfiable if and only if \\(N\\) accepts \\(x\\) within \\(p(n)\\) steps.[18]\nAlthough \\(\\sc{SAT}\\) is still a problem about a particular system of logic, it is of a more combinatorial nature than \\(\\sc{BHP}\\). In light of this, Theorem 3.4 opened the door to showing a great many other problems to be \\(\\textbf{NP}\\)-complete by showing that \\(\\sc{SAT}\\) may be efficiently reduced to them. For instance, the problems \\(\\sc{TSP}\\)  and \\(\\sc{INTEGER}\\ \\sc{PROGRAMMING}\\ \\) introduced above are both \\(\\textbf{NP}\\)-complete.  Here are some other examples of \\(\\textbf{NP}\\)-complete problems:\n\\(3\\text{-}\\sc{SAT}\\ \\) Given a propositional\nformula \\(\\phi\\) in 3-conjunctive normal form (\\(3\\text{-}\\sc{CNF}\\)) \u2013\ni.e. \\(\\phi \\) is the conjunction of disjunctive clauses containing\nexactly three negated or unnegated propositional variables \u2013 does\nthere exist a satisfying assignment for \\(\\phi\\)?\n\\(\\sc{HAMILTONIAN}\\ \\sc{PATH}\\ \\) Given a finite graph \\(G =\n\\langle V,E \\rangle\\), does \\(G\\) contain a Hamiltonian Path (i.e. a path which visits each vertex exactly once)?\n\\(\\sc{INDEPENDENT}\\ \\sc{SET}\\ \\) Given a graph \\(G =\n\\langle V,E \\rangle\\) and a natural number \\(k \\leq \\lvert V\\rvert\\),\ndoes there exist a set of vertices \\(V' \\subseteq V\\) of cardinality\n\\(\\geq k\\) such that no two vertices in \\(V'\\) are connected by an\nedge?\n\\(\\sc{VERTEX}\\ \\sc{COVER}\\ \\) Given a graph \\(G =\n\\langle V,E \\rangle\\) and a natural number \\(k \\leq \\lvert V\\rvert\\),\ndoes there exist a set of vertices \\(V' \\subseteq V\\) of cardinality \\(\\leq k\\) such that for each edge \\(\\langle u,v \\rangle \\in E\\), at least one of \\(u\\) or\n\\(v\\) is a member of \\(V'\\)?\n\\(\\sc{SET}\\ \\sc{COVERING}\\ \\) Given a finite set \\(U\\),\na finite family \\(\\mathcal{S}\\) of subsets of \\(U\\) and a natural number\n\\(k\\), does there exist a subfamily \\(\\mathcal{S}' \\subseteq\n\\mathcal{S}\\) of cardinality \\(\\leq k\\) such that \\(\\bigcup\n\\mathcal{S}' = U\\)?\nThe problem \\(3\\text{-}\\sc{SAT}\\) was shown to be \\(\\textbf{NP}\\)-complete in Cook\u2019s original paper (Cook 1971).[19] The other examples just cited are taken from a list of 21 problems (most of which had previously been identified in other contexts) which were shown by Karp (1972) to be \\(\\textbf{NP}\\)-complete. The reductions required to show the completeness of these problems typically require the construction of what has come to be known as a gadget \u2013 i.e. a constituent of an instance of one problem which can be used to simulate a constituent of an instance of a different problem.  For instance, in order to see how \\(3\\text{-}\\sc{SAT}\\) may be reduced to \\(\\sc{INDEPENDENT}\\ \\sc{SET}\\), first observe that a \\(3\\text{-}\\sc{CNF}\\) formula has the form\n\n\\[\n(\\ell^1_1 \\ \\vee \\ \\ell^1_2 \\ \\vee \\ \\ell^2_3) \\ \\wedge \\ (\\ell^2_1 \\ \\vee \\ \\ell^2_2 \\ \\vee \\ \\ell^2_3) \\ \\wedge \\ \\ldots \\  \\wedge \\ (\\ell^n_1 \\ \\vee \\ \\ell^n_2 \\ \\vee \\ \\ell^n_3)\n\\]\n\nwhere each \\(\\ell^i_j\\) is a literal \u2013 i.e. \\(\\ell^i_j = p_k\\) or \\(\\ell^i_j = \\neg p_k\\) for some propositional variable \\(p_k\\). A formula \\(\\phi\\) of this form is satisfiable just in case there exists a valuation satisfying at least one of the literals \\(\\ell^i_1, \\ell^i_2\\) or \\(\\ell^i_3\\) for all \\(1 \\leq i \\leq n\\). On the other hand, suppose that we consider the family of graphs \\(G\\) which can be partitioned into \\(n \\) disjoint triangles in the manner depicted in Figure 3. It is easy to see that any independent set of size \\(n\\) in such a graph must  contain exactly one vertex from each triangle in \\(G\\). This in turn suggests the idea of using a graph of this form as a gadget for representing the clauses of a \\(3\\text{-}\\sc{CNF}\\) formula.\n\n\nFigure 3. The graph \\(G_{\\phi}\\) for the formula \\((p_1 \\vee p_2 \\vee p_3) \\wedge (\\neg p_1 \\vee p_2 \\vee \\neg p_3) \\wedge (p_1 \\vee \\neg p_2 \\vee \\neg p_3)\\).\n\nA reduction of \\(3\\text{-}\\sc{SAT}\\) to \\(\\sc{INDEPENDENT}\\ \\sc{SET}\\) can now be described as follows:\n\n\nLet \\(\\phi\\) be a \\(3\\text{-}\\sc{CNF}\\) formula consisting of \\(n\\) clauses as depicted above.\n\nWe construct a graph \\(G_{\\phi} = \\langle V,E \\rangle\\) consisting of \\(n\\)-triangles \\(T_1,\\ldots,T_n\\) such that the nodes of \\(T_i\\) are respectively labeled with the literals \\(\\ell^i_1, \\ell^i_2,\\ell^i_3\\) comprising the \\(i\\)th clause of \\(\\phi\\). Additionally, \\(G\\) contains an edge connecting nodes in each triangle corresponding to literals of opposite sign as depicted in Figure 3.[20]\n\nNow define a mapping from instances of \\(3\\text{-}\\sc{SAT}\\) to instances of \\(\\sc{INDEPENDENT}\\ \\sc{SET}\\) as \\(f(\\phi) = \\langle G_{\\phi},n \\rangle\\). As \\(G_\\phi\\) contains \\(3n\\) vertices (and hence at most \\(O(n^2)\\) edges), it is evident that \\(f(x)\\) can be computed in polynomial time. To see that \\(f(\\phi)\\) is a reduction of \\(3\\text{-}\\sc{SAT}\\) to \\(\\sc{INDEPENDENT}\\ \\sc{SET}\\), first suppose that \\(v\\) is a valuation such that \\(\\llbracket \\phi \\rrbracket_v = 1\\).  Then we must have \\(\\llbracket \\ell^i_j \\rrbracket_v = 1\\) for at least one literal in every clause of \\(\\phi\\). Picking the nodes corresponding to this literal in each triangle \\(T_i\\) in \\(\\phi\\) thus yields an independent set of size \\(n\\) in \\(G_{\\phi}\\). Conversely, suppose that \\(V' \\subseteq V\\) is an independent set of size \\(n\\) in \\(G_{\\phi}\\). By construction, \\(V'\\) contains exactly one vertex in each of the \\(T_i\\). And since there is an edge between each pair of nodes labeled with oppositely signed literals in different triangles in \\(G_{\\phi}\\), \\(V'\\) cannot contain any contradictory literals. A satisfying valuation \\(v\\) for \\(\\phi\\) can be constructed by setting \\(v(p_i) = 1\\) if a node labeled with \\(p_i\\) appears in \\(V'\\) and \\(v(p_i) = 0\\) otherwise.\nSince \\(\\leq_P\\) is transitive, composing polynomial time reductions together provides another means of showing that various problems are \\(\\textbf{NP}\\)-complete. For instance, the completeness of \\(\\sc{TSP}\\) was originally demonstrated by Karp (1972) via the series of reductions\n\n\\[\n\\sc{SAT} \\leq_P 3\\text{-}\\sc{SAT} \\leq_P \\sc{INDEPENDENT}\\ \\sc{SET} \\leq_P \\sc{VERTEX}\\ \\sc{COVER} \\leq_P \\sc{HAMILTONIAN}\\ \\sc{PATH} \\leq_P \\sc{TSP}.\n\\] \n\n\n\nThus although the problems listed above are seemingly unrelated in the sense that they concern different kinds of mathematical objects \u2013 e.g. logical formulas, graphs, systems of linear equations, etc. \u2013 the fact that they are \\(\\textbf{NP}\\)-complete can be taken to demonstrate that they are all computationally universal for \\(\\textbf{NP}\\) in the same manner as \\(\\sc{BHP}\\).[21]\nIt also follows from the transitivity of \\(\\leq_P\\) that the existence of a polynomial time algorithm for even one \\(\\textbf{NP}\\)-complete problem would entail the existence of polynomial time algorithms for all problems in \\(\\textbf{NP}\\). The existence of such an algorithm would thus run strongly counter to expectation in virtue of the extensive effort which has been devoted to finding efficient solutions for particular \\(\\textbf{NP}\\)-complete problems such as \\(\\sc{INTEGER}\\ \\sc{PROGRAMMING}\\) or \\(\\sc{TSP}\\). Such problems are thus standardly regarded as constituting the most difficult problems in \\(\\textbf{NP}\\).\nAs long as Open Question 1 is answered in the positive \u2013 i.e. \\(\\textbf{P} \\subsetneq \\textbf{NP}\\) \u2013 \\(\\textbf{NP}\\)-complete problems thus fit the description of effectively decidable problems which are intrinsically difficult in the sense described in Section 1 .  As we are now about to see, however, they are by no means the hardest problems studied by complexity theorists. Nor is complexity theory incapable of making further distinctions about the difficulty of problems which lie inside \\(\\textbf{P}\\) or between \\(\\textbf{P}\\) and \\(\\textbf{NP}\\) (presuming the latter class is non-empty).\n",
    "section_title": "3.3 Reductions and \\(\\textbf{NP}\\)-completeness",
    "entry_title": "Computational Complexity Theory",
    "hierarchy_title": "Computational Complexity Theory || Technical development || Reductions and \\(\\textbf{NP}\\)-completeness",
    "tokenized_text": [
        "technical",
        "development",
        "reduction",
        "textbf",
        "np",
        "completeness",
        "reduction",
        "textbf",
        "np",
        "completeness",
        "introduced",
        "major",
        "class",
        "studied",
        "complexity",
        "theory",
        "next",
        "turn",
        "question",
        "internal",
        "structure",
        "studied",
        "using",
        "notion",
        "reducibility",
        "one",
        "problem",
        "another",
        "problem",
        "complete",
        "class",
        "informally",
        "speaking",
        "problem",
        "x",
        "said",
        "reducible",
        "another",
        "problem",
        "y",
        "case",
        "method",
        "solving",
        "y",
        "would",
        "also",
        "yield",
        "method",
        "solving",
        "x",
        "reducibility",
        "x",
        "y",
        "may",
        "thus",
        "understood",
        "showing",
        "solving",
        "y",
        "least",
        "difficult",
        "solving",
        "x",
        "problem",
        "x",
        "said",
        "complete",
        "complexity",
        "class",
        "textbf",
        "c",
        "case",
        "x",
        "member",
        "textbf",
        "c",
        "problem",
        "textbf",
        "c",
        "reducible",
        "x",
        "completeness",
        "x",
        "textbf",
        "c",
        "may",
        "thus",
        "understood",
        "demonstrating",
        "x",
        "representative",
        "difficult",
        "problem",
        "textbf",
        "c",
        "concept",
        "reduction",
        "completeness",
        "originally",
        "introduced",
        "computability",
        "theory",
        "therein",
        "number",
        "different",
        "definition",
        "reduction",
        "studied",
        "manyone",
        "turing",
        "reducibility",
        "familiar",
        "see",
        "eg",
        "rogers",
        "analogue",
        "studied",
        "complexity",
        "theory",
        "name",
        "polynomial",
        "time",
        "manyone",
        "reducibility",
        "also",
        "known",
        "karp",
        "reducibility",
        "karp",
        "polynomial",
        "time",
        "turing",
        "reducibility",
        "also",
        "known",
        "cook",
        "reducibility",
        "cook",
        "simplicity",
        "consider",
        "former",
        "definition",
        "language",
        "x",
        "subseteq",
        "x",
        "said",
        "polynomial",
        "time",
        "manyone",
        "reducible",
        "y",
        "case",
        "exists",
        "polynomial",
        "time",
        "computable",
        "function",
        "f",
        "x",
        "text",
        "x",
        "in",
        "x",
        "in",
        "x",
        "text",
        "f",
        "x",
        "in",
        "case",
        "write",
        "x",
        "leq_p",
        "y",
        "say",
        "f",
        "x",
        "polynomial",
        "time",
        "reduction",
        "x",
        "y",
        "note",
        "x",
        "polynomial",
        "time",
        "reducible",
        "y",
        "via",
        "f",
        "x",
        "efficient",
        "algorithm",
        "a",
        "deciding",
        "membership",
        "y",
        "would",
        "also",
        "yield",
        "efficient",
        "algorithm",
        "deciding",
        "membership",
        "x",
        "follows",
        "input",
        "x",
        "compute",
        "f",
        "x",
        "ii",
        "use",
        "a",
        "decide",
        "f",
        "x",
        "in",
        "y",
        "accepting",
        "rejecting",
        "easy",
        "see",
        "leq_p",
        "reflexive",
        "relation",
        "since",
        "composition",
        "two",
        "polynomial",
        "time",
        "computable",
        "function",
        "also",
        "polynomial",
        "time",
        "computable",
        "leq_p",
        "also",
        "transitive",
        "additionally",
        "say",
        "class",
        "textbf",
        "c",
        "closed",
        "leq_p",
        "in",
        "textbf",
        "c",
        "x",
        "leq_p",
        "y",
        "implies",
        "x",
        "in",
        "textbf",
        "c",
        "also",
        "easy",
        "see",
        "class",
        "textbf",
        "p",
        "textbf",
        "np",
        "textbf",
        "pspace",
        "textbf",
        "exp",
        "textbf",
        "nexp",
        "textbf",
        "expspace",
        "closed",
        "relation",
        "problem",
        "y",
        "said",
        "hard",
        "class",
        "textbf",
        "c",
        "x",
        "leq_p",
        "y",
        "x",
        "in",
        "textbf",
        "c",
        "finally",
        "y",
        "said",
        "complete",
        "textbf",
        "c",
        "hard",
        "textbf",
        "c",
        "also",
        "member",
        "textbf",
        "c",
        "since",
        "mids",
        "major",
        "focus",
        "research",
        "complexity",
        "theory",
        "study",
        "problem",
        "complete",
        "class",
        "textbf",
        "np",
        "ie",
        "socalled",
        "npcomplete",
        "problem",
        "canonical",
        "example",
        "problem",
        "timebounded",
        "variant",
        "halting",
        "problem",
        "mathfrak",
        "n",
        "whose",
        "unbounded",
        "deterministic",
        "version",
        "also",
        "canonical",
        "turing",
        "manyone",
        "complete",
        "problem",
        "computability",
        "theory",
        "sc",
        "bhp",
        "given",
        "index",
        "nondeterministic",
        "turing",
        "machine",
        "n",
        "in",
        "mathfrak",
        "n",
        "input",
        "x",
        "time",
        "bound",
        "t",
        "represented",
        "string",
        "t",
        "n",
        "accept",
        "x",
        "t",
        "step",
        "evident",
        "sc",
        "bhp",
        "textbf",
        "np",
        "since",
        "input",
        "langle",
        "ulcorner",
        "n",
        "urcorner",
        "xt",
        "rangle",
        "efficient",
        "universal",
        "nondeterministic",
        "machine",
        "determine",
        "n",
        "accepts",
        "x",
        "time",
        "polynomial",
        "lvert",
        "xrvert",
        "t",
        "see",
        "sc",
        "bhp",
        "hard",
        "textbf",
        "np",
        "observe",
        "in",
        "textbf",
        "np",
        "y",
        "corresponds",
        "set",
        "string",
        "accepted",
        "nondeterministic",
        "machine",
        "n",
        "in",
        "mathfrak",
        "n",
        "polynomial",
        "running",
        "time",
        "p",
        "n",
        "define",
        "f",
        "x",
        "langle",
        "ulcorner",
        "n",
        "urcorner",
        "x",
        "p",
        "lvert",
        "xrvert",
        "rangle",
        "easy",
        "see",
        "f",
        "x",
        "polynomial",
        "time",
        "reduction",
        "y",
        "sc",
        "bhp",
        "since",
        "sc",
        "bhp",
        "textbf",
        "np",
        "complete",
        "follows",
        "closure",
        "textbf",
        "np",
        "leq_p",
        "problem",
        "textbf",
        "p",
        "textbf",
        "p",
        "textbf",
        "np",
        "since",
        "widely",
        "thought",
        "case",
        "provides",
        "evidence",
        "sc",
        "bhp",
        "intrinsically",
        "difficult",
        "computational",
        "problem",
        "since",
        "sc",
        "bhp",
        "closely",
        "related",
        "model",
        "computation",
        "mathfrak",
        "n",
        "may",
        "appear",
        "little",
        "practical",
        "significance",
        "thus",
        "considerably",
        "interest",
        "wide",
        "range",
        "seemingly",
        "unrelated",
        "problem",
        "originating",
        "many",
        "different",
        "area",
        "mathematics",
        "also",
        "textbf",
        "np",
        "complete",
        "one",
        "mean",
        "demonstrating",
        "given",
        "problem",
        "x",
        "textbf",
        "np",
        "hard",
        "show",
        "sc",
        "bhp",
        "may",
        "reduced",
        "since",
        "mathematically",
        "natural",
        "problem",
        "bear",
        "relationship",
        "turing",
        "machine",
        "mean",
        "obvious",
        "reduction",
        "exist",
        "problem",
        "circumvented",
        "beginning",
        "study",
        "textbf",
        "np",
        "completeness",
        "cook",
        "levin",
        "independently",
        "demonstrated",
        "following",
        "theorem",
        "sc",
        "sat",
        "textbf",
        "np",
        "complete",
        "already",
        "seen",
        "sc",
        "sat",
        "textbf",
        "np",
        "order",
        "demonstrate",
        "theorem",
        "thus",
        "suffices",
        "show",
        "problem",
        "x",
        "in",
        "textbf",
        "np",
        "polynomial",
        "time",
        "reducible",
        "sc",
        "sat",
        "supposing",
        "x",
        "in",
        "textbf",
        "np",
        "must",
        "nondeterministic",
        "turing",
        "machine",
        "n",
        "langle",
        "q",
        "sigma",
        "delta",
        "rangle",
        "accepting",
        "x",
        "polynomial",
        "time",
        "complexity",
        "p",
        "n",
        "proof",
        "theorem",
        "proceeds",
        "showing",
        "input",
        "x",
        "length",
        "n",
        "n",
        "construct",
        "propositional",
        "formula",
        "phi_",
        "n",
        "x",
        "satisfiable",
        "n",
        "accepts",
        "x",
        "within",
        "p",
        "n",
        "step",
        "although",
        "sc",
        "sat",
        "still",
        "problem",
        "particular",
        "system",
        "logic",
        "combinatorial",
        "nature",
        "sc",
        "bhp",
        "light",
        "theorem",
        "opened",
        "door",
        "showing",
        "great",
        "many",
        "problem",
        "textbf",
        "np",
        "complete",
        "showing",
        "sc",
        "sat",
        "may",
        "efficiently",
        "reduced",
        "instance",
        "problem",
        "sc",
        "tsp",
        "sc",
        "integer",
        "sc",
        "programming",
        "introduced",
        "textbf",
        "np",
        "complete",
        "example",
        "textbf",
        "np",
        "complete",
        "problem",
        "text",
        "sc",
        "sat",
        "given",
        "propositional",
        "formula",
        "phi",
        "conjunctive",
        "normal",
        "form",
        "text",
        "sc",
        "cnf",
        "ie",
        "phi",
        "conjunction",
        "disjunctive",
        "clause",
        "containing",
        "exactly",
        "three",
        "negated",
        "unnegated",
        "propositional",
        "variable",
        "exist",
        "satisfying",
        "assignment",
        "phi",
        "sc",
        "hamiltonian",
        "sc",
        "path",
        "given",
        "finite",
        "graph",
        "g",
        "langle",
        "v",
        "e",
        "rangle",
        "g",
        "contain",
        "hamiltonian",
        "path",
        "ie",
        "path",
        "visit",
        "vertex",
        "exactly",
        "sc",
        "independent",
        "sc",
        "set",
        "given",
        "graph",
        "g",
        "langle",
        "v",
        "e",
        "rangle",
        "natural",
        "number",
        "k",
        "leq",
        "lvert",
        "vrvert",
        "exist",
        "set",
        "vertex",
        "v",
        "subseteq",
        "v",
        "cardinality",
        "geq",
        "k",
        "two",
        "vertex",
        "v",
        "connected",
        "edge",
        "sc",
        "vertex",
        "sc",
        "cover",
        "given",
        "graph",
        "g",
        "langle",
        "v",
        "e",
        "rangle",
        "natural",
        "number",
        "k",
        "leq",
        "lvert",
        "vrvert",
        "exist",
        "set",
        "vertex",
        "v",
        "subseteq",
        "v",
        "cardinality",
        "leq",
        "k",
        "edge",
        "langle",
        "u",
        "v",
        "rangle",
        "in",
        "e",
        "least",
        "one",
        "u",
        "v",
        "member",
        "v",
        "sc",
        "set",
        "sc",
        "covering",
        "given",
        "finite",
        "set",
        "u",
        "finite",
        "family",
        "mathcal",
        "subset",
        "u",
        "natural",
        "number",
        "k",
        "exist",
        "subfamily",
        "mathcal",
        "subseteq",
        "mathcal",
        "cardinality",
        "leq",
        "k",
        "bigcup",
        "mathcal",
        "u",
        "problem",
        "text",
        "sc",
        "sat",
        "shown",
        "textbf",
        "np",
        "complete",
        "cook",
        "original",
        "paper",
        "cook",
        "example",
        "cited",
        "taken",
        "list",
        "problem",
        "previously",
        "identified",
        "context",
        "shown",
        "karp",
        "textbf",
        "np",
        "complete",
        "reduction",
        "required",
        "show",
        "completeness",
        "problem",
        "typically",
        "require",
        "construction",
        "come",
        "known",
        "gadget",
        "ie",
        "constituent",
        "instance",
        "one",
        "problem",
        "used",
        "simulate",
        "constituent",
        "instance",
        "different",
        "problem",
        "instance",
        "order",
        "see",
        "text",
        "sc",
        "sat",
        "may",
        "reduced",
        "sc",
        "independent",
        "sc",
        "set",
        "first",
        "observe",
        "text",
        "sc",
        "cnf",
        "formula",
        "form",
        "ell_",
        "vee",
        "ell_",
        "vee",
        "ell_",
        "wedge",
        "ell_",
        "vee",
        "ell_",
        "vee",
        "ell_",
        "wedge",
        "ldots",
        "wedge",
        "elln_",
        "vee",
        "elln_",
        "vee",
        "elln_",
        "elli_j",
        "literal",
        "ie",
        "elli_j",
        "p_k",
        "elli_j",
        "neg",
        "p_k",
        "propositional",
        "variable",
        "p_k",
        "formula",
        "phi",
        "form",
        "satisfiable",
        "case",
        "exists",
        "valuation",
        "satisfying",
        "least",
        "one",
        "literal",
        "elli_",
        "elli_",
        "elli_",
        "leq",
        "leq",
        "n",
        "hand",
        "suppose",
        "consider",
        "family",
        "graph",
        "g",
        "partitioned",
        "n",
        "disjoint",
        "triangle",
        "manner",
        "depicted",
        "figure",
        "easy",
        "see",
        "independent",
        "set",
        "size",
        "n",
        "graph",
        "must",
        "contain",
        "exactly",
        "one",
        "vertex",
        "triangle",
        "g",
        "turn",
        "suggests",
        "idea",
        "using",
        "graph",
        "form",
        "gadget",
        "representing",
        "clause",
        "text",
        "sc",
        "cnf",
        "formula",
        "figure",
        "graph",
        "g_",
        "phi",
        "formula",
        "p_",
        "vee",
        "p_",
        "vee",
        "p_",
        "wedge",
        "neg",
        "p_",
        "vee",
        "p_",
        "vee",
        "neg",
        "p_",
        "wedge",
        "p_",
        "vee",
        "neg",
        "p_",
        "vee",
        "neg",
        "p_",
        "reduction",
        "text",
        "sc",
        "sat",
        "sc",
        "independent",
        "sc",
        "set",
        "described",
        "follows",
        "let",
        "phi",
        "text",
        "sc",
        "cnf",
        "formula",
        "consisting",
        "n",
        "clause",
        "depicted",
        "construct",
        "graph",
        "g_",
        "phi",
        "langle",
        "v",
        "e",
        "rangle",
        "consisting",
        "n",
        "triangles",
        "t_",
        "ldots",
        "t_n",
        "node",
        "t_i",
        "respectively",
        "labeled",
        "literal",
        "elli_",
        "elli_",
        "elli_",
        "comprising",
        "i",
        "th",
        "clause",
        "phi",
        "additionally",
        "g",
        "contains",
        "edge",
        "connecting",
        "node",
        "triangle",
        "corresponding",
        "literal",
        "opposite",
        "sign",
        "depicted",
        "figure",
        "define",
        "mapping",
        "instance",
        "text",
        "sc",
        "sat",
        "instance",
        "sc",
        "independent",
        "sc",
        "set",
        "f",
        "phi",
        "langle",
        "g_",
        "phi",
        "n",
        "rangle",
        "g_phi",
        "contains",
        "n",
        "vertex",
        "hence",
        "n",
        "edge",
        "evident",
        "f",
        "x",
        "computed",
        "polynomial",
        "time",
        "see",
        "f",
        "phi",
        "reduction",
        "text",
        "sc",
        "sat",
        "sc",
        "independent",
        "sc",
        "set",
        "first",
        "suppose",
        "v",
        "valuation",
        "llbracket",
        "phi",
        "rrbracket_v",
        "must",
        "llbracket",
        "elli_j",
        "rrbracket_v",
        "least",
        "one",
        "literal",
        "every",
        "clause",
        "phi",
        "picking",
        "node",
        "corresponding",
        "literal",
        "triangle",
        "t_i",
        "phi",
        "thus",
        "yield",
        "independent",
        "set",
        "size",
        "n",
        "g_",
        "phi",
        "conversely",
        "suppose",
        "v",
        "subseteq",
        "v",
        "independent",
        "set",
        "size",
        "n",
        "g_",
        "phi",
        "construction",
        "v",
        "contains",
        "exactly",
        "one",
        "vertex",
        "t_i",
        "since",
        "edge",
        "pair",
        "node",
        "labeled",
        "oppositely",
        "signed",
        "literal",
        "different",
        "triangle",
        "g_",
        "phi",
        "v",
        "contain",
        "contradictory",
        "literal",
        "satisfying",
        "valuation",
        "v",
        "phi",
        "constructed",
        "setting",
        "v",
        "p_i",
        "node",
        "labeled",
        "p_i",
        "appears",
        "v",
        "v",
        "p_i",
        "otherwise",
        "since",
        "leq_p",
        "transitive",
        "composing",
        "polynomial",
        "time",
        "reduction",
        "together",
        "provides",
        "another",
        "mean",
        "showing",
        "various",
        "problem",
        "textbf",
        "np",
        "complete",
        "instance",
        "completeness",
        "sc",
        "tsp",
        "originally",
        "demonstrated",
        "karp",
        "via",
        "series",
        "reduction",
        "sc",
        "sat",
        "leq_p",
        "text",
        "sc",
        "sat",
        "leq_p",
        "sc",
        "independent",
        "sc",
        "set",
        "leq_p",
        "sc",
        "vertex",
        "sc",
        "cover",
        "leq_p",
        "sc",
        "hamiltonian",
        "sc",
        "path",
        "leq_p",
        "sc",
        "tsp",
        "thus",
        "although",
        "problem",
        "listed",
        "seemingly",
        "unrelated",
        "sense",
        "concern",
        "different",
        "kind",
        "mathematical",
        "object",
        "eg",
        "logical",
        "formula",
        "graph",
        "system",
        "linear",
        "equation",
        "etc",
        "fact",
        "textbf",
        "np",
        "complete",
        "taken",
        "demonstrate",
        "computationally",
        "universal",
        "textbf",
        "np",
        "manner",
        "sc",
        "bhp",
        "also",
        "follows",
        "transitivity",
        "leq_p",
        "existence",
        "polynomial",
        "time",
        "algorithm",
        "even",
        "one",
        "textbf",
        "np",
        "complete",
        "problem",
        "would",
        "entail",
        "existence",
        "polynomial",
        "time",
        "algorithm",
        "problem",
        "textbf",
        "np",
        "existence",
        "algorithm",
        "would",
        "thus",
        "run",
        "strongly",
        "counter",
        "expectation",
        "virtue",
        "extensive",
        "effort",
        "devoted",
        "finding",
        "efficient",
        "solution",
        "particular",
        "textbf",
        "np",
        "complete",
        "problem",
        "sc",
        "integer",
        "sc",
        "programming",
        "sc",
        "tsp",
        "problem",
        "thus",
        "standardly",
        "regarded",
        "constituting",
        "difficult",
        "problem",
        "textbf",
        "np",
        "long",
        "open",
        "question",
        "answered",
        "positive",
        "ie",
        "textbf",
        "p",
        "subsetneq",
        "textbf",
        "np",
        "textbf",
        "np",
        "complete",
        "problem",
        "thus",
        "fit",
        "description",
        "effectively",
        "decidable",
        "problem",
        "intrinsically",
        "difficult",
        "sense",
        "described",
        "section",
        "see",
        "however",
        "mean",
        "hardest",
        "problem",
        "studied",
        "complexity",
        "theorist",
        "complexity",
        "theory",
        "incapable",
        "making",
        "distinction",
        "difficulty",
        "problem",
        "lie",
        "inside",
        "textbf",
        "p",
        "textbf",
        "p",
        "textbf",
        "np",
        "presuming",
        "latter",
        "class",
        "nonempty"
    ]
}