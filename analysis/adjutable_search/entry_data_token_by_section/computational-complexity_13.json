{
    "main_text": "Connections to logic and philosophy || Proof complexity\n4.3 Proof complexity\nWe have seen that the satisfiability and validity problems for propositional logic are respectively complete for \\(\\textbf{NP}\\) and \\(\\textbf{coNP}\\). Although these problems are characterized in terms of the semantics for propositional logic, certain questions about its proof theory may also be addressed using techniques from complexity theory. By a proof system \\(\\mathcal{P}\\) for propositional logic we understand a definition of the symbol \\(\\vdash_{\\mathcal{P}}\\) which characterizes what it means for a formula \\(\\phi\\) to be derivable from a given set of axioms and rules. We write \\(\\vdash_{\\mathcal{P}} \\phi\\) just in case there is a derivation \\(\\mathcal{D}\\) (e.g. a finite tree or sequence of formulas) with \\(\\phi\\) as its conclusion in the system \\(\\mathcal{P}\\). Examples of such formalisms include standard definitions of Hilbert systems \\(\\mathcal{P}_1\\),[43] natural deduction systems \\(\\mathcal{P}_2\\), and sequent systems \\(\\mathcal{P}_3\\) for propositional logic (see, e.g., Troelstra and Schwichtenberg 2000; Negri and Von Plato 2001). Each of these systems may be shown to be sound and complete for propositional validity \u2013 i.e. for all propositional formulas \\(\\phi\\), \\(\\phi \\in \\sc{VALID}\\) if and only if \\(\\vdash_{\\mathcal{P}_i} \\phi\\) for \\(i \\in \\{1,2,3\\}\\).\nIn the context of complexity theory, it is convenient to reformulate the definition of a proof system as a mapping \\(\\mathcal{P}: \\{0,1\\}^* \\rightarrow  \\sc{VALID}\\) whose domain consist of all binary string and whose range is the class of all valid formulas. Recall, for instance, that a Hilbert derivation is a finite sequences of formulas \\(\\psi_1,\\ldots,\\psi_n\\) each of whose members is either a logical axiom or follows from earlier members by modus ponens.  A finite sequence of formulas  can be encoded as a binary string so that it is may be recognized in polynomial time if  \\(x \\in \\{0,1\\}^*\\) is the code of a well-formed proof.  \\( \\mathcal{P}\\) can now be defined so if \\( x\\) encodes such a derivation, then \\( \\mathcal{P}(x) = \\psi_n \\) (i.e. the conclusion of the derivation) and \\( \\mathcal{P}(x)\\) is some fixed tautology otherwise.\n\nSuch a system is said to be polynomially bounded if there exists a polynomial \\(p(n)\\) such that for all \\(\\phi \\in \\sc{VALID}\\), there is a derivation \\(\\mathcal{D}\\) such that \\(\\mathcal{P}(\\ulcorner \\mathcal{D} \\urcorner) = \\phi\\) and \\(\\lvert \\ulcorner \\mathcal{D}\\urcorner \\rvert \\leq p(\\lvert \\phi \\rvert)\\) \u2013 i.e. just in case all tautologies of size \\(n\\) possess \\(\\mathcal{P}\\)-proofs of size at most \\(p(n)\\).\nThe basic observation about such systems is as follows:\n\nTheorem 4.1 (Cook and Reckhow 1979) There exist a polynomially bounded proof system if and only if \\(\\textbf{NP} = \\textbf{coNP}\\).[44]\nSince it is strongly suspected that \\(\\textbf{NP} \\neq \\textbf{coNP}\\) (see \n Section 3.4.1), the current consensus is that polynomial proof systems do not exist. At present, however, the failure of polynomial boundedness has not been proven for most familiar proof systems, inclusive of \\(\\mathcal{P}_1\\), \\(\\mathcal{P}_2\\), and \\(\\mathcal{P}_3\\).\nA natural question to ask about a proof system \\(\\mathcal{P}\\) is thus whether it is possible to identify classes of tautologies \\(H\\) which are \u2018hard\u2019 in the sense that any \\(\\mathcal{P}\\)-proof demonstrating that \\(\\phi \\in H\\) is valid must be infeasibly long relative to the size of \\(\\phi\\). A positive answer was obtained by Haken (1985) for the system known as resolution on which many automated theorem-provers are based. Haken\u2019s proof made use of Cook and Reckhow\u2019s (1979) observation that we may formulate the Pigeon Hole Principle (PHP) \u2013 i.e. the statement that any assignment of \\(n+1\\) pigeons to \\(n\\) holes must assign two pigeons to some hole \u2013 in propositional logic by using the atomic letter \\(P_{ij}\\) to express that pigeon \\(i\\) gets placed in hole \\(j\\). The formula\n\n\\[\n\\text{PHP}_n = \\bigwedge_{0 \\leq i \\leq n} \\ \\bigvee_{0 \\leq j \\lt n} P_{ij} \\rightarrow \\bigvee_{0 \\leq i \\lt m \\leq n} \\bigvee_{0 \\leq j \\lt n} (P_{ij} \\wedge P_{mj})\n\\]\n\nwhich formalizes the \\(n\\)-pigeon version of PHP is thus a tautology for each \\(n\\). \\(\\text{PHP}_n\\) is hence provable in any complete proof system for propositional logic.\nHaken showed that any resolution proof of \\(\\text{PHP}_n\\) must have size at least exponential in \\(n\\). From this it follows that resolution is not polynomially bounded. However, it was later shown by Buss (1987) that the system \\(\\mathcal{P}_1\\) (and hence also systems like \\(\\mathcal{P}_2\\), \\(\\mathcal{P}_3\\) which can be shown to efficiently simulate \\(\\mathcal{P}_1\\)) do admit proofs of \\(\\text{PHP}_n\\) which are of size polynomial in \\(n\\).  One subsequent direction of research in proof complexity has been to identify additional proof systems for which PHP or related combinatorial principles are also hard.  See, e.g., Buss (2012), Segerlind (2007).\n",
    "section_title": "4.3 Proof complexity",
    "entry_title": "Computational Complexity Theory",
    "hierarchy_title": "Computational Complexity Theory || Connections to logic and philosophy || Proof complexity",
    "tokenized_text": [
        "connection",
        "logic",
        "philosophy",
        "proof",
        "complexity",
        "proof",
        "complexity",
        "seen",
        "satisfiability",
        "validity",
        "problem",
        "propositional",
        "logic",
        "respectively",
        "complete",
        "textbf",
        "np",
        "textbf",
        "conp",
        "although",
        "problem",
        "characterized",
        "term",
        "semantics",
        "propositional",
        "logic",
        "certain",
        "question",
        "proof",
        "theory",
        "may",
        "also",
        "addressed",
        "using",
        "technique",
        "complexity",
        "theory",
        "proof",
        "system",
        "mathcal",
        "p",
        "propositional",
        "logic",
        "understand",
        "definition",
        "symbol",
        "vdash_",
        "mathcal",
        "p",
        "characterizes",
        "mean",
        "formula",
        "phi",
        "derivable",
        "given",
        "set",
        "axiom",
        "rule",
        "write",
        "vdash_",
        "mathcal",
        "p",
        "phi",
        "case",
        "derivation",
        "mathcal",
        "eg",
        "finite",
        "tree",
        "sequence",
        "formula",
        "phi",
        "conclusion",
        "system",
        "mathcal",
        "p",
        "example",
        "formalism",
        "include",
        "standard",
        "definition",
        "hilbert",
        "system",
        "mathcal",
        "p",
        "_",
        "natural",
        "deduction",
        "system",
        "mathcal",
        "p",
        "_",
        "sequent",
        "system",
        "mathcal",
        "p",
        "_",
        "propositional",
        "logic",
        "see",
        "eg",
        "troelstra",
        "schwichtenberg",
        "negri",
        "von",
        "plato",
        "system",
        "may",
        "shown",
        "sound",
        "complete",
        "propositional",
        "validity",
        "ie",
        "propositional",
        "formula",
        "phi",
        "phi",
        "in",
        "sc",
        "valid",
        "vdash_",
        "mathcal",
        "p",
        "_i",
        "phi",
        "in",
        "context",
        "complexity",
        "theory",
        "convenient",
        "reformulate",
        "definition",
        "proof",
        "system",
        "mapping",
        "mathcal",
        "p",
        "rightarrow",
        "sc",
        "valid",
        "whose",
        "domain",
        "consist",
        "binary",
        "string",
        "whose",
        "range",
        "class",
        "valid",
        "formula",
        "recall",
        "instance",
        "hilbert",
        "derivation",
        "finite",
        "sequence",
        "formula",
        "psi_",
        "ldots",
        "psi_n",
        "whose",
        "member",
        "either",
        "logical",
        "axiom",
        "follows",
        "earlier",
        "member",
        "modus",
        "ponens",
        "finite",
        "sequence",
        "formula",
        "encoded",
        "binary",
        "string",
        "may",
        "recognized",
        "polynomial",
        "time",
        "x",
        "in",
        "code",
        "wellformed",
        "proof",
        "mathcal",
        "p",
        "defined",
        "x",
        "encodes",
        "derivation",
        "mathcal",
        "p",
        "x",
        "psi_n",
        "ie",
        "conclusion",
        "derivation",
        "mathcal",
        "p",
        "x",
        "fixed",
        "tautology",
        "otherwise",
        "system",
        "said",
        "polynomially",
        "bounded",
        "exists",
        "polynomial",
        "p",
        "n",
        "phi",
        "in",
        "sc",
        "valid",
        "derivation",
        "mathcal",
        "mathcal",
        "p",
        "ulcorner",
        "mathcal",
        "urcorner",
        "phi",
        "lvert",
        "ulcorner",
        "mathcal",
        "urcorner",
        "rvert",
        "leq",
        "p",
        "lvert",
        "phi",
        "rvert",
        "ie",
        "case",
        "tautology",
        "size",
        "n",
        "posse",
        "mathcal",
        "p",
        "proofs",
        "size",
        "p",
        "n",
        "basic",
        "observation",
        "system",
        "follows",
        "theorem",
        "cook",
        "reckhow",
        "exist",
        "polynomially",
        "bounded",
        "proof",
        "system",
        "textbf",
        "np",
        "textbf",
        "conp",
        "since",
        "strongly",
        "suspected",
        "textbf",
        "np",
        "neq",
        "textbf",
        "conp",
        "see",
        "section",
        "current",
        "consensus",
        "polynomial",
        "proof",
        "system",
        "exist",
        "present",
        "however",
        "failure",
        "polynomial",
        "boundedness",
        "proven",
        "familiar",
        "proof",
        "system",
        "inclusive",
        "mathcal",
        "p",
        "_",
        "mathcal",
        "p",
        "_",
        "mathcal",
        "p",
        "_",
        "natural",
        "question",
        "ask",
        "proof",
        "system",
        "mathcal",
        "p",
        "thus",
        "whether",
        "possible",
        "identify",
        "class",
        "tautology",
        "h",
        "hard",
        "sense",
        "mathcal",
        "p",
        "proof",
        "demonstrating",
        "phi",
        "in",
        "h",
        "valid",
        "must",
        "infeasibly",
        "long",
        "relative",
        "size",
        "phi",
        "positive",
        "answer",
        "obtained",
        "haken",
        "system",
        "known",
        "resolution",
        "many",
        "automated",
        "theoremprovers",
        "based",
        "haken",
        "proof",
        "made",
        "use",
        "cook",
        "reckhow",
        "observation",
        "may",
        "formulate",
        "pigeon",
        "hole",
        "principle",
        "php",
        "ie",
        "statement",
        "assignment",
        "n",
        "pigeon",
        "n",
        "hole",
        "must",
        "assign",
        "two",
        "pigeon",
        "hole",
        "propositional",
        "logic",
        "using",
        "atomic",
        "letter",
        "p_",
        "ij",
        "express",
        "pigeon",
        "i",
        "get",
        "placed",
        "hole",
        "j",
        "formula",
        "text",
        "php",
        "_n",
        "bigwedge_",
        "leq",
        "leq",
        "n",
        "bigvee_",
        "leq",
        "j",
        "lt",
        "n",
        "p_",
        "ij",
        "rightarrow",
        "bigvee_",
        "leq",
        "lt",
        "leq",
        "n",
        "bigvee_",
        "leq",
        "j",
        "lt",
        "n",
        "p_",
        "ij",
        "wedge",
        "p_",
        "mj",
        "formalizes",
        "n",
        "pigeon",
        "version",
        "php",
        "thus",
        "tautology",
        "n",
        "text",
        "php",
        "_n",
        "hence",
        "provable",
        "complete",
        "proof",
        "system",
        "propositional",
        "logic",
        "haken",
        "showed",
        "resolution",
        "proof",
        "text",
        "php",
        "_n",
        "must",
        "size",
        "least",
        "exponential",
        "n",
        "follows",
        "resolution",
        "polynomially",
        "bounded",
        "however",
        "later",
        "shown",
        "bus",
        "system",
        "mathcal",
        "p",
        "_",
        "hence",
        "also",
        "system",
        "like",
        "mathcal",
        "p",
        "_",
        "mathcal",
        "p",
        "_",
        "shown",
        "efficiently",
        "simulate",
        "mathcal",
        "p",
        "_",
        "admit",
        "proof",
        "text",
        "php",
        "_n",
        "size",
        "polynomial",
        "n",
        "one",
        "subsequent",
        "direction",
        "research",
        "proof",
        "complexity",
        "identify",
        "additional",
        "proof",
        "system",
        "php",
        "related",
        "combinatorial",
        "principle",
        "also",
        "hard",
        "see",
        "eg",
        "bus",
        "segerlind"
    ]
}