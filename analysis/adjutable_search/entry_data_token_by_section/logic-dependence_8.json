{
    "main_text": "Variants of dependence logic || Independence Logic\n4.1 Independence Logic\n\nRather than extending first order logic with dependence atoms\n\\(\\eqord(\\vec x, y)\\), independence logic (Gr\u00e4del &\nV\u00e4\u00e4n\u00e4nen 2013) extends it with independence\natoms \\(\\vec x \\mathop{\\bot_{\\vec z}} \\vec y\\), whose intended\ninterpretation is \u201cfor any possible choice of \\(\\vec z\\), the\npossible values of \\(\\vec x\\) and \\(\\vec y\\) are\nindependent\u201d\u2014in other words, given any fixed choice of\n\\(\\vec z\\), knowing the value taken by \\(\\vec x\\) would not convey any\ninformation about the value taken by \\(\\vec y\\). This is a notion of\nsignificant conceptual importance: for example, one may want to\nexpress that\u2014if one does not know the encryption\nkey\u2014seeing the encrypted version of a message carries no\ninformation about the corresponding clear-text version. If \\(x\\)\nrepresents the encrypted message and \\(y\\) represents the plain-text\none, then this corresponds to the condition \\(x \\mathop{\\bot} y\\),\nwhere \\(\\vec z\\) in this case is empty. Similarly, if \\(k\\) represents\nthe key then \\(x \\mathop{\\bot} k\\) represents the claim that the key\ncannot be inferred from the encrypted message; and the conjunction\ndependence atom \\(\\eqord(k, x, y)\\) (which, as we will soon see, can\nbe represented in independence logic) represents the claim that the\nplain-text message can be decoded given the encrypted message and the\nkey.\n\nFormally, the satisfaction rule for independence atoms can be given as\nfollows:\n\n\nTS-indep:\n\n\\(M \\models_X \\vec x \\mathop{\\bot_{\\vec z}} \\vec y\\) if and only if\nfor all \\(s, s' \\in X\\) with \\(s(\\vec z) = s'(\\vec z)\\) there exists a\n\\(s'' \\in X\\) with \\(s''(\\vec z\\, \\vec x) = s(\\vec{x}\\, \\vec{z})\\) and\n\\(s''(\\vec y) = s'(\\vec y)\\).\n\n\n\\[\\begin{array}{l | c c c}\n            \\textbf{assignment}& \\mathbf{x_1} & \\mathbf{x_2} & \\mathbf{x_3}\\\\\n            \\hline\n            s_0 & 0 & 0 & 0 \\\\\n            s_1 & 0 & 1 & 1 \\\\\n            s_2 & 1 & 0 & 1 \\\\\n            s_3 & 1 & 1 & 0 \n    \\end{array}\\]\n\n\nIndependence logic is strictly more expressive than dependence logic:\nindeed, it lacks the downwards closure property, and the dependence\natom \\(\\eqord(\\vec x, y)\\) is equivalent to the independence atom \\(y\n\\mathop{\\bot_{\\vec x}} y\\). Furthermore, it can also be shown\n(Galliani & V\u00e4\u00e4n\u00e4nen 2014) that conditioned\nindependence atoms \\(\\vec x \\mathop{\\bot_{\\vec y}} \\vec z\\) can be\ndefined in terms of unconditional independence atoms \\(\\vec x\n\\mathop{\\bot} \\vec y\\).\n\nSentence-wise, independence logic is also equivalent to existential\nsecond order logic \\(\\Sigma_1^1\\); but formula-wise, it is more\nexpressive, and it was shown in Galliani 2012 that it can capture all\nnonempty \\(\\Sigma_1^1\\)-definable team properties.\n",
    "section_title": "4.1 Independence Logic",
    "entry_title": "Dependence Logic",
    "hierarchy_title": "Dependence Logic || Variants of dependence logic || Independence Logic",
    "tokenized_text": [
        "variant",
        "dependence",
        "logic",
        "independence",
        "logic",
        "independence",
        "logic",
        "rather",
        "extending",
        "first",
        "order",
        "logic",
        "dependence",
        "atom",
        "eqord",
        "vec",
        "x",
        "independence",
        "logic",
        "gr\u00e4del",
        "v\u00e4\u00e4n\u00e4nen",
        "extends",
        "independence",
        "atom",
        "vec",
        "x",
        "mathop",
        "bot_",
        "vec",
        "z",
        "vec",
        "y",
        "whose",
        "intended",
        "interpretation",
        "possible",
        "choice",
        "vec",
        "z",
        "possible",
        "value",
        "vec",
        "x",
        "vec",
        "y",
        "independent",
        "in",
        "word",
        "given",
        "fixed",
        "choice",
        "vec",
        "z",
        "knowing",
        "value",
        "taken",
        "vec",
        "x",
        "would",
        "convey",
        "information",
        "value",
        "taken",
        "vec",
        "y",
        "notion",
        "significant",
        "conceptual",
        "importance",
        "example",
        "one",
        "may",
        "want",
        "express",
        "thatif",
        "one",
        "know",
        "encryption",
        "keyseeing",
        "encrypted",
        "version",
        "message",
        "carry",
        "information",
        "corresponding",
        "cleartext",
        "version",
        "x",
        "represents",
        "encrypted",
        "message",
        "y",
        "represents",
        "plaintext",
        "one",
        "corresponds",
        "condition",
        "x",
        "mathop",
        "bot",
        "y",
        "vec",
        "z",
        "case",
        "empty",
        "similarly",
        "k",
        "represents",
        "key",
        "x",
        "mathop",
        "bot",
        "k",
        "represents",
        "claim",
        "key",
        "inferred",
        "encrypted",
        "message",
        "conjunction",
        "dependence",
        "atom",
        "eqord",
        "k",
        "x",
        "soon",
        "see",
        "represented",
        "independence",
        "logic",
        "represents",
        "claim",
        "plaintext",
        "message",
        "decoded",
        "given",
        "encrypted",
        "message",
        "key",
        "formally",
        "satisfaction",
        "rule",
        "independence",
        "atom",
        "given",
        "follows",
        "tsindep",
        "models_x",
        "vec",
        "x",
        "mathop",
        "bot_",
        "vec",
        "z",
        "vec",
        "y",
        "in",
        "x",
        "vec",
        "z",
        "vec",
        "z",
        "exists",
        "in",
        "x",
        "vec",
        "z",
        "vec",
        "x",
        "vec",
        "x",
        "vec",
        "z",
        "vec",
        "vec",
        "begin",
        "array",
        "l",
        "c",
        "c",
        "c",
        "textbf",
        "assignment",
        "mathbf",
        "x_",
        "mathbf",
        "x_",
        "mathbf",
        "x_",
        "hline",
        "s_",
        "s_",
        "s_",
        "s_",
        "end",
        "array",
        "independence",
        "logic",
        "strictly",
        "expressive",
        "dependence",
        "logic",
        "indeed",
        "lack",
        "downwards",
        "closure",
        "property",
        "dependence",
        "atom",
        "eqord",
        "vec",
        "x",
        "equivalent",
        "independence",
        "atom",
        "mathop",
        "bot_",
        "vec",
        "x",
        "y",
        "furthermore",
        "also",
        "shown",
        "galliani",
        "v\u00e4\u00e4n\u00e4nen",
        "conditioned",
        "independence",
        "atom",
        "vec",
        "x",
        "mathop",
        "bot_",
        "vec",
        "vec",
        "z",
        "defined",
        "term",
        "unconditional",
        "independence",
        "atom",
        "vec",
        "x",
        "mathop",
        "bot",
        "vec",
        "y",
        "sentencewise",
        "independence",
        "logic",
        "also",
        "equivalent",
        "existential",
        "second",
        "order",
        "logic",
        "sigma_",
        "formulawise",
        "expressive",
        "shown",
        "galliani",
        "capture",
        "nonempty",
        "sigma_",
        "definable",
        "team",
        "property"
    ]
}