{
    "main_text": "Syntax || Variables, bound and free\n2.1 Variables, bound and free\n\nThe function of \\(\\lambda\\) in an abstraction term \\((\\lambda x[M]\\))\nis that it binds the variable appearing\nimmediately after it in the term \\(M\\). Thus \\(\\lambda\\) is analogous\nto the universal and existential quantifiers \\(\\forall\\) and\n\\(\\exists\\) of first-order logic. One can define, analogously, the\nnotions of free and bound variable in the expected way, as\nfollows.\n\n\nDefinition The syntactic functions \\(\\mathbf{FV}\\)\nand \\(\\mathbf{BV}\\) (for \u2018free variable\u2019 and \u2018bound\nvariable\u2019, respectively) are defined on the set of\n\\(\\lambda\\)-terms by structural induction thus:\n\nFor every variable \\(x\\), term \\(M\\), and term \\(N\\):\n\n\\[\\begin{array}{lll}\n  &\\text{Free}\n  &\\text{Bound} \\\\\n(1)\n  &\\mathbf{FV}(x) = \\{ x \\} \\quad \n  &\\mathbf{BV}(x) =  \\varnothing \\\\\n(2)\n  &\\mathbf{FV}(MN) = \\mathbf{FV}(M) \\cup \\mathbf{FV}(N)\n  &\\mathbf{BV}(MN) = \\mathbf{BV}(M) \\cup \\mathbf{BV}(N) \\\\\n(3)\n  &\\mathbf{FV}(\\lambda x[M]) = \\mathbf{FV}(M) - \\{ x \\}\n  &\\mathbf{BV}(\\lambda x[M]) = \\mathbf{BV}(M) \\cup \\{ x \\}\n\\end{array}\\]\n\n\nIf \\(\\mathbf{FV}(M) = \\varnothing\\) then \\(M\\) is called a\ncombinator.\n\n\nClause (3) in the two definitions supports the intention that\n\\(\\lambda\\) binds variables (ensures that they are not free). Note the\ndifference between \\(\\mathbf{BV}\\) and \\(\\mathbf{FV}\\) for\nvariables.\n\nAs is typical in other subjects where the concepts appear, such as\nfirst-order logic, one needs to be careful about the issue; a casual\nattitude about substitution can lead to syntactic\n difficulties.[1]\n We can defend a casual attitude by adopting the convention that we\nare interested not in terms themselves, but in a certain equivalence\nclass of terms. We now define substitution, and then lay down a\nconvention that allows us to avoid such difficulties.\n\n\nDefinition (substitution) We write \u2018\\(M[x :=\nN]\\)\u2019 to denote the substitution of \\(N\\) for the free\noccurrences of \\(x\\) in \\(M\\). A precise\n definition[2]\n by recursion on the set of \\(\\lambda\\)-terms is as follows: for all\nterms \\(A\\), \\(B\\), and \\(M\\), and for all variables \\(x\\) and \\(y\\),\nwe define\n\n\\(x[x := M] \\equiv M\\) \n\\(y[x := M] \\equiv y\\) (\\(y\\) distinct from \\(x)\\)\n\\((AB)[x := M] \\equiv A[x := M]B[x := M]\\)\n\\((\\lambda x[A])[x := M] \\equiv \\lambda x[A]\\)\n\\((\\lambda y[A])[x := M] \\equiv \\lambda y[A[x := M]]\\) (\\(y\\)\ndistinct from \\(x)\\)\n\n\n\nClause (1) of the definition simply says that if we are to substitute\n\\(M\\) for \\(x\\) and we are dealing simply with \\(x\\), then the result\nis just \\(M\\). Clause (2) says that nothing happens when we are\ndealing (only) with a variable different from \\(x\\) but we are to\nsubstitute something for \\(x\\). Clause (3) tells us that substitution\nunconditionally distributes over applications. Clauses (4) and (5)\nconcern abstraction terms and parallel clauses (1) and (2) (or rather,\nclauses (2) and (1), in opposite order): If the bound variable \\(z\\)\nof the abstraction term \\(\\lambda z[A]\\) is identical to the variable\n\\(x\\) for which we are to do a substitution, then we do not perform\nany substitution (that is, substitution \u201cstops\u201d). This\ncoheres with the intention that \\(M[x := N]\\) is supposed to denote\nthe substitution of \\(N\\) for the free occurrences of \\(x\\)\nin \\(M\\). If \\(M\\) is an abstraction term \\(\\lambda x[A]\\) whose bound\nvariable is \\(x\\), then \\(x\\) does not occurr freely in \\(M\\), so\nthere is nothing to do. This explains clause 4. Clause (5), finally,\nsays that if the bound variable of an abstraction term differs from\n\\(x\\), then at least \\(x\\) has the \u201cchance \u201d to occur\nfreely in the abstraction term, and substitution continues into the\nbody of the abstraction term.\n\n\nDefinition (change of bound variables,\n\\(\\alpha\\)-convertibility). The term \\(N\\) is obtained from the term\n\\(M\\) by a change of bound variables if,\nroughly, any abstraction term \\(\\lambda x[A]\\) inside \\(M\\) has been\nreplaced by \\(\\lambda y[A[x := y]]\\).\n\nLet us say that terms \\(M\\) and \\(N\\) are\n\\(\\alpha\\)-convertible if there is a\nsequence of changes of bound variables starting from \\(M\\) and ending\nat \\(N\\).\n\nAxiom. \\(\\beta\\)-conversion\n(stated with a no-capture proviso):\n\n\\( (\\lambda x[M])N \\rhd M[x := N]\\),\n\nprovided no variable that occurrs free in \\(N\\) becomes bound after\nits substitution into \\(M\\).\n\n\nRoughly, we need to adhere to the principle that free variables ought\nto remain free; when an occurrence of a variable is threatened to\nbecome bound by a substitution, simply perform enough\n\\(\\alpha\\)-conversions to sidestep the problem. If we keep this in\nmind, we can work with \\(\\lambda\\)-calculus without worrying about\nthese nettlesome syntactic difficulties. So, for example, we\ncan\u2019t apply the function \\(\\lambda x[\\lambda y[x(y-5)]]\\) to the\nargument \\(2y\\) because upon substitution of \u201c\\(2y\\)\u201d for\n\u201c\\(x\\)\u201d, the \u201c\\(y\\)\u201d in \u201c\\(2y\\)\u201d\nwould be captured by the variable-binding operator \u201c\\(\\lambda\ny\\)\u201d. Such a substitution would yield a function different from\nthe one intended. However, we can first transform \\(\\lambda x[\\lambda\ny[x(y-5)]]\\) to \\(\\lambda x[\\lambda z[x(z-5)]]\\) by\n\\(\\alpha\\)-conversion, and then apply this latter function to the\nargument \\(2y\\). So whereas the following is not a valid use\nof \\(\\beta\\)-conversion: \n\\[ (\\lambda x[\\lambda y[x(y-5)]])2y  \\rhd \\lambda y[2y(y-5)]\\]\n we can validly use\n\\(\\beta\\)-conversion to conclude: \n\\[ (\\lambda x[\\lambda z[x(z-5)]])2y \\rhd \\lambda z[2y(z-5)]\\]\n This example helps one\nto see why the proviso to \\(\\beta\\)-conversion is so important. The\nproviso is really no different from the one used in the statement of\nan axiom of the predicate calculus, namely: \\(\\forall x\\phi \\to\n\\phi^{\\tau}_x\\), provided no variable that is free in the term\n\\(\\tau\\) before the substitution becomes bound after the\nsubstitution.\n\nThe syntax of \\(\\lambda\\)-calculus is quite flexible. One can form all\nsorts of terms, even self-applications such as \\(xx\\). Such terms\nappear at first blush to be suspicious; one might suspect that using\nsuch terms could lead to inconsistency, and in any case one might find\noneself reaching for a tool with which to forbid such terms. If one\nwere to view functions and sets of ordered pairs of a certain kind,\nthen the \\(x\\) in \\(xx\\) would be a function (set of ordered pairs)\nthat contains as an element a pair \\((x,y)\\) whose first element would\nbe \\(x\\) itself. But no set can contain itself in this way, lest the\naxiom of foundation (or regularity) be violated. Thus, from a set\ntheoretical perspective such terms are clearly dubious. Below one can\nfind a brief sketch of one such tool, type theory. But in fact such\nterms do not lead to inconsistency and serve a useful purpose in the\ncontext of \\(\\lambda\\)-calculus. Moreover, forbidding such terms, as\nin type theory, does not come for free (e.g., some of the\nexpressiveness of untyped \\(\\lambda\\)-calculus is lost).\n",
    "section_title": "2.1 Variables, bound and free",
    "entry_title": "The Lambda Calculus",
    "hierarchy_title": "The Lambda Calculus || Syntax || Variables, bound and free",
    "tokenized_text": [
        "syntax",
        "variable",
        "bound",
        "free",
        "variable",
        "bound",
        "free",
        "function",
        "lambda",
        "abstraction",
        "term",
        "lambda",
        "x",
        "bind",
        "variable",
        "appearing",
        "immediately",
        "term",
        "m",
        "thus",
        "lambda",
        "analogous",
        "universal",
        "existential",
        "quantifier",
        "forall",
        "exists",
        "firstorder",
        "logic",
        "one",
        "define",
        "analogously",
        "notion",
        "free",
        "bound",
        "variable",
        "expected",
        "way",
        "follows",
        "definition",
        "syntactic",
        "function",
        "mathbf",
        "fv",
        "mathbf",
        "bv",
        "free",
        "variable",
        "bound",
        "variable",
        "respectively",
        "defined",
        "set",
        "lambda",
        "terms",
        "structural",
        "induction",
        "thus",
        "every",
        "variable",
        "x",
        "term",
        "m",
        "term",
        "n",
        "begin",
        "array",
        "lll",
        "text",
        "free",
        "text",
        "bound",
        "mathbf",
        "fv",
        "x",
        "x",
        "quad",
        "mathbf",
        "bv",
        "x",
        "varnothing",
        "mathbf",
        "fv",
        "mn",
        "mathbf",
        "fv",
        "cup",
        "mathbf",
        "fv",
        "n",
        "mathbf",
        "bv",
        "mn",
        "mathbf",
        "bv",
        "cup",
        "mathbf",
        "bv",
        "n",
        "mathbf",
        "fv",
        "lambda",
        "x",
        "mathbf",
        "fv",
        "x",
        "mathbf",
        "bv",
        "lambda",
        "x",
        "mathbf",
        "bv",
        "cup",
        "x",
        "end",
        "array",
        "mathbf",
        "fv",
        "varnothing",
        "m",
        "called",
        "combinator",
        "clause",
        "two",
        "definition",
        "support",
        "intention",
        "lambda",
        "bind",
        "variable",
        "ensures",
        "free",
        "note",
        "difference",
        "mathbf",
        "bv",
        "mathbf",
        "fv",
        "variable",
        "typical",
        "subject",
        "concept",
        "appear",
        "firstorder",
        "logic",
        "one",
        "need",
        "careful",
        "issue",
        "casual",
        "attitude",
        "substitution",
        "lead",
        "syntactic",
        "difficulty",
        "defend",
        "casual",
        "attitude",
        "adopting",
        "convention",
        "interested",
        "term",
        "certain",
        "equivalence",
        "class",
        "term",
        "define",
        "substitution",
        "lay",
        "convention",
        "allows",
        "u",
        "avoid",
        "difficulty",
        "definition",
        "substitution",
        "write",
        "x",
        "n",
        "denote",
        "substitution",
        "n",
        "free",
        "occurrence",
        "x",
        "m",
        "precise",
        "definition",
        "recursion",
        "set",
        "lambda",
        "terms",
        "follows",
        "term",
        "a",
        "b",
        "m",
        "variable",
        "x",
        "y",
        "define",
        "x",
        "x",
        "equiv",
        "m",
        "x",
        "equiv",
        "y",
        "y",
        "distinct",
        "x",
        "ab",
        "x",
        "equiv",
        "x",
        "b",
        "x",
        "lambda",
        "x",
        "x",
        "equiv",
        "lambda",
        "x",
        "lambda",
        "x",
        "equiv",
        "lambda",
        "x",
        "y",
        "distinct",
        "x",
        "clause",
        "definition",
        "simply",
        "say",
        "substitute",
        "m",
        "x",
        "dealing",
        "simply",
        "x",
        "result",
        "m",
        "clause",
        "say",
        "nothing",
        "happens",
        "dealing",
        "variable",
        "different",
        "x",
        "substitute",
        "something",
        "x",
        "clause",
        "tell",
        "u",
        "substitution",
        "unconditionally",
        "distributes",
        "application",
        "clause",
        "concern",
        "abstraction",
        "term",
        "parallel",
        "clause",
        "rather",
        "clause",
        "opposite",
        "order",
        "bound",
        "variable",
        "z",
        "abstraction",
        "term",
        "lambda",
        "z",
        "identical",
        "variable",
        "x",
        "substitution",
        "perform",
        "substitution",
        "substitution",
        "stop",
        "coheres",
        "intention",
        "x",
        "n",
        "supposed",
        "denote",
        "substitution",
        "n",
        "free",
        "occurrence",
        "x",
        "m",
        "m",
        "abstraction",
        "term",
        "lambda",
        "x",
        "whose",
        "bound",
        "variable",
        "x",
        "x",
        "occurr",
        "freely",
        "m",
        "nothing",
        "explains",
        "clause",
        "clause",
        "finally",
        "say",
        "bound",
        "variable",
        "abstraction",
        "term",
        "differs",
        "x",
        "least",
        "x",
        "chance",
        "occur",
        "freely",
        "abstraction",
        "term",
        "substitution",
        "continues",
        "body",
        "abstraction",
        "term",
        "definition",
        "change",
        "bound",
        "variable",
        "alpha",
        "convertibility",
        "term",
        "n",
        "obtained",
        "term",
        "m",
        "change",
        "bound",
        "variable",
        "roughly",
        "abstraction",
        "term",
        "lambda",
        "x",
        "inside",
        "m",
        "replaced",
        "lambda",
        "x",
        "let",
        "u",
        "say",
        "term",
        "m",
        "n",
        "alpha",
        "convertible",
        "sequence",
        "change",
        "bound",
        "variable",
        "starting",
        "m",
        "ending",
        "n",
        "axiom",
        "beta",
        "conversion",
        "stated",
        "nocapture",
        "proviso",
        "lambda",
        "x",
        "n",
        "rhd",
        "x",
        "n",
        "provided",
        "variable",
        "occurrs",
        "free",
        "n",
        "becomes",
        "bound",
        "substitution",
        "m",
        "roughly",
        "need",
        "adhere",
        "principle",
        "free",
        "variable",
        "ought",
        "remain",
        "free",
        "occurrence",
        "variable",
        "threatened",
        "become",
        "bound",
        "substitution",
        "simply",
        "perform",
        "enough",
        "alpha",
        "conversions",
        "sidestep",
        "problem",
        "keep",
        "mind",
        "work",
        "lambda",
        "calculus",
        "without",
        "worrying",
        "nettlesome",
        "syntactic",
        "difficulty",
        "example",
        "apply",
        "function",
        "lambda",
        "x",
        "lambda",
        "x",
        "y",
        "argument",
        "y",
        "upon",
        "substitution",
        "y",
        "x",
        "y",
        "y",
        "would",
        "captured",
        "variablebinding",
        "operator",
        "lambda",
        "y",
        "substitution",
        "would",
        "yield",
        "function",
        "different",
        "one",
        "intended",
        "however",
        "first",
        "transform",
        "lambda",
        "x",
        "lambda",
        "x",
        "y",
        "lambda",
        "x",
        "lambda",
        "z",
        "x",
        "z",
        "alpha",
        "conversion",
        "apply",
        "latter",
        "function",
        "argument",
        "y",
        "whereas",
        "following",
        "valid",
        "use",
        "beta",
        "conversion",
        "lambda",
        "x",
        "lambda",
        "x",
        "y",
        "y",
        "rhd",
        "lambda",
        "y",
        "y",
        "validly",
        "use",
        "beta",
        "conversion",
        "conclude",
        "lambda",
        "x",
        "lambda",
        "z",
        "x",
        "z",
        "y",
        "rhd",
        "lambda",
        "z",
        "y",
        "z",
        "example",
        "help",
        "one",
        "see",
        "proviso",
        "beta",
        "conversion",
        "important",
        "proviso",
        "really",
        "different",
        "one",
        "used",
        "statement",
        "axiom",
        "predicate",
        "calculus",
        "namely",
        "forall",
        "xphi",
        "to",
        "phi",
        "tau",
        "_x",
        "provided",
        "variable",
        "free",
        "term",
        "tau",
        "substitution",
        "becomes",
        "bound",
        "substitution",
        "syntax",
        "lambda",
        "calculus",
        "quite",
        "flexible",
        "one",
        "form",
        "sort",
        "term",
        "even",
        "selfapplications",
        "xx",
        "term",
        "appear",
        "first",
        "blush",
        "suspicious",
        "one",
        "might",
        "suspect",
        "using",
        "term",
        "could",
        "lead",
        "inconsistency",
        "case",
        "one",
        "might",
        "find",
        "oneself",
        "reaching",
        "tool",
        "forbid",
        "term",
        "one",
        "view",
        "function",
        "set",
        "ordered",
        "pair",
        "certain",
        "kind",
        "x",
        "xx",
        "would",
        "function",
        "set",
        "ordered",
        "pair",
        "contains",
        "element",
        "pair",
        "x",
        "whose",
        "first",
        "element",
        "would",
        "x",
        "set",
        "contain",
        "way",
        "lest",
        "axiom",
        "foundation",
        "regularity",
        "violated",
        "thus",
        "set",
        "theoretical",
        "perspective",
        "term",
        "clearly",
        "dubious",
        "one",
        "find",
        "brief",
        "sketch",
        "one",
        "tool",
        "type",
        "theory",
        "fact",
        "term",
        "lead",
        "inconsistency",
        "serve",
        "useful",
        "purpose",
        "context",
        "lambda",
        "calculus",
        "moreover",
        "forbidding",
        "term",
        "type",
        "theory",
        "come",
        "free",
        "eg",
        "expressiveness",
        "untyped",
        "lambda",
        "calculus",
        "lost"
    ]
}