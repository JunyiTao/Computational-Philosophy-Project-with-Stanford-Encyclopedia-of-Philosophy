{
    "main_text": "Implementation || Implementation as Semantic Interpretation\n5.1 Implementation as Semantic Interpretation\n\nA first philosophical analysis of the notion of implementation in\ncomputer science is advanced by Rapaport (1999, 2005). He defines an\nimplementation I as the semantic interpretation of a\nsyntactic or abstract domain A in a medium of implementation\nM. If implementation is understood as a relation holding\nbetween a given LoA and any upper level in the hierarchical ontology\nof a computational system, it follows that Rapaport\u2019s definition\nextends accordingly, so that any LoA provides a semantic\ninterpretation in a given medium of implementation for the upper\nlevels. Under this view, specifications provide semantic\ninterpretations of intentions expressed by stakeholders in the\nspecification (formal) language, and algorithms provide semantic\ninterpretations of specifications using one of the many languages\nalgorithms can be formulated in (natural languages, pseudo-code, logic\nlanguages, functional languages etc.). The medium of implementation\ncan be either abstract or concrete. A computer program is the\nimplementation of an algorithm in that the former provides a semantic\ninterpretation of the syntactic constructs of the latter in a\nhigh-level programming language as its medium of implementation. The\nprogram\u2019s instructions interpret the algorithm's tasks in a\nprogramming language. Also the execution LoA provides a semantic\ninterpretation of the assembly/machine code operations into the medium\ngiven by the structural properties of the physical machine. According\nto the analysis in (Rapaport 1999, 2005), implementation is an\nasymmetric relation: if I is an implementation of A,\nA cannot be an implementation of I. However, the\nauthor argues that any LoA can be both a syntactic and a semantic\nlevel, that is, it can play the role of both the implementation I and\nof a syntactic domain A. Whereas an algorithm is assigned a semantic\ninterpretation by a program expressed in a high-level language, the\nsame algorithm provides a semantic interpretation for the\nspecification. It follows that the abstraction-implementation relation\npairs the functional-structural relation for computational\nsystems.\n\nPrimiero (2020) considers this latter aspect as one main limit of\nRapaport\u2019s (1999, 2005) account of implementation:\nimplementation reduces to a unique relation between a\nsyntactic level and its semantic interpretation and it does not\naccount for the layered ontology of computational systems seen in\n \u00a71.2.\n In order to extend the present definition of implementation to all\nLoAs, each level has to be reinterpreted each time either as syntactic\nor as a semantic level. This, in turn, has a repercussion on the\nsecond difficulty characterizing, according to Primero (2020),\nimplementation as a semantic interpretation: on the one hand, this\napproach does not take into account incorrect\nimplementations; on the other hand, for a given incorrect\nimplementation, the unique relation so defined can relate\nincorrectness only to one syntactic level, excluding all other levels\nas potential error locations.\n\nTurner (2018) aims to show that semantic interpretation not only does\nnot account for incorrect implementation, but not even to correct\nones. One first example is provided by the implementation of one\nlanguage into another: the implementing language here is not providing\na semantic interpretation of the implemented language, unless the\nformer is associated with a semantics providing meaning and\ncorrectness criteria for the latter. Such semantics will remain\nexternal to the implementation relation: whereas correctness is\nassociated with semantic interpretation, implementation does not\nalways come with a semantic interpretation. A second example is given\nby considering an abstract stack implemented by an array; again, the\narray does not provide correctness criteria for the stack. Quite to\nthe contrary, it is the stack that specifies correctness criteria for\nany of its implementation, arrays included.\n",
    "section_title": "5.1 Implementation as Semantic Interpretation",
    "entry_title": "The Philosophy of Computer Science",
    "hierarchy_title": "The Philosophy of Computer Science || Implementation || Implementation as Semantic Interpretation",
    "tokenized_text": [
        "implementation",
        "implementation",
        "semantic",
        "interpretation",
        "implementation",
        "semantic",
        "interpretation",
        "first",
        "philosophical",
        "analysis",
        "notion",
        "implementation",
        "computer",
        "science",
        "advanced",
        "rapaport",
        "defines",
        "implementation",
        "semantic",
        "interpretation",
        "syntactic",
        "abstract",
        "domain",
        "medium",
        "implementation",
        "m",
        "implementation",
        "understood",
        "relation",
        "holding",
        "given",
        "loa",
        "upper",
        "level",
        "hierarchical",
        "ontology",
        "computational",
        "system",
        "follows",
        "rapaport",
        "definition",
        "extends",
        "accordingly",
        "loa",
        "provides",
        "semantic",
        "interpretation",
        "given",
        "medium",
        "implementation",
        "upper",
        "level",
        "view",
        "specification",
        "provide",
        "semantic",
        "interpretation",
        "intention",
        "expressed",
        "stakeholder",
        "specification",
        "formal",
        "language",
        "algorithm",
        "provide",
        "semantic",
        "interpretation",
        "specification",
        "using",
        "one",
        "many",
        "language",
        "algorithm",
        "formulated",
        "natural",
        "language",
        "pseudocode",
        "logic",
        "language",
        "functional",
        "language",
        "etc",
        "medium",
        "implementation",
        "either",
        "abstract",
        "concrete",
        "computer",
        "program",
        "implementation",
        "algorithm",
        "former",
        "provides",
        "semantic",
        "interpretation",
        "syntactic",
        "construct",
        "latter",
        "highlevel",
        "programming",
        "language",
        "medium",
        "implementation",
        "program",
        "instruction",
        "interpret",
        "algorithm",
        "s",
        "task",
        "programming",
        "language",
        "also",
        "execution",
        "loa",
        "provides",
        "semantic",
        "interpretation",
        "assemblymachine",
        "code",
        "operation",
        "medium",
        "given",
        "structural",
        "property",
        "physical",
        "machine",
        "according",
        "analysis",
        "rapaport",
        "implementation",
        "asymmetric",
        "relation",
        "implementation",
        "implementation",
        "i",
        "however",
        "author",
        "argues",
        "loa",
        "syntactic",
        "semantic",
        "level",
        "play",
        "role",
        "implementation",
        "syntactic",
        "domain",
        "a",
        "whereas",
        "algorithm",
        "assigned",
        "semantic",
        "interpretation",
        "program",
        "expressed",
        "highlevel",
        "language",
        "algorithm",
        "provides",
        "semantic",
        "interpretation",
        "specification",
        "follows",
        "abstractionimplementation",
        "relation",
        "pair",
        "functionalstructural",
        "relation",
        "computational",
        "system",
        "primiero",
        "considers",
        "latter",
        "aspect",
        "one",
        "main",
        "limit",
        "rapaport",
        "account",
        "implementation",
        "implementation",
        "reduces",
        "unique",
        "relation",
        "syntactic",
        "level",
        "semantic",
        "interpretation",
        "account",
        "layered",
        "ontology",
        "computational",
        "system",
        "seen",
        "order",
        "extend",
        "present",
        "definition",
        "implementation",
        "loas",
        "level",
        "reinterpreted",
        "time",
        "either",
        "syntactic",
        "semantic",
        "level",
        "turn",
        "repercussion",
        "second",
        "difficulty",
        "characterizing",
        "according",
        "primero",
        "implementation",
        "semantic",
        "interpretation",
        "one",
        "hand",
        "approach",
        "take",
        "account",
        "incorrect",
        "implementation",
        "hand",
        "given",
        "incorrect",
        "implementation",
        "unique",
        "relation",
        "defined",
        "relate",
        "incorrectness",
        "one",
        "syntactic",
        "level",
        "excluding",
        "level",
        "potential",
        "error",
        "location",
        "turner",
        "aim",
        "show",
        "semantic",
        "interpretation",
        "account",
        "incorrect",
        "implementation",
        "even",
        "correct",
        "one",
        "one",
        "first",
        "example",
        "provided",
        "implementation",
        "one",
        "language",
        "another",
        "implementing",
        "language",
        "providing",
        "semantic",
        "interpretation",
        "implemented",
        "language",
        "unless",
        "former",
        "associated",
        "semantics",
        "providing",
        "meaning",
        "correctness",
        "criterion",
        "latter",
        "semantics",
        "remain",
        "external",
        "implementation",
        "relation",
        "whereas",
        "correctness",
        "associated",
        "semantic",
        "interpretation",
        "implementation",
        "always",
        "come",
        "semantic",
        "interpretation",
        "second",
        "example",
        "given",
        "considering",
        "abstract",
        "stack",
        "implemented",
        "array",
        "array",
        "provide",
        "correctness",
        "criterion",
        "stack",
        "quite",
        "contrary",
        "stack",
        "specifies",
        "correctness",
        "criterion",
        "implementation",
        "array",
        "included"
    ]
}