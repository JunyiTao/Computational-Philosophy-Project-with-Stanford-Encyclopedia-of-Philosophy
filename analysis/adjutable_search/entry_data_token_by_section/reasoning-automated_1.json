{
    "main_text": "Introduction || Problem Domain\n1.1 Problem Domain\n\nA first important consideration in the design of an automated\nreasoning program is to delineate the class of problems that the\nprogram will be required to solve\u2014the problem\ndomain. The domain can be very large, as would be the case\nfor a general-purpose theorem prover for first-order logic, or be more\nrestricted in scope as in a special-purpose theorem prover for\nTarski\u2019s geometry, or the modal logic K. A typical approach in the\ndesign of an automated reasoning program is to provide it first with\nsufficient logical power (e.g., first-order logic) and then further\ndemarcate its scope to the particular domain of interest defined by a\nset of domain axioms. To illustrate, EQP, a\ntheorem-proving program for equational logic, was used to solve an\nopen question in Robbins algebra (McCune 1997): Are all Robbins\nalgebras Boolean? For this, the program was provided with the\naxioms defining a Robbins algebra:\n\n\n\n(A1)\nx + y = y + x\n(commutativity) \n\n(A2)\n(x + y) + z = x +\n(y + z)\n(associativity) \n\n(A3)\n\u2212(\u2212(x + y) + \u2212(x +\n\u2212y)) = x\n(Robbins equation) \n\n\n\nThe program was then used to show that a characterization of Boolean\nalgebra that uses Huntington\u2019s equation,\n\n\u2212(\u2212x + y) + \u2212(\u2212x +\n\u2212y) = x,\n\n\nfollows from the axioms. We should remark that this problem is\nnon-trivial since deciding whether a finite set of equations provides\na basis for Boolean algebra is undecidable, that is, it does not\npermit an algorithmic representation; also, the problem was attacked\nby Robbins, Huntington, Tarski and many of his students with no\nsuccess. The key step was to establish that all Robbins algebras\nsatisfy \n\n\u2203x\u2203y(x + y =\nx),\n\n\nsince it was known that this formula is a sufficient condition for a\nRobbins algebra to be Boolean. When EQP was supplied with this piece\nof information, the program provided invaluable assistance by\ncompleting the proof automatically. \n\nA special-purpose theorem prover does not draw its main benefit by\nrestricting its attention to the domain axioms but from the fact that\nthe domain may enjoy particular theorem-proving techniques which can\nbe hardwired\u2014coded\u2014within the reasoning program itself and\nwhich may result in a more efficient logic implementation. Much of\nEQP\u2019s success at settling the Robbins question can be attributed to\nits built-in associative-commutative inference mechanisms.\n",
    "section_title": "1.1 Problem Domain",
    "entry_title": "Automated Reasoning",
    "hierarchy_title": "Automated Reasoning || Introduction || Problem Domain",
    "tokenized_text": [
        "introduction",
        "problem",
        "domain",
        "problem",
        "domain",
        "first",
        "important",
        "consideration",
        "design",
        "automated",
        "reasoning",
        "program",
        "delineate",
        "class",
        "problem",
        "program",
        "required",
        "solvethe",
        "problem",
        "domain",
        "domain",
        "large",
        "would",
        "case",
        "generalpurpose",
        "theorem",
        "prover",
        "firstorder",
        "logic",
        "restricted",
        "scope",
        "specialpurpose",
        "theorem",
        "prover",
        "tarski",
        "geometry",
        "modal",
        "logic",
        "k",
        "typical",
        "approach",
        "design",
        "automated",
        "reasoning",
        "program",
        "provide",
        "first",
        "sufficient",
        "logical",
        "power",
        "eg",
        "firstorder",
        "logic",
        "demarcate",
        "scope",
        "particular",
        "domain",
        "interest",
        "defined",
        "set",
        "domain",
        "axiom",
        "illustrate",
        "eqp",
        "theoremproving",
        "program",
        "equational",
        "logic",
        "used",
        "solve",
        "open",
        "question",
        "robbins",
        "algebra",
        "mccune",
        "robbins",
        "algebra",
        "boolean",
        "program",
        "provided",
        "axiom",
        "defining",
        "robbins",
        "algebra",
        "a",
        "x",
        "x",
        "commutativity",
        "a",
        "x",
        "z",
        "x",
        "z",
        "associativity",
        "a",
        "x",
        "x",
        "y",
        "x",
        "robbins",
        "equation",
        "program",
        "used",
        "show",
        "characterization",
        "boolean",
        "algebra",
        "us",
        "huntington",
        "equation",
        "x",
        "x",
        "y",
        "x",
        "follows",
        "axiom",
        "remark",
        "problem",
        "nontrivial",
        "since",
        "deciding",
        "whether",
        "finite",
        "set",
        "equation",
        "provides",
        "basis",
        "boolean",
        "algebra",
        "undecidable",
        "permit",
        "algorithmic",
        "representation",
        "also",
        "problem",
        "attacked",
        "robbins",
        "huntington",
        "tarski",
        "many",
        "student",
        "success",
        "key",
        "step",
        "establish",
        "robbins",
        "algebra",
        "satisfy",
        "xy",
        "x",
        "x",
        "since",
        "known",
        "formula",
        "sufficient",
        "condition",
        "robbins",
        "algebra",
        "boolean",
        "eqp",
        "supplied",
        "piece",
        "information",
        "program",
        "provided",
        "invaluable",
        "assistance",
        "completing",
        "proof",
        "automatically",
        "specialpurpose",
        "theorem",
        "prover",
        "draw",
        "main",
        "benefit",
        "restricting",
        "attention",
        "domain",
        "axiom",
        "fact",
        "domain",
        "may",
        "enjoy",
        "particular",
        "theoremproving",
        "technique",
        "hardwiredcodedwithin",
        "reasoning",
        "program",
        "may",
        "result",
        "efficient",
        "logic",
        "implementation",
        "much",
        "eqp",
        "success",
        "settling",
        "robbins",
        "question",
        "attributed",
        "builtin",
        "associativecommutative",
        "inference",
        "mechanism"
    ]
}