{
    "main_text": "Introduction || Compositionality\n1.2 Compositionality\n\nCompositionality (Szab\u00f3 2013) is a desirable feature of a\nsemantical analysis of a programming language, because it allows one\nto calculate the meaning of a program as a function of the meanings of\nits constituents. Actually, in Milner\u2019s account (see especially\n1975: sec. 1, 4), compositionality applies even more generally to\ncomputing agents assembled from smaller ones by means of\nappropriate composition operations. These agents may include, beside\nprograms, hardware systems like a computer composed of a memory,\ncomposed in turn of two memory registers, and a processing unit, where\nall components are computing agents. This allows one to include in one\nframework systems composed of hardware, of software and even of both.\nNow, the syntactic rules that define inductively the various\ncategories of phrases of a programming language allow us to regard\n\\({L}\\) as an algebra of program phrases, whose signature is\ndetermined by these rules. One account of compositionality that is\nespecially suitable to the present setting (Szab\u00f3 2013: sec. 2)\nidentifies a compositional interpretation of programs with a\nhomomorphism from this algebra to the domain of denotations\nassociating with every operation of the algebra of programs a\ncorresponding semantical operation on denotations.\n\nAs an example, consider a simple imperative language whose programs\n\\(\\mathtt{c}\\) denote state transformations\n\\({\\mathcal{M}}(\\mathtt{c}) : \\Sigma \\to \\Sigma\\). Among the\noperations on programs of this language there is sequential\ncomposition, building a program \\(\\mathtt{c}_1 ; \\mathtt{c}_2\\)\nfrom programs \\(\\mathtt{c}_1\\) and \\(\\mathtt{c}_2\\). The intended\noperational meaning of this program is that, if \\(\\mathtt{c}_1 ;\n\\mathtt{c}_2\\) is executed starting from a state \\(\\sigma \\in\n\\Sigma\\), we first execute \\(\\mathtt{c}_1\\) starting form state\n\\(\\sigma\\). If the execution terminates we obtain a state \\(\\sigma'\\),\nfrom which we start the execution of \\(\\mathtt{c}_2\\) reaching, if the\nexecution terminates, a state \\(\\sigma''\\). The latter state is the\nstate reached by the execution of \\(\\mathtt{c}_1 ; \\mathtt{c}_2\\) from\nstate \\(\\sigma\\). From a denotational point of view, we have the\noperation of composition on functions \\(\\Sigma \\to \\Sigma\\), and the\ncompositional interpretation of our program is given by the following\nidentity, to be read as a clause of a definition of \\({\\mathcal{M}}\\)\nby induction on the structure of programs: \n\n\\[{\\mathcal{M}}(\\mathtt{c}_1 ; \\mathtt{c}_2) = {\\mathcal{M}}(\\mathtt{c}_2) \\circ {\\mathcal{M}}(\\mathtt{c}_1)\\]\n\n or, more\nexplicitly, for any state \\(\\sigma\\): \n\n\\[{\\mathcal{M}}(\\mathtt{c}_1 ; \\mathtt{c}_2) (\\sigma) = {\\mathcal{M}}(\\mathtt{c}_2) ({\\mathcal{M}}(\\mathtt{c}_1) (\\sigma)).\\]\n\n As most programming\nlanguages have several categories of phrases (for instance\nexpressions, declarations, instructions) the algebras of programs will\ngenerally be multi-sorted, with one sort for each category of phrase.\nDenotational semantics pursues systematically the idea of associating\ncompositionally to each program phrase a denotation of the matching\nsort (see Stoy 1977 for an early account).\n",
    "section_title": "1.2 Compositionality",
    "entry_title": "Games, Full Abstraction and Full Completeness",
    "hierarchy_title": "Games, Full Abstraction and Full Completeness || Introduction || Compositionality",
    "tokenized_text": [
        "introduction",
        "compositionality",
        "compositionality",
        "compositionality",
        "szab\u00f3",
        "desirable",
        "feature",
        "semantical",
        "analysis",
        "programming",
        "language",
        "allows",
        "one",
        "calculate",
        "meaning",
        "program",
        "function",
        "meaning",
        "constituent",
        "actually",
        "milner",
        "account",
        "see",
        "especially",
        "sec",
        "compositionality",
        "applies",
        "even",
        "generally",
        "computing",
        "agent",
        "assembled",
        "smaller",
        "one",
        "mean",
        "appropriate",
        "composition",
        "operation",
        "agent",
        "may",
        "include",
        "beside",
        "program",
        "hardware",
        "system",
        "like",
        "computer",
        "composed",
        "memory",
        "composed",
        "turn",
        "two",
        "memory",
        "register",
        "processing",
        "unit",
        "component",
        "computing",
        "agent",
        "allows",
        "one",
        "include",
        "one",
        "framework",
        "system",
        "composed",
        "hardware",
        "software",
        "even",
        "syntactic",
        "rule",
        "define",
        "inductively",
        "various",
        "category",
        "phrase",
        "programming",
        "language",
        "allow",
        "u",
        "regard",
        "l",
        "algebra",
        "program",
        "phrase",
        "whose",
        "signature",
        "determined",
        "rule",
        "one",
        "account",
        "compositionality",
        "especially",
        "suitable",
        "present",
        "setting",
        "szab\u00f3",
        "sec",
        "identifies",
        "compositional",
        "interpretation",
        "program",
        "homomorphism",
        "algebra",
        "domain",
        "denotation",
        "associating",
        "every",
        "operation",
        "algebra",
        "program",
        "corresponding",
        "semantical",
        "operation",
        "denotation",
        "example",
        "consider",
        "simple",
        "imperative",
        "language",
        "whose",
        "program",
        "mathtt",
        "c",
        "denote",
        "state",
        "transformation",
        "mathcal",
        "mathtt",
        "c",
        "sigma",
        "to",
        "sigma",
        "among",
        "operation",
        "program",
        "language",
        "sequential",
        "composition",
        "building",
        "program",
        "mathtt",
        "c",
        "_",
        "mathtt",
        "c",
        "_",
        "program",
        "mathtt",
        "c",
        "_",
        "mathtt",
        "c",
        "_",
        "intended",
        "operational",
        "meaning",
        "program",
        "mathtt",
        "c",
        "_",
        "mathtt",
        "c",
        "_",
        "executed",
        "starting",
        "state",
        "sigma",
        "in",
        "sigma",
        "first",
        "execute",
        "mathtt",
        "c",
        "_",
        "starting",
        "form",
        "state",
        "sigma",
        "execution",
        "terminates",
        "obtain",
        "state",
        "sigma",
        "start",
        "execution",
        "mathtt",
        "c",
        "_",
        "reaching",
        "execution",
        "terminates",
        "state",
        "sigma",
        "latter",
        "state",
        "state",
        "reached",
        "execution",
        "mathtt",
        "c",
        "_",
        "mathtt",
        "c",
        "_",
        "state",
        "sigma",
        "denotational",
        "point",
        "view",
        "operation",
        "composition",
        "function",
        "sigma",
        "to",
        "sigma",
        "compositional",
        "interpretation",
        "program",
        "given",
        "following",
        "identity",
        "read",
        "clause",
        "definition",
        "mathcal",
        "induction",
        "structure",
        "program",
        "mathcal",
        "mathtt",
        "c",
        "_",
        "mathtt",
        "c",
        "_",
        "mathcal",
        "mathtt",
        "c",
        "_",
        "circ",
        "mathcal",
        "mathtt",
        "c",
        "_",
        "explicitly",
        "state",
        "sigma",
        "mathcal",
        "mathtt",
        "c",
        "_",
        "mathtt",
        "c",
        "_",
        "sigma",
        "mathcal",
        "mathtt",
        "c",
        "_",
        "mathcal",
        "mathtt",
        "c",
        "_",
        "sigma",
        "programming",
        "language",
        "several",
        "category",
        "phrase",
        "instance",
        "expression",
        "declaration",
        "instruction",
        "algebra",
        "program",
        "generally",
        "multisorted",
        "one",
        "sort",
        "category",
        "phrase",
        "denotational",
        "semantics",
        "pursues",
        "systematically",
        "idea",
        "associating",
        "compositionally",
        "program",
        "phrase",
        "denotation",
        "matching",
        "sort",
        "see",
        "stoy",
        "early",
        "account"
    ]
}