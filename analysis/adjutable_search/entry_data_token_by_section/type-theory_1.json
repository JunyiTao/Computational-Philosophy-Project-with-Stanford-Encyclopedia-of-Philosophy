{
    "main_text": "Simple Type Theory and the \\(\\lambda\\)-Calculus\n2. Simple Type Theory and the \\(\\lambda\\)-Calculus\n\n\nAs we saw above, the distinction: objects, predicates, predicate of\npredicates, etc., seems enough to block Russell\u2019s paradox (and this\nwas recognised by Chwistek and Ramsey). We first describe the type\nstructure as it is in Principia and later in this section we\npresent the elegant formulation due to Church 1940 based on\n\\(\\lambda\\)-calculus. The types can be defined as\n\n\\(i\\) is the type of individuals\n\\((\\,)\\) is the type of propositions\nif \\(A_1 ,\\ldots ,A_n\\) are types then \\((A_1 ,\\ldots ,A_n)\\) is\nthe type of \\(n\\)-ary relations over objects of respective types \\(A_1\n,\\ldots ,A_n\\)\n\n\n\nFor instance, the type of binary relations over individuals is\n\\((i, i)\\), the type of binary connectives is\n\\(((\\,),(\\,))\\), the type of quantifiers over individuals is\n\\(((i))\\).\n\n\nFor forming propositions we use this type structure: thus \\(R(a_1\n,\\ldots ,a_n)\\) is a proposition if \\(R\\) is of type \\((A_1 ,\\ldots\n,A_n)\\) and \\(a_i\\) is of type \\(A_i\\) for \\(i = 1,\\ldots ,n\\). This\nrestriction makes it impossible to form a proposition of the form\n\\(P(P)\\): the type of \\(P\\) should be of the form \\((A)\\), and \\(P\\)\ncan only be applied to arguments of type \\(A\\), and thus cannot be\napplied to itself since \\(A\\) is not the same as \\((A)\\).\n\n\nHowever simple type theory is not predicative: we can define an object\n\\(Q(x, y)\\) of type \\((i, i)\\)\nby\n\n\\[\n\\forall P[P(x) \\supset P(y)]\n\\]\n\n\n\nAssume that we have two individuals \\(a\\) and \\(b\\) such that \\(Q(a,\nb)\\) holds. We can define \\(P(x)\\) to be \\(Q(x, a)\\). It is then clear\nthat \\(P(a)\\) holds, since it is \\(Q(a, a)\\). Hence \\(P(b)\\) holds as\nwell. We have proved, in an impredicative way, that \\(Q(a, b)\\)\nimplies \\(Q(b, a)\\).\n Alternative simpler formulations, which retain only the notion of\nclasses, classes of classes, etc., were formulated by G\u00f6del and\nTarski. Actually this simpler version was used by G\u00f6del in his\n1931 paper on formally undecidable propositions. The discovery of the\nundecidable propositions may have been motivated by a heuristic\nargument that it is unlikely that one can extend the completeness\ntheorem of first-order logic to type theory (see the end of his\nLecture at K\u00f6nigsberg 1930 in G\u00f6del Collected Work, Volume\nIII, Awodey and Carus 2001 and Goldfarb 2005).  Tarski had a version\nof the definability theorem expressed in type theory (see Hodges\n2008). See Schiemer and Reck 2013. \n\nWe have objects of type 0, for individuals, objects of type 1, for\nclasses of individuals, objects of type 2, for classes of classes of\nindividuals, and so on. Functions of two or more arguments, like\nrelations, need not be included among primitive objects since one can\ndefine relations to be classes of ordered pairs, and ordered pairs to\nbe classes of classes. For example, the ordered pair of individuals\na, b can be defined to be \\(\\{\\{a\\},\\{a,b\\}\\}\\) where\n\\(\\{x,y\\}\\) denotes the class whose sole elements are \\(x\\) and\n\\(y\\). (Wiener 1914 had suggested a similar reduction of relations to\nclasses.) In this system, all propositions have the form \\(a(b)\\),\nwhere \\(a\\) is a sign of type \\(n+1\\) and \\(b\\) a sign of type\n\\(n\\). Thus this system is built on the concept of an arbitrary class\nor subset of objects of a given domain and on the fact that the\ncollection of all subsets of the given domain can form a new\ndomain of the next type. Starting from a given domain of individuals,\nthis process is then iterated. As emphasised for instance in Scott\n1993, in set theory this process of forming subsets is iterated into\nthe transfinite.\n\n\nIn these versions of type theory, as in set theory, functions are not\nprimitive objects, but are represented as functional relation. The\naddition function for instance is represented as a ternary relation by\nan object of type \\((i,i,i)\\). An elegant\nformulation of the simple type theory which extends it by introducing\nfunctions as primitive objects was given by Church in 1940. It uses\nthe \\(\\lambda\\)-calculus notation (Barendregt 1997). Since such a\nformulation is important in computer science, for the connection with\ncategory theory, and for Martin-L\u00f6f type theory, we describe it\nin some detail. In this formulation, predicates are seen as a special\nkind of functions (propositional functions), an idea that goes back to\nFrege (see for instance Quine 1940). Furthermore, the notion of\nfunction is seen as more primitive than the notion of predicates and\nrelations, and a function is not defined anymore as a special kind of\nrelation. (Oppenheimer and Zalta 2011 presents some arguments against\nsuch a primitive representation of functions.) The types of this\nsystem are defined inductively as follows\n\nthere are two basic types \\(i\\) (the type of individuals)\nand \\(o\\) (the type of propositions)\nif \\(A, B\\) are types then \\(A \\rightarrow B\\), the type of\nfunctions from \\(A\\) to \\(B\\), is a type\n\n\n\nWe can form in this way the types:\n\n\n\\(i\\rightarrow o\\)\n(type of predicates)\n\n\\((i\\rightarrow o) \\rightarrow o\\)\n(type of predicates of predicates)\n\n\n\n\nwhich correspond to the types \\((i)\\) and \\(((i))\\) but also\nthe new types\n\n\n\\(i\\rightarrow i\\)\n(type of functions)\n\n\n\\((i\\rightarrow i) \\rightarrow i\\)\n (type of functionals)\n\n\n\n\nIt is convenient to write \n\n\\[\nA_1 ,\\ldots ,A_n \\rightarrow B\n\\]\n \nfor\n \n\\[\nA_1 \\rightarrow(A_2 \\rightarrow \\ldots \\rightarrow(A_n \\rightarrow B))\n\\]\n\nIn this way \n\n\\[\nA_1 ,\\ldots ,A_n \\rightarrow o\n\\]\n\n\ncorresponds to the type \\((A_1 ,\\ldots ,A_n)\\).\n\n\nFirst-order logic considers only types of the form\n\n\n\\(i,\\ldots ,i \\rightarrow i\\)\n(type of function symbols), \nand\n\n\n\\(i,\\ldots ,i \\rightarrow o\\)\n(type of predicate, relation symbols)\n\n\n\nNotice that \n\n\\[\nA \\rightarrow B \\rightarrow C\n\\]\n\n\nstands for \n\n\\[\nA \\rightarrow(B\\rightarrow C)\n\\]\n\n\n\n(association to the right). \n\n\nFor the terms of this logic, we shall not follow Church\u2019s account but\na slight variation of it, due to Curry (who had similar ideas before\nChurch\u2019s paper appeared) and which is presented in detail in\nR. Hindley\u2019s book on type theory. Like Church, we use\n\\(\\lambda\\)-calculus, which provides a general notation for functions\n\n\\[\nM ::= x \\mid M M \\mid \\lambda x.M\n\\]\n\n\n Here we have used the so-called BNF notation, very convenient in\ncomputing science. This gives a syntactic specification of the\n\\(\\lambda\\)-terms which, when expanded, means: \n\nevery variable is a function symbol;\nevery juxtaposition of two function symbols is a function symbol;\nevery \\(\\lambda x.M\\) is a function symbol;\nthere are no other function symbols.\n\n\n\nThe notation for function application \\(M N\\) is a\nlittle different than the mathematical notation, which would be\n\\(M(N)\\). In general,\n\n\\[\nM_1 M_2 M_3\n\\]\n\nstands for\n\n\\[\n(M_1 M_2) M_3\n\\]\n\n\n\n(association to the left). The term \\(\\lambda x.M\\) represents the\nfunction which to \\(N\\) associates \\(M[x:=N\\)]. This notation is so\nconvenient that one wonders why it is not widely used in\nmathematics. The main equation of \\(\\lambda\\)-calculus is then\n\\((\\beta\\)-conversion)\n\n\\[\n(\\lambda x.M) N = M[x:=N]\n\\]\n\n\n\nwhich expresses the meaning of \\(\\lambda x.M\\)\nas a function. We have used \\(M[x:=N\\)] as a\nnotation for the value of the expression that results when \\(N\\)\nis substituted for the variable \\(x\\) in the matrix \\(M\\).\nOne usually sees this equation as a rewrite rule\n\\((\\beta\\)-reduction)\n\n\\[\n(\\lambda x.M) N \\rightarrow M[x:=N]\n\\]\n\n\n\nIn untyped lambda calculus, it may be that such rewriting\ndoes not terminate. The canonical example is given by the term\n\\(\\Delta = \\lambda x.x x\\) and the application\n\n\\[\n\\Delta \\Delta \\rightarrow \\Delta \\Delta\n\\]\n\n\n\n(Notice the similarity with Russell\u2019s paradox.) The idea of\nCurry is then to look at types as predicates over lambda terms,\nwriting \\(M:A\\) to express that \\(M\\) satisfies the predicate/type\n\\(A\\). The meaning of\n\n\\[\nN:A\\rightarrow B\n\\]\n\nis then \n\n\\[\n\\forall M, \\text{ if } M:A \\text{ then } N M:B\n\\]\n\n\n\nwhich justifies the following rules \n\n\\[\n\\frac{N:A\\rightarrow B M:A}{N M:B}\n\\]\n\n\\[\n\\frac{M:B [x:A]}{\\lambda x.M:A \\rightarrow B}\n\\]\n\n\n\nIn general one works with judgements of the form \n\n\\[\nx_1 :A_1,...,x_n :A_n \\vdash M:A\n\\]\n\n\n\nwhere \\(x_1,..., x_n\\) are distinct\nvariables, and \\(M\\) is a term having all free variables among\n\\(x_1,..., x_n\\). In order to be\nable to get Church\u2019s system, one adds some constants in order to form\npropositions. Typically\n\nnot:\n\\(o\\rightarrow o\\)\nimply:\n\\(o\\rightarrow o\\rightarrow o\\)\nand:\n\\(o\\rightarrow o\\rightarrow o\\)\nforall:\n\\((A\\rightarrow o) \\rightarrow o\\)\n\n\n\nThe term \n\n\\[\n\\lambda x. \\neg(x x)\n\\]\n\n\n\nrepresents the predicate of predicates that do not apply to themselves.\nThis term does not have a type however, that is, it is not possible to\nfind \\(A\\) such that \n\n\\[\n\\lambda x. \\neg(x x) : (A\\rightarrow o) \\rightarrow o\n\\]\n\n\n\nwhich is the formal expression of the fact that Russell\u2019s paradox\ncannot be expressed. Leibniz equality \n\n\\[\nQ: i \\rightarrow i \\rightarrow o\n\\]\n\n\n\nwill be defined as \n\n\\[\nQ = \\lambda x . \\lambda y. \\forall(\\lambda P.\\imply(P x) (P y))\n\\]\n\n\n\nOne usually writes \\(\\forall x[M\\)] instead of \\(\\forall(\\lambda\nx.M)\\), and the definition of \\(Q\\) can then be rewritten as\n\n\\[\nQ = \\lambda x.\\lambda y.\\forall P[\\imply (P x) (P y)]\n\\]\n\n\n\nThis example again illustrates that we can formulate impredicative definitions\nin simple type theory. \n\n\nThe use of \\(\\lambda\\)-terms and \\(\\beta\\)-reduction is most\nconvenient for representing the complex substitution rules that are\nneeded in simple type theory. For instance, if we want to substitute\nthe predicate \\(\\lambda x.Q a x\\) for \\(P\\) in the proposition\n\n\\[\n\\imply (P a) (P b)\n\\]\n\nwe get \n\n\\[\n\\imply ((\\lambda x.Q a x) a) ((\\lambda x.Q a x) b)\n\\]\n\nand, using \\(\\beta\\)-reduction,\n\n\\[\n\\imply (Q a a) (Q a b)\n\\]\n\n\n\nIn summary, simple type theory forbids self-application but not the\ncircularity present in impredicative definitions. \n\n\nThe \\(\\lambda\\)-calculus formalism also allows for a clearer analysis\nof Russell\u2019s paradox. We can see it as the definition of the\npredicate\n\n\\[\nR x = \\neg(x x)\n\\]\n\n\n\nIf we think of \\(\\beta\\)-reduction as the process of unfolding a\ndefinition, we see that there is a problem already with understanding\nthe definition of R R\n\n\\[\nR R \\rightarrow \\neg(R R) \\rightarrow \\neg(\\neg(R R)) \\rightarrow \\ldots\n\\]\n\n\n\nIn some sense, we have a non-wellfounded definition, which is as\nproblematic as a contradiction (a proposition equivalent to its\nnegation). One important theorem, the normalisation theorem, says that\nthis cannot happen with simple types: if we have\n\\(M:A\\) then \\(M\\) is normalisable in a\nstrong way (any sequence of reductions starting from \\(M\\)\nterminates).\n\n\nFor more information on this topic, we refer to the entry on\nChurch\u2019s simple type theory.\n",
    "section_title": "2. Simple Type Theory and the \\(\\lambda\\)-Calculus",
    "entry_title": "Type Theory",
    "hierarchy_title": "Type Theory || Simple Type Theory and the \\(\\lambda\\)-Calculus",
    "tokenized_text": [
        "simple",
        "type",
        "theory",
        "lambda",
        "calculus",
        "simple",
        "type",
        "theory",
        "lambda",
        "calculus",
        "saw",
        "distinction",
        "object",
        "predicate",
        "predicate",
        "predicate",
        "etc",
        "seems",
        "enough",
        "block",
        "russell",
        "paradox",
        "recognised",
        "chwistek",
        "ramsey",
        "first",
        "describe",
        "type",
        "structure",
        "principia",
        "later",
        "section",
        "present",
        "elegant",
        "formulation",
        "due",
        "church",
        "based",
        "lambda",
        "calculus",
        "type",
        "defined",
        "i",
        "type",
        "individual",
        "type",
        "proposition",
        "a_",
        "ldots",
        "a_n",
        "type",
        "a_",
        "ldots",
        "a_n",
        "type",
        "n",
        "ary",
        "relation",
        "object",
        "respective",
        "type",
        "a_",
        "ldots",
        "a_n",
        "instance",
        "type",
        "binary",
        "relation",
        "individual",
        "type",
        "binary",
        "connective",
        "type",
        "quantifier",
        "individual",
        "forming",
        "proposition",
        "use",
        "type",
        "structure",
        "thus",
        "r",
        "a_",
        "ldots",
        "a_n",
        "proposition",
        "r",
        "type",
        "a_",
        "ldots",
        "a_n",
        "a_i",
        "type",
        "a_i",
        "ldots",
        "n",
        "restriction",
        "make",
        "impossible",
        "form",
        "proposition",
        "form",
        "p",
        "p",
        "type",
        "p",
        "form",
        "p",
        "applied",
        "argument",
        "type",
        "a",
        "thus",
        "applied",
        "since",
        "a",
        "however",
        "simple",
        "type",
        "theory",
        "predicative",
        "define",
        "object",
        "q",
        "x",
        "type",
        "forall",
        "p",
        "p",
        "x",
        "supset",
        "p",
        "assume",
        "two",
        "individual",
        "a",
        "b",
        "q",
        "b",
        "hold",
        "define",
        "p",
        "x",
        "q",
        "x",
        "clear",
        "p",
        "hold",
        "since",
        "q",
        "hence",
        "p",
        "b",
        "hold",
        "well",
        "proved",
        "impredicative",
        "way",
        "q",
        "b",
        "implies",
        "q",
        "b",
        "alternative",
        "simpler",
        "formulation",
        "retain",
        "notion",
        "class",
        "class",
        "class",
        "etc",
        "formulated",
        "g\u00f6del",
        "tarski",
        "actually",
        "simpler",
        "version",
        "used",
        "g\u00f6del",
        "paper",
        "formally",
        "undecidable",
        "proposition",
        "discovery",
        "undecidable",
        "proposition",
        "may",
        "motivated",
        "heuristic",
        "argument",
        "unlikely",
        "one",
        "extend",
        "completeness",
        "theorem",
        "firstorder",
        "logic",
        "type",
        "theory",
        "see",
        "end",
        "lecture",
        "k\u00f6nigsberg",
        "g\u00f6del",
        "collected",
        "work",
        "volume",
        "iii",
        "awodey",
        "carus",
        "goldfarb",
        "tarski",
        "version",
        "definability",
        "theorem",
        "expressed",
        "type",
        "theory",
        "see",
        "hodges",
        "see",
        "schiemer",
        "reck",
        "object",
        "type",
        "individual",
        "object",
        "type",
        "class",
        "individual",
        "object",
        "type",
        "class",
        "class",
        "individual",
        "function",
        "two",
        "argument",
        "like",
        "relation",
        "need",
        "included",
        "among",
        "primitive",
        "object",
        "since",
        "one",
        "define",
        "relation",
        "class",
        "ordered",
        "pair",
        "ordered",
        "pair",
        "class",
        "class",
        "example",
        "ordered",
        "pair",
        "individual",
        "b",
        "defined",
        "a",
        "b",
        "x",
        "y",
        "denotes",
        "class",
        "whose",
        "sole",
        "element",
        "x",
        "y",
        "wiener",
        "suggested",
        "similar",
        "reduction",
        "relation",
        "class",
        "system",
        "proposition",
        "form",
        "b",
        "a",
        "sign",
        "type",
        "n",
        "b",
        "sign",
        "type",
        "n",
        "thus",
        "system",
        "built",
        "concept",
        "arbitrary",
        "class",
        "subset",
        "object",
        "given",
        "domain",
        "fact",
        "collection",
        "subset",
        "given",
        "domain",
        "form",
        "new",
        "domain",
        "next",
        "type",
        "starting",
        "given",
        "domain",
        "individual",
        "process",
        "iterated",
        "emphasised",
        "instance",
        "scott",
        "set",
        "theory",
        "process",
        "forming",
        "subset",
        "iterated",
        "transfinite",
        "version",
        "type",
        "theory",
        "set",
        "theory",
        "function",
        "primitive",
        "object",
        "represented",
        "functional",
        "relation",
        "addition",
        "function",
        "instance",
        "represented",
        "ternary",
        "relation",
        "object",
        "type",
        "elegant",
        "formulation",
        "simple",
        "type",
        "theory",
        "extends",
        "introducing",
        "function",
        "primitive",
        "object",
        "given",
        "church",
        "us",
        "lambda",
        "calculus",
        "notation",
        "barendregt",
        "since",
        "formulation",
        "important",
        "computer",
        "science",
        "connection",
        "category",
        "theory",
        "martinl\u00f6f",
        "type",
        "theory",
        "describe",
        "detail",
        "formulation",
        "predicate",
        "seen",
        "special",
        "kind",
        "function",
        "propositional",
        "function",
        "idea",
        "go",
        "back",
        "frege",
        "see",
        "instance",
        "quine",
        "furthermore",
        "notion",
        "function",
        "seen",
        "primitive",
        "notion",
        "predicate",
        "relation",
        "function",
        "defined",
        "anymore",
        "special",
        "kind",
        "relation",
        "oppenheimer",
        "zalta",
        "present",
        "argument",
        "primitive",
        "representation",
        "function",
        "type",
        "system",
        "defined",
        "inductively",
        "follows",
        "two",
        "basic",
        "type",
        "i",
        "type",
        "individual",
        "o",
        "type",
        "proposition",
        "b",
        "type",
        "rightarrow",
        "b",
        "type",
        "function",
        "a",
        "b",
        "type",
        "form",
        "way",
        "type",
        "irightarrow",
        "o",
        "type",
        "predicate",
        "irightarrow",
        "rightarrow",
        "o",
        "type",
        "predicate",
        "predicate",
        "correspond",
        "type",
        "also",
        "new",
        "type",
        "irightarrow",
        "i",
        "type",
        "function",
        "irightarrow",
        "rightarrow",
        "i",
        "type",
        "functionals",
        "convenient",
        "write",
        "a_",
        "ldots",
        "a_n",
        "rightarrow",
        "b",
        "a_",
        "rightarrow",
        "a_",
        "rightarrow",
        "ldots",
        "rightarrow",
        "a_n",
        "rightarrow",
        "b",
        "way",
        "a_",
        "ldots",
        "a_n",
        "rightarrow",
        "corresponds",
        "type",
        "a_",
        "ldots",
        "a_n",
        "firstorder",
        "logic",
        "considers",
        "type",
        "form",
        "ldots",
        "rightarrow",
        "i",
        "type",
        "function",
        "symbol",
        "ldots",
        "rightarrow",
        "o",
        "type",
        "predicate",
        "relation",
        "symbol",
        "notice",
        "rightarrow",
        "b",
        "rightarrow",
        "c",
        "stand",
        "rightarrow",
        "brightarrow",
        "c",
        "association",
        "right",
        "term",
        "logic",
        "shall",
        "follow",
        "church",
        "account",
        "slight",
        "variation",
        "due",
        "curry",
        "similar",
        "idea",
        "church",
        "paper",
        "appeared",
        "presented",
        "detail",
        "r",
        "hindley",
        "book",
        "type",
        "theory",
        "like",
        "church",
        "use",
        "lambda",
        "calculus",
        "provides",
        "general",
        "notation",
        "function",
        "x",
        "mid",
        "mid",
        "lambda",
        "xm",
        "used",
        "socalled",
        "bnf",
        "notation",
        "convenient",
        "computing",
        "science",
        "give",
        "syntactic",
        "specification",
        "lambda",
        "terms",
        "expanded",
        "mean",
        "every",
        "variable",
        "function",
        "symbol",
        "every",
        "juxtaposition",
        "two",
        "function",
        "symbol",
        "function",
        "symbol",
        "every",
        "lambda",
        "xm",
        "function",
        "symbol",
        "function",
        "symbol",
        "notation",
        "function",
        "application",
        "n",
        "little",
        "different",
        "mathematical",
        "notation",
        "would",
        "n",
        "general",
        "m_",
        "m_",
        "m_",
        "stand",
        "m_",
        "m_",
        "m_",
        "association",
        "left",
        "term",
        "lambda",
        "xm",
        "represents",
        "function",
        "n",
        "associate",
        "x",
        "n",
        "notation",
        "convenient",
        "one",
        "wonder",
        "widely",
        "used",
        "mathematics",
        "main",
        "equation",
        "lambda",
        "calculus",
        "beta",
        "conversion",
        "lambda",
        "xm",
        "n",
        "x",
        "n",
        "express",
        "meaning",
        "lambda",
        "xm",
        "function",
        "used",
        "x",
        "n",
        "notation",
        "value",
        "expression",
        "result",
        "n",
        "substituted",
        "variable",
        "x",
        "matrix",
        "m",
        "one",
        "usually",
        "see",
        "equation",
        "rewrite",
        "rule",
        "beta",
        "reduction",
        "lambda",
        "xm",
        "n",
        "rightarrow",
        "x",
        "n",
        "untyped",
        "lambda",
        "calculus",
        "may",
        "rewriting",
        "terminate",
        "canonical",
        "example",
        "given",
        "term",
        "delta",
        "lambda",
        "xx",
        "x",
        "application",
        "delta",
        "delta",
        "rightarrow",
        "delta",
        "delta",
        "notice",
        "similarity",
        "russell",
        "paradox",
        "idea",
        "curry",
        "look",
        "type",
        "predicate",
        "lambda",
        "term",
        "writing",
        "a",
        "express",
        "m",
        "satisfies",
        "predicatetype",
        "a",
        "meaning",
        "n",
        "arightarrow",
        "b",
        "forall",
        "text",
        "text",
        "n",
        "b",
        "justifies",
        "following",
        "rule",
        "frac",
        "n",
        "arightarrow",
        "b",
        "n",
        "b",
        "frac",
        "b",
        "x",
        "lambda",
        "xm",
        "rightarrow",
        "b",
        "general",
        "one",
        "work",
        "judgement",
        "form",
        "x_",
        "a_",
        "x_n",
        "a_n",
        "vdash",
        "x_",
        "x_n",
        "distinct",
        "variable",
        "m",
        "term",
        "free",
        "variable",
        "among",
        "x_",
        "x_n",
        "order",
        "able",
        "get",
        "church",
        "system",
        "one",
        "add",
        "constant",
        "order",
        "form",
        "proposition",
        "typically",
        "orightarrow",
        "o",
        "imply",
        "orightarrow",
        "orightarrow",
        "o",
        "orightarrow",
        "orightarrow",
        "o",
        "forall",
        "arightarrow",
        "rightarrow",
        "o",
        "term",
        "lambda",
        "x",
        "neg",
        "x",
        "x",
        "represents",
        "predicate",
        "predicate",
        "apply",
        "term",
        "type",
        "however",
        "possible",
        "find",
        "a",
        "lambda",
        "x",
        "neg",
        "x",
        "x",
        "arightarrow",
        "rightarrow",
        "formal",
        "expression",
        "fact",
        "russell",
        "paradox",
        "expressed",
        "leibniz",
        "equality",
        "q",
        "rightarrow",
        "rightarrow",
        "defined",
        "q",
        "lambda",
        "x",
        "lambda",
        "forall",
        "lambda",
        "pimply",
        "p",
        "x",
        "p",
        "one",
        "usually",
        "writes",
        "forall",
        "x",
        "m",
        "instead",
        "forall",
        "lambda",
        "xm",
        "definition",
        "q",
        "rewritten",
        "q",
        "lambda",
        "xlambda",
        "yforall",
        "p",
        "imply",
        "p",
        "x",
        "p",
        "example",
        "illustrates",
        "formulate",
        "impredicative",
        "definition",
        "simple",
        "type",
        "theory",
        "use",
        "lambda",
        "terms",
        "beta",
        "reduction",
        "convenient",
        "representing",
        "complex",
        "substitution",
        "rule",
        "needed",
        "simple",
        "type",
        "theory",
        "instance",
        "want",
        "substitute",
        "predicate",
        "lambda",
        "xq",
        "x",
        "p",
        "proposition",
        "imply",
        "p",
        "p",
        "b",
        "get",
        "imply",
        "lambda",
        "xq",
        "x",
        "lambda",
        "xq",
        "x",
        "b",
        "using",
        "beta",
        "reduction",
        "imply",
        "q",
        "q",
        "b",
        "summary",
        "simple",
        "type",
        "theory",
        "forbids",
        "selfapplication",
        "circularity",
        "present",
        "impredicative",
        "definition",
        "lambda",
        "calculus",
        "formalism",
        "also",
        "allows",
        "clearer",
        "analysis",
        "russell",
        "paradox",
        "see",
        "definition",
        "predicate",
        "r",
        "x",
        "neg",
        "x",
        "x",
        "think",
        "beta",
        "reduction",
        "process",
        "unfolding",
        "definition",
        "see",
        "problem",
        "already",
        "understanding",
        "definition",
        "r",
        "r",
        "r",
        "r",
        "rightarrow",
        "neg",
        "r",
        "r",
        "rightarrow",
        "neg",
        "neg",
        "r",
        "r",
        "rightarrow",
        "ldots",
        "sense",
        "nonwellfounded",
        "definition",
        "problematic",
        "contradiction",
        "proposition",
        "equivalent",
        "negation",
        "one",
        "important",
        "theorem",
        "normalisation",
        "theorem",
        "say",
        "happen",
        "simple",
        "type",
        "a",
        "m",
        "normalisable",
        "strong",
        "way",
        "sequence",
        "reduction",
        "starting",
        "m",
        "terminates",
        "information",
        "topic",
        "refer",
        "entry",
        "church",
        "simple",
        "type",
        "theory"
    ]
}